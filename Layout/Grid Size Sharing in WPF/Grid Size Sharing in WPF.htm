<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><title>Grid Size Sharing in WPF</title>


	
		
		<meta content=".Text" name="GENERATOR">
		<link id="MainStyle" type="text/css" rel="stylesheet" href="Grid%20Size%20Sharing%20in%20WPF_files/style.css">
		<link id="SecondaryCss" type="text/css" rel="stylesheet" href="Grid%20Size%20Sharing%20in%20WPF_files/customcss.css">
		<link id="RSSLink" title="RSS" type="application/rss+xml" rel="alternate" href="http://blogs.interknowlogy.com/johnbowen/rss.aspx">
	<link rel="pingback" href="http://blogs.interknowlogy.com/johnbowen/Services/Pingback.aspx"></head><body>
		<form name="Form1" method="post" action="21132.aspx" id="Form1">
<input name="__VIEWSTATE" value="" type="hidden">
			

<div id="top">

<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://blogs.interknowlogy.com/johnbowen/">John Bowen's Blog</a></h1>
<p id="tagline">Blog.WriteLine(new Random().NextThoughts(".NET"));<br><br><a href="http://www.katemc.com/3day/"><img src="Grid%20Size%20Sharing%20in%20WPF_files/kateBanner.png" alt="Support the 3-Day Walk for Breast Cancer"></a></p>
</div>

<div id="leftmenu">

	
<h3>My Links</h3>
<ul>
			<li><a id="MyLinks1_HomeLink" href="http://blogs.interknowlogy.com/johnbowen/">Home</a></li>
			<li><a id="MyLinks1_ContactLink" accesskey="9" href="http://blogs.interknowlogy.com/johnbowen/contact.aspx">Contact</a></li>
			<li><a id="MyLinks1_Syndication" href="http://blogs.interknowlogy.com/johnbowen/Rss.aspx">Syndication</a> <a id="MyLinks1_XMLLink" href="http://blogs.interknowlogy.com/johnbowen/Rss.aspx"><img src="Grid%20Size%20Sharing%20in%20WPF_files/xml.gif" alt="" border="0"></a>
			</li><li><a id="MyLinks1_Admin" href="http://blogs.interknowlogy.com/johnbowen/login.aspx">Login</a></li>
</ul>
	
<h3>Blog Stats</h3>
	<ul>
		<li>Posts - 14
		</li><li>Stories - 0
		</li><li>Comments - 3
		</li><li>Trackbacks - 0
	</li>
</ul>
	
<h3>News</h3>
	<ul>
	  <li><b><a href="http://gdcportal.interknowlogy.com/Pages/WindowsPresentation.aspx">Download the WPF Reference Poster</a></b></li>
	</ul>

	
		<h3>Archives</h3>
		
				<ul>
			
				<li><a id="SingleColumn1_Categories_CatList__ctl0_LinkList__ctl1_Link" href="http://blogs.interknowlogy.com/johnbowen/archive/2007/08.aspx">August, 2007 (1)</a>  </li>
			
				<li><a id="SingleColumn1_Categories_CatList__ctl0_LinkList__ctl2_Link" href="http://blogs.interknowlogy.com/johnbowen/archive/2007/06.aspx">June, 2007 (3)</a>  </li>
			
				<li><a id="SingleColumn1_Categories_CatList__ctl0_LinkList__ctl3_Link" href="http://blogs.interknowlogy.com/johnbowen/archive/2007/05.aspx">May, 2007 (3)</a>  </li>
			
				<li><a id="SingleColumn1_Categories_CatList__ctl0_LinkList__ctl4_Link" href="http://blogs.interknowlogy.com/johnbowen/archive/2007/04.aspx">April, 2007 (2)</a>  </li>
			
				<li><a id="SingleColumn1_Categories_CatList__ctl0_LinkList__ctl5_Link" href="http://blogs.interknowlogy.com/johnbowen/archive/2007/03.aspx">March, 2007 (1)</a>  </li>
			
				<li><a id="SingleColumn1_Categories_CatList__ctl0_LinkList__ctl6_Link" href="http://blogs.interknowlogy.com/johnbowen/archive/2007/02.aspx">February, 2007 (3)</a>  </li>
			
				<li><a id="SingleColumn1_Categories_CatList__ctl0_LinkList__ctl7_Link" href="http://blogs.interknowlogy.com/johnbowen/archive/2007/01.aspx">January, 2007 (1)</a>  </li>
			
				</ul>
			
	
		<h3>Post Categories</h3>
		
				<ul>
			
				<li><a id="SingleColumn1_Categories_CatList__ctl1_LinkList__ctl1_Link" href="http://blogs.interknowlogy.com/johnbowen/category/137.aspx">Dev Tools</a> <a id="SingleColumn1_Categories_CatList__ctl1_LinkList__ctl1_RssLink" title="Subscribe to Dev Tools" href="http://blogs.interknowlogy.com/johnbowen/category/137.aspx/rss">(RSS)</a> </li>
			
				<li><a id="SingleColumn1_Categories_CatList__ctl1_LinkList__ctl2_Link" href="http://blogs.interknowlogy.com/johnbowen/category/136.aspx">MSBuild</a> <a id="SingleColumn1_Categories_CatList__ctl1_LinkList__ctl2_RssLink" title="Subscribe to MSBuild" href="http://blogs.interknowlogy.com/johnbowen/category/136.aspx/rss">(RSS)</a> </li>
			
				<li><a id="SingleColumn1_Categories_CatList__ctl1_LinkList__ctl3_Link" href="http://blogs.interknowlogy.com/johnbowen/category/159.aspx">Silverlight</a> <a id="SingleColumn1_Categories_CatList__ctl1_LinkList__ctl3_RssLink" title="Subscribe to Silverlight" href="http://blogs.interknowlogy.com/johnbowen/category/159.aspx/rss">(RSS)</a> </li>
			
				<li><a id="SingleColumn1_Categories_CatList__ctl1_LinkList__ctl4_Link" href="http://blogs.interknowlogy.com/johnbowen/category/131.aspx">Team Foundation Server</a> <a id="SingleColumn1_Categories_CatList__ctl1_LinkList__ctl4_RssLink" title="Subscribe to Team Foundation Server" href="http://blogs.interknowlogy.com/johnbowen/category/131.aspx/rss">(RSS)</a> </li>
			
				<li><a id="SingleColumn1_Categories_CatList__ctl1_LinkList__ctl5_Link" href="http://blogs.interknowlogy.com/johnbowen/category/130.aspx">WPF</a> <a id="SingleColumn1_Categories_CatList__ctl1_LinkList__ctl5_RssLink" title="Subscribe to WPF" href="http://blogs.interknowlogy.com/johnbowen/category/130.aspx/rss">(RSS)</a> </li>
			
				</ul>
			
	
		<h3>Image Galleries</h3>
		
				<ul>
			
				<li><a id="SingleColumn1_Categories_CatList__ctl2_LinkList__ctl1_Link" href="http://blogs.interknowlogy.com/johnbowen/gallery/138.aspx">attachments</a>  </li>
			
				</ul>
			
	
		<h3>Dev Tools</h3>
		
				<ul>
			
				</ul>
			
	
		<h3>MSBuild</h3>
		
				<ul>
			
				</ul>
			
	
		<h3>Team Foundation Server</h3>
		
				<ul>
			
				</ul>
			
	
		<h3>WPF</h3>
		
				<ul>
			
				</ul>
			
	
<p align="center"><a id="SingleColumn1_Hyperlink4" name="Hyperlink4" href="http://www.roudybob.net/category/12.aspx" target="_blank"><img src="Grid%20Size%20Sharing%20in%20WPF_files/DotTextSkin.gif" alt="" border="0"></a></p>




</div>

<div id="main">
	
					
	<div class="post">
		<h2>
			<a id="viewpost.ascx_TitleUrl" href="http://blogs.interknowlogy.com/johnbowen/archive/2007/08/27/21132.aspx">Grid Size Sharing in WPF</a>
		</h2>
		<p class="bodytext">The flexibility of the WPF ItemsControls allows you build
column-row views of lists
of data by building templates to represent each row. Although a GridView used in a ListView
can also be used to provide these views the GridView introduces added complexity
along with its extra features, making it more difficult to style and sometimes causing
performance problems. To create a table layout with an ItemsControl (or ListBox) a top level
Grid should be set up with 2 rows to contain the column headers and the ItemsControl
itself. The Grids for the columns of the individual data rows are then set up inside
a DataTemplate that is applied to the ItemsControl.ItemTemplate property so it will
be repeated for each data item. This creates individual cells for each header and
data value but to get a usable table we need the columns for all these Grids
to line up properly.</p>
<p class="bodytext">
There are a few different choices for lining up column sizes between these multiple
Grids. The simplest option is just to set fixed Pixel sizes for all of the columns and
make sure the ColumnDefinitions in the main Grid and DataTemplate Grid are the same.
The Width values can also be refactored as Doubles out to Resources so any changes
are applied to both Grids. Here's the ColumnDefinitions for both the headers and template:</p>
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="110"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="90"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="65"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="55"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="80"</span><span class="kwrd">/&gt;</span>
&lt;/<span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
</pre>
<br>
<p class="bodytext">
This is fine if you need something quick, but a fixed width,
non-resizable table isn't going to be something that's used very often. Making the
columns resizable would make a lot more sense. So what happens when GridSplitters
get added into this setup? The logical choice is to add them to the top level Grid
that defines the headers, but when these are used they only resize the headers themselves.
So how about inside the template? This is even worse because now you get individual
resizing for each column in each row! This method obviously won't work with resizing unless
we add a lot of code.</p>
<p class="bodytext">
To get all of these different Grids to stay synchronized, WPF includes size sharing
functionality, accessed through the Grid.IsSharedSizeScope attached property and
the SharedSizeGroup property available on ColumnDefinition and RowDefinition. The
groups act like the GroupName on RadioButtons, with all elements that share a group
name working together to determine a common result. In this case, group names are matched anywhere under a parent
element that has IsSharedSizeScope set to true, which can even be our header Grid
in this example. In addition to getting rid of the pixel width definitions in our
template's Grid, this also causes all of the Grid columns to update when the header
Grid columns are resized using GridSplitters.
Here's the headers:
</p>
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="110"</span> <span class="attr">SharedSizeGroup</span><span class="kwrd">="A"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="90"</span> <span class="attr">SharedSizeGroup</span><span class="kwrd">="B"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="65"</span> <span class="attr">SharedSizeGroup</span><span class="kwrd">="C"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="Auto"</span> <span class="attr">SharedSizeGroup</span><span class="kwrd">="D"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="*"</span> <span class="attr">SharedSizeGroup</span><span class="kwrd">="E"</span><span class="kwrd">/&gt;</span>
&lt;/<span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
</pre>
<br> 
<p class="bodytext">
And in the template:</p>
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">SharedSizeGroup</span><span class="kwrd">="A"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">SharedSizeGroup</span><span class="kwrd">="B"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">SharedSizeGroup</span><span class="kwrd">="C"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">SharedSizeGroup</span><span class="kwrd">="D"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">SharedSizeGroup</span><span class="kwrd">="E"</span><span class="kwrd">/&gt;</span>
&lt;/<span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
</pre>
<br>
<p class="bodytext">
We could just stop here and be happy with our resizable pixel-width columns, but
what if we want to use one of the other GridLength sizing methods: Auto or Star?
It turns out that Auto sizing works well with SharedSizeGroup because all it needs
to do when determining initial column width is take the largest width of any of
the "cells" in the group, which is probably the behavior you want most of the time.
The resizing GridSplitters don't add any more complication to this because once
they start modifying an Auto column width, it switches to a Pixel value anyway.</p>
<p class="bodytext">
Now on to the most useful sizing method in WPF dynamic layouts: Star sizing. Unfortunately,
this is where the SharedSizeGroup method breaks down. If you want to have
a shared Grid that uses the whole available width and automatically adjusts when
that space changes you're going to need a different method. A column set to * in
a shared group acts just like an Auto column and won't fill or stay within the given
space. So what needs to happen to get back the Star sizing behavior?</p>
<p class="bodytext">
Luckily ColumnDefinition.Width is a DependencyProperty, so it accepts Bindings.
By binding the template's columns to the header Grid's we can get back Star sizing
behavior and still keep them all in sync, even through resizes. The resizing
behavior can look a little strange if you have multiple * columns since they will
make whatever changes they need to to keep their size relative to each other the
same while still filling the available space, and do this in real time as you drag.
This isn't a problem in itself, but may confuse your users, so consider only using
a single * column in a resizable setup like this. The FindAncestor
binding used is a long one, but stays the same for each definition with the exception of the collection index
on each column. The header's definitions:
</p>
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="2*"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="Auto"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="70"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="65"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="3*"</span><span class="kwrd">/&gt;</span>
&lt;/<span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
</pre>
<br>
<p class="bodytext">
And the template's:</p>
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}, AncestorLevel=2}, Path=ColumnDefinitions[0].Width}"</span> <span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}, AncestorLevel=2}, Path=ColumnDefinitions[1].Width}"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}, AncestorLevel=2}, Path=ColumnDefinitions[2].Width}"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}, AncestorLevel=2}, Path=ColumnDefinitions[3].Width}"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}, AncestorLevel=2}, Path=ColumnDefinitions[4].Width}"</span> <span class="kwrd">/&gt;</span>
&lt;/<span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
</pre>
<br>
<p class="bodytext">
The Binding method is more of a dictatorship than the SharedSizeGroup's
democratic method of deciding sizing. Rather than taking the widest column value from
the whole group, Binding just passes the header Grid's definition (the source) down to
the template's Grids (the targets), in this case our smart * values.</p>
<p class="bodytext">
Unfortunately we still have a problem with the current solution. Although the Binding passes its value exactly,
that value can be misinterpreted by the bound columns. If you use the Binding method
on a column using Auto sizing, the bound value will be Auto, rather than the calculated
width of the header column. Each cell will then set its own size to Auto and determine
its actual width based on its own content. This new problem resolves itself quickly
if the Auto column is resized, because at that point the header reverts to a fixed
Pixel size which will trickle down to all of the child columns. The thing that saves
this Binding method is the fact that the problem only comes up with Auto sized columns,
which are handled correctly by SharedSizeGroup, so using the two methods in combination
allows the use of any GridLength sizing method and manual resizing. Here's the final
combined header:
</p>
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="2*"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="Auto"</span> <span class="attr">SharedSizeGroup</span><span class="kwrd">="B"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="Auto"</span> <span class="attr">SharedSizeGroup</span><span class="kwrd">="C"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="Auto"</span> <span class="attr">SharedSizeGroup</span><span class="kwrd">="D"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="3*"</span><span class="kwrd">/&gt;</span>
&lt;/<span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
</pre>
<br>
<p class="bodytext">
And the template:</p>
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}, AncestorLevel=2}, Path=ColumnDefinitions[0].Width}"</span> <span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">SharedSizeGroup</span><span class="kwrd">="B"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">SharedSizeGroup</span><span class="kwrd">="C"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">SharedSizeGroup</span><span class="kwrd">="D"</span><span class="kwrd">/&gt;</span>
<span class="kwrd">&lt;</span><span class="html">ColumnDefinition</span> <span class="attr">Width</span><span class="kwrd">="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}, AncestorLevel=2}, Path=ColumnDefinitions[4].Width}"</span> <span class="kwrd">/&gt;</span>
&lt;/<span class="html">Grid.ColumnDefinitions</span><span class="kwrd">&gt;</span>
</pre>
<br>
<p class="bodytext"><a href="http://blogs.interknowlogy.com/downloads/johnbowen/GridSharing.zip">Download sample code demonstrating all these methods here</a>.</p>
		<p class="postfoot">
			posted on Monday, August 27, 2007 8:22 PM
		</p>
	</div>
	
	
<!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
<rdf:Description
rdf:about="http://blogs.interknowlogy.com/johnbowen/archive/2007/08/27/21132.aspx"
dc:identifier="http://blogs.interknowlogy.com/johnbowen/archive/2007/08/27/21132.aspx"
dc:title="Grid Size Sharing in WPF"
trackback:ping="http://blogs.interknowlogy.com/johnbowen/services/trackbacks/21132.aspx" />
</rdf:RDF>
-->


				
</div>


<p id="footer">
	Powered by: 
	<br>
	<a id="Footer1_Hyperlink2" name="Hyperlink1" href="http://scottwater.com/blog"><img src="Grid%20Size%20Sharing%20in%20WPF_files/100x30_Logo.gif" alt="" border="0"></a>
	<a id="Footer1_Hyperlink3" name="Hyperlink1" href="http://asp.net/"><img src="Grid%20Size%20Sharing%20in%20WPF_files/PoweredByAsp.gif" alt="" border="0"></a>
	<br>
	Copyright © John Bowen
</p></form>
	</body></html>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0132)http://blogs.msdn.com/mitsu/archive/2007/05/07/how-to-simulate-modal-windows-inside-a-single-wpf-window-using-anonymous-methods.aspx -->
<HTML lang=en xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Mitsu's blog : How to simulate modal windows inside a single WPF window using anonymous methods ?</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<META content=".Net,C#,WPF,anonymous method" name=keywords>
<META 
content="Introduction In our windows applications we are commonly using modal windows. Let's remind the idea. Using windows forms, once a window is created, we can choose to show it in a modal manner (form.ShowDialog()). The window then becomes THE front window" 
name=description>
<META content="MSHTML 6.00.2900.3199" name=GENERATOR><LINK 
href="http://blogs.msdn.com/mitsu/pingback.aspx" rel=pingback><LINK media=screen 
href="Mitsu's blog  How to simulate modal windows inside a single WPF window using anonymous methods_files/style.css" 
type=text/css rel=stylesheet><LINK media=print 
href="Mitsu's blog  How to simulate modal windows inside a single WPF window using anonymous methods_files/print.css" 
type=text/css rel=stylesheet><LINK media=screen 
href="Mitsu's blog  How to simulate modal windows inside a single WPF window using anonymous methods_files/fall.css" 
type=text/css rel=stylesheet><LINK href="/favicon.ico" type=image/ico 
rel="shortcut icon"><LINK title="Mitsu's blog (RSS 2.0)" 
href="http://feeds.feedburner.com/msdn/mitsu" type=application/rss+xml 
rel=alternate><LINK 
title="How to simulate modal windows inside a single WPF window using anonymous methods ? Comment RSS (RSS 2.0)" 
href="http://blogs.msdn.com/mitsu/commentrss.aspx?PostID=2467680" 
type=application/rss+xml rel=alternate>
<SCRIPT 
src="Mitsu's blog  How to simulate modal windows inside a single WPF window using anonymous methods_files/global.js" 
type=text/javascript></SCRIPT>
</HEAD>
<BODY>
<FORM id=aspnetForm name=aspnetForm 
onsubmit="javascript:return WebForm_OnSubmit();" 
action=/mitsu/archive/2007/05/07/how-to-simulate-modal-windows-inside-a-single-wpf-window-using-anonymous-methods.aspx 
method=post>
<DIV><INPUT id=__EVENTTARGET type=hidden name=__EVENTTARGET> <INPUT 
id=__EVENTARGUMENT type=hidden name=__EVENTARGUMENT> <INPUT id=__VIEWSTATE 
type=hidden 
value=/wEPDwUKLTMyNjg0MDc1MWQYAQUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgIFHmN0bDAwJF8kY3RsMDAkXyR3cyRfJFNlYXJjaEJveAUqY3RsMDAkXyRjdGwwMCRfJGN0bDAyJF8kZm9ybSRfJGNoa1JlbWVtYmVyIYIS4KdU7zrl4bjphRf8RdzvYS0= 
name=__VIEWSTATE> </DIV>
<SCRIPT type=text/javascript>
<!--
var theForm = document.forms['aspnetForm'];
if (!theForm) {
    theForm = document.aspnetForm;
}
function __doPostBack(eventTarget, eventArgument) {
    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {
        theForm.__EVENTTARGET.value = eventTarget;
        theForm.__EVENTARGUMENT.value = eventArgument;
        theForm.submit();
    }
}
// -->
</SCRIPT>

<SCRIPT 
src="Mitsu's blog  How to simulate modal windows inside a single WPF window using anonymous methods_files/WebResource.axd" 
type=text/javascript></SCRIPT>

<SCRIPT 
src="J:\_Oct 19 2007\WPF Xaml Expression\_NEW\simulate modal windows inside a single WPF window using\Mitsu's blog  How to simulate modal windows inside a single WPF window using anonymous methods_files\WebResource(1).axd" 
type=text/javascript></SCRIPT>

<SCRIPT type=text/javascript>
<!--
function WebForm_OnSubmit() {
if (typeof(ValidatorOnSubmit) == "function" && ValidatorOnSubmit() == false) return false;
return true;
}
// -->
</SCRIPT>

<DIV id=masthead>
<DIV id=userArea>
<DIV id=welcome align=right>Welcome to MSDN Blogs <A 
id=ctl00___ctl00___duw1_ac1___Login 
href="http://blogs.msdn.com/login.aspx?ReturnUrl=%2fmitsu%2farchive%2f2007%2f05%2f07%2fhow-to-simulate-modal-windows-inside-a-single-wpf-window-using-anonymous-methods.aspx">Sign 
in</A> | <A id=ctl00___ctl00___duw1_ac1___Register 
href="http://blogs.msdn.com/user/CreateUser.aspx?ReturnUrl=/mitsu/archive/2007/05/07/how-to-simulate-modal-windows-inside-a-single-wpf-window-using-anonymous-methods.aspx">Join</A> 
| <A id=ctl00___ctl00___duw1_Faq1 
href="http://blogs.msdn.com/languages/en-US/docs/faq.aspx">Help</A> </DIV>
<DIV id=SearchSideBar>
<DIV id=Search align=right>
<TABLE cellSpacing=0 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD><INPUT class=searchBox id=ctl00___ctl00___ws___SearchBox 
      onkeydown=KeyDownHandlerctl00___ctl00___ws___SearchButton(event); 
      name=ctl00$_$ctl00$_$ws$_$SearchBox> </TD>
    <TD><SPAN class=SearchButtonOuter><A class=SearchButton 
      id=ctl00___ctl00___ws___SearchButton 
      href="javascript:__doPostBack('ctl00$_$ctl00$_$ws$_$SearchButton','')">Search</A></SPAN> 
    </TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<DIV id=title>
<H1><A class=headermaintitle id=ctl00___ctl00___bt___BlogTitle 
href="http://blogs.msdn.com/mitsu/default.aspx">Mitsu's blog</A></H1>
<DIV>Discussing topics related to .Net, WPF, C# and Linq</DIV></DIV></DIV>
<DIV id=nav>
<DIV id=navbar>
<UL>
  <LI><A id=ctl00___ctl00___Homelink1 
  href="http://blogs.msdn.com/mitsu/default.aspx">Home</A> </LI>
  <LI><A id=ctl00___ctl00___Contactlink1 
  href="http://blogs.msdn.com/mitsu/contact.aspx">Email</A> </LI>
  <LI><A id=ctl00___ctl00___rss 
  href="http://feeds.feedburner.com/msdn/mitsu">RSS 2.0</A> </LI></UL></DIV></DIV>
<DIV id=content>
<DIV id=leftmenu>
<DIV id=TasksSideBar></DIV>
<DIV id=RecentPostsSideBar>
<H3>Recent Posts</H3>
<UL>
  <LI><A id=ctl00___ctl00___bs___rp___PostList_ctl01_Link 
  href="http://blogs.msdn.com/mitsu/archive/2007/06/21/how-to-implement-a-many-to-many-relationship-using-linq-to-sql.aspx">How 
  to implement a many-to-many relationship using Linq to Sql ?</A> 
  <LI><A id=ctl00___ctl00___bs___rp___PostList_ctl02_Link 
  href="http://blogs.msdn.com/mitsu/archive/2007/05/07/anonymous-methods-how-to-factorize-surrounding-statements-like-try-catch.aspx">Anonymous 
  methods: how to factorize surrounding statements like try-catch</A> 
  <LI><A id=ctl00___ctl00___bs___rp___PostList_ctl03_Link 
  href="http://blogs.msdn.com/mitsu/archive/2007/05/07/how-to-simulate-modal-windows-inside-a-single-wpf-window-using-anonymous-methods.aspx">How 
  to simulate modal windows inside a single WPF window using anonymous methods 
  ?</A> 
  <LI><A id=ctl00___ctl00___bs___rp___PostList_ctl04_Link 
  href="http://blogs.msdn.com/mitsu/archive/2007/04/20/wpf-book-control-demo-via-clickonce.aspx">WPF 
  Book Control demo via ClickOnce!</A> 
  <LI><A id=ctl00___ctl00___bs___rp___PostList_ctl05_Link 
  href="http://blogs.msdn.com/mitsu/archive/2007/04/18/wpf-book-control.aspx">WPF 
  Book control</A> </LI></UL></DIV>
<DIV id=TagSideBar>
<H3>Tags</H3>
<UL class=SidebarTagCloud>
  <LI class=Tag2><A 
  href="http://blogs.msdn.com/mitsu/archive/tags/.Net/default.aspx" 
  rel=tag>.Net</A> 
  <LI class=Tag5><A 
  href="http://blogs.msdn.com/mitsu/archive/tags/anonymous+method/default.aspx" 
  rel=tag>anonymous method</A> 
  <LI class=Tag2><A 
  href="http://blogs.msdn.com/mitsu/archive/tags/C_2300_/default.aspx" 
  rel=tag>C#</A> 
  <LI class=Tag6><A 
  href="http://blogs.msdn.com/mitsu/archive/tags/ClickOnce/default.aspx" 
  rel=tag>ClickOnce</A> 
  <LI class=Tag4><A 
  href="http://blogs.msdn.com/mitsu/archive/tags/Linq/default.aspx" 
  rel=tag>Linq</A> 
  <LI class=Tag6><A 
  href="http://blogs.msdn.com/mitsu/archive/tags/Linq+to+Sql/default.aspx" 
  rel=tag>Linq to Sql</A> 
  <LI class=Tag3><A 
  href="http://blogs.msdn.com/mitsu/archive/tags/WPF/default.aspx" 
  rel=tag>WPF</A> </LI></UL></DIV>
<DIV id=NewsSideBar>
<DIV id=NewsSidebar>
<H3>News</H3>
<UL>
  <LI>
  <P align=center><A href="http://blogs.microsoft.fr/mitsufu"><IMG title="" 
  alt="" 
  src="Mitsu's blog  How to simulate modal windows inside a single WPF window using anonymous methods_files/mitsufu.jpg" 
  border=0></A> </P>
  <HR width="100%">

  <P align=center><A title="Subscribe to my feed" 
  href="http://feeds.feedburner.com/msdn/mitsu" type=application/rss+xml 
  rel=alternate><IMG 
  style="BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px" 
  alt="RSS 2.0 Feed" 
  src="Mitsu's blog  How to simulate modal windows inside a single WPF window using anonymous methods_files/feed-icon32x32.png"></A></P></LI></UL></DIV></DIV>
<DIV id=LinkSideBar></DIV>
<DIV id=ArchiveSideBar>
<H3>Archives</H3>
<UL>
  <LI><A href="http://blogs.msdn.com/mitsu/archive/2007/06.aspx">June 2007 
  (1)</A> 
  <LI><A href="http://blogs.msdn.com/mitsu/archive/2007/05.aspx">May 2007 
  (2)</A> 
  <LI><A href="http://blogs.msdn.com/mitsu/archive/2007/04.aspx">April 2007 
  (2)</A> 
  <LI><A href="http://blogs.msdn.com/mitsu/archive/2007/03.aspx">March 2007 
  (1)</A> 
  <LI><A href="http://blogs.msdn.com/mitsu/archive/2006/11.aspx">November 2006 
  (1)</A> 
  <LI><A href="http://blogs.msdn.com/mitsu/archive/2006/10.aspx">October 2006 
  (3)</A> </LI></UL></DIV></DIV>
<DIV id=main>
<DIV class=post>
<H5 class="posthead pageTitle">How to simulate modal windows inside a single WPF 
window using anonymous methods ? </H5>
<P mce_keep="true"><IMG style="WIDTH: 304px; HEIGHT: 304px" height=304 
src="Mitsu's blog  How to simulate modal windows inside a single WPF window using anonymous methods_files/wpfmodal_preview.png" 
width=304 
mce_src="http://blogs.msdn.com/photos/mitsu/images/2467686/original.aspx"></P>
<H3>Introduction</H3>
<P>In our windows applications we are commonly using modal windows. Let's remind 
the idea. Using windows forms, once a window is created, we can choose to show 
it in a modal manner (form.ShowDialog()). The window then becomes THE front 
window between all the other windows of our application. Moreover, all the other 
windows seem to be disabled. To be exact, the other windows are not responding 
to any input event anymore (keyboard, mouse, etc), but the are still able to 
respond to other events like paint.<BR>The user must close the modal window by 
validating or canceling to come back to the previous state. You can repeat this 
model and then have a stack of modal windows. 
<P>This mechanism also exists using Windows Presentation Foundation. Let's 
remind that WPF windows are "real" windows even if they are hosting a DirectX 
surface. 
<P>Therefore, WPF brings a bunch of new functionalities that are mainly taking 
advantage of the control tree (events, datacontext, datatemplates, styles, 
resources, commandbindings, etc). So it's quite interesting to stay in the same 
window having an unique control tree. 
<P>Moreover, the natural vectorial capabilities of WPF let us imagine a complete 
nested world inside a single window, recreating a workspace with its own 
internal windows logic, like we know in games interfaces. 
<P>Obviously, you cannot define a child control as being modal. In this article, 
I will try to offer a solution to simulate this behavior. 
<H3>How to block controls ?</H3>
<P>The first step is to disable all&nbsp;the child controls of a same container, 
excepted the front one. 
<P>Disabling the input interaction will be easily done using: 
<P mce_keep="true">&nbsp;</P>
<DIV class=wlWriterSmartContent 
id=57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:b4538246-1ba2-49c6-8c6d-4a6a309060fe 
contentEditable=false 
style="PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; FLOAT: none; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px"><PRE style="BACKGROUND-COLOR: white"><DIV><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><SPAN style="COLOR: #000000">control.IsEnabled </SPAN><SPAN style="COLOR: #000000">=</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN style="COLOR: #0000ff">false</SPAN><SPAN style="COLOR: #000000">;</SPAN></DIV></PRE></DIV>
<P>Let's imagine a method that would add a UserControl on the top of a child 
control collection of a Grid control, disabling existing children: 
<P mce_keep="true">&nbsp;</P>
<DIV class=wlWriterSmartContent 
id=57F11A72-B0E5-49c7-9094-E3A15BD5B5E7:25f44650-9c37-40b0-9f61-3005b6302e87 
contentEditable=false 
style="PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; FLOAT: none; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px"><PRE style="BACKGROUND-COLOR: white"><DIV><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><SPAN style="COLOR: #0000ff">void</SPAN><SPAN style="COLOR: #000000"> NavigateTo(UserControl uc) 
{
    </SPAN><SPAN style="COLOR: #0000ff">foreach</SPAN><SPAN style="COLOR: #000000"> (UIElement item </SPAN><SPAN style="COLOR: #0000ff">in</SPAN><SPAN style="COLOR: #000000"> modalGrid.Children)
    item.IsEnabled </SPAN><SPAN style="COLOR: #000000">=</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN style="COLOR: #0000ff">false</SPAN><SPAN style="COLOR: #000000">;
    modalGrid.Children.Add(uc);
}
</SPAN></DIV></PRE></DIV>
<P mce_keep="true">To "close" the UserControl as we could close a modal window, 
re-enabling the previous child control we could write: </P>
<P mce_keep="true">&nbsp;</P>
<DIV class=wlWriterSmartContent 
id=57F11A72-B0E5-49c7-9094-E3A15BD5B5E7:24e43ed0-12cd-4549-9965-7fc1c4c28d92 
contentEditable=false 
style="PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; FLOAT: none; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px"><PRE style="BACKGROUND-COLOR: white"><DIV><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><SPAN style="COLOR: #0000ff">void</SPAN><SPAN style="COLOR: #000000"> GoBackward() 
{
    modalGrid.Children.RemoveAt(modalGrid.Children.Count </SPAN><SPAN style="COLOR: #000000">-</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN style="COLOR: #000000">1</SPAN><SPAN style="COLOR: #000000">);
    UIElement element </SPAN><SPAN style="COLOR: #000000">=</SPAN><SPAN style="COLOR: #000000"> modalGrid.Children[modalGrid.Children.Count </SPAN><SPAN style="COLOR: #000000">-</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN style="COLOR: #000000">1</SPAN><SPAN style="COLOR: #000000">];
    element.IsEnabled </SPAN><SPAN style="COLOR: #000000">=</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN style="COLOR: #0000ff">true</SPAN><SPAN style="COLOR: #000000">;
}
</SPAN></DIV></PRE></DIV>
<P>This part is done. Those two methods allow to simulate a stack of graphic 
controls with a modal behavior. This solution supports pushing multiple 
controls. 
<P>That was the easy part. The next step is more complex. 
<H3>How to block the calling code ?</H3>
<P>Using Windows Forms, calling form.ShowDialog() is blocking. 
<P>This means that the following instructions will only be executed when the 
modal windows will close and return its modal value. 
<P mce_keep="true">&nbsp;</P>
<DIV class=wlWriterSmartContent 
id=57F11A72-B0E5-49c7-9094-E3A15BD5B5E7:4bcc520f-4d01-45ef-8e6b-a9d300159652 
contentEditable=false 
style="PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; FLOAT: none; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px"><PRE style="BACKGROUND-COLOR: white"><DIV><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><SPAN style="COLOR: #0000ff">if</SPAN><SPAN style="COLOR: #000000"> (f.ShowDialog() </SPAN><SPAN style="COLOR: #000000">==</SPAN><SPAN style="COLOR: #000000"> DialogResult.Ok)
{
    </SPAN><SPAN style="COLOR: #008000">//</SPAN><SPAN style="COLOR: #008000">Action OK</SPAN><SPAN style="COLOR: #008000">
</SPAN><SPAN style="COLOR: #000000">}
</SPAN><SPAN style="COLOR: #0000ff">else</SPAN><SPAN style="COLOR: #000000">
{
    </SPAN><SPAN style="COLOR: #008000">//</SPAN><SPAN style="COLOR: #008000">Action not OK</SPAN><SPAN style="COLOR: #008000">
</SPAN><SPAN style="COLOR: #000000">}
</SPAN></DIV></PRE></DIV>
<P>The following actions will only be executed when the modal window is closed, 
creating a sequential execution, simple and comfortable&nbsp;for the developer. 
<P>Creating such a behavior in a single window using WPF is really too complex, 
almost impossible. Though we will try to simulate it. 
<P>We want to run an action at the moment when the modal control is closed. We 
will use a delegate to&nbsp;represent this action. This delegate will be invoked 
by&nbsp;the one that is closing&nbsp;the modal control.&nbsp;We will offer him a 
boolean to represent the modal result. 
<P mce_keep="true">&nbsp;</P>
<DIV class=wlWriterSmartContent 
id=57F11A72-B0E5-49c7-9094-E3A15BD5B5E7:5e0ff960-53cc-4674-abed-a949fd75bcd8 
contentEditable=false 
style="PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; FLOAT: none; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px"><PRE style="BACKGROUND-COLOR: white"><DIV><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><SPAN style="COLOR: #0000ff">public</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN style="COLOR: #0000ff">delegate</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN style="COLOR: #0000ff">void</SPAN><SPAN style="COLOR: #000000"> BackNavigationEventHandler(</SPAN><SPAN style="COLOR: #0000ff">bool</SPAN><SPAN style="COLOR: #000000"> dialogReturn);</SPAN></DIV></PRE></DIV>
<P>Thanks to anonymous methods, we will keep a very comparable syntax that we 
had with windows forms: 
<P mce_keep="true">&nbsp;</P>
<DIV class=wlWriterSmartContent 
id=57F11A72-B0E5-49c7-9094-E3A15BD5B5E7:db97513e-a14e-4b87-b6dc-01296585a300 
contentEditable=false 
style="PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; FLOAT: none; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px"><PRE style="BACKGROUND-COLOR: white"><DIV><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><SPAN style="COLOR: #000000">NavigateTo(</SPAN><SPAN style="COLOR: #0000ff">new</SPAN><SPAN style="COLOR: #000000"> UserControl1(), </SPAN><SPAN style="COLOR: #0000ff">delegate</SPAN><SPAN style="COLOR: #000000">(</SPAN><SPAN style="COLOR: #0000ff">bool</SPAN><SPAN style="COLOR: #000000"> returnValue) {
    </SPAN><SPAN style="COLOR: #0000ff">if</SPAN><SPAN style="COLOR: #000000"> (returnValue)
        MessageBox.Show(</SPAN><SPAN style="COLOR: #000000">"</SPAN><SPAN style="COLOR: #000000">Return value == true</SPAN><SPAN style="COLOR: #000000">"</SPAN><SPAN style="COLOR: #000000">);
    </SPAN><SPAN style="COLOR: #0000ff">else</SPAN><SPAN style="COLOR: #000000">
        MessageBox.Show(</SPAN><SPAN style="COLOR: #000000">"</SPAN><SPAN style="COLOR: #000000">Return value == false</SPAN><SPAN style="COLOR: #000000">"</SPAN><SPAN style="COLOR: #000000">);
});</SPAN></DIV></PRE></DIV>
<P>The NavigateTo() method now accepts a second parameter we will have to store 
somewhere to call it later when closing the control. 
<P>As&nbsp;this method&nbsp;will have to support successive calls, an unique 
value will not be enough to store this delegate. We will use a stack to keep all 
these delegates: 
<P mce_keep="true">&nbsp;</P>
<DIV class=wlWriterSmartContent 
id=57F11A72-B0E5-49c7-9094-E3A15BD5B5E7:3b6b6914-cfb1-4d48-b96f-e2f2829cc836 
contentEditable=false 
style="PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; FLOAT: none; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px"><PRE style="BACKGROUND-COLOR: white"><DIV><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><SPAN style="COLOR: #0000ff">private</SPAN><SPAN style="COLOR: #000000"> Stack</SPAN><SPAN style="COLOR: #000000">&lt;</SPAN><SPAN style="COLOR: #000000">BackNavigationEventHandler</SPAN><SPAN style="COLOR: #000000">&gt;</SPAN><SPAN style="COLOR: #000000"> _backFunctions
    </SPAN><SPAN style="COLOR: #000000">=</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN style="COLOR: #0000ff">new</SPAN><SPAN style="COLOR: #000000"> Stack</SPAN><SPAN style="COLOR: #000000">&lt;</SPAN><SPAN style="COLOR: #000000">BackNavigationEventHandler</SPAN><SPAN style="COLOR: #000000">&gt;</SPAN><SPAN style="COLOR: #000000">();</SPAN></DIV></PRE></DIV>
<P>The&nbsp;NavigateTo() implementation becomes:</P>
<DIV class=wlWriterSmartContent 
id=57F11A72-B0E5-49c7-9094-E3A15BD5B5E7:05129842-b307-446b-9bab-d1e49cf732a5 
contentEditable=false 
style="PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; FLOAT: none; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px"><PRE style="BACKGROUND-COLOR: white"><DIV><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><SPAN style="COLOR: #0000ff">void</SPAN><SPAN style="COLOR: #000000"> NavigateTo(UserControl uc, BackNavigationEventHandler backFromDialog)
{
    </SPAN><SPAN style="COLOR: #0000ff">foreach</SPAN><SPAN style="COLOR: #000000"> (UIElement item </SPAN><SPAN style="COLOR: #0000ff">in</SPAN><SPAN style="COLOR: #000000"> modalGrid.Children)
        item.IsEnabled </SPAN><SPAN style="COLOR: #000000">=</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN style="COLOR: #0000ff">false</SPAN><SPAN style="COLOR: #000000">;
    modalGrid.Children.Add(uc);
    _backFunctions.Push(backFromDialog);
}</SPAN></DIV></PRE></DIV>
<P>We now need to get the delegate back from the stack (Pop) when calling 
GoBackward(). </P>
<DIV class=wlWriterSmartContent 
id=57F11A72-B0E5-49c7-9094-E3A15BD5B5E7:97a364d6-3eb2-4d57-8f0d-f882520efc50 
contentEditable=false 
style="PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; FLOAT: none; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px"><PRE style="BACKGROUND-COLOR: white"><DIV><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><SPAN style="COLOR: #0000ff">void</SPAN><SPAN style="COLOR: #000000"> GoBackward(</SPAN><SPAN style="COLOR: #0000ff">bool</SPAN><SPAN style="COLOR: #000000"> dialogReturnValue)
{
    modalGrid.Children.RemoveAt(modalGrid.Children.Count </SPAN><SPAN style="COLOR: #000000">-</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN style="COLOR: #000000">1</SPAN><SPAN style="COLOR: #000000">);
    UIElement element </SPAN><SPAN style="COLOR: #000000">=</SPAN><SPAN style="COLOR: #000000"> modalGrid.Children[modalGrid.Children.Count </SPAN><SPAN style="COLOR: #000000">-</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN style="COLOR: #000000">1</SPAN><SPAN style="COLOR: #000000">];
    element.IsEnabled </SPAN><SPAN style="COLOR: #000000">=</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN style="COLOR: #0000ff">true</SPAN><SPAN style="COLOR: #000000">;

    BackNavigationEventHandler handler </SPAN><SPAN style="COLOR: #000000">=</SPAN><SPAN style="COLOR: #000000"> _backFunctions.Pop();
    </SPAN><SPAN style="COLOR: #0000ff">if</SPAN><SPAN style="COLOR: #000000"> (handler </SPAN><SPAN style="COLOR: #000000">!=</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN style="COLOR: #0000ff">null</SPAN><SPAN style="COLOR: #000000">)
        handler(dialogReturnValue);
}</SPAN></DIV></PRE></DIV>
<P>The one that is closing the control just need to call GoBackward(true); or 
GoBackward(false); 
<H3>Make the access global</H3>
<P>Last step, it would be useful to provide a global access to these two methods 
across the application. Doing such, any UserControl could easily call 
NavigateTo() to push a control and GoBackward() to close it, without knowing the 
modal context. 
<P>Let's group these functionnalities into an interface: 
<P mce_keep="true">&nbsp;</P>
<DIV class=wlWriterSmartContent 
id=57F11A72-B0E5-49c7-9094-E3A15BD5B5E7:d8b6cb4e-eb0d-4d55-9aab-232422563f1a 
contentEditable=false 
style="PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; FLOAT: none; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px"><PRE style="BACKGROUND-COLOR: white"><DIV><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><SPAN style="COLOR: #0000ff">public</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN style="COLOR: #0000ff">interface</SPAN><SPAN style="COLOR: #000000"> IModalService
{
    </SPAN><SPAN style="COLOR: #0000ff">void</SPAN><SPAN style="COLOR: #000000"> NavigateTo(UserControl uc, BackNavigationEventHandler backFromDialog);
    </SPAN><SPAN style="COLOR: #0000ff">void</SPAN><SPAN style="COLOR: #000000"> GoBackward(</SPAN><SPAN style="COLOR: #0000ff">bool</SPAN><SPAN style="COLOR: #000000"> dialogReturnValue);
}</SPAN></DIV></PRE></DIV>
<P>In our sample, we will simply implement this interface in our main window 
"Window1". It's quite a natural choice since "modalGrid" is contained in 
Window1. 
<P>A public static scope will provide a global access to the interface: 
<P mce_keep="true">&nbsp;</P>
<DIV class=wlWriterSmartContent 
id=57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:0999c99d-8a05-486a-8663-529b2bfdbf83 
contentEditable=false 
style="PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; FLOAT: none; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px"><PRE style="BACKGROUND-COLOR: white"><DIV><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><SPAN style="COLOR: #0000ff">public</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN style="COLOR: #0000ff">class</SPAN><SPAN style="COLOR: #000000"> GlobalServices
{
    </SPAN><SPAN style="COLOR: #0000ff">public</SPAN><SPAN style="COLOR: #000000"> </SPAN><SPAN style="COLOR: #0000ff">static</SPAN><SPAN style="COLOR: #000000"> IModalService ModalService
    { 
        </SPAN><SPAN style="COLOR: #0000ff">get</SPAN><SPAN style="COLOR: #000000">
        {
            </SPAN><SPAN style="COLOR: #0000ff">return</SPAN><SPAN style="COLOR: #000000"> (IModalService) Application.Current.MainWindow;
        } 
    } 
}</SPAN></DIV></PRE></DIV>
<P>Here we are&nbsp;! 
<P>We can now call anywhere in our code: 
<P mce_keep="true">&nbsp;</P>
<DIV class=wlWriterSmartContent 
id=57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:65f9f760-337b-43b9-b842-4c8ebbaee8e9 
contentEditable=false 
style="PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; FLOAT: none; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px"><PRE style="BACKGROUND-COLOR: white"><DIV><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><SPAN style="COLOR: #000000">GlobalServices.ModalService.NavigateTo(</SPAN><SPAN style="COLOR: #0000ff">new</SPAN><SPAN style="COLOR: #000000"> UserControl1(), </SPAN><SPAN style="COLOR: #0000ff">delegate</SPAN><SPAN style="COLOR: #000000">(</SPAN><SPAN style="COLOR: #0000ff">bool</SPAN><SPAN style="COLOR: #000000"> returnValue) 
{ 
    </SPAN><SPAN style="COLOR: #0000ff">if</SPAN><SPAN style="COLOR: #000000"> (returnValue) 
        MessageBox.Show(</SPAN><SPAN style="COLOR: #000000">"</SPAN><SPAN style="COLOR: #000000">Return value == true</SPAN><SPAN style="COLOR: #000000">"</SPAN><SPAN style="COLOR: #000000">); 
    </SPAN><SPAN style="COLOR: #0000ff">else</SPAN><SPAN style="COLOR: #000000"> 
        MessageBox.Show(</SPAN><SPAN style="COLOR: #000000">"</SPAN><SPAN style="COLOR: #000000">Return value == false</SPAN><SPAN style="COLOR: #000000">"</SPAN><SPAN style="COLOR: #000000">); 
});</SPAN></DIV></PRE></DIV>
<P>and&nbsp; 
<P mce_keep="true">&nbsp;</P>
<DIV class=wlWriterSmartContent 
id=57F11A72-B0E5-49c7-9094-E3A15BD5B5E6:24bc8598-f5e4-4a66-ae88-dafd611b102a 
contentEditable=false 
style="PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-LEFT: 0px; FLOAT: none; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px"><PRE style="BACKGROUND-COLOR: white"><DIV><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><SPAN style="COLOR: #000000">GlobalServices.ModalService.GoBackward(</SPAN><SPAN style="COLOR: #0000ff">true</SPAN><SPAN style="COLOR: #000000">);</SPAN></DIV></PRE></DIV>
<H3>Conclusion</H3>
<P>Windows Presentation Foundation graphic possibilities are incredible.&nbsp;We 
now have to create smart ergonomic solutions to take advantage of this 
engine.<BR>Anonymous methods are really surprising. Strange at first 
use,&nbsp;they are bringing new and incredible possibilities. 
<P>C# 3.0 is coming really soon…</P>
<DIV class=postfoot><SPAN class=em>Posted:</SPAN> Monday, May 07, 2007 10:13 PM 
by <A id=ctl00___ctl00___ctl02___Entry___AuthorLink 
href="http://blogs.msdn.com/user/Profile.aspx?UserID=51059">mitsu</A> 
<DIV><SPAN id=ctl00___ctl00___ctl02___Entry___InlineTagEditorPanel>Filed under: 
<A href="http://blogs.msdn.com/mitsu/archive/tags/.Net/default.aspx" 
rel=tag>.Net</A>, <A 
href="http://blogs.msdn.com/mitsu/archive/tags/C_2300_/default.aspx" 
rel=tag>C#</A>, <A 
href="http://blogs.msdn.com/mitsu/archive/tags/WPF/default.aspx" 
rel=tag>WPF</A>, <A 
href="http://blogs.msdn.com/mitsu/archive/tags/anonymous+method/default.aspx" 
rel=tag>anonymous method</A></SPAN><INPUT 
id=ctl00___ctl00___ctl02___Entry___InlineTagEditorPanel_State type=hidden 
value=nochange 
name=ctl00$_$ctl00$_$ctl02$_$Entry$_$InlineTagEditorPanel></DIV><BR><B>Attachment(s): 
</B><A id=ctl00___ctl00___ctl02___Entry___Attachment___DownLoadLink 
href="http://blogs.msdn.com/mitsu/attachment/2467680.ashx">WPFModal.zip</A> 
</DIV></DIV>
<DIV id=comments>
<H2>Comments </H2>
<DIV class=CommentArea>
<H4 class=CommentTitle><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl00_NameLink 
title=Reiner>Reiner</A> said: <IMG class=CommentArrow 
src="Mitsu's blog  How to simulate modal windows inside a single WPF window using anonymous methods_files/spacer.gif" 
align=absBottom> </H4>
<DIV class=CommentText>
<DIV class=CommentText2>
<DIV class=CommentText3>
<P>Excuse my English I speak Spanish </P>
<P>I found the sample very good but I like to know how to &nbsp;call a method or 
set or get a property no from the usercontrol</P>
<P>but from the &nbsp;container that hold the control </P>
<P>I am developing a app &nbsp;that can load many usercontrol but I like to know 
how I can acces from my app how to interop with the control </P>
<P>Thank &nbsp;you</P>
<P>Reiner reinerra@hotmail.com </P></DIV></DIV></DIV>
<DIV class=CommentFooter><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl00_PermaLink title=permalink 
href="http://blogs.msdn.com/mitsu/archive/2007/05/07/how-to-simulate-modal-windows-inside-a-single-wpf-window-using-anonymous-methods.aspx#2948043">#</A> 
May 28, 2007 12:39 PM </DIV></DIV>
<DIV class=CommentArea>
<H4 class=CommentTitle><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl01_NameLink 
title="William Gorden, Email: william.gorden@gmx.de">William Gorden, Email: 
william.gorden@gmx.de</A> said: <IMG class=CommentArrow 
src="Mitsu's blog  How to simulate modal windows inside a single WPF window using anonymous methods_files/spacer.gif" 
align=absBottom> </H4>
<DIV class=CommentText>
<DIV class=CommentText2>
<DIV class=CommentText3>
<P>Congratulations, You have kept this very simple. How much more complex would 
it be to write a single method </P>
<P>similar to ShowDialog() that doesn't return a value until the Control is 
closed? Then it could be called from a procedural program that would receive the 
input data at the end of the call before it proceeds to its next call. Using 
LOTS of modal Forms to sequentially enter data is not much more attractive than 
writing a console program. Console programs are pretty ugly, to say the least. 
I've tried threading without any success. </P></DIV></DIV></DIV>
<DIV class=CommentFooter><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl01_PermaLink title=permalink 
href="http://blogs.msdn.com/mitsu/archive/2007/05/07/how-to-simulate-modal-windows-inside-a-single-wpf-window-using-anonymous-methods.aspx#3012204">#</A> 
May 31, 2007 3:57 PM </DIV></DIV>
<DIV class=CommentAreaOwner>
<H4 class=CommentTitle><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl02_NameLink title=mitsu 
href="http://blogs.msdn.com/user/Profile.aspx?UserID=51059">mitsu</A> said: <IMG 
class=CommentArrow 
src="Mitsu's blog  How to simulate modal windows inside a single WPF window using anonymous methods_files/spacer.gif" 
align=absBottom> </H4>
<DIV class=CommentText>
<DIV class=CommentText2>
<DIV class=CommentText3>
<P>Hi William,</P>
<P>It's very complex. Blocking the UI is very different from blocking a single 
call in a console program. In a console program, the UI is "static" and does not 
have to respond to any else than the user. A "windowed" application (WinForms or 
WPF) has to maintain UI interaction even if the window is "frozened" by a modal 
call. So you can't block the main thread as you could do with a console 
program.</P>
<P>Maybe we could interact with the WPF dispatcher to simulate a modal behavior 
like winforms does with the windows message handler. I will try to have a look 
on such a solution.</P></DIV></DIV></DIV>
<DIV class=CommentFooter><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl02_PermaLink title=permalink 
href="http://blogs.msdn.com/mitsu/archive/2007/05/07/how-to-simulate-modal-windows-inside-a-single-wpf-window-using-anonymous-methods.aspx#3068823">#</A> 
June 3, 2007 5:56 PM </DIV></DIV>
<DIV class=CommentArea>
<H4 class=CommentTitle><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl03_NameLink 
title=Marky>Marky</A> said: <IMG class=CommentArrow 
src="Mitsu's blog  How to simulate modal windows inside a single WPF window using anonymous methods_files/spacer.gif" 
align=absBottom> </H4>
<DIV class=CommentText>
<DIV class=CommentText2>
<DIV class=CommentText3>
<P>So in the brave new world of WPF, you have to jump through hoops do something 
as routine as creating a modal dialog. This is progress?? I must be missing 
something...</P></DIV></DIV></DIV>
<DIV class=CommentFooter><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl03_PermaLink title=permalink 
href="http://blogs.msdn.com/mitsu/archive/2007/05/07/how-to-simulate-modal-windows-inside-a-single-wpf-window-using-anonymous-methods.aspx#3244620">#</A> 
June 12, 2007 4:56 AM </DIV></DIV>
<DIV class=CommentAreaOwner>
<H4 class=CommentTitle><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl04_NameLink title=mitsu 
href="http://mitsu/">mitsu</A> said: <IMG class=CommentArrow 
src="Mitsu's blog  How to simulate modal windows inside a single WPF window using anonymous methods_files/spacer.gif" 
align=absBottom> </H4>
<DIV class=CommentText>
<DIV class=CommentText2>
<DIV class=CommentText3>
<P>Hi Marky,</P>
<P>Imagine you are calling a method M() and you want M() to sleep for a while. 
During this time, you want your application to run normally except the caller of 
M() that must wait for M() to finish. All this with a single thread of course. 
This is not a WPF pb. I recommand you to read the ShowDialog() code from 
winforms or WPF (using reflector). Doing it between controls inside a single 
window is more complex.</P></DIV></DIV></DIV>
<DIV class=CommentFooter><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl04_PermaLink title=permalink 
href="http://blogs.msdn.com/mitsu/archive/2007/05/07/how-to-simulate-modal-windows-inside-a-single-wpf-window-using-anonymous-methods.aspx#3246513">#</A> 
June 12, 2007 6:28 AM </DIV></DIV>
<DIV class=CommentArea>
<H4 class=CommentTitle><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl05_NameLink title="Rob Relyea" 
href="http://robrelyea.com/wpf" rel=nofollow>Rob Relyea</A> said: <IMG 
class=CommentArrow 
src="Mitsu's blog  How to simulate modal windows inside a single WPF window using anonymous methods_files/spacer.gif" 
align=absBottom> </H4>
<DIV class=CommentText>
<DIV class=CommentText2>
<DIV class=CommentText3>
<P>Thanks for the sample Mitsu.</P>
<P>Marky-</P>
<P>Please realize that the WPF Window object has a .ShowDialog[1] method (as 
well as just a normal .Show) which gives you a modal window.</P>
<P>I believe Mitsu's example is interesting in cases where you would like to 
embed a dialog inside an existing Window or Page. &nbsp;For example, when 
running in an XBAP (a WPF app running in the browser), you can't show other 
Windows (popups!) so this is useful.</P>
<P>Thanks,</P>
<P>Rob Relyea | Program Manager, WPF &amp; Xaml Language Team</P>
<P>robrelyea.com | /blog | /wpf | /xaml</P>
<P>[1] <A 
href="http://msdn2.microsoft.com/en-us/library/system.windows.window.showdialog.aspx" 
target=_new 
rel=nofollow>http://msdn2.microsoft.com/en-us/library/system.windows.window.showdialog.aspx</A></P></DIV></DIV></DIV>
<DIV class=CommentFooter><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl05_PermaLink title=permalink 
href="http://blogs.msdn.com/mitsu/archive/2007/05/07/how-to-simulate-modal-windows-inside-a-single-wpf-window-using-anonymous-methods.aspx#3246666">#</A> 
June 12, 2007 6:34 AM </DIV></DIV></DIV>
<FIELDSET id=commentform><LEGEND>Leave a Comment</LEGEND>
<P>
<DIV><LABEL for=ctl00___ctl00___ctl02___form___tbTitle>Title</LABEL> 
<EM>(required)</EM><SPAN 
id=ctl00___ctl00___ctl02___form___Requiredfieldvalidator1 
style="VISIBILITY: hidden; COLOR: red">*</SPAN></DIV>
<DIV><INPUT class=smallbox id=ctl00___ctl00___ctl02___form___tbTitle 
value="re: How to simulate modal windows inside a single WPF window using anonymous methods ?" 
name=ctl00$_$ctl00$_$ctl02$_$form$_$tbTitle></DIV>
<P></P>
<P>
<DIV id=ctl00___ctl00___ctl02___form___NameTitle><LABEL 
for=ctl00___ctl00___ctl02___form___tbName>Name</LABEL> <EM>(required)</EM><SPAN 
id=ctl00___ctl00___ctl02___form___Requiredfieldvalidator2 
style="VISIBILITY: hidden; COLOR: red">*</SPAN></DIV>
<DIV id=ctl00___ctl00___ctl02___form___NameDesc><INPUT class=smallbox 
id=ctl00___ctl00___ctl02___form___tbName 
name=ctl00$_$ctl00$_$ctl02$_$form$_$tbName></DIV>
<P></P>
<P>
<DIV><LABEL for=ctl00___ctl00___ctl02___form___tbUrl>Your URL</LABEL> 
<EM>(optional</EM>)</DIV>
<DIV><INPUT class=smallbox id=ctl00___ctl00___ctl02___form___tbUrl 
name=ctl00$_$ctl00$_$ctl02$_$form$_$tbUrl></DIV>
<P></P>
<P>
<DIV><LABEL for=ctl00___ctl00___ctl02___form___tbComment>Comments</LABEL> 
<EM>(required)</EM><SPAN 
id=ctl00___ctl00___ctl02___form___Requiredfieldvalidator3 
style="VISIBILITY: hidden; COLOR: red">*</SPAN></DIV>
<DIV><TEXTAREA id=ctl00___ctl00___ctl02___form___tbComment name=ctl00$_$ctl00$_$ctl02$_$form$_$tbComment rows=5 cols=25></TEXTAREA></DIV>
<P></P>
<P>
<DIV><INPUT id=ctl00___ctl00___ctl02___form___chkRemember type=checkbox 
name=ctl00$_$ctl00$_$ctl02$_$form$_$chkRemember><LABEL 
for=ctl00___ctl00___ctl02___form___chkRemember>Remember Me?</LABEL></DIV>
<P></P>
<P><INPUT id=ctl00___ctl00___ctl02___form___btnSubmit onclick='javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions("ctl00$_$ctl00$_$ctl02$_$form$_$btnSubmit", "", true, "", "", false, false))' type=submit value=Submit name=ctl00$_$ctl00$_$ctl02$_$form$_$btnSubmit> 
</P></FIELDSET> 
<FIELDSET id=postnotification><LEGEND>Comment Notification</LEGEND>
<P>If you would like to receive an email when updates are made to this post, 
please register <A id=ctl00___ctl00___ctl02___DetailedSubBar___RegisterLink 
href="http://blogs.msdn.com/user/CreateUser.aspx?ReturnUrl=/mitsu/archive/2007/05/07/how-to-simulate-modal-windows-inside-a-single-wpf-window-using-anonymous-methods.aspx">here</A> 
</P>
<P>Subscribe to this post's comments using <A 
id=ctl00___ctl00___ctl02___DetailedSubBar___CommentRssLink 
href="http://blogs.msdn.com/mitsu/commentrss.aspx?PostID=2467680">RSS</A> 
</P></FIELDSET> </DIV>
<DIV id=footer></DIV></DIV>
<SCRIPT type=text/javascript>
<!--
var Page_Validators =  new Array(document.getElementById("ctl00___ctl00___ctl02___form___Requiredfieldvalidator1"), document.getElementById("ctl00___ctl00___ctl02___form___Requiredfieldvalidator2"), document.getElementById("ctl00___ctl00___ctl02___form___Requiredfieldvalidator3"));
// -->
</SCRIPT>

<SCRIPT type=text/javascript>
<!--
var ctl00___ctl00___ctl02___form___Requiredfieldvalidator1 = document.all ? document.all["ctl00___ctl00___ctl02___form___Requiredfieldvalidator1"] : document.getElementById("ctl00___ctl00___ctl02___form___Requiredfieldvalidator1");
ctl00___ctl00___ctl02___form___Requiredfieldvalidator1.controltovalidate = "ctl00___ctl00___ctl02___form___tbTitle";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator1.errormessage = "*";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator1.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator1.initialvalue = "";
var ctl00___ctl00___ctl02___form___Requiredfieldvalidator2 = document.all ? document.all["ctl00___ctl00___ctl02___form___Requiredfieldvalidator2"] : document.getElementById("ctl00___ctl00___ctl02___form___Requiredfieldvalidator2");
ctl00___ctl00___ctl02___form___Requiredfieldvalidator2.controltovalidate = "ctl00___ctl00___ctl02___form___tbName";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator2.errormessage = "*";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator2.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator2.initialvalue = "";
var ctl00___ctl00___ctl02___form___Requiredfieldvalidator3 = document.all ? document.all["ctl00___ctl00___ctl02___form___Requiredfieldvalidator3"] : document.getElementById("ctl00___ctl00___ctl02___form___Requiredfieldvalidator3");
ctl00___ctl00___ctl02___form___Requiredfieldvalidator3.controltovalidate = "ctl00___ctl00___ctl02___form___tbComment";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator3.errormessage = "*";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator3.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator3.initialvalue = "";
// -->
</SCRIPT>

<SCRIPT language=javascript type=text/javascript>
<!--
function KeyDownHandlerctl00___ctl00___ws___SearchButton(event)
{
	if (event.keyCode == 13)
	{
		event.returnValue = false;
		event.cancel = true;
     __doPostBack('ctl00$_$ctl00$_$ws$_$SearchButton','')	}
}

//-->
</SCRIPT>
<!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
<rdf:Description
rdf:about="http://blogs.msdn.com/mitsu/archive/2007/05/07/how-to-simulate-modal-windows-inside-a-single-wpf-window-using-anonymous-methods.aspx"
dc:identifier="http://blogs.msdn.com/mitsu/archive/2007/05/07/how-to-simulate-modal-windows-inside-a-single-wpf-window-using-anonymous-methods.aspx"
dc:title="How to simulate modal windows inside a single WPF window using anonymous methods ?"
trackback:ping="http://blogs.msdn.com/mitsu/trackback.aspx?PostID=2467680" />
</rdf:RDF>
-->
<SCRIPT type=text/javascript>
<!--
var Page_ValidationActive = false;
if (typeof(ValidatorOnLoad) == "function") {
    ValidatorOnLoad();
}

function ValidatorOnSubmit() {
    if (Page_ValidationActive) {
        return ValidatorCommonOnSubmit();
    }
    else {
        return true;
    }
}
// -->
</SCRIPT>
</FORM></BODY></HTML>

From: "Saved by Windows Internet Explorer 7"
Subject: Neil Mosafi
Date: Sun, 17 Feb 2008 21:23:20 -0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_00F0_01C871AB.52053B40"
X-MimeOLE: Produced By Microsoft MimeOLE V6.0.6000.16545

This is a multi-part message in MIME format.

------=_NextPart_000_00F0_01C871AB.52053B40
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://web.archive.org/web/20070607185501rn_1/blogs.wdevs.com/neil/Default.aspx

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML lang=3Den xml:lang=3D"en" =
xmlns=3D"http://www.w3.org/1999/xhtml"><HEAD><TITLE>Neil Mosafi</TITLE>
<META http-equiv=3Dcontent-type content=3D"text/html; charset=3DUTF-8">
<META content=3D"Neil Mosafi" name=3Dauthor><LINK id=3DRSSLink =
title=3DRSS=20
href=3D"http://web.archive.org/web/20070607185501/http://blogs.wdevs.com/=
neil/Rss.aspx"=20
type=3Dapplication/rss+xml rel=3Dalternate><LINK=20
href=3D"http://web.archive.org/web/20070607185501/http://blogs.wdevs.com/=
skins/_System/csharp.css"=20
type=3Dtext/css rel=3Dstylesheet></LINK><LINK=20
href=3D"http://web.archive.org/web/20070607185501/http://blogs.wdevs.com/=
skins/_System/commonstyle.css"=20
type=3Dtext/css rel=3Dstylesheet></LINK><LINK=20
href=3D"http://web.archive.org/web/20070607185501/http://blogs.wdevs.com/=
skins/_System/commonlayout.css"=20
type=3Dtext/css rel=3Dstylesheet></LINK><LINK media=3Dprint=20
href=3D"http://web.archive.org/web/20070607185501/http://blogs.wdevs.com/=
Skins/AnotherEon001/print.css"=20
type=3Dtext/css rel=3Dstylesheet></LINK><LINK id=3DMainStyle=20
href=3D"http://web.archive.org/web/20070607185501/http://blogs.wdevs.com/=
skins/AnotherEon001/style.css"=20
type=3Dtext/css rel=3Dstylesheet><LINK id=3DCustomCss=20
href=3D"http://web.archive.org/web/20070607185501/http://blogs.wdevs.com/=
neil/customcss.aspx"=20
type=3Dtext/css rel=3Dstylesheet><LINK id=3DRsd title=3DRSD=20
href=3D"http://web.archive.org/web/20070607185501/http://blogs.wdevs.com/=
neil/rsd.xml.ashx"=20
type=3Dapplication/rsd+xml rel=3DEditURI><LINK id=3DAtomLink title=3DRSS =

href=3D"http://web.archive.org/web/20070607185501/http://blogs.wdevs.com/=
neil/Rss.aspx"=20
type=3Dapplication/rss+xml rel=3Dalternate>
<SCRIPT=20
src=3D"http://web.archive.org/web/20070607185501js_/http://blogs.wdevs.co=
m/Scripts/common.js"=20
type=3Dtext/javascript></SCRIPT>

<SCRIPT=20
src=3D"http://web.archive.org/web/20070607185501js_/http://blogs.wdevs.co=
m/Scripts/tableEffects.js"=20
type=3Dtext/javascript></SCRIPT>

<SCRIPT=20
src=3D"http://web.archive.org/web/20070607185501js_/http://blogs.wdevs.co=
m/Scripts/BlogInfo.js"=20
type=3Dtext/javascript></SCRIPT>

<SCRIPT type=3Dtext/javascript>
			var subtextAllowedHtmlTags =3D ['a', 'b', 'strong', 'blockquote', =
'i', 'em', 'u', 'strike', 'super', 'sub', 'code'];
			var subtextBlogInfo =3D new blogInfo('/', '/neil/" />');
		</SCRIPT>

<META content=3D"MSHTML 6.00.6000.16609" name=3DGENERATOR></HEAD>
<BODY>
<FORM id=3DForm1 name=3DForm1 action=3DDefault.aspx method=3Dpost><INPUT =

id=3D"&#13;&#10;__VIEWSTATE" type=3Dhidden name=3D__VIEWSTATE>=20
<TABLE class=3DFramework cellSpacing=3D0 cellPadding=3D0 width=3D"100%">
  <TBODY>
  <TR>
    <TD colSpan=3D2>
      <DIV id=3Dtop>
      <TABLE cellSpacing=3D0 cellPadding=3D8 width=3D"100%">
        <TBODY>
        <TR>
          <TD>
            <H1><A class=3Dheadermaintitle id=3DHeader1_HeaderTitle=20
            title=3D"The Title Of This Blog."=20
            href=3D"http://blogs.wdevs.com/neil/Default.aspx">Neil=20
            Mosafi</A></H1><SPAN id=3Dsubtitle>Occasional Blogger</SPAN> =

        </TD></TR></TBODY></TABLE></DIV>
      <DIV id=3Dsub>
      <DIV class=3DBlogStats>posts - 19, comments - 11, trackbacks -=20
    31</DIV></DIV></TD></TR>
  <TR>
    <TD class=3DLeftCell rowSpan=3D2>
      <DIV id=3Dleftmenu>
      <H3>My Links</H3>
      <UL>
        <LI><A id=3DMyLinks1_HomeLink title=3D"Link to the home page."=20
        href=3D"http://blogs.wdevs.com/neil/Default.aspx">Home</A>=20
        <LI><A id=3DMyLinks1_ContactLink title=3D"Contact form." =
accessKey=3D9=20
        href=3D"http://blogs.wdevs.com/neil/contact.aspx">Contact</A>=20
        <LI><A id=3DMyLinks1_XMLLink title=3D"Subscribe to this feed."=20
        href=3D"http://blogs.wdevs.com/neil/Rss.aspx"><IMG alt=3D"RSS =
2.0 Feed"=20
        src=3D"" border=3D0></A>=20
        <LI><A id=3DMyLinks1_Admin title=3D"Login Form."=20
        href=3D"http://blogs.wdevs.com/neil/login.aspx">Login</A> =
</LI></UL>
      <H3>Archives</H3>
      <UL>
        <LI><A =
id=3DSingleColumn1_Categories_CatList_ctl00_LinkList_ctl01_Link=20
        title=3D"" =
href=3D"http://blogs.wdevs.com/neil/archive/2007/05.aspx">May,=20
        2007 (1)</A>=20
        <LI><A =
id=3DSingleColumn1_Categories_CatList_ctl00_LinkList_ctl02_Link=20
        title=3D"" =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04.aspx">April,=20
        2007 (7)</A>=20
        <LI><A =
id=3DSingleColumn1_Categories_CatList_ctl00_LinkList_ctl03_Link=20
        title=3D"" =
href=3D"http://blogs.wdevs.com/neil/archive/2007/03.aspx">March,=20
        2007 (1)</A>=20
        <LI><A =
id=3DSingleColumn1_Categories_CatList_ctl00_LinkList_ctl04_Link=20
        title=3D""=20
        =
href=3D"http://blogs.wdevs.com/neil/archive/2007/02.aspx">February, 2007 =

        (1)</A>=20
        <LI><A =
id=3DSingleColumn1_Categories_CatList_ctl00_LinkList_ctl05_Link=20
        title=3D""=20
        =
href=3D"http://blogs.wdevs.com/neil/archive/2006/12.aspx">December, 2006 =

        (2)</A>=20
        <LI><A =
id=3DSingleColumn1_Categories_CatList_ctl00_LinkList_ctl06_Link=20
        title=3D"" =
href=3D"http://blogs.wdevs.com/neil/archive/2006/05.aspx">May,=20
        2006 (1)</A>=20
        <LI><A =
id=3DSingleColumn1_Categories_CatList_ctl00_LinkList_ctl07_Link=20
        title=3D"" =
href=3D"http://blogs.wdevs.com/neil/archive/2006/04.aspx">April,=20
        2006 (1)</A>=20
        <LI><A =
id=3DSingleColumn1_Categories_CatList_ctl00_LinkList_ctl08_Link=20
        title=3D"" =
href=3D"http://blogs.wdevs.com/neil/archive/2006/03.aspx">March,=20
        2006 (1)</A>=20
        <LI><A =
id=3DSingleColumn1_Categories_CatList_ctl00_LinkList_ctl09_Link=20
        title=3D""=20
        =
href=3D"http://blogs.wdevs.com/neil/archive/2006/02.aspx">February, 2006 =

        (1)</A>=20
        <LI><A =
id=3DSingleColumn1_Categories_CatList_ctl00_LinkList_ctl10_Link=20
        title=3D"" =
href=3D"http://blogs.wdevs.com/neil/archive/2005/04.aspx">April,=20
        2005 (1)</A>=20
        <LI><A =
id=3DSingleColumn1_Categories_CatList_ctl00_LinkList_ctl11_Link=20
        title=3D"" =
href=3D"http://blogs.wdevs.com/neil/archive/2005/03.aspx">March,=20
        2005 (2)</A> </LI></UL>
      <H3>Interesting Blogs</H3>
      <UL>
        <LI><A =
id=3DSingleColumn1_Categories_CatList_ctl01_LinkList_ctl01_Link=20
        title=3D"" href=3D"http://serialseb.blogspot.com/">SerialSeb</A> =

        <LI><A =
id=3DSingleColumn1_Categories_CatList_ctl01_LinkList_ctl02_Link=20
        title=3D"" =
href=3D"http://blogs.wdevs.com/angelos/Default.aspx">Angelos=20
        Petropoulos</A> </LI></UL></DIV></TD>
    <TD class=3DMainCell>
      <DIV id=3Dmain>
      <P class=3Ddate><SPAN><A=20
      id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl00_DayItem_ImageLink=20
      title=3D"Day Archive" style=3D"DISPLAY: inline-block"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/05/22.aspx">Tuesday, =
May=20
      22, 2007</A> </SPAN></P>
      <DIV class=3Dpost>
      <H2><A=20
      =
id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl00_DayItem_DayList_ctl00_Title=
Url=20
      title=3D"Click To View Entry."=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/05/22/19720.aspx">Runnin=
g=20
      ClickOnce applications in firefox</A></H2>Here is a useful little =
Firefox=20
      extension which lets you run Microsoft ClickOnce=20
      =
applications:<BR><BR>https://addons.mozilla.org/en-US/firefox/addon/1608<=
BR><BR>Fantastic,=20
      no more IE required!=20
      <P class=3Dpostfoot>posted @ <A title=3D"Permanent link to this =
post"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/05/22/19720.aspx">Tuesda=
y,=20
      May 22, 2007 2:24 PM</A> | <A title=3D"comments, pingbacks, =
trackbacks"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/05/22/19720.aspx#feedbac=
k">Feedback=20
      (0)</A> </P></DIV>
      <P class=3Ddate><SPAN><A=20
      id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl01_DayItem_ImageLink=20
      title=3D"Day Archive" style=3D"DISPLAY: inline-block"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/30.aspx">Monday, =
April=20
      30, 2007</A> </SPAN></P>
      <DIV class=3Dpost>
      <H2><A=20
      =
id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl01_DayItem_DayList_ctl00_Title=
Url=20
      title=3D"Click To View Entry."=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/30/19702.aspx">Blenda=
bles=20
      - New control library for WPF designers and =
developers</A></H2>Just=20
      stumbled upon <A=20
      href=3D"http://www.blendables.com/">http://www.blendables.com/</A> =
and it=20
      sounds very promising indeed.&nbsp; They have released the first =
CTP of=20
      some controls they are developing for WPF.&nbsp; <BR><BR>Controls =
include=20
      a 3D carousel, a chromeless window, a timeline panel, and some new =

      bindings.<BR><BR>It would be nice to see a few screenshots or even =
an=20
      example xbap on their site, but I guess I'll have to download it =
and check=20
      it out when I have spare time.<BR><BR>Enjoy=20
      <P class=3Dpostfoot>posted @ <A title=3D"Permanent link to this =
post"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/30/19702.aspx">Monday=
,=20
      April 30, 2007 12:07 AM</A> | <A title=3D"comments, pingbacks, =
trackbacks"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/30/19702.aspx#feedbac=
k">Feedback=20
      (1)</A> </P></DIV>
      <P class=3Ddate><SPAN><A=20
      id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl02_DayItem_ImageLink=20
      title=3D"Day Archive" style=3D"DISPLAY: inline-block"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/27.aspx">Friday, =
April=20
      27, 2007</A> </SPAN></P>
      <DIV class=3Dpost>
      <H2><A=20
      =
id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl02_DayItem_DayList_ctl00_Title=
Url=20
      title=3D"Click To View Entry."=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/27/19700.aspx">Pastin=
g=20
      to multiple cells in Xceed WPF DataGrid</A></H2>In my previous =
article, <A=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/25/19694.aspx">Implem=
enting=20
      Copy &amp; Paste between cells in Xceed WPF DataGrid</A>, I =
outined the=20
      method I was using to copy and paste values between cells in the =
Xceed WPF=20
      grid.&nbsp; To recap, this involves using the ApplicationCommands =
to=20
      register to the Copy command and copying the content to the =
clipboard as=20
      text.&nbsp; We then register to the Paste command and when this is =

      received, set the current cell to Edit mode, simulate the text =
input, and=20
      commit the change.<BR><BR>The next requirement is to support the =
selection=20
      of a range of cells, and to allow the user to paste a single value =
to all=20
      selected cells.&nbsp; Selection should be in one of three ways - =
either by=20
      dragging the mouse from the first cell to the last, by clicking =
the cell=20
      then clicking the last with shift held down, or by clicking cells =
with=20
      control pressed.<BR><BR>As Xceed grid doesn't support multiple =
cell=20
      selection, and I don't want to mess around with the internal =
workings of=20
      Xceed's grid, I decided to create an attached property of type =
Boolean to=20
      attach to each selected cell.&nbsp; The attached property would =
indicate=20
      that that cell is currently selected.&nbsp; However, I then =
realised that=20
      as the Xceed grid is not inheriting from the Selector class, I =
might as=20
      well just reuse the Selector.IsSelected attached property, and =
avoid=20
      having to create my own.<BR><BR>So here is the function to select =
a range=20
      of cells and set the attached property on them all.&nbsp; The =
range to be=20
      selected is defined by the "current" cell (which we can get =
natively from=20
      the DataGridControl) and a cell passed to the =
function.<BR><BR><!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0=
\green0\blue255;\red43\green145\blue175;\red0\green128\blue0;}??\fs22    =
     \cf3 private\cf0  \cf3 static\cf0  \cf3 void\cf0  =
SelectRangeFromCurrent(\cf4 Cell\cf0  toCell)\par ??        \{\par ??    =
        \cf4 DataGridControl\cf0  dataGridControl =3D \cf4 =
DataGridControl\cf0 .GetParentDataGridControl(toCell);\par ??\par ??     =
       \cf5 // Need a current item to do anything\par ??\cf0             =
\cf3 if\cf0  (dataGridControl.CurrentItem =3D=3D \cf3 null\cf0 )\par ??  =
          \{\par ??                \cf3 return\cf0 ;\par ??            =
\}\par ??\par ??            \cf5 // Find the current cell\par ??\cf0     =
        \cf4 Row\cf0  currentRow =3D (\cf4 Row\cf0 ) =
dataGridControl.ItemContainerGenerator.ContainerFromItem(dataGridControl.=
CurrentItem);\par ??            \cf4 Cell\cf0  currentCell =3D =
currentRow.Cells[dataGridControl.CurrentColumn.Index];\par ??\par ??     =
       \cf5 // Do nothing if it's being edited\par ??\cf0             =
\cf3 if\cf0  (currentCell =3D=3D \cf3 null\cf0  || =
currentCell.IsBeingEdited)\par ??            \{\par ??                =
\cf3 return\cf0 ;\par ??            \}\par ??\par ??            \cf5 // =
Clear the selected status on all the cells\par ??\cf0             =
ClearSelectedStatus(\cf4 DataGridControl\cf0 =
.GetParentDataGridControl(toCell));\par ??\par ??            \cf5 // Get =
the indexes of the rows and columns we need to loop through\par ??\cf0   =
          \cf3 int\cf0  fromRow, toRow, fromColumn, toColumn;\par ??     =
       GetFromAndToRowAndColumns(dataGridControl, currentCell, toCell, =
\cf3 out\cf0  fromRow, \cf3 out\cf0  toRow, \cf3 out\cf0  fromColumn, =
\cf3 out\cf0  toColumn);\par ??\par ??            \cf5 // Loop and set =
the IsSelected on all cells\par ??\cf0             \cf3 for\cf0  (\cf3 =
int\cf0  rowIndex =3D fromRow; rowIndex &lt;=3D toRow; rowIndex++)\par =
??            \{\par ??                Xceed.Wpf.DataGrid.\cf4 Row\cf0  =
row =3D (Xceed.Wpf.DataGrid.\cf4 Row\cf0 =
)dataGridControl.ItemContainerGenerator.ContainerFromIndex(rowIndex);\par=
 ??                \cf3 for\cf0  (\cf3 int\cf0  columnIndex =3D =
fromColumn; columnIndex &lt;=3D toColumn; columnIndex++)\par ??          =
      \{\par ??                    \cf4 Selector\cf0 =
.SetIsSelected(row.Cells[columnIndex], \cf3 true\cf0 );\par ??           =
     \}\par ??            \}\par ??        \}}
-->
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial"><!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0=
\green0\blue255;\red43\green145\blue175;\red0\green128\blue0;}??\fs22    =
     \cf3 private\cf0  \cf3 static\cf0  \cf3 void\cf0  =
SelectRangeFromCurrent(\cf4 Cell\cf0  toCell)\par ??        \{\par ??    =
        \cf4 DataGridControl\cf0  dataGridControl =3D \cf4 =
DataGridControl\cf0 .GetParentDataGridControl(toCell);\par ??\par ??     =
       \cf5 // Need a current item to do anything\par ??\cf0             =
\cf3 if\cf0  (dataGridControl.CurrentItem =3D=3D \cf3 null\cf0 )\par ??  =
          \{\par ??                \cf3 return\cf0 ;\par ??            =
\}\par ??\par ??            \cf5 // Find the current cell\par ??\cf0     =
        \cf4 Row\cf0  currentRow =3D (\cf4 Row\cf0 ) =
dataGridControl.ItemContainerGenerator.ContainerFromItem(dataGridControl.=
CurrentItem);\par ??            \cf4 Cell\cf0  currentCell =3D =
currentRow.Cells[dataGridControl.CurrentColumn.Index];\par ??\par ??     =
       \cf5 // Do nothing if it's being edited\par ??\cf0             =
\cf3 if\cf0  (currentCell =3D=3D \cf3 null\cf0  || =
currentCell.IsBeingEdited)\par ??            \{\par ??                =
\cf3 return\cf0 ;\par ??            \}\par ??\par ??            \cf5 // =
Clear the selected status on all the cells\par ??\cf0             =
ClearSelectedStatus(\cf4 DataGridControl\cf0 =
.GetParentDataGridControl(toCell));\par ??\par ??            \cf5 // Get =
the indexes of the rows and columns we need to loop through\par ??\cf0   =
          \cf3 int\cf0  fromRow, toRow, fromColumn, toColumn;\par ??     =
       GetFromAndToRowAndColumns(dataGridControl, currentCell, toCell, =
\cf3 out\cf0  fromRow, \cf3 out\cf0  toRow, \cf3 out\cf0  fromColumn, =
\cf3 out\cf0  toColumn);\par ??\par ??            \cf5 // Loop and set =
the IsSelected on all cells\par ??\cf0             \cf3 for\cf0  (\cf3 =
int\cf0  rowIndex =3D fromRow; rowIndex &lt;=3D toRow; rowIndex++)\par =
??            \{\par ??                Xceed.Wpf.DataGrid.\cf4 Row\cf0  =
row =3D (Xceed.Wpf.DataGrid.\cf4 Row\cf0 =
)dataGridControl.ItemContainerGenerator.ContainerFromIndex(rowIndex);\par=
 ??                \cf3 for\cf0  (\cf3 int\cf0  columnIndex =3D =
fromColumn; columnIndex &lt;=3D toColumn; columnIndex++)\par ??          =
      \{\par ??                    \cf4 Selector\cf0 =
.SetIsSelected(row.Cells[columnIndex], \cf3 true\cf0 );\par ??           =
     \}\par ??            \}\par ??        \}}
-->
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial"><!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0=
\green0\blue255;\red43\green145\blue175;\red0\green128\blue0;}??\fs22    =
     \cf3 private\cf0  \cf3 static\cf0  \cf3 void\cf0  =
SelectRangeFromCurrent(\cf4 Cell\cf0  toCell)\par ??        \{\par ??    =
        \cf4 DataGridControl\cf0  dataGridControl =3D \cf4 =
DataGridControl\cf0 .GetParentDataGridControl(toCell);\par ??\par ??     =
       \cf5 // Need a current item to do anything\par ??\cf0             =
\cf3 if\cf0  (dataGridControl.CurrentItem =3D=3D \cf3 null\cf0 )\par ??  =
          \{\par ??                \cf3 return\cf0 ;\par ??            =
\}\par ??\par ??            \cf5 // Find the current cell\par ??\cf0     =
        \cf4 Row\cf0  currentRow =3D (\cf4 Row\cf0 ) =
dataGridControl.ItemContainerGenerator.ContainerFromItem(dataGridControl.=
CurrentItem);\par ??            \cf4 Cell\cf0  currentCell =3D =
currentRow.Cells[dataGridControl.CurrentColumn.Index];\par ??\par ??     =
       \cf5 // Do nothing if it's being edited\par ??\cf0             =
\cf3 if\cf0  (currentCell =3D=3D \cf3 null\cf0  || =
currentCell.IsBeingEdited)\par ??            \{\par ??                =
\cf3 return\cf0 ;\par ??            \}\par ??\par ??            \cf5 // =
Clear the selected status on all the cells\par ??\cf0             =
ClearSelectedStatus(\cf4 DataGridControl\cf0 =
.GetParentDataGridControl(toCell));\par ??\par ??            \cf5 // Get =
the indexes of the rows and columns we need to loop through\par ??\cf0   =
          \cf3 int\cf0  fromRow, toRow, fromColumn, toColumn;\par ??     =
       GetFromAndToRowAndColumns(dataGridControl, currentCell, toCell, =
\cf3 out\cf0  fromRow, \cf3 out\cf0  toRow, \cf3 out\cf0  fromColumn, =
\cf3 out\cf0  toColumn);\par ??\par ??            \cf5 // Loop and set =
the IsSelected on all cells\par ??\cf0             \cf3 for\cf0  (\cf3 =
int\cf0  rowIndex =3D fromRow; rowIndex &lt;=3D toRow; rowIndex++)\par =
??            \{\par ??                \cf4 Row\cf0  row =3D (\cf4 =
Row\cf0 ) =
dataGridControl.ItemContainerGenerator.ContainerFromIndex(rowIndex);\par =
??                \cf3 for\cf0  (\cf3 int\cf0  columnIndex =3D =
fromColumn; columnIndex &lt;=3D toColumn; columnIndex++)\par ??          =
      \{\par ??                    \cf4 Selector\cf0 =
.SetIsSelected(row.Cells[columnIndex], \cf3 true\cf0 );\par ??           =
     \}\par ??            \}\par ??        \}}
-->
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN style=3D"COLOR: blue">private</SPAN> <SPAN=20
      style=3D"COLOR: blue">static</SPAN> <SPAN style=3D"COLOR: =
blue">void</SPAN>=20
      SelectRangeFromCurrent(<SPAN style=3D"COLOR: =
rgb(43,145,175)">Cell</SPAN>=20
      toCell)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">DataGridControl</SPAN> =
dataGridControl =3D=20
      <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">DataGridControl</SPAN>.GetParentDataGridControl(toCell);=
</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: green">// Need a current =
item to do=20
      anything</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: blue">if</SPAN>=20
      (dataGridControl.CurrentItem =3D=3D <SPAN=20
      style=3D"COLOR: blue">null</SPAN>)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: blue">return</SPAN>;</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: green">// Find the =
current=20
      cell</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: =
rgb(43,145,175)">Row</SPAN>=20
      currentRow =3D (<SPAN style=3D"COLOR: rgb(43,145,175)">Row</SPAN>) =

      =
dataGridControl.ItemContainerGenerator.ContainerFromItem(dataGridControl.=
CurrentItem);</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: =
rgb(43,145,175)">Cell</SPAN>=20
      currentCell =3D=20
      currentRow.Cells[dataGridControl.CurrentColumn.Index];</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: green">// Do nothing if =
it's being=20
      edited</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: blue">if</SPAN> =
(currentCell =3D=3D=20
      <SPAN style=3D"COLOR: blue">null</SPAN> ||=20
      currentCell.IsBeingEdited)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: blue">return</SPAN>;</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: green">// Clear the =
selected status=20
      on all the cells</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; ClearSelectedStatus(<SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">DataGridControl</SPAN>.GetParentDataGridControl(toCell))=
;</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: green">// Get the indexes =
of the=20
      rows and columns we need to loop through</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: blue">int</SPAN> fromRow, =
toRow,=20
      fromColumn, toColumn;</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; GetFromAndToRowAndColumns(dataGridControl, =
currentCell,=20
      toCell, <SPAN style=3D"COLOR: blue">out</SPAN><SPAN=20
      style=3D"COLOR: blue">out</SPAN> toRow, <SPAN style=3D"COLOR: =
blue">out</SPAN>=20
      fromColumn, <SPAN style=3D"COLOR: blue">out</SPAN> =
toColumn</FONT>, <FONT=20
      size=3D2><SPAN style=3D"COLOR: blue">out</SPAN> =
</FONT>fromRow<FONT=20
      size=3D2>);</FONT> </P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: green">// Loop and set =
the=20
      IsSelected on all cells</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: blue">for</SPAN> (<SPAN=20
      style=3D"COLOR: blue">int</SPAN> rowIndex =3D fromRow; rowIndex =
&lt;=3D toRow;=20
      rowIndex++)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Row</SPAN> row =3D (<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Row</SPAN>)=20
      =
dataGridControl.ItemContainerGenerator.ContainerFromIndex(rowIndex);</FON=
T></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: =
blue">for</SPAN>=20
      (<SPAN style=3D"COLOR: blue">int</SPAN> columnIndex =3D =
fromColumn;=20
      columnIndex &lt;=3D toColumn; columnIndex++)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">Selector</SPAN>.SetIsSelected(row.Cells[columnIndex],=20
      <SPAN style=3D"COLOR: blue">true</SPAN>);</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      }</FONT></P></DIV></DIV></DIV><BR>This function uses two other =
functions -=20
      ClearSelectedStatus(), which clears the IsSelected on all cells in =
a grid,=20
      and GetFromAndToRowAndColumns() which works out the indexes of the =
start=20
      and end points based on the cells.&nbsp; Once we have the indexes, =
it's a=20
      simple case of looping through setting the IsSelected on all cells =
between=20
      those indexes.<BR><BR>Visually, setting the attached property will =
do=20
      nothing to the cells (and rightly so - this WPF we're talking=20
      about!).&nbsp; Therefore I define a style in my App.xaml which =
will change=20
      the background colour of the cells when the IsSelected is =
set<BR><FONT=20
      size=3D2><BR></FONT><!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\re=
d163\green21\blue21;\red255\green0\blue0;\red0\green0\blue0;}??\fs22 =
\cf1             &lt;\cf3 Style\cf1  \cf4 TargetType\cf1 =3D\cf0 "\cf1 =
xcdg:DataCell\cf0 "\cf1 &gt;\par ??                &lt;\cf3 =
Style.Triggers\cf1 &gt;\par ??                    &lt;\cf3 Trigger\cf1  =
\cf4 Property\cf1 =3D\cf0 "\cf1 Selector.IsSelected\cf0 "\cf1  \cf4 =
Value\cf1 =3D\cf0 "\cf1 True\cf0 "\cf1 &gt;\par ??                       =
 &lt;\cf3 Setter\cf1  \cf4 Property\cf1 =3D\cf0 "\cf1 Background\cf0 =
"\cf1  \cf4 Value\cf1 =3D\cf0 "\cf1 \{StaticResource =
LightBlueBrush\}\cf0 "\cf1  /&gt;\par ??                    &lt;/\cf3 =
Trigger\cf1 &gt;\par ??                &lt;/\cf3 Style.Triggers\cf1 =
&gt;\par ??            &lt;/\cf3 Style\cf1 &gt;}
-->
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Style</SPAN><SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">TargetType</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">xcdg:DataCell</SPAN>"<SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Style.Triggers</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
&lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Trigger</SPAN><SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Property</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">Selector.IsSelected</SPAN>"<SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Value</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">True</SPAN>"<SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Setter</SPAN><SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Property</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">Background</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Value</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">{StaticResource=20
      LightBlueBrush}</SPAN>"<SPAN style=3D"COLOR: blue"> =
/&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
&lt;/</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Trigger</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Style.Triggers</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;/</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Style</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></FONT></P></DIV><BR>So now that =
we can=20
      select multiple of cells, we need to wire up the event handling to =

      actually trigger the selection.&nbsp; We subscribe to the =
MouseDown and=20
      MouseEnter events and detect if the left mouse button is =
pressed.&nbsp; If=20
      so, we act accordingly:<BR><BR><!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0=
\green0\blue255;\red43\green145\blue175;}??\fs22         \cf3 =
private\cf0  \cf3 static\cf0  \cf3 void\cf0  HandleCellMouseDown(\cf3 =
object\cf0  sender, \cf4 RoutedEventArgs\cf0  e)\par ??        \{\par ?? =
           Xceed.Wpf.DataGrid.\cf4 Cell\cf0  cell =3D sender \cf3 as\cf0 =
 Xceed.Wpf.DataGrid.\cf4 Cell\cf0 ;\par ??\par ??            \cf3 if\cf0 =
 (cell !=3D \cf3 null\cf0  &amp;&amp; \cf4 Mouse\cf0 .LeftButton =3D=3D =
\cf4 MouseButtonState\cf0 .Pressed)\par ??            \{\par ??          =
      \cf3 if\cf0  ((\cf4 Keyboard\cf0 .Modifiers &amp; \cf4 =
ModifierKeys\cf0 .Shift) =3D=3D \cf4 ModifierKeys\cf0 .Shift)\par ??     =
           \{\par ??                    =
SelectRangeFromCurrent(cell);\par ??                \}\par ??            =
    \cf3 else\cf0  \cf3 if\cf0  ((\cf4 Keyboard\cf0 .Modifiers &amp; =
\cf4 ModifierKeys\cf0 .Control) =3D=3D \cf4 ModifierKeys\cf0 =
.Control)\par ??                \{\par ??                    \cf4 =
Selector\cf0 .SetIsSelected(cell, \cf3 true\cf0 );\par ??                =
\}\par ??                \cf3 else\par ??\cf0                 \{\par ??  =
                  ClearSelectedStatus(\cf4 DataGridControl\cf0 =
.GetParentDataGridControl(cell));\par ??                \}\par ??        =
    \}\par ??        \}\par ??\par ??        \cf3 private\cf0  \cf3 =
static\cf0  \cf3 void\cf0  HandleCellMouseEnter(\cf3 object\cf0  sender, =
\cf4 RoutedEventArgs\cf0  e)\par ??        \{\par ??            =
Xceed.Wpf.DataGrid.\cf4 Cell\cf0  cell =3D sender \cf3 as\cf0  =
Xceed.Wpf.DataGrid.\cf4 Cell\cf0 ;\par ??\par ??            \cf3 if\cf0  =
(cell !=3D \cf3 null\cf0  &amp;&amp; \cf4 Mouse\cf0 .LeftButton =3D=3D =
\cf4 MouseButtonState\cf0 .Pressed)\par ??            \{\par ??          =
      SelectRangeFromCurrent(cell);\par ??            \}\par ??        =
\}}
-->
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN style=3D"COLOR: blue">private</SPAN> <SPAN=20
      style=3D"COLOR: blue">static</SPAN> <SPAN style=3D"COLOR: =
blue">void</SPAN>=20
      HandleCellMouseDown(<SPAN style=3D"COLOR: blue">object</SPAN> =
sender, <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">RoutedEventArgs</SPAN> =
e)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: =
rgb(43,145,175)">Cell</SPAN> cell =3D=20
      sender <SPAN style=3D"COLOR: blue">as</SPAN> <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Cell</SPAN>;</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: blue">if</SPAN> (cell =
!=3D <SPAN=20
      style=3D"COLOR: blue">null</SPAN> &amp;&amp; <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Mouse</SPAN>.LeftButton =3D=3D =
<SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">MouseButtonState</SPAN>.Pressed)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: =
blue">if</SPAN>=20
      ((<SPAN style=3D"COLOR: rgb(43,145,175)">Keyboard</SPAN>.Modifiers =
&amp;=20
      <SPAN style=3D"COLOR: rgb(43,145,175)">ModifierKeys</SPAN>.Shift) =
=3D=3D <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">ModifierKeys</SPAN>.Shift)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      SelectRangeFromCurrent(cell);</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: blue">else</SPAN> <SPAN style=3D"COLOR: =
blue">if</SPAN>=20
      ((<SPAN style=3D"COLOR: rgb(43,145,175)">Keyboard</SPAN>.Modifiers =
&amp;=20
      <SPAN style=3D"COLOR: =
rgb(43,145,175)">ModifierKeys</SPAN>.Control) =3D=3D <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">ModifierKeys</SPAN>.Control)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">Selector</SPAN>.SetIsSelected(cell, <SPAN=20
      style=3D"COLOR: blue">true</SPAN>);</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: blue">else</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      ClearSelectedStatus(<SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">DataGridControl</SPAN>.GetParentDataGridControl(cell));<=
/FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN style=3D"COLOR: blue">private</SPAN> <SPAN=20
      style=3D"COLOR: blue">static</SPAN> <SPAN style=3D"COLOR: =
blue">void</SPAN>=20
      HandleCellMouseEnter(<SPAN style=3D"COLOR: blue">object</SPAN> =
sender, <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">RoutedEventArgs</SPAN> =
e)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: =
rgb(43,145,175)">Cell</SPAN> cell =3D=20
      sender <SPAN style=3D"COLOR: blue">as</SPAN> <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Cell</SPAN>;</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: blue">if</SPAN> (cell =
!=3D <SPAN=20
      style=3D"COLOR: blue">null</SPAN> &amp;&amp; <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Mouse</SPAN>.LeftButton =3D=3D =
<SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">MouseButtonState</SPAN>.Pressed)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      SelectRangeFromCurrent(cell);</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      }</FONT></P></DIV><BR>And that's it - we have multiple cell =
selection=20
      working pretty nicely!&nbsp; The last thing to do is update my =
previous=20
      code for pasting, and rather than just pasting to the current cell =
we=20
      paste to every cell which has the Selector.IsSelected property set =
to=20
      true.<BR><BR>I have put all the code to do this into a helper =
class - <A=20
      =
href=3D"http://www.sendspace.com/file/3xj9o2">DataGridControlHelper.cs</A=
>.&nbsp;=20
      Therefore I won't include any more code here as it's mostly=20
      straightforward glue code with a few usability tweaks (such as =
unselecting=20
      everything when someone navigates with the keyboard).&nbsp; =
<BR><BR>Just=20
      call the static RegisterEventHandlers() method when your =
application=20
      starts up.<BR><BR>Enjoy<BR><BR><SPAN style=3D"FONT-WEIGHT: =
bold">NOTE:=20
      Uploading to my blog is currently not working so I have put the =
files on=20
      sendspace.&nbsp; If you have any issues downloading the files, =
please let=20
      me know<BR></SPAN>
      <P class=3Dpostfoot>posted @ <A title=3D"Permanent link to this =
post"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/27/19700.aspx">Friday=
,=20
      April 27, 2007 6:54 PM</A> | <A title=3D"comments, pingbacks, =
trackbacks"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/27/19700.aspx#feedbac=
k">Feedback=20
      (2)</A> </P></DIV>
      <P class=3Ddate><SPAN><A=20
      id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl03_DayItem_ImageLink=20
      title=3D"Day Archive" style=3D"DISPLAY: inline-block"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/25.aspx">Wednesday,=20
      April 25, 2007</A> </SPAN></P>
      <DIV class=3Dpost>
      <H2><A=20
      =
id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl03_DayItem_DayList_ctl00_Title=
Url=20
      title=3D"Click To View Entry."=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/25/19694.aspx">Implem=
enting=20
      Copy &amp; Paste between cells in Xceed WPF DataGrid</A></H2>I am =
using=20
      the Xceed grid in my application to allow the user to enter =
monetary=20
      values into cells.&nbsp; They would like to be able to copy and =
paste=20
      values between cells in the grid, but this is not supported by the =
grid=20
      natively.&nbsp; Support from the Clipboard is very good in WPF =
(via the <A=20
      =
href=3D"http://msdn2.microsoft.com/en-us/library/system.windows.clipboard=
.aspx">System.Windows.Clipboard</A>=20
      static class) so this actually is not a particularly difficult =
thing to=20
      implement.<BR><BR>My aim is to write a generic reusable solution =
here that=20
      will work for any Xceed grid in my application, rather than a =
specific=20
      one, so I neither want to do any copying or updating of actual =
data.=20
      <BR><BR>What we first need to do is register execution handlers =
for the <A=20
      =
href=3D"http://msdn2.microsoft.com/en-us/library/system.windows.input.app=
licationcommands.copy.aspx">ApplicationCommands.Copy</A>=20
      and the <A=20
      =
href=3D"http://msdn2.microsoft.com/en-us/library/system.windows.input.app=
licationcommands.paste.aspx">ApplicationCommands.Paste</A>=20
      commands against the DataGrid.&nbsp; We then either copy the =
content of=20
      the current cell or paste into it depending on which command is=20
      executed.&nbsp; <BR><BR>I think the best place to perform generic =
event=20
      handling against a class is in the static initialiser of the App =
class,=20
      like follows:<BR><BR><!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0=
\green0\blue255;\red43\green145\blue175;}??\fs22         \cf3 static\cf0 =
 App()\par ??        \{\par ??            \cf4 CommandManager\cf0 =
.RegisterClassCommandBinding(\cf3 typeof\cf0 (\cf4 DataGridControl\cf0 =
), \cf3 new\cf0  \cf4 CommandBinding\cf0 (\cf4 ApplicationCommands\cf0 =
.Paste, HandleXceedPasteCommandExecuted));\par ??            \cf4 =
CommandManager\cf0 .RegisterClassCommandBinding(\cf3 typeof\cf0 (\cf4 =
DataGridControl\cf0 ), \cf3 new\cf0  \cf4 CommandBinding\cf0 (\cf4 =
ApplicationCommands\cf0 .Copy, HandleXceedCopyCommandExecuted));\par ??  =
      \}\par ??}
-->
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN style=3D"COLOR: blue">static</SPAN> App()</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">CommandManager</SPAN>.RegisterClassCommandBinding(<SPAN =

      style=3D"COLOR: blue">typeof</SPAN>(<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">DataGridControl</SPAN>), <SPAN=20
      style=3D"COLOR: blue">new</SPAN><SPAN=20
      style=3D"COLOR: rgb(43,145,175)">CommandBinding</SPAN>(<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">ApplicationCommands</SPAN>.Paste, =

      HandleXceedPasteCommandExecuted));</FONT> </P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">CommandManager</SPAN>.RegisterClassCommandBinding(<SPAN =

      style=3D"COLOR: blue">typeof</SPAN>(<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">DataGridControl</SPAN>), <SPAN=20
      style=3D"COLOR: blue">new</SPAN><SPAN=20
      style=3D"COLOR: rgb(43,145,175)">CommandBinding</SPAN>(<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">ApplicationCommands</SPAN>.Copy,=20
      HandleXceedCopyCommandExecuted));</FONT> </P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      }</FONT></P></DIV><BR>We'll start with the Copy handler.&nbsp; =
This is=20
      quite simple - we first work out which cell has the focus, then =
copy the=20
      textual version of its content to the clipboard.<BR><BR><!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0=
\green0\blue255;\red43\green145\blue175;}??\fs22         \cf3 =
private\cf0  \cf3 static\cf0  \cf3 void\cf0  =
HandleXceedCopyCommandExecuted(\cf3 object\cf0  sender, \cf4 =
ExecutedRoutedEventArgs\cf0  e)\par ??        \{\par ??            \cf4 =
DataGridControl\cf0  dataGridControl =3D sender \cf3 as\cf0  \cf4 =
DataGridControl\cf0 ;\par ??\par ??            \cf3 if\cf0  =
(dataGridControl !=3D \cf3 null\cf0 )\par ??            \{\par ??        =
        Xceed.Wpf.DataGrid.\cf4 Row\cf0  row =3D =
(Xceed.Wpf.DataGrid.\cf4 Row\cf0 =
)dataGridControl.ItemContainerGenerator.ContainerFromItem(dataGridControl=
.CurrentItem);\par ??                Xceed.Wpf.DataGrid.\cf4 Cell\cf0  =
currentCell =3D row.Cells[dataGridControl.CurrentColumn.Index];\par =
??\par ??                \cf3 if\cf0  (currentCell !=3D \cf3 null\cf0  =
&amp;&amp; currentCell.HasContent)\par ??                \{\par ??       =
             \cf4 Clipboard\cf0 =
.SetText(currentCell.Content.ToString());\par ??                \}\par =
??            \}\par ??        \}}
-->
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN style=3D"COLOR: blue">private</SPAN> <SPAN=20
      style=3D"COLOR: blue">static</SPAN> <SPAN style=3D"COLOR: =
blue">void</SPAN>=20
      HandleXceedCopyCommandExecuted(<SPAN style=3D"COLOR: =
blue">object</SPAN>=20
      sender, <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">ExecutedRoutedEventArgs</SPAN>=20
e)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">DataGridControl</SPAN> =
dataGridControl =3D=20
      sender <SPAN style=3D"COLOR: blue">as</SPAN> <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">DataGridControl</SPAN>;</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: blue">if</SPAN> =
(dataGridControl !=3D=20
      <SPAN style=3D"COLOR: blue">null</SPAN>)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Xceed.Wpf.DataGrid.<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Row</SPAN> row =3D =
(Xceed.Wpf.DataGrid.<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Row</SPAN>)=20
      =
dataGridControl.ItemContainerGenerator.ContainerFromItem(dataGridControl.=
CurrentItem);</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Xceed.Wpf.DataGrid.<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Cell</SPAN> currentCell =3D=20
      row.Cells[dataGridControl.CurrentColumn.Index];</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: =
blue">if</SPAN>=20
      (currentCell !=3D <SPAN style=3D"COLOR: blue">null</SPAN> =
&amp;&amp;=20
      currentCell.HasContent)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">Clipboard</SPAN>.SetText(currentCell.Content.ToString())=
;</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      }</FONT></P></DIV><BR>Note that we copy the ToString() of the =
content to=20
      the clipboard, so this technique would not work if the Cell's =
content was=20
      an object whose string was not valid to be entered into a =
Cell.&nbsp; As=20
      we are copying and pasting between Cells, this shouldn't be a=20
      problem.<BR><BR>Now onto the paste command.&nbsp; The paste =
command is=20
      more tricky and I will explain why.&nbsp; We could just update the =
content=20
      directly, but that would bypass any text input handling and =
formatting=20
      that we may be doing in the Xceed grid.&nbsp; For example, one =
grid in my=20
      application uses the <A=20
      =
href=3D"http://doc.xceedsoft.com/products/XceedWpfDataGrid/Xceed.Wpf.Cont=
rols~Xceed.Wpf.Controls.NumericInputScope.html">NumericInputScope</A>=20
      class to block all non numbers from being typed into the =
Grid.&nbsp; If we=20
      just updated the grid at this point, the PreviewKeyDown and=20
      PreviewTextInput would never be fired, therefore we would be =
allowing=20
      invalid characters to be typed into the grid.<BR><BR>The solution =
I came=20
      up with for this is to switch the cell into Edit Mode, simulate =
keypresses=20
      for each character being pasted (via raising the TextInput event), =
and the=20
      commit the changes back to the cell.&nbsp; This should ensure that =
the=20
      paste is essentially doing exactly the same thing as it would do =
if the=20
      user pressed the keys themselves!&nbsp; Note we dispatch the work =
back to=20
      the Dispatcher... this is to allow the cell's editor to activate =
and the=20
      cell to get focus before we simulate the key presses.<BR><BR><!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0=
\green0\blue255;\red43\green145\blue175;}??\fs22         \cf3 =
private\cf0  \cf3 static\cf0  \cf3 void\cf0  =
HandleXceedPasteCommandExecuted(\cf3 object\cf0  sender, \cf4 =
ExecutedRoutedEventArgs\cf0  e)\par ??        \{\par ??            \cf4 =
DataGridControl\cf0  dataGridControl =3D sender \cf3 as\cf0  \cf4 =
DataGridControl\cf0 ;\par ??\par ??            \cf3 if\cf0  =
(dataGridControl !=3D \cf3 null\cf0  &amp;&amp; \cf4 Clipboard\cf0 =
.ContainsText())\par ??            \{\par ??                =
Xceed.Wpf.DataGrid.\cf4 Row\cf0  row =3D (Xceed.Wpf.DataGrid.\cf4 =
Row\cf0 ) =
dataGridControl.ItemContainerGenerator.ContainerFromItem(dataGridControl.=
CurrentItem);\par ??                Xceed.Wpf.DataGrid.\cf4 Cell\cf0  =
currentCell =3D row.Cells[dataGridControl.CurrentColumn.Index];\par =
??\par ??                \cf3 if\cf0  (!currentCell.ReadOnly)\par ??     =
           \{\par ??                    \cf3 string\cf0  text =3D \cf4 =
Clipboard\cf0 .GetText();\par ??\par ??                    =
currentCell.BeginEdit();\par ??\par ??                    \cf4 =
Application\cf0 .Current.Dispatcher.Invoke(\cf4 DispatcherPriority\cf0 =
.Input, (\cf4 Callback\cf0 ) \cf3 delegate\par ??\cf0                    =
 \{\par ??                        \cf3 if\cf0  (\cf4 Keyboard\cf0 =
.FocusedElement !=3D \cf3 null\cf0 )\par ??                        =
\{\par ??                            \cf3 foreach\cf0  (\cf3 char\cf0  c =
\cf3 in\cf0  text)\par ??                            \{\par ??           =
                     \cf4 TextComposition\cf0  textComposition =3D \cf3 =
new\cf0  \cf4 TextComposition\cf0 (\cf4 InputManager\cf0 .Current, \cf4 =
Keyboard\cf0 .FocusedElement, \cf3 new\cf0  \cf3 string\cf0 (c, 1));\par =
??\par ??                                \cf4 =
TextCompositionEventArgs\cf0  textCompositionEventArgs =3D \cf3 new\cf0  =
\cf4 TextCompositionEventArgs\cf0 (\cf4 Keyboard\cf0 .PrimaryDevice, =
textComposition);\par ??                                =
textCompositionEventArgs.RoutedEvent =3D \cf4 UIElement\cf0 =
.TextInputEvent;\par ??\par ??                                \cf4 =
Keyboard\cf0 .FocusedElement.RaiseEvent(textCompositionEventArgs);\par =
??                            \}\par ??                        \}\par =
??\par ??                        currentCell.EndEdit();\par ??           =
         \});\par ??                \}\par ??            \}\par ??       =
 \}}
-->
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0=
\green0\blue255;\red43\green145\blue175;}??\fs22     \cf3 public\cf0  =
\cf3 delegate\cf0  \cf3 void\cf0  \cf4 Callback\cf0 ();\par ??}
--></P>
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><FONT=20
      size=3D2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: blue">public</SPAN> <SPAN=20
      style=3D"COLOR: blue">delegate</SPAN> <SPAN style=3D"COLOR: =
blue">void</SPAN>=20
      <SPAN style=3D"COLOR: =
rgb(43,145,175)">Callback</SPAN>();</FONT></P>
      <P style=3D"MARGIN: 0px"><BR></P></DIV>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN style=3D"COLOR: blue">private</SPAN> <SPAN=20
      style=3D"COLOR: blue">static</SPAN> <SPAN style=3D"COLOR: =
blue">void</SPAN>=20
      HandleXceedPasteCommandExecuted(<SPAN style=3D"COLOR: =
blue">object</SPAN>=20
      sender, <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">ExecutedRoutedEventArgs</SPAN>=20
e)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">DataGridControl</SPAN> =
dataGridControl =3D=20
      sender <SPAN style=3D"COLOR: blue">as</SPAN> <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">DataGridControl</SPAN>;</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: blue">if</SPAN> =
(dataGridControl !=3D=20
      <SPAN style=3D"COLOR: blue">null</SPAN> &amp;&amp; <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">Clipboard</SPAN>.ContainsText())</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Xceed.Wpf.DataGrid.<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Row</SPAN> row =3D =
(Xceed.Wpf.DataGrid.<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Row</SPAN>)=20
      =
dataGridControl.ItemContainerGenerator.ContainerFromItem(dataGridControl.=
CurrentItem);</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Xceed.Wpf.DataGrid.<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Cell</SPAN> currentCell =3D=20
      row.Cells[dataGridControl.CurrentColumn.Index];</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: =
blue">if</SPAN>=20
      (!currentCell.ReadOnly)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: blue">string</SPAN> text =3D <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">Clipboard</SPAN>.GetText();</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      currentCell.BeginEdit();</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">Application</SPAN>.Current.Dispatcher.Invoke(<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">DispatcherPriority</SPAN>.Input, =
(<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Callback</SPAN>) <SPAN=20
      style=3D"COLOR: blue">delegate</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
{</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: blue">if</SPAN> (<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Keyboard</SPAN>.FocusedElement =
!=3D <SPAN=20
      style=3D"COLOR: blue">null</SPAN>)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: blue">foreach</SPAN> (<SPAN style=3D"COLOR: =
blue">char</SPAN>=20
      c <SPAN style=3D"COLOR: blue">in</SPAN> text)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">TextComposition</SPAN> =
textComposition =3D=20
      <SPAN style=3D"COLOR: blue">new</SPAN><SPAN=20
      style=3D"COLOR: rgb(43,145,175)">TextComposition</SPAN>(<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">InputManager</SPAN>.Current, =
<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Keyboard</SPAN>.FocusedElement, =
<SPAN=20
      style=3D"COLOR: blue">new</SPAN> <SPAN style=3D"COLOR: =
blue">string</SPAN>(c,=20
      1));</FONT> </P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">TextCompositionEventArgs</SPAN>=20
      textCompositionEventArgs =3D <SPAN style=3D"COLOR: =
blue">new</SPAN> <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">TextCompositionEventArgs</SPAN>(<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Keyboard</SPAN>.PrimaryDevice,=20
      textComposition);</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      textCompositionEventArgs.RoutedEvent =3D <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">UIElement</SPAN>.TextInputEvent;</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">Keyboard</SPAN>.FocusedElement.RaiseEvent(textCompositio=
nEventArgs);</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; currentCell.EndEdit();</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
});</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      }</FONT></P></DIV><BR>I'd be interested to know what people think =
of this=20
      method, and if anyone has tried any other solutions to implement =
copy and=20
      paste in the grid let me know.<BR><BR>The next requirement is to =
support=20
      selection of and pasting to multiple cells within the Grid.&nbsp; =
Again,=20
      this is not currently supported in the Xceed DataGrid, but I will=20
      hopefully come up with a way of doing it!=20
      <P class=3Dpostfoot>posted @ <A title=3D"Permanent link to this =
post"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/25/19694.aspx">Wednes=
day,=20
      April 25, 2007 5:02 PM</A> | <A title=3D"comments, pingbacks, =
trackbacks"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/25/19694.aspx#feedbac=
k">Feedback=20
      (6)</A> </P></DIV>
      <DIV class=3Dpost>
      <H2><A=20
      =
id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl03_DayItem_DayList_ctl01_Title=
Url=20
      title=3D"Click To View Entry."=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/25/19693.aspx">Good =
font=20
      for use in Visual Studio</A></H2>I always used Courier New in =
Visual=20
      Studio. Now it seems Microsoft have come out with a new font =
called=20
      Consolas which was specifically designed for use in programming=20
      environments.&nbsp; I have been using it for the last few months =
and=20
      definitely prefer it to Courier New.<BR><BR>It actually comes=20
      pre-installed on Vista, but if you don't have it, you can <A=20
      =
href=3D"http://www.microsoft.com/downloads/details.aspx?familyid=3D22e69a=
e4-7e40-4807-8a86-b3d36fab68d3&amp;displaylang=3Den">get=20
      it here</A>=20
      <P class=3Dpostfoot>posted @ <A title=3D"Permanent link to this =
post"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/25/19693.aspx">Wednes=
day,=20
      April 25, 2007 2:58 PM</A> | <A title=3D"comments, pingbacks, =
trackbacks"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/25/19693.aspx#feedbac=
k">Feedback=20
      (1)</A> </P></DIV>
      <P class=3Ddate><SPAN><A=20
      id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl04_DayItem_ImageLink=20
      title=3D"Day Archive" style=3D"DISPLAY: inline-block"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/23.aspx">Monday, =
April=20
      23, 2007</A> </SPAN></P>
      <DIV class=3Dpost>
      <H2><A=20
      =
id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl04_DayItem_DayList_ctl00_Title=
Url=20
      title=3D"Click To View Entry."=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/23/19691.aspx">XAML=20
      Support in Resharper 3.0</A></H2>I am an avid <A=20
      href=3D"http://www.jetbrains.com/resharper/">Jetbrains =
Resharper</A> user=20
      and have been for years, I really think it increases the usability =
of=20
      Visual Studio above and beyond that provided by =
Microsoft.<BR><BR>I=20
      regularly return to their site to check on the new releases and =
see what=20
      they're working on, and just noticed that they have started adding =
some=20
      support for XAML to their latest <A=20
      =
href=3D"http://www.jetbrains.net/confluence/display/ReSharper/ReSharper+E=
arly+Access+Program">EAP=20
      Release</A>.<BR><BR>So having installed it and opened my solution, =
I open=20
      a XAML file to see what has happened.&nbsp; You can immediately =
see that=20
      Resharper is having an effect because things show up in completely =

      different colours - there seems to be some processing happening on =
every=20
      tag in the XAML file (this processing all happens in the =
background so=20
      doesn't slow things down very much).<BR><BR>So, now type names, =
such as=20
      &lt;<SPAN style=3D"FONT-WEIGHT: bold">TextBox</SPAN> ... /&gt; or =
&lt;<SPAN=20
      style=3D"FONT-WEIGHT: bold">DataTemplate</SPAN> ... /&gt; show up =
in blue=20
      and property names such as &lt;TextBox <SPAN=20
      style=3D"FONT-WEIGHT: bold">Text</SPAN>=3D".." /&gt; and =
&lt;DataTemplate=20
      <SPAN style=3D"FONT-WEIGHT: bold">DataType</SPAN>=3D"..." /&gt; =
show up in=20
      purple.&nbsp; This is consistent with the rest of Resharpers =
colourings,=20
      although these are of course configurable.<BR><BR>When you have =
the=20
      keyboard over a tag, there are now two context sensitive options, =
these=20
      are "Replace all tags" and "Replace all attributes".&nbsp; I think =
this=20
      just comes from the new changes they have made for XML refactoring =
and=20
      aren't hugely useful for XAML.&nbsp; It might be useful if you =
want to=20
      replace all TextBoxes with say, Labels or something, or if you =
rename a=20
      property on a type and want all references to be renamed (although =
I=20
      imagine this will eventually happen automatically).<BR><BR>The =
only truly=20
      useful feature I can find simply comes from the fact that =
references are=20
      being resolved, so the existing Resharper feature of "Go To =
Definition=20
      (Ctrl+B) can be used on them.&nbsp; So you can now press Ctrl+B on =
any=20
      property or object name and get instantly taken to the definition =
of=20
      that.&nbsp; This is great for Styles and other resources (e.g. =
where you=20
      have Style=3D"{StaticResource MyStyle}" you can navigate straight =
to the=20
      style) and using it on anything else seems to take you to the =
object=20
      browser for that type or property (previously you would just get =
taken to=20
      relevant line in the XmlPresentation.xsd file).<BR><BR>That's =
about it=20
      really - overall I can't see much extra that this is adding to the =
XAML=20
      user experience, but I can see, by programatically resolving =
references=20
      that they are laying the groundworks for some very useful =
features.&nbsp;=20
      However there is still a lot to do on this subject - for example, =
open any=20
      complex XAML file and the first thing you will notice if you are =
using any=20
      custom namespaces or custom controls, is that Resharper is not =
picking=20
      them up.&nbsp; They do state on their site that they are working =
on=20
      improving this.=20
      <P class=3Dpostfoot>posted @ <A title=3D"Permanent link to this =
post"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/23/19691.aspx">Monday=
,=20
      April 23, 2007 3:20 PM</A> | <A title=3D"comments, pingbacks, =
trackbacks"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/23/19691.aspx#feedbac=
k">Feedback=20
      (1)</A> </P></DIV>
      <P class=3Ddate><SPAN><A=20
      id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl05_DayItem_ImageLink=20
      title=3D"Day Archive" style=3D"DISPLAY: inline-block"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/20.aspx">Friday, =
April=20
      20, 2007</A> </SPAN></P>
      <DIV class=3Dpost>
      <H2><A=20
      =
id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl05_DayItem_DayList_ctl00_Title=
Url=20
      title=3D"Click To View Entry."=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/20/19684.aspx">New =
tool=20
      for viewing WPF default control templates</A></H2>I have always =
used <A=20
      =
href=3D"http://wpfwonderland.wordpress.com/2007/01/02/wpf-tools-stylesnoo=
per/">StyleSnooper</A>=20
      to get at the templates for my WPF controls.&nbsp; It's pretty =
useful and=20
      simple, and can get you the style and templates.<BR><BR>Now I just =

      stumbled into a new tool, by Chris Sells and Ian Griffiths, called =
<A=20
      =
href=3D"http://www.sellsbrothers.com/tools/#ShowMeTheTemplate">ShowMeTheT=
emplate</A>.<BR><BR>This=20
      is nice.&nbsp; It formats the output a lot better than =
StyleSnooper (you=20
      can expand and collapse ala IE) and it splits the different =
templates (e.g=20
      HeaderTemplate and ContentTemplate into separate text =
boxes).&nbsp; You=20
      also get to see a preview of the control you are viewing the =
template=20
      for.&nbsp; Finally, you get to choose which Theme to =
use.<BR><BR>This=20
      should prove a useful addition to the WPF developer's toolkit =
especially=20
      combined with StyleSnooper for seeing all the other styles applied =
by=20
      default to a control.=20
      <P class=3Dpostfoot>posted @ <A title=3D"Permanent link to this =
post"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/20/19684.aspx">Friday=
,=20
      April 20, 2007 6:40 PM</A> | <A title=3D"comments, pingbacks, =
trackbacks"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/20/19684.aspx#feedbac=
k">Feedback=20
      (1)</A> </P></DIV>
      <P class=3Ddate><SPAN><A=20
      id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl06_DayItem_ImageLink=20
      title=3D"Day Archive" style=3D"DISPLAY: inline-block"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/09.aspx">Monday, =
April=20
      09, 2007</A> </SPAN></P>
      <DIV class=3Dpost>
      <H2><A=20
      =
id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl06_DayItem_DayList_ctl00_Title=
Url=20
      title=3D"Click To View Entry."=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/09/19673.aspx">=E2=80=
=9CDefault=E2=80=9D=20
      buttons in WPF and multiple default buttons per page</A></H2>
      <P class=3DMsoNormal>Most user interface frameworks have the =
concept of a=20
      default button.<SPAN>&nbsp; </SPAN>The default button is the =
button which=20
      is activated when the Enter key is pressed. </P>
      <P class=3DMsoNormal>This is an important aspect for =
usability.<SPAN>&nbsp;=20
      </SPAN>For example, on a search form, most users expect to be able =
to=20
      perform a search by pressing Enter on any form =
element.<SPAN>&nbsp;=20
      </SPAN>If this does not happen as expected, the user gets =
frustrated as=20
      they need to either tab onto the button and press Enter, or use =
the mouse=20
      to click.<SPAN>&nbsp; </SPAN>I think the web has pushed this =
standard as=20
      HTML forms automatically post themselves when the user presses =
Enter=20
      within them.</P>
      <P class=3DMsoNormal>WPF offers the ability to have both Default =
and Cancel=20
      buttons.<SPAN>&nbsp; </SPAN>The Cancel button is activated by =
pressing the=20
      ESC key, although in my opinion this is not quite as common as the =
Enter=20
      button as most users don=E2=80=99t expect to be able to press ESC =
within forms =E2=80=93=20
      only dialog windows maybe.<SPAN><BR></SPAN></P>
      <P class=3DMsoNormal><STRONG>How do default buttons=20
      work?<O:P></O:P></STRONG></P>
      <P class=3DMsoNormal>There is nothing particularly special going =
on under=20
      the covers when you set a button to be the default =
button.<SPAN>&nbsp;=20
      </SPAN>When the <A=20
      =
href=3D"http://msdn2.microsoft.com/en-us/library/system.windows.controls.=
button.isdefault.aspx">IsDefault</A>=20
      property is set, <A=20
      =
href=3D"http://msdn2.microsoft.com/en-us/library/system.windows.input.acc=
esskeymanager.register.aspx">AccessKeyManager.Register</A>=20
      is called, passing in =E2=80=9C\r=E2=80=9D as the access =
key.&nbsp; Similarly, the act of=20
      setting <A=20
      =
href=3D"http://msdn2.microsoft.com/en-us/library/system.windows.controls.=
button.iscancel.aspx">IsCancel</A>=20
      calls <A=20
      =
href=3D"http://msdn2.microsoft.com/en-us/library/system.windows.input.acc=
esskeymanager.register.aspx">AccessKeyManager.Register</A>=20
      passing in the character code for ESC - =
=E2=80=9C\x001b=E2=80=9D.<SPAN>&nbsp; </SPAN></P>
      <P class=3DMsoNormal>The only special thing that setting IsDefault =
will do=20
      is ensure that the <A=20
      =
href=3D"http://msdn2.microsoft.com/en-us/library/system.windows.controls.=
button.isdefaulted.aspx">IsDefaulted</A>=20
      property is updated correctly.<SPAN>&nbsp; </SPAN>This allows, for =

      example, buttons to be styled differently if they are =
defaulted.</P>
      <P class=3DMsoNormal><STRONG>How do I get multiple default buttons =
per=20
      page?<O:P></O:P></STRONG></P>
      <P class=3DMsoNormal>In ASP.NET a common problem was that because =
you are=20
      forced to have a single server-side form, it was not possible to =
have=20
      multiple <SPAN style=3D"FONT-STYLE: italic">logical </SPAN>forms =
on the page=20
      and have the Enter button behave as expected without a lot of=20
      hacking.<SPAN>&nbsp; </SPAN>For example, you might want the =
template for=20
      all your pages to have a small search form at the top with a =
search=20
      button, and also have the search performed when the user presses =
enter=20
      within the search box.<SPAN>&nbsp; W</SPAN>hen the user is on a =
page with=20
      its own form on it, you would want <SPAN=20
      style=3D"FONT-STYLE: italic">that</SPAN> form to be submitted when =
the user=20
      pressed enter.&nbsp; This was not possible natively.</P>
      <P class=3DMsoNormal>This issue was solved in ASP.NET2 by allowing =
any Panel=20
      or Table to have set a <A=20
      =
href=3D"http://msdn2.microsoft.com/en-us/library/system.web.ui.webcontrol=
s.panel.defaultbutton.aspx">DefaultButton</A>=20
      property.<SPAN>&nbsp; </SPAN>Behind the scenes this would set up =
an event=20
      handler in JavaScript which would activate the button when enter =
was=20
      pressed.</P>
      <P class=3DMsoNormal>In WPF, there is no such =
property.<SPAN>&nbsp;=20
      </SPAN>If you define two panels on a page, and into each panel =
place a=20
      TextBox and a Button with IsDefault=3D"True", you will see that =
pressing=20
      enter in either TextBox always activates the first =
button.<SPAN>&nbsp;=20
      </SPAN>This is because that button registered itself first so is =
at the=20
      top of the invocation list of the Enter access key:</P><!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\re=
d163\green21\blue21;\red255\green0\blue0;\red0\green0\blue0;}??\fs22 =
\cf1 &lt;\cf3 Window\cf1  \cf4 x:Class\cf1 =3D\cf0 "\cf1 =
WindowsApplication7.Window1\cf0 "\par ??\cf1     \cf4 xmlns\cf1 =3D\cf0 =
"\cf1 http://schemas.microsoft.com/winfx/2006/xaml/presentation\cf0 =
"\par ??\cf1     \cf4 xmlns:x\cf1 =3D\cf0 "\cf1 =
http://schemas.microsoft.com/winfx/2006/xaml\cf0 "\par ??\cf1     \cf4 =
xmlns:local\cf1 =3D\cf0 "\cf1 clr-namespace:WindowsApplication7\cf0 =
"\par ??\cf1     \cf4 Title\cf1 =3D\cf0 "\cf1 WindowsApplication7\cf0 =
"\cf1  \cf4 Height\cf1 =3D\cf0 "\cf1 300\cf0 "\cf1  \cf4 Width\cf1 =
=3D\cf0 "\cf1 300\cf0 "\par ??\cf1     &gt;\par ??    &lt;\cf3 =
StackPanel\cf1 &gt;\par ??        \par ??        &lt;\cf3 StackPanel\cf1 =
 \cf4 Margin\cf1 =3D\cf0 "\cf1 5\cf0 "\cf1  \cf4 Background\cf1 =3D\cf0 =
"\cf1 Yellow\cf0 "\cf1 &gt;\par ??            &lt;\cf3 TextBox\cf1  \cf4 =
Margin\cf1 =3D\cf0 "\cf1 5\cf0 "\cf1  /&gt;\par ??            &lt;\cf3 =
Button\cf1  \cf4 Margin\cf1 =3D\cf0 "\cf1 5\cf0 "\cf1  \cf4 =
IsDefault\cf1 =3D\cf0 "\cf1 True\cf0 "\cf1  \cf4 Content\cf1 =3D\cf0 =
"\cf1 Yellow\cf0 "\cf1  /&gt;\par ??        &lt;/\cf3 StackPanel\cf1 =
&gt;\par ??\par ??        &lt;\cf3 StackPanel\cf1  \cf4 Margin\cf1 =
=3D\cf0 "\cf1 5\cf0 "\cf1  \cf4 Background\cf1 =3D\cf0 "\cf1 Green\cf0 =
"\cf1 &gt;\par ??            &lt;\cf3 TextBox\cf1  \cf4 Margin\cf1 =
=3D\cf0 "\cf1 5\cf0 "\cf1  /&gt;\par ??            &lt;\cf3 Button\cf1  =
\cf4 Margin\cf1 =3D\cf0 "\cf1 5\cf0 "\cf1  \cf4 IsDefault\cf1 =3D\cf0 =
"\cf1 True\cf0 "\cf1  \cf4 Content\cf1 =3D\cf0 "\cf1 Green\cf0 "\cf1  =
/&gt;\par ??        &lt;/\cf3 StackPanel\cf1 &gt;\par ??        \par ??  =
  &lt;/\cf3 StackPanel\cf1 &gt;\par ??\par ??&lt;/\cf3 Window\cf1 =
&gt;\par ??}
-->
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Window</SPAN><SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">x:Class</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: =
blue">WindowsApplication7.Window1</SPAN>"</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; </SPAN><SPAN=20
      style=3D"COLOR: red">xmlns</SPAN><SPAN style=3D"COLOR: =
blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: =
blue">http://schemas.microsoft.com/winfx/2006/xaml/presentation</SPAN>"</=
FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; </SPAN><SPAN=20
      style=3D"COLOR: red">xmlns:x</SPAN><SPAN style=3D"COLOR: =
blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: =
blue">http://schemas.microsoft.com/winfx/2006/xaml</SPAN>"</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; </SPAN><SPAN=20
      style=3D"COLOR: red">xmlns:local</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: =
blue">clr-namespace:WindowsApplication7</SPAN>"</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; </SPAN><SPAN=20
      style=3D"COLOR: red">Title</SPAN><SPAN style=3D"COLOR: =
blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">WindowsApplication7</SPAN>"<SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Height</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">300</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">Width</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">300</SPAN>"</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">StackPanel</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
&lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">StackPanel</SPAN><SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Margin</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">5</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN=20
      style=3D"COLOR: red">Background</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Yellow</SPAN>"<SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">TextBox</SPAN><SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Margin</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">5</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> /&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Button</SPAN><SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Margin</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">5</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">IsDefault</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">True</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">Content</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Yellow</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> /&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &lt;/</SPAN><SPAN style=3D"COLOR: =
rgb(163,21,21)">StackPanel</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
&lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">StackPanel</SPAN><SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Margin</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">5</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN=20
      style=3D"COLOR: red">Background</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Green</SPAN>"<SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">TextBox</SPAN><SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Margin</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">5</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> /&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Button</SPAN><SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Margin</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">5</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">IsDefault</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">True</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">Content</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Green</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> /&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &lt;/</SPAN><SPAN style=3D"COLOR: =
rgb(163,21,21)">StackPanel</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &lt;/</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">StackPanel</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&lt;/</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Window</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></FONT></P></DIV><BR>In the above =
example,=20
      no matter which TextBox has focus, the Yellow button is always =
activated=20
      when you press enter.<BR>
      <P class=3DMsoNormal>To solve this problem, there is a fairly =
undocumented=20
      feature within the AccessKeyManager called scoping.<SPAN>&nbsp;=20
      </SPAN>This allows you to define a scope for an access key such =
that it is=20
      only activated within that scope.<SPAN>&nbsp; </SPAN>The way this =
is done=20
      is by handling the routed event and adding the scope to the event=20
      args.<SPAN>&nbsp; </SPAN>Then when it returns to the =
AccessKeyManager, it=20
      detects that it has been scoped and will only apply it to buttons =
within=20
      that scope.<BR></P>
      <P class=3DMsoNormal>The code is quite simple to write, but I have =
created a=20
      small helper class to encourage readibility and code =
reuse.<SPAN>&nbsp;=20
      </SPAN>In WPF it=E2=80=99s so easy to write small helper classes =
and seamlessly=20
      integrate via the use of attached properties, so<SPAN> </SPAN>I =
made an=20
      attached property called <SPAN=20
      style=3D"FONT-STYLE: italic">AccessKeyScoper.IsAccessKeyScope =
</SPAN>which=20
      can be applied to any element.&nbsp; With this, the above example =
simply=20
      needs to be modified as follows, and the correct button will be=20
      activated:</P>
      <P class=3DMsoNormal><!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\re=
d163\green21\blue21;\red255\green0\blue0;\red0\green0\blue0;}??\fs22 =
\cf1 &lt;\cf3 StackPanel\cf1  \cf4 =
local:AccessKeyScoper.IsAccessKeyScope\cf1 =3D\cf0 "\cf1 True\cf0 "\cf1 =
&gt;}
--></P>
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\re=
d163\green21\blue21;\red255\green0\blue0;\red0\green0\blue0;}??\fs22 =
\cf1         &lt;\cf3 StackPanel\cf1  \cf4 Margin\cf1 =3D\cf0 "\cf1 =
5\cf0 "\cf1  \cf4 Background\cf1 =3D\cf0 "\cf1 Yellow\cf0 "\cf1  \cf4 =
local:AccessKeyScoper.IsAccessKeyScope\cf1 =3D\cf0 "\cf1 True\cf0 "\cf1 =
&gt;\par ??            &lt;\cf3 TextBox\cf1  \cf4 Margin\cf1 =3D\cf0 =
"\cf1 5\cf0 "\cf1  /&gt;\par ??            &lt;\cf3 Button\cf1  \cf4 =
Margin\cf1 =3D\cf0 "\cf1 5\cf0 "\cf1  \cf4 IsDefault\cf1 =3D\cf0 "\cf1 =
True\cf0 "\cf1  \cf4 Content\cf1 =3D\cf0 "\cf1 Yellow\cf0 "\cf1  =
/&gt;\par ??        &lt;/\cf3 StackPanel\cf1 &gt;\par ??\par ??        =
&lt;\cf3 StackPanel\cf1  \cf4 Margin\cf1 =3D\cf0 "\cf1 5\cf0 "\cf1  \cf4 =
Background\cf1 =3D\cf0 "\cf1 Green\cf0 "\cf1  \cf4 =
local:AccessKeyScoper.IsAccessKeyScope\cf1 =3D\cf0 "\cf1 True\cf0 "\cf1 =
&gt;\par ??            &lt;\cf3 TextBox\cf1  \cf4 Margin\cf1 =3D\cf0 =
"\cf1 5\cf0 "\cf1  /&gt;\par ??            &lt;\cf3 Button\cf1  \cf4 =
Margin\cf1 =3D\cf0 "\cf1 5\cf0 "\cf1  \cf4 IsDefault\cf1 =3D\cf0 "\cf1 =
True\cf0 "\cf1  \cf4 Content\cf1 =3D\cf0 "\cf1 Green\cf0 "\cf1  =
/&gt;\par ??        &lt;/\cf3 StackPanel\cf1 &gt;\par ??}
--></P>
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
&lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">StackPanel</SPAN><SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Margin</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">5</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN=20
      style=3D"COLOR: red">Background</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Yellow</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN=20
      style=3D"COLOR: =
red">local:AccessKeyScoper.IsAccessKeyScope</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">True</SPAN>"<SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">TextBox</SPAN><SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Margin</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">5</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> /&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Button</SPAN><SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Margin</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">5</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">IsDefault</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">True</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">Content</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Yellow</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> /&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &lt;/</SPAN><SPAN style=3D"COLOR: =
rgb(163,21,21)">StackPanel</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
&lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">StackPanel</SPAN><SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Margin</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">5</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN=20
      style=3D"COLOR: red">Background</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Green</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN=20
      style=3D"COLOR: =
red">local:AccessKeyScoper.IsAccessKeyScope</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">True</SPAN>"<SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">TextBox</SPAN><SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Margin</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">5</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> /&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Button</SPAN><SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Margin</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">5</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">IsDefault</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">True</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">Content</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Green</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> /&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &lt;/</SPAN><SPAN style=3D"COLOR: =
rgb(163,21,21)">StackPanel</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></FONT></P>
      <P class=3DMsoNormal>&nbsp;</P>
      <P class=3DMsoNormal><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue"></SPAN></FONT>The code for the helper class =
is=20
      here:</P></DIV></DIV>
      <P class=3DMsoNormal><!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\re=
d0\green0\blue0;\red128\green128\blue128;\red243\green243\blue243;\red0\g=
reen128\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs22 =
\cf1 using\cf0  System;\par ??\cf1 using\cf0  System.Windows;\par ??\cf1 =
using\cf0  System.Windows.Input;\par ??\par ??\cf1 namespace\cf0  =
WindowsApplication7\par ??\{\par ??    \cf4\cb5\highlight5 ///\cf6  \cf4 =
&lt;summary&gt;\par ??\cf0\cb0\highlight0     \cf4\cb5\highlight5 =
///\cf6      Class used to manage generic scoping of access keys\par =
??\cf0\cb0\highlight0     \cf4\cb5\highlight5 ///\cf6  \cf4 =
&lt;/summary&gt;\par ??\cf0\cb0\highlight0     \cf1 public\cf0  \cf1 =
static\cf0  \cf1 class\cf0  \cf7 AccessKeyScoper\par ??\cf0     \{\par =
??        \cf4\cb5\highlight5 ///\cf6  \cf4 &lt;summary&gt;\par =
??\cf0\cb0\highlight0         \cf4\cb5\highlight5 ///\cf6      =
Identifies the IsAccessKeyScope attached dependency property\par =
??\cf0\cb0\highlight0         \cf4\cb5\highlight5 ///\cf6  \cf4 =
&lt;/summary&gt;\par ??\cf0\cb0\highlight0         \cf1 public\cf0  \cf1 =
static\cf0  \cf1 readonly\cf0  \cf7 DependencyProperty\cf0  =
IsAccessKeyScopeProperty =3D\par ??            \cf7 =
DependencyProperty\cf0 .RegisterAttached(\cf8 "IsAccessKeyScope"\cf0 , =
\cf1 typeof\cf0 (\cf1 bool\cf0 ), \cf1 typeof\cf0 (\cf7 =
AccessKeyScoper\cf0 ), \cf1 new\cf0  \cf7 PropertyMetadata\cf0 (\cf1 =
false\cf0 , HandleIsAccessKeyScopePropertyChanged));\par ??\par ??       =
 \cf4\cb5\highlight5 ///\cf6  \cf4 &lt;summary&gt;\par =
??\cf0\cb0\highlight0         \cf4\cb5\highlight5 ///\cf6      Sets the =
IsAccessKeyScope attached property value for the specified object\par =
??\cf0\cb0\highlight0         \cf4\cb5\highlight5 ///\cf6  \cf4 =
&lt;/summary&gt;\par ??\cf0\cb0\highlight0         \cf4\cb5\highlight5 =
///\cf6  \cf4 &lt;param name=3D"obj"&gt;\cf6 The object to retrieve the =
value for\cf4 &lt;/param&gt;\par ??\cf0\cb0\highlight0         =
\cf4\cb5\highlight5 ///\cf6  \cf4 &lt;param name=3D"value"&gt;\cf6 =
Whether the object is an access key scope\cf4 &lt;/param&gt;\par =
??\cf0\cb0\highlight0         \cf1 public\cf0  \cf1 static\cf0  \cf1 =
void\cf0  SetIsAccessKeyScope(\cf7 DependencyObject\cf0  obj, \cf1 =
bool\cf0  value)\par ??        \{\par ??            obj.SetValue(\cf7 =
AccessKeyScoper\cf0 .IsAccessKeyScopeProperty, value);\par ??        =
\}\par ??\par ??        \cf4\cb5\highlight5 ///\cf6  \cf4 =
&lt;summary&gt;\par ??\cf0\cb0\highlight0         \cf4\cb5\highlight5 =
///\cf6      Gets the value of the IsAccessKeyScope attached property =
for the specified object\par ??\cf0\cb0\highlight0         =
\cf4\cb5\highlight5 ///\cf6  \cf4 &lt;/summary&gt;\par =
??\cf0\cb0\highlight0         \cf4\cb5\highlight5 ///\cf6  \cf4 =
&lt;param name=3D"obj"&gt;\cf6 The object to retrieve the value for\cf4 =
&lt;/param&gt;\par ??\cf0\cb0\highlight0         \cf4\cb5\highlight5 =
///\cf6  \cf4 &lt;returns&gt;\cf6 The value of IsAccessKeyScope attached =
property for the specified object\cf4 &lt;/returns&gt;\par =
??\cf0\cb0\highlight0         \cf1 public\cf0  \cf1 static\cf0  \cf1 =
bool\cf0  GetIsAccessKeyScope(\cf7 DependencyObject\cf0  obj)\par ??     =
   \{\par ??            \cf1 return\cf0  (\cf1 bool\cf0 ) =
obj.GetValue(\cf7 AccessKeyScoper\cf0 .IsAccessKeyScopeProperty);\par ?? =
       \}\par ??\par ??        \cf1 private\cf0  \cf1 static\cf0  \cf1 =
void\cf0  HandleIsAccessKeyScopePropertyChanged(\cf7 =
DependencyObject\cf0  d, \cf7 DependencyPropertyChangedEventArgs\cf0  =
e)\par ??        \{\par ??            \cf1 if\cf0  =
(e.NewValue.Equals(\cf1 true\cf0 ))\par ??            \{\par ??          =
      \cf7 AccessKeyManager\cf0 .AddAccessKeyPressedHandler(d, =
HandleScopedElementAccessKeyPressed);\par ??            \}\par ??        =
    \cf1 else\par ??\cf0             \{\par ??                \cf7 =
AccessKeyManager\cf0 .RemoveAccessKeyPressedHandler(d, =
HandleScopedElementAccessKeyPressed);\par ??            \}\par ??        =
\}\par ??\par ??        \cf1 private\cf0  \cf1 static\cf0  \cf1 void\cf0 =
 HandleScopedElementAccessKeyPressed(\cf1 object\cf0  sender, \cf7 =
AccessKeyPressedEventArgs\cf0  e)\par ??        \{\par ??            =
\cf1 if\cf0  (!\cf7 Keyboard\cf0 .IsKeyDown(\cf7 Key\cf0 .LeftAlt) =
&amp;&amp; !\cf7 Keyboard\cf0 .IsKeyDown(\cf7 Key\cf0 .RightAlt) =
&amp;&amp; GetIsAccessKeyScope((\cf7 DependencyObject\cf0 )sender))\par =
??            \{\par ??                e.Scope =3D sender;\par ??        =
        e.Handled =3D \cf1 true\cf0 ;\par ??            \}\par ??        =
\}\par ??    \}\par ??\}\par ??}
--></P>
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN style=3D"COLOR: =
blue">using</SPAN>=20
      System;</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN style=3D"COLOR: =
blue">using</SPAN>=20
      System.Windows;</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN style=3D"COLOR: =
blue">using</SPAN>=20
      System.Windows.Input;</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2><SPAN=20
      style=3D"COLOR: blue">namespace</SPAN> =
WindowsApplication7</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>{</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;summary&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&nbsp;&nbsp;&nbsp;=20
      Class used to manage generic scoping of access =
keys</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;/summary&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: blue">public</SPAN> <SPAN style=3D"COLOR: =
blue">static</SPAN>=20
      <SPAN style=3D"COLOR: blue">class</SPAN> <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">AccessKeyScoper</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
{</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;summary&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&nbsp;&nbsp;&nbsp;=20
      Identifies the IsAccessKeyScope attached dependency=20
      property</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;/summary&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN style=3D"COLOR: blue">public</SPAN> <SPAN=20
      style=3D"COLOR: blue">static</SPAN> <SPAN=20
      style=3D"COLOR: blue">readonly</SPAN> <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">DependencyProperty</SPAN>=20
      IsAccessKeyScopeProperty =3D</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">DependencyProperty</SPAN>.RegisterAttached(<SPAN=20
      style=3D"COLOR: rgb(163,21,21)">"IsAccessKeyScope"</SPAN>, <SPAN=20
      style=3D"COLOR: blue">typeof</SPAN>(<SPAN style=3D"COLOR: =
blue">bool</SPAN>),=20
      <SPAN style=3D"COLOR: blue">typeof</SPAN>(<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">AccessKeyScoper</SPAN>), <SPAN=20
      style=3D"COLOR: blue">new</SPAN> <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">PropertyMetadata</SPAN>(<SPAN=20
      style=3D"COLOR: blue">false</SPAN>,=20
      HandleIsAccessKeyScopePropertyChanged));</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;summary&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&nbsp;&nbsp;&nbsp;=20
      Sets the IsAccessKeyScope attached property value for the =
specified=20
      object</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;/summary&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">&lt;param=20
      name=3D"obj"&gt;</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">The=20
      object to retrieve the value for</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;/param&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">&lt;param=20
      name=3D"value"&gt;</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">Whether=20
      the object is an access key scope</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;/param&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN style=3D"COLOR: blue">public</SPAN> <SPAN=20
      style=3D"COLOR: blue">static</SPAN> <SPAN style=3D"COLOR: =
blue">void</SPAN>=20
      SetIsAccessKeyScope(<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">DependencyObject</SPAN> obj, =
<SPAN=20
      style=3D"COLOR: blue">bool</SPAN> value)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; obj.SetValue(<SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">AccessKeyScoper</SPAN>.IsAccessKeyScopeProperty,=20
      value);</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;summary&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&nbsp;&nbsp;&nbsp;=20
      Gets the value of the IsAccessKeyScope attached property for the =
specified=20
      object</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;/summary&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">&lt;param=20
      name=3D"obj"&gt;</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">The=20
      object to retrieve the value for</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;/param&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;returns&gt;</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">The=20
      value of IsAccessKeyScope attached property for the specified=20
      object</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;/returns&gt;</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN style=3D"COLOR: blue">public</SPAN> <SPAN=20
      style=3D"COLOR: blue">static</SPAN> <SPAN style=3D"COLOR: =
blue">bool</SPAN>=20
      GetIsAccessKeyScope(<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">DependencyObject</SPAN> =
obj)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: blue">return</SPAN> =
(<SPAN=20
      style=3D"COLOR: blue">bool</SPAN>) obj.GetValue(<SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">AccessKeyScoper</SPAN>.IsAccessKeyScopeProperty);</FONT>=
</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN style=3D"COLOR: blue">private</SPAN> <SPAN=20
      style=3D"COLOR: blue">static</SPAN> <SPAN style=3D"COLOR: =
blue">void</SPAN>=20
      HandleIsAccessKeyScopePropertyChanged(<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">DependencyObject</SPAN></FONT> d, =
<FONT=20
      size=3D2><SPAN style=3D"COLOR: rgb(43,145,175)"></SPAN><SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">DependencyPropertyChangedEventArgs</SPAN>=20
      e)</FONT><BR></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: blue">if</SPAN>=20
      (e.NewValue.Equals(<SPAN style=3D"COLOR: =
blue">true</SPAN>))</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">AccessKeyManager</SPAN>.AddAccessKeyPressedHandler(d,=20
      HandleScopedElementAccessKeyPressed);</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: =
blue">else</SPAN></FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">AccessKeyManager</SPAN>.RemoveAccessKeyPressedHandler(d,=
=20
      HandleScopedElementAccessKeyPressed);</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2></FONT>&nbsp;</P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      <SPAN style=3D"COLOR: blue">private</SPAN> <SPAN=20
      style=3D"COLOR: blue">static</SPAN> <SPAN style=3D"COLOR: =
blue">void</SPAN>=20
      HandleScopedElementAccessKeyPressed(<SPAN=20
      style=3D"COLOR: blue">object</SPAN> sender, <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">AccessKeyPressedEventArgs</SPAN>=20
      e)</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: blue">if</SPAN> (!<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Keyboard</SPAN>.IsKeyDown(<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Key</SPAN>.LeftAlt) &amp;&amp; =
!<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Keyboard</SPAN>.IsKeyDown(<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Key</SPAN>.RightAlt) &amp;&amp;=20
      GetIsAccessKeyScope((<SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">DependencyObject</SPAN>)sender))</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; {</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; e.Scope =3D =
sender;</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; e.Handled =3D <SPAN=20
      style=3D"COLOR: blue">true</SPAN>;</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;=20
      }</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>&nbsp;&nbsp;&nbsp; =
}</FONT></P>
      <P style=3D"MARGIN: 0px"><FONT size=3D2>}</FONT></P></DIV>
      <P class=3Dpostfoot>posted @ <A title=3D"Permanent link to this =
post"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/09/19673.aspx">Monday=
,=20
      April 09, 2007 10:22 PM</A> | <A title=3D"comments, pingbacks, =
trackbacks"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/04/09/19673.aspx#feedbac=
k">Feedback=20
      (0)</A> </P></DIV>
      <P class=3Ddate><SPAN><A=20
      id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl07_DayItem_ImageLink=20
      title=3D"Day Archive" style=3D"DISPLAY: inline-block"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/03/27.aspx">Tuesday, =
March=20
      27, 2007</A> </SPAN></P>
      <DIV class=3Dpost>
      <H2><A=20
      =
id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl07_DayItem_DayList_ctl00_Title=
Url=20
      title=3D"Click To View Entry."=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/03/27/19657.aspx">WPF=20
      Bindings are lost when Navigating</A></H2>
      <P>I'm currently experiencing an annoying issue around Navigation =
in WPF.=20
      It involves when you navigate away and then back to a page that =
has=20
      elements with bindings.</P>
      <P>I am sure other people will experience this problem at some =
point or=20
      other, and am hoping that by writing this article and carrying out =
some=20
      investigations (and maybe with the help of a few <A title=3D"MSDN =
WPF Forum"=20
      =
href=3D"http://forums.microsoft.com/MSDN/ShowForum.aspx?ForumID=3D119&amp=
;SiteID=3D1"=20
      target=3D_blank>MSDN WPF Forum</A>ites!) I can get to the bottom =
of it.</P>
      <P>Firstly I will explain the situation.&nbsp; Our application =
consists of=20
      a main container window with a Frame and some content around the=20
      Frame.&nbsp; So far pretty standard really!&nbsp; <BR></P>
      <P>Each page sets the DataContext to an object which contains data =

      specific to that page and on one of our pages there is a =
CheckBox.&nbsp;=20
      That CheckBox binds the IsChecked DependencyProperty to a property =
on the=20
      class which is the DataContext of the page, like so:</P><!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\re=
d163\green21\blue21;\red255\green0\blue0;\red0\green0\blue0;}??\fs22 =
\cf1 &lt;\cf3 Page\cf1  \cf4 x:Class\cf1 =3D\cf0 "\cf1 =
WindowsApplication5.Page2\cf0 "\par ??\cf1     \cf4 xmlns\cf1 =3D\cf0 =
"\cf1 http://schemas.microsoft.com/winfx/2006/xaml/presentation\cf0 =
"\par ??\cf1     \cf4 xmlns:x\cf1 =3D\cf0 "\cf1 =
http://schemas.microsoft.com/winfx/2006/xaml\cf0 "\par ??\cf1     \cf4 =
Title\cf1 =3D\cf0 "\cf1 Page2\cf0 "\par ??\cf1     &gt;\par ??    =
&lt;\cf3 CheckBox\cf1  \cf4 Name\cf1 =3D\cf0 "\cf1 checkBox\cf0 "\cf1  =
\cf4 IsChecked\cf1 =3D\cf0 "\cf1 \{Binding Path=3DValue\}\cf0 "\cf1  =
\cf4 Content\cf1 =3D\cf0 "\cf1 Checked\cf0 "\cf1  /&gt;\par ??&lt;/\cf3 =
Page\cf1 &gt;\par ??}
-->
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Page</SPAN><SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">x:Class</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">WindowsApplication5.Page2</SPAN>"</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      </SPAN><SPAN style=3D"COLOR: red">xmlns</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: =
blue">http://schemas.microsoft.com/winfx/2006/xaml/presentation</SPAN>"</=
P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      </SPAN><SPAN style=3D"COLOR: red">xmlns:x</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: =
blue">http://schemas.microsoft.com/winfx/2006/xaml</SPAN>"</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      </SPAN><SPAN style=3D"COLOR: red">Title</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Page2</SPAN>"</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &lt;</SPAN><SPAN style=3D"COLOR: =
rgb(163,21,21)">CheckBox</SPAN><SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">Name</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">checkBox</SPAN>"<SPAN style=3D"COLOR: blue"> =

      </SPAN><SPAN style=3D"COLOR: red">IsChecked</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">{Binding=20
      Path=3DValue}</SPAN>"<SPAN style=3D"COLOR: blue"> </SPAN><SPAN=20
      style=3D"COLOR: red">Content</SPAN><SPAN style=3D"COLOR: =
blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">Checked</SPAN>"<SPAN style=3D"COLOR: blue">=20
      /&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&lt;/</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Page</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P></DIV><BR>And the codebehind =
looks like=20
      this<BR><BR><!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\re=
d0\green0\blue0;\red128\green128\blue128;\red243\green243\blue243;\red0\g=
reen128\blue0;\red43\green145\blue175;}??\fs22 \cf1 using\cf0  =
System;\par ??\cf1 using\cf0  System.Windows.Controls;\par ??\par ??\cf1 =
namespace\cf0  WindowsApplication5\par ??\{\par ??    =
\cf4\cb5\highlight5 ///\cf6  \cf4 &lt;summary&gt;\par =
??\cf0\cb0\highlight0     \cf4\cb5\highlight5 ///\cf6  Interaction logic =
for Page2.xaml\par ??\cf0\cb0\highlight0     \cf4\cb5\highlight5 ///\cf6 =
 \cf4 &lt;/summary&gt;\par ??\cf0\cb0\highlight0     \cf1 public\cf0  =
\cf1 partial\cf0  \cf1 class\cf0  \cf7 Page2\cf0  : \cf7 Page\par ??\cf0 =
    \{\par ??        \cf1 public\cf0  Page2()\par ??        \{\par ??    =
        InitializeComponent();\par ??            \cf1 this\cf0 =
.DataContext =3D \cf1 new\cf0  \cf7 MyClass\cf0 ();\par ??        \}\par =
??    \}\par ??\par ??    \cf1 public\cf0  \cf1 class\cf0  \cf7 =
MyClass\par ??\cf0     \{\par ??        \cf1 private\cf0  \cf1 bool\cf0  =
value =3D \cf1 true\cf0 ;\par ??        \cf1 public\cf0  \cf1 bool\cf0  =
Value \par ??        \{ \par ??            \cf1 get\cf0  \{ \cf1 =
return\cf0  \cf1 this\cf0 .value; \}\par ??            \cf1 set\cf0  \{ =
\cf1 this\cf0 .value =3D \cf1 value\cf0 ; \}\par ??        \}\par ??    =
\}\par ??\}}
-->
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: blue">using</SPAN> =
System;</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: blue">using</SPAN>=20
      System.Windows.Controls;</P>
      <P style=3D"MARGIN: 0px">&nbsp;</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">namespace</SPAN>=20
      WindowsApplication5</P>
      <P style=3D"MARGIN: 0px">{</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;summary&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      Interaction logic for Page2.xaml</SPAN></P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;/summary&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: blue">public</SPAN> <SPAN style=3D"COLOR: =
blue">partial</SPAN>=20
      <SPAN style=3D"COLOR: blue">class</SPAN> <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Page2</SPAN> : <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Page</SPAN></P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; {</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
<SPAN=20
      style=3D"COLOR: blue">public</SPAN> Page2()</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
{</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; InitializeComponent();</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: =
blue">this</SPAN>.DataContext =3D=20
      <SPAN style=3D"COLOR: blue">new</SPAN> <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">MyClass</SPAN>();</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
}</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; }</P>
      <P style=3D"MARGIN: 0px">&nbsp;</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: blue">public</SPAN> <SPAN style=3D"COLOR: =
blue">class</SPAN>=20
      <SPAN style=3D"COLOR: rgb(43,145,175)">MyClass</SPAN></P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; {</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
<SPAN=20
      style=3D"COLOR: blue">private</SPAN> <SPAN style=3D"COLOR: =
blue">bool</SPAN>=20
      value =3D <SPAN style=3D"COLOR: blue">true</SPAN>;</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
<SPAN=20
      style=3D"COLOR: blue">public</SPAN> <SPAN style=3D"COLOR: =
blue">bool</SPAN>=20
      Value </P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; { =
</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: blue">get</SPAN> { <SPAN=20
      style=3D"COLOR: blue">return</SPAN> <SPAN=20
      style=3D"COLOR: blue">this</SPAN>.value; }</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: blue">set</SPAN> { <SPAN=20
      style=3D"COLOR: blue">this</SPAN>.value =3D <SPAN=20
      style=3D"COLOR: blue">value</SPAN>; }</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
}</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; }</P>
      <P style=3D"MARGIN: 0px">}</P></DIV><BR>Fairly simple, but =
surprisingly this=20
      is enough code to demonstrate this problem.&nbsp; All you need to =
do is=20
      create another page with a Button and in the Click event of the =
Button=20
      Navigate to my Page2, like follows:<BR><BR><!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\re=
d163\green21\blue21;\red255\green0\blue0;\red0\green0\blue0;}??\fs22 =
\cf1 &lt;\cf3 Page\cf1  \cf4 x:Class\cf1 =3D\cf0 "\cf1 =
WindowsApplication5.Page1\cf0 "\par ??\cf1     \cf4 xmlns\cf1 =3D\cf0 =
"\cf1 http://schemas.microsoft.com/winfx/2006/xaml/presentation\cf0 =
"\par ??\cf1     \cf4 xmlns:x\cf1 =3D\cf0 "\cf1 =
http://schemas.microsoft.com/winfx/2006/xaml\cf0 "\par ??\cf1     \cf4 =
Title\cf1 =3D\cf0 "\cf1 Page1\cf0 "\par ??\cf1     &gt;\par ??    =
&lt;\cf3 Button\cf1  \cf4 Click\cf1 =3D\cf0 "\cf1 HandleButtonClick\cf0 =
"\cf1  \cf4 Content\cf1 =3D\cf0 "\cf1 Click\cf0 "\cf1  \cf4 =
HorizontalAlignment\cf1 =3D\cf0 "\cf1 Center\cf0 "\cf1  \cf4 =
VerticalAlignment\cf1 =3D\cf0 "\cf1 Center\cf0 "\cf1  /&gt;\par =
??&lt;/\cf3 Page\cf1 &gt;}
-->
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Page</SPAN><SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">x:Class</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">WindowsApplication5.Page1</SPAN>"</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      </SPAN><SPAN style=3D"COLOR: red">xmlns</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: =
blue">http://schemas.microsoft.com/winfx/2006/xaml/presentation</SPAN>"</=
P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      </SPAN><SPAN style=3D"COLOR: red">xmlns:x</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: =
blue">http://schemas.microsoft.com/winfx/2006/xaml</SPAN>"</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      </SPAN><SPAN style=3D"COLOR: red">Title</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Page1</SPAN>"</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &lt;</SPAN><SPAN style=3D"COLOR: =
rgb(163,21,21)">Button</SPAN><SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">Click</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">HandleButtonClick</SPAN>"<SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Content</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Click</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN=20
      style=3D"COLOR: red">HorizontalAlignment</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Center</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN=20
      style=3D"COLOR: red">VerticalAlignment</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Center</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> /&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&lt;/</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Page</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P></DIV><BR>And the code =
behind:<BR><BR><!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\re=
d0\green0\blue0;\red128\green128\blue128;\red243\green243\blue243;\red0\g=
reen128\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs22 =
\cf1 using\cf0  System;\par ??\cf1 using\cf0  System.Windows;\par ??\cf1 =
using\cf0  System.Windows.Controls;\par ??\par ??\cf1 namespace\cf0  =
WindowsApplication5\par ??\{\par ??    \cf4\cb5\highlight5 ///\cf6  \cf4 =
&lt;summary&gt;\par ??\cf0\cb0\highlight0     \cf4\cb5\highlight5 =
///\cf6  Interaction logic for Page1.xaml\par ??\cf0\cb0\highlight0     =
\cf4\cb5\highlight5 ///\cf6  \cf4 &lt;/summary&gt;\par =
??\cf0\cb0\highlight0     \cf1 public\cf0  \cf1 partial\cf0  \cf1 =
class\cf0  \cf7 Page1\cf0  : \cf7 Page\par ??\cf0     \{\par ??        =
\cf1 public\cf0  Page1()\par ??        \{\par ??            =
InitializeComponent();\par ??        \}\par ??\par ??        \cf1 =
private\cf0  \cf1 void\cf0  HandleButtonClick(\cf1 object\cf0  sender, =
\cf7 RoutedEventArgs\cf0  e)\par ??        \{\par ??            =
NavigationService.Navigate(\cf1 new\cf0  \cf7 Uri\cf0 (\cf8 =
"Page2.xaml"\cf0 , \cf7 UriKind\cf0 .Relative));\par ??        \}\par ?? =
   \}\par ??\}}
-->
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: blue">using</SPAN> =
System;</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: blue">using</SPAN>=20
      System.Windows;</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: blue">using</SPAN>=20
      System.Windows.Controls;</P>
      <P style=3D"MARGIN: 0px">&nbsp;</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">namespace</SPAN>=20
      WindowsApplication5</P>
      <P style=3D"MARGIN: 0px">{</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;summary&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      Interaction logic for Page1.xaml</SPAN></P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;/summary&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: blue">public</SPAN> <SPAN style=3D"COLOR: =
blue">partial</SPAN>=20
      <SPAN style=3D"COLOR: blue">class</SPAN> <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Page1</SPAN> : <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Page</SPAN></P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; {</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
<SPAN=20
      style=3D"COLOR: blue">public</SPAN> Page1()</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
{</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; InitializeComponent();</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
}</P>
      <P style=3D"MARGIN: 0px">&nbsp;</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
<SPAN=20
      style=3D"COLOR: blue">private</SPAN> <SPAN style=3D"COLOR: =
blue">void</SPAN>=20
      HandleButtonClick(<SPAN style=3D"COLOR: blue">object</SPAN> =
sender, <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">RoutedEventArgs</SPAN> e)</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
{</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; NavigationService.Navigate(<SPAN=20
      style=3D"COLOR: blue">new</SPAN> <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">Uri</SPAN>(<SPAN=20
      style=3D"COLOR: rgb(163,21,21)">"Page2.xaml"</SPAN>, <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">UriKind</SPAN>.Relative));</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
}</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; }</P>
      <P style=3D"MARGIN: 0px">}</P></DIV><BR>All is good and the =
CheckBox is=20
      checked as expected, and checking and unchecking it toggles the =
Value=20
      property of my MyClass instance.<BR><BR>Now Navigate back to =
Page1, and=20
      forward again to Page2, using the Back and Forward buttons on the=20
      Frame.&nbsp; The CheckBox is no longer checked.&nbsp; This is =
strange as=20
      it is bound to MyClass.Value, which is definitely True!&nbsp; =
Furthermore,=20
      toggling the CheckBox Checked does absolutely nothing to =
property.&nbsp;=20
      This indicates that binding has actually been lost =
completely.<BR><BR>This=20
      is the code for the Window which contains the Frame.<BR><BR><!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\re=
d163\green21\blue21;\red255\green0\blue0;\red0\green0\blue0;}??\fs22 =
\cf1 &lt;\cf3 Window\cf1  \cf4 x:Class\cf1 =3D\cf0 "\cf1 =
WindowsApplication5.Window1\cf0 "\par ??\cf1     \cf4 xmlns\cf1 =3D\cf0 =
"\cf1 http://schemas.microsoft.com/winfx/2006/xaml/presentation\cf0 =
"\par ??\cf1     \cf4 xmlns:x\cf1 =3D\cf0 "\cf1 =
http://schemas.microsoft.com/winfx/2006/xaml\cf0 "\par ??\cf1     \cf4 =
Title\cf1 =3D\cf0 "\cf1 WindowsApplication5\cf0 "\cf1  \cf4 Height\cf1 =
=3D\cf0 "\cf1 300\cf0 "\cf1  \cf4 Width\cf1 =3D\cf0 "\cf1 300\cf0 "\par =
??\cf1     &gt;\par ??    &lt;\cf3 Frame\cf1  \cf4 Source\cf1 =3D\cf0 =
"\cf1 Page1.xaml\cf0 "\cf1  /&gt;\par ??&lt;/\cf3 Window\cf1 &gt;\par =
??}
-->
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Window</SPAN><SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">x:Class</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">WindowsApplication5.Window1</SPAN>"</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      </SPAN><SPAN style=3D"COLOR: red">xmlns</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: =
blue">http://schemas.microsoft.com/winfx/2006/xaml/presentation</SPAN>"</=
P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      </SPAN><SPAN style=3D"COLOR: red">xmlns:x</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: =
blue">http://schemas.microsoft.com/winfx/2006/xaml</SPAN>"</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      </SPAN><SPAN style=3D"COLOR: red">Title</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">WindowsApplication5</SPAN>"<SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Height</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">300</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">Width</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">300</SPAN>"</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &lt;</SPAN><SPAN style=3D"COLOR: rgb(163,21,21)">Frame</SPAN><SPAN =

      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">Source</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">Page1.xaml</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      /&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&lt;/</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Window</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P></DIV><BR>And that's it =
really... i'll=20
      probably get into more discussion on <A=20
      =
href=3D"http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=3D1394850&a=
mp;SiteID=3D1"=20
      target=3D_blank>this forum post</A><BR><BR><SPAN=20
      style=3D"FONT-WEIGHT: bold">[Update - 19 Apr 07]</SPAN><BR=20
      style=3D"FONT-WEIGHT: bold"><BR>Well it turns out this is a known =
and quite=20
      high priority bug in WPF.&nbsp; The bug is that Dependency =
Properties=20
      which are set to Journal do not retake their bindings once they =
are=20
      restored from the journal.&nbsp; All I can say is bring on .NET3=20
      SP1!<BR><BR>We tried coming up with our own alternative =
workarounds, but=20
      none of them worked.&nbsp; It seems the only real solution is the =
one=20
      given by Chango, which was to create our own derived class to use =
instead=20
      of CheckBox.&nbsp; The problem also exists for TextBox.Text,=20
      RadioButton.IsChecked, ItemsControl.SelectedIndex (which =
fortunately we=20
      aren't binding anywhere in our application) and probably some=20
      others.<BR><BR>Therefore if you replace the CheckBox in my example =
app=20
      with the following CheckBox, everything works as =
expected.<BR><BR><!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red1=
28\green128\blue128;\red243\green243\blue243;\red0\green128\blue0;\red0\g=
reen0\blue255;\red43\green145\blue175;}??\fs22     \cf3\cb4\highlight4 =
///\cf5  \cf3 &lt;summary&gt;\par ??\cf0\cb0\highlight0     =
\cf3\cb4\highlight4 ///\cf5      CheckBox which doesn't journal the =
IsChecked property\par ??\cf0\cb0\highlight0     \cf3\cb4\highlight4 =
///\cf5  \cf3 &lt;/summary&gt;\par ??\cf0\cb0\highlight0     \cf6 =
public\cf0  \cf6 class\cf0  \cf7 CheckBox\cf0  : =
System.Windows.Controls.\cf7 CheckBox\par ??\cf0     \{\par ??        =
\cf6 static\cf0  CheckBox()\par ??        \{\par ??            \cf5 // =
Override the metadata by omitting the =
FrameworkPropertyMetadataOptions.Journal flag.\par ??\cf0             =
\cf7 FrameworkPropertyMetadata\cf0  newMeta =3D \cf6 new\cf0  \cf7 =
FrameworkPropertyMetadata\cf0 ();\par ??            newMeta.Journal =3D =
\cf6 false\cf0 ;\par ??            =
IsCheckedProperty.OverrideMetadata(\cf6 typeof\cf0  (\cf7 CheckBox\cf0 =
), newMeta);\par ??        \}\par ??    \}}
-->
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">namespace</SPAN>=20
      WindowsApplication5</P>
      <P style=3D"MARGIN: 0px">{</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;summary&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&nbsp;&nbsp;&nbsp;=20
      CheckBox which doesn't journal the IsChecked property</SPAN></P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">///</SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: green; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: -moz-initial">=20
      </SPAN><SPAN=20
      style=3D"BACKGROUND: rgb(243,243,243) 0% 50%; COLOR: gray; =
-moz-background-clip: -moz-initial; -moz-background-origin: =
-moz-initial; -moz-background-inline-policy: =
-moz-initial">&lt;/summary&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: blue">public</SPAN> <SPAN style=3D"COLOR: =
blue">class</SPAN>=20
      <SPAN style=3D"COLOR: rgb(43,145,175)">CheckBox</SPAN> :=20
      System.Windows.Controls.<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">CheckBox</SPAN></P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; {</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
<SPAN=20
      style=3D"COLOR: blue">static</SPAN> CheckBox()</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
{</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN style=3D"COLOR: green">// Override the =
metadata by=20
      omitting the FrameworkPropertyMetadataOptions.Journal =
flag.</SPAN></P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; <SPAN=20
      style=3D"COLOR: rgb(43,145,175)">FrameworkPropertyMetadata</SPAN> =
newMeta =3D=20
      <SPAN style=3D"COLOR: blue">new</SPAN> <SPAN=20
      style=3D"COLOR: =
rgb(43,145,175)">FrameworkPropertyMetadata</SPAN>();</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; newMeta.Journal =3D <SPAN=20
      style=3D"COLOR: blue">false</SPAN>;</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; IsCheckedProperty.OverrideMetadata(<SPAN=20
      style=3D"COLOR: blue">typeof</SPAN> (<SPAN=20
      style=3D"COLOR: rgb(43,145,175)">CheckBox</SPAN>), newMeta);</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
}</P>
      <P style=3D"MARGIN: 0px">&nbsp;&nbsp;&nbsp; }</P>
      <P style=3D"MARGIN: 0px">}</P><BR>
      <P style=3D"MARGIN: 0px">&nbsp;</P>
      <P style=3D"MARGIN: 0px"><BR></P></DIV>
      <P class=3Dpostfoot>posted @ <A title=3D"Permanent link to this =
post"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/03/27/19657.aspx">Tuesda=
y,=20
      March 27, 2007 12:46 AM</A> | <A title=3D"comments, pingbacks, =
trackbacks"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/03/27/19657.aspx#feedbac=
k">Feedback=20
      (0)</A> </P></DIV>
      <P class=3Ddate><SPAN><A=20
      id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl08_DayItem_ImageLink=20
      title=3D"Day Archive" style=3D"DISPLAY: inline-block"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/02/05.aspx">Monday,=20
      February 05, 2007</A> </SPAN></P>
      <DIV class=3Dpost>
      <H2><A=20
      =
id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl08_DayItem_DayList_ctl00_Title=
Url=20
      title=3D"Click To View Entry."=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/02/05/19596.aspx">Using =
a=20
      ComboBox to select an Enum value in XAML</A></H2>
      <P>It is often a requirement in UI to provide&nbsp;a combo box =
which is=20
      used to select an Enum value.&nbsp; There are many ways to achieve =
this=20
      task.&nbsp; However, some are more elegant than others.&nbsp; Here =
I=20
      present a simple way to do&nbsp;this which uses nothing but =
XAML.</P>
      <P>Firstly, we wish to get all the possible values of the Enum and =
set=20
      them to the ItemsSource of the&nbsp;ComboBox.&nbsp; For this, we =
can=20
      utilise the static GetValues() method on the Enum class.&nbsp; =
This can be=20
      done in XAML using an ObjectDataProvider.&nbsp; We then bind the=20
      ItemsSource property of our ComboBox to the =
ObjectDataProvider.</P>
      <P>For this example, I am displaying the "BindingMode" enumeration =
which=20
      is built into WPF.<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\re=
d163\green21\blue21;\red255\green0\blue0;\red0\green0\blue0;\red0\green12=
8\blue0;}??\fs22 \cf1 &lt;\cf3 Page\par ??\cf1   \cf4 xmlns\cf1 =3D\cf0 =
"\cf1 http://schemas.microsoft.com/winfx/2006/xaml/presentation\cf0 =
"\par ??\cf1   \cf4 xmlns:x\cf1 =3D\cf0 "\cf1 =
http://schemas.microsoft.com/winfx/2006/xaml\cf0 "\par ??\cf1   \cf4 =
xmlns:sys\cf1 =3D\cf0 "\cf1 clr-namespace:System;assembly=3Dmscorlib\cf0 =
"\par ??\cf1 &gt;\par ??\par ??    &lt;\cf3 Page.Resources\cf1 &gt;\par =
??        &lt;-\cf6  Enumerates all the possible values of the =
enumeration we are interested in \cf1-&gt;\par ??        &lt;\cf3 =
ObjectDataProvider\cf1  \cf4 MethodName\cf1 =3D\cf0 "\cf1 GetValues\cf0 =
"\cf1  \cf4 ObjectType\cf1 =3D\cf0 "\cf1 \{x:Type sys:Enum\}\cf0 "\cf1  =
\cf4 x:Key\cf1 =3D\cf0 "\cf1 PossibleValues\cf0 "\cf1 &gt;\par ??        =
    &lt;\cf3 ObjectDataProvider.MethodParameters\cf1 &gt;\par ??         =
       &lt;\cf3 x:Type\cf1  \cf4 TypeName\cf1 =3D\cf0 "\cf1 =
BindingMode\cf0 "\cf1  /&gt;\par ??            &lt;/\cf3 =
ObjectDataProvider.MethodParameters\cf1 &gt;\par ??        &lt;/\cf3 =
ObjectDataProvider\cf1 &gt;\par ??\par ??        &lt;-\cf6  Provides a =
template for the items in the combo box \cf1-&gt;\par ??        &lt;\cf3 =
DataTemplate\cf1  \cf4 DataType\cf1 =3D\cf0 "\cf1 \{x:Type =
BindingMode\}\cf0 "\cf1 &gt;\par ??            &lt;\cf3 TextBlock\cf1  =
\cf4 Text\cf1 =3D\cf0 "\cf1 \{Binding\}\cf0 "\cf1  \cf4 x:Name\cf1 =
=3D\cf0 "\cf1 PART_Text\cf0 "\cf1  /&gt;\par ??            &lt;\cf3 =
DataTemplate.Triggers\cf1 &gt;\par ??                &lt;\cf3 =
DataTrigger\cf1  \cf4 Binding\cf1 =3D\cf0 "\cf1 \{Binding\}\cf0 "\cf1  =
\cf4 Value\cf1 =3D\cf0 "\cf1 OneWay\cf0 "\cf1 &gt;\par ??                =
    &lt;\cf3 Setter\cf1  \cf4 TargetName\cf1 =3D\cf0 "\cf1 PART_Text\cf0 =
"\cf1  \cf4 Property\cf1 =3D\cf0 "\cf1 Text\cf0 "\cf1  \cf4 Value\cf1 =
=3D\cf0 "\cf1 One way binding\cf0 "\cf1  /&gt;\par ??                    =
&lt;\cf3 Setter\cf1  \cf4 TargetName\cf1 =3D\cf0 "\cf1 PART_Text\cf0 =
"\cf1  \cf4 Property\cf1 =3D\cf0 "\cf1 FontWeight\cf0 "\cf1  \cf4 =
Value\cf1 =3D\cf0 "\cf1 Bold\cf0 "\cf1  /&gt;\par ??                =
&lt;/\cf3 DataTrigger\cf1 &gt;\par ??                &lt;\cf3 =
DataTrigger\cf1  \cf4 Binding\cf1 =3D\cf0 "\cf1 \{Binding\}\cf0 "\cf1  =
\cf4 Value\cf1 =3D\cf0 "\cf1 TwoWay\cf0 "\cf1 &gt;\par ??                =
    &lt;\cf3 Setter\cf1  \cf4 TargetName\cf1 =3D\cf0 "\cf1 PART_Text\cf0 =
"\cf1  \cf4 Property\cf1 =3D\cf0 "\cf1 Text\cf0 "\cf1  \cf4 Value\cf1 =
=3D\cf0 "\cf1 Two Way Binding\cf0 "\cf1  /&gt;\par ??                =
&lt;/\cf3 DataTrigger\cf1 &gt;\par ??                &lt;\cf3 =
DataTrigger\cf1  \cf4 Binding\cf1 =3D\cf0 "\cf1 \{Binding\}\cf0 "\cf1  =
\cf4 Value\cf1 =3D\cf0 "\cf1 OneTime\cf0 "\cf1 &gt;\par ??               =
     &lt;\cf3 Setter\cf1  \cf4 TargetName\cf1 =3D\cf0 "\cf1 =
PART_Text\cf0 "\cf1  \cf4 Property\cf1 =3D\cf0 "\cf1 Visibility\cf0 =
"\cf1  \cf4 Value\cf1 =3D\cf0 "\cf1 Collapsed\cf0 "\cf1  /&gt;\par ??    =
            &lt;/\cf3 DataTrigger\cf1 &gt;\par ??                =
&lt;\cf3 DataTrigger\cf1  \cf4 Binding\cf1 =3D\cf0 "\cf1 \{Binding\}\cf0 =
"\cf1  \cf4 Value\cf1 =3D\cf0 "\cf1 OneWayToSource\cf0 "\cf1 &gt;\par ?? =
                   &lt;\cf3 Setter\cf1  \cf4 TargetName\cf1 =3D\cf0 =
"\cf1 PART_Text\cf0 "\cf1  \cf4 Property\cf1 =3D\cf0 "\cf1 Text\cf0 =
"\cf1  \cf4 Value\cf1 =3D\cf0 "\cf1 One Way To Source Binding\cf0 "\cf1  =
/&gt;\par ??                &lt;/\cf3 DataTrigger\cf1 &gt;\par ??        =
        &lt;\cf3 DataTrigger\cf1  \cf4 Binding\cf1 =3D\cf0 "\cf1 =
\{Binding\}\cf0 "\cf1  \cf4 Value\cf1 =3D\cf0 "\cf1 Default\cf0 "\cf1 =
&gt;\par ??                    &lt;\cf3 Setter\cf1  \cf4 TargetName\cf1 =
=3D\cf0 "\cf1 PART_Text\cf0 "\cf1  \cf4 Property\cf1 =3D\cf0 "\cf1 =
Text\cf0 "\cf1  \cf4 Value\cf1 =3D\cf0 "\cf1 Default Binding\cf0 "\cf1  =
/&gt;\par ??                &lt;/\cf3 DataTrigger\cf1 &gt;\par ??        =
    &lt;/\cf3 DataTemplate.Triggers\cf1 &gt;\par ??        &lt;/\cf3 =
DataTemplate\cf1 &gt;\par ??\par ??    &lt;/\cf3 Page.Resources\cf1 =
&gt;\par ??\par ??    &lt;\cf3 ComboBox\cf1  \cf4 ItemsSource\cf1 =
=3D\cf0 "\cf1 \{Binding Source=3D\{StaticResource PossibleValues\}\}\cf0 =
"\cf1  \cf4 SelectedValue\cf1 =3D\cf0 "\cf1 \{Binding =
Source=3D\{StaticResource PossibleValues\}, Path=3D[4]\}\cf0 "\cf1  \cf4 =
HorizontalAlignment\cf1 =3D\cf0 "\cf1 Center\cf0 "\cf1  \cf4 =
VerticalAlignment\cf1 =3D\cf0 "\cf1 Center\cf0 "\cf1  /&gt;\par ??\par =
??&lt;/\cf3 Page\cf1 &gt;}
--> </P>
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Page</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: blue">&nbsp; =
</SPAN><SPAN=20
      style=3D"COLOR: red">xmlns</SPAN><SPAN style=3D"COLOR: =
blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: =
blue">http://schemas.microsoft.com/winfx/2006/xaml/presentation</SPAN>"</=
P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: blue">&nbsp; =
</SPAN><SPAN=20
      style=3D"COLOR: red">xmlns:x</SPAN><SPAN style=3D"COLOR: =
blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: =
blue">http://schemas.microsoft.com/winfx/2006/xaml</SPAN>"</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: blue">&nbsp; =
</SPAN><SPAN=20
      style=3D"COLOR: red">xmlns:sys</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: =
blue">clr-namespace:System;assembly=3Dmscorlib</SPAN>"</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px">&nbsp;</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &lt;</SPAN><SPAN style=3D"COLOR: =
rgb(163,21,21)">Page.Resources</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">ObjectDataProvider</SPAN><SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN=20
      style=3D"COLOR: red">MethodName</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">GetValues</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">ObjectType</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">{x:Type=20
      sys:Enum}</SPAN>"<SPAN style=3D"COLOR: blue"> </SPAN><SPAN=20
      style=3D"COLOR: red">x:Key</SPAN><SPAN style=3D"COLOR: =
blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">PossibleValues</SPAN>"<SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: =
rgb(163,21,21)">ObjectDataProvider.MethodParameters</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
&lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">x:Type</SPAN><SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">TypeName</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">BindingMode</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      /&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/</SPAN><SPAN=20
      style=3D"COLOR: =
rgb(163,21,21)">ObjectDataProvider.MethodParameters</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;/</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">ObjectDataProvider</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &lt;/</SPAN><SPAN style=3D"COLOR: =
rgb(163,21,21)">Page.Resources</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px">&nbsp;</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &lt;</SPAN><SPAN style=3D"COLOR: =
rgb(163,21,21)">ComboBox</SPAN><SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN=20
      style=3D"COLOR: red">ItemsSource</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">{Binding=20
      Source=3D{StaticResource PossibleValues}}</SPAN>"<SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">SelectedValue</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">{Binding=20
      Source=3D{StaticResource PossibleValues}, Path=3D[4]}</SPAN>"<SPAN =

      style=3D"COLOR: blue"> </SPAN><SPAN=20
      style=3D"COLOR: red">HorizontalAlignment</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Center</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN=20
      style=3D"COLOR: red">VerticalAlignment</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Center</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> /&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px">&nbsp;</P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&lt;/</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Page</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P></DIV><BR><BR>Note that in =
order to use=20
      the GetValues() method, we need to include a reference to the =
System=20
      namespace in the mscorlib assembly.<BR><BR>So now we have a =
ComboBox which=20
      looks something like this:<BR><BR><IMG height=3D132 alt=3D"" =
src=3D""=20
      width=3D135><BR>Well that's all good, but we can do better than =
that!&nbsp;=20
      In most applications we want to provide descriptive text for the =
values=20
      than just the ToString() of the Enum.&nbsp; <BR><BR>As usual,=20
      DataTemplates come to our rescue - we can do it as =
follows:<BR><BR><!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 =
\deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 =
Consolas;}}{\colortbl;??\red0\green0\blue255;\red255\green255\blue255;\re=
d163\green21\blue21;\red255\green0\blue0;\red0\green0\blue0;}??\fs22 =
\cf1         &lt;\cf3 DataTemplate\cf1  \cf4 DataType\cf1 =3D\cf0 "\cf1 =
\{x:Type BindingMode\}\cf0 "\cf1 &gt;\par ??            &lt;\cf3 =
TextBlock\cf1  \cf4 Text\cf1 =3D\cf0 "\cf1 \{Binding\}\cf0 "\cf1  \cf4 =
x:Name\cf1 =3D\cf0 "\cf1 PART_Text\cf0 "\cf1  /&gt;\par ??            =
&lt;\cf3 DataTemplate.Triggers\cf1 &gt;\par ??                &lt;\cf3 =
DataTrigger\cf1  \cf4 Binding\cf1 =3D\cf0 "\cf1 \{Binding\}\cf0 "\cf1  =
\cf4 Value\cf1 =3D\cf0 "\cf1 OneWay\cf0 "\cf1 &gt;\par ??                =
    &lt;\cf3 Setter\cf1  \cf4 TargetName\cf1 =3D\cf0 "\cf1 PART_Text\cf0 =
"\cf1  \cf4 Property\cf1 =3D\cf0 "\cf1 Text\cf0 "\cf1  \cf4 Value\cf1 =
=3D\cf0 "\cf1 One way binding\cf0 "\cf1  /&gt;\par ??                    =
&lt;\cf3 Setter\cf1  \cf4 TargetName\cf1 =3D\cf0 "\cf1 PART_Text\cf0 =
"\cf1  \cf4 Property\cf1 =3D\cf0 "\cf1 FontWeight\cf0 "\cf1  \cf4 =
Value\cf1 =3D\cf0 "\cf1 Bold\cf0 "\cf1  /&gt;\par ??                =
&lt;/\cf3 DataTrigger\cf1 &gt;\par ??                &lt;\cf3 =
DataTrigger\cf1  \cf4 Binding\cf1 =3D\cf0 "\cf1 \{Binding\}\cf0 "\cf1  =
\cf4 Value\cf1 =3D\cf0 "\cf1 TwoWay\cf0 "\cf1 &gt;\par ??                =
    &lt;\cf3 Setter\cf1  \cf4 TargetName\cf1 =3D\cf0 "\cf1 PART_Text\cf0 =
"\cf1  \cf4 Property\cf1 =3D\cf0 "\cf1 Text\cf0 "\cf1  \cf4 Value\cf1 =
=3D\cf0 "\cf1 Two Way Binding\cf0 "\cf1  /&gt;\par ??                =
&lt;/\cf3 DataTrigger\cf1 &gt;\par ??                &lt;\cf3 =
DataTrigger\cf1  \cf4 Binding\cf1 =3D\cf0 "\cf1 \{Binding\}\cf0 "\cf1  =
\cf4 Value\cf1 =3D\cf0 "\cf1 OneTime\cf0 "\cf1 &gt;\par ??               =
     &lt;\cf3 Setter\cf1  \cf4 TargetName\cf1 =3D\cf0 "\cf1 =
PART_Text\cf0 "\cf1  \cf4 Property\cf1 =3D\cf0 "\cf1 Visibility\cf0 =
"\cf1  \cf4 Value\cf1 =3D\cf0 "\cf1 Collapsed\cf0 "\cf1  /&gt;\par ??    =
            &lt;/\cf3 DataTrigger\cf1 &gt;\par ??                =
&lt;\cf3 DataTrigger\cf1  \cf4 Binding\cf1 =3D\cf0 "\cf1 \{Binding\}\cf0 =
"\cf1  \cf4 Value\cf1 =3D\cf0 "\cf1 OneWayToSource\cf0 "\cf1 &gt;\par ?? =
                   &lt;\cf3 Setter\cf1  \cf4 TargetName\cf1 =3D\cf0 =
"\cf1 PART_Text\cf0 "\cf1  \cf4 Property\cf1 =3D\cf0 "\cf1 Text\cf0 =
"\cf1  \cf4 Value\cf1 =3D\cf0 "\cf1 One Way To Source Binding\cf0 "\cf1  =
/&gt;\par ??                &lt;/\cf3 DataTrigger\cf1 &gt;\par ??        =
        &lt;\cf3 DataTrigger\cf1  \cf4 Binding\cf1 =3D\cf0 "\cf1 =
\{Binding\}\cf0 "\cf1  \cf4 Value\cf1 =3D\cf0 "\cf1 Default\cf0 "\cf1 =
&gt;\par ??                    &lt;\cf3 Setter\cf1  \cf4 TargetName\cf1 =
=3D\cf0 "\cf1 PART_Text\cf0 "\cf1  \cf4 Property\cf1 =3D\cf0 "\cf1 =
Text\cf0 "\cf1  \cf4 Value\cf1 =3D\cf0 "\cf1 Default Binding\cf0 "\cf1  =
/&gt;\par ??                &lt;/\cf3 DataTrigger\cf1 &gt;\par ??        =
    &lt;/\cf3 DataTemplate.Triggers\cf1 &gt;\par ??        &lt;/\cf3 =
DataTemplate\cf1 &gt;}
-->
      <DIV=20
      style=3D"FONT-SIZE: 11pt; BACKGROUND: white 0% 50%; COLOR: black; =
FONT-FAMILY: Consolas; -moz-background-clip: -moz-initial; =
-moz-background-origin: -moz-initial; -moz-background-inline-policy: =
-moz-initial">
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">DataTemplate</SPAN><SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">DataType</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">{x:Type=20
      BindingMode}</SPAN>"<SPAN style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">TextBlock</SPAN><SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Text</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">{Binding}</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">x:Name</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">PART_Text</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      /&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">DataTemplate.Triggers</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
&lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">DataTrigger</SPAN><SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Binding</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">{Binding}</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Value</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">OneWay</SPAN>"<SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Setter</SPAN><SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">TargetName</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">PART_Text</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Property</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Text</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">Value</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: blue">One =
way=20
      binding</SPAN>"<SPAN style=3D"COLOR: blue"> /&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Setter</SPAN><SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">TargetName</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">PART_Text</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Property</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">FontWeight</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Value</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Bold</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> /&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
&lt;/</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">DataTrigger</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
&lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">DataTrigger</SPAN><SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Binding</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">{Binding}</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Value</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">TwoWay</SPAN>"<SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Setter</SPAN><SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">TargetName</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">PART_Text</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Property</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Text</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">Value</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: blue">Two =
Way=20
      Binding</SPAN>"<SPAN style=3D"COLOR: blue"> /&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
&lt;/</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">DataTrigger</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
&lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">DataTrigger</SPAN><SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Binding</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">{Binding}</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Value</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">OneTime</SPAN>"<SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Setter</SPAN><SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">TargetName</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">PART_Text</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Property</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">Visibility</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Value</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">Collapsed</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      /&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
&lt;/</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">DataTrigger</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
&lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">DataTrigger</SPAN><SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Binding</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">{Binding}</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Value</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">OneWayToSource</SPAN>"<SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Setter</SPAN><SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">TargetName</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">PART_Text</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Property</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Text</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">Value</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: blue">One =
Way To Source=20
      Binding</SPAN>"<SPAN style=3D"COLOR: blue"> /&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
&lt;/</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">DataTrigger</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
&lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">DataTrigger</SPAN><SPAN =
style=3D"COLOR: blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Binding</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">{Binding}</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Value</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">Default</SPAN>"<SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">Setter</SPAN><SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">TargetName</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN=20
      style=3D"COLOR: blue">PART_Text</SPAN>"<SPAN style=3D"COLOR: =
blue">=20
      </SPAN><SPAN style=3D"COLOR: red">Property</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Text</SPAN>"<SPAN=20
      style=3D"COLOR: blue"> </SPAN><SPAN style=3D"COLOR: =
red">Value</SPAN><SPAN=20
      style=3D"COLOR: blue">=3D</SPAN>"<SPAN style=3D"COLOR: =
blue">Default=20
      Binding</SPAN>"<SPAN style=3D"COLOR: blue"> /&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; =
&lt;/</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">DataTrigger</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">DataTemplate.Triggers</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P>
      <P style=3D"MARGIN: 0px"><SPAN style=3D"COLOR: =
blue">&nbsp;&nbsp;&nbsp;=20
      &nbsp;&nbsp;&nbsp; &lt;/</SPAN><SPAN=20
      style=3D"COLOR: rgb(163,21,21)">DataTemplate</SPAN><SPAN=20
      style=3D"COLOR: blue">&gt;</SPAN></P></DIV><BR>Here we simply =
place the Enum=20
      value into a TextBlock, then use the Triggers of the DataTemplate =
to set=20
      properties on the TextBlock we created.&nbsp; Note we don't just =
change=20
      the text, we set some to bold (OneWay), and even remove those that =
we=20
      don't want the user to select (OneTime).&nbsp; <BR><BR>Here is the =
final=20
      ComboBox:<BR><BR><IMG height=3D109 alt=3D"" src=3D"" =
width=3D194><BR><BR>I could=20
      have been more adventurous and used some images or colours or =
anything=20
      really in the DataTemplate, but I hope this example is enough to=20
      demonstrate what you can achieve.=20
      <P class=3Dpostfoot>posted @ <A title=3D"Permanent link to this =
post"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/02/05/19596.aspx">Monday=
,=20
      February 05, 2007 7:40 PM</A> | <A title=3D"comments, pingbacks, =
trackbacks"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2007/02/05/19596.aspx#feedbac=
k">Feedback=20
      (0)</A> </P></DIV>
      <P class=3Ddate><SPAN><A=20
      id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl09_DayItem_ImageLink=20
      title=3D"Day Archive" style=3D"DISPLAY: inline-block"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/12/31.aspx">Sunday,=20
      December 31, 2006</A> </SPAN></P>
      <DIV class=3Dpost>
      <H2><A=20
      =
id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl09_DayItem_DayList_ctl00_Title=
Url=20
      title=3D"Click To View Entry."=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/12/31/19546.aspx">WPF/E =
Pad=20
      (XAMLPad in the browser)</A></H2>
      <P>One of my favourite little WPF/E applications here</P>
      <P><A title=3Dhttp://www.simplegeek.com/mharsh/wpfepad/=20
      =
href=3D"http://www.simplegeek.com/mharsh/wpfepad/">http://www.simplegeek.=
com/mharsh/wpfepad/</A></P>
      <P>He has uploaded lots of samples of rendered XAML (presumably =
rendered=20
      from some 3D editing package) with live edit and preview.&nbsp; =
Works very=20
      similar to the XAMLPad that comes with Windows SDK.</P>
      <P>All you need&nbsp;is the&nbsp;WPF/E preview plugin from =
Microsoft (a=20
      tiny download which Firefox unfortunately doesn't yet install=20
      automatically).</P>
      <P>Now you can't do that in Flash, can you?</P>
      <P class=3Dpostfoot>posted @ <A title=3D"Permanent link to this =
post"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/12/31/19546.aspx">Sunday=
,=20
      December 31, 2006 3:54 PM</A> | <A title=3D"comments, pingbacks, =
trackbacks"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/12/31/19546.aspx#feedbac=
k">Feedback=20
      (3)</A> </P></DIV>
      <P class=3Ddate><SPAN><A=20
      id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl10_DayItem_ImageLink=20
      title=3D"Day Archive" style=3D"DISPLAY: inline-block"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/12/29.aspx">Friday,=20
      December 29, 2006</A> </SPAN></P>
      <DIV class=3Dpost>
      <H2><A=20
      =
id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl10_DayItem_DayList_ctl00_Title=
Url=20
      title=3D"Click To View Entry."=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/12/29/19538.aspx">WPF/XA=
ML=20
      - x:Type and nested classes</A></H2>
      <P>Well now I am getting started with XAML and WPF I am hoping to =
start=20
      blogging a bit more! So I was trying to reference a nested type =
with the=20
      {x:Type} markup extension and it wasn't working.</P>
      <P>Say you have a class as follows: <BR><BR><I>public class =
MyClass <BR>{=20
      <BR>&nbsp;&nbsp;public class MyInnerClass { } <BR>} </I>
      <P>
      <P>You want to reference the inner class (e.g. for a =
DataTemplate). The=20
      following XAML does not work</P>
      <P><I>&lt;DataTemplate DataType=3D"{x:Type=20
MyClass.MyInnerClass}"&gt;</I></P>
      <P>What you need to do is:
      <P>
      <P><I>&lt;DataTemplate DataType=3D"{x:Type=20
MyClass+MyInnerClass}"&gt;</I></P>
      <P>Thanks to <A href=3D"http://serialseb.blogspot.com/">Seb</A> =
for the hint=20
      on that one!</P>
      <P class=3Dpostfoot>posted @ <A title=3D"Permanent link to this =
post"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/12/29/19538.aspx">Friday=
,=20
      December 29, 2006 3:41 PM</A> | <A title=3D"comments, pingbacks, =
trackbacks"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/12/29/19538.aspx#feedbac=
k">Feedback=20
      (4)</A> </P></DIV>
      <P class=3Ddate><SPAN><A=20
      id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl11_DayItem_ImageLink=20
      title=3D"Day Archive" style=3D"DISPLAY: inline-block"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/05/23.aspx">Tuesday, =
May=20
      23, 2006</A> </SPAN></P>
      <DIV class=3Dpost>
      <H2><A=20
      =
id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl11_DayItem_DayList_ctl00_Title=
Url=20
      title=3D"Click To View Entry."=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/05/23/13250.aspx">Reshar=
per=20
      2 Released!</A></H2>Finally.. the wait is over.. I am downloading =
now!=20
      <P class=3Dpostfoot>posted @ <A title=3D"Permanent link to this =
post"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/05/23/13250.aspx">Tuesda=
y,=20
      May 23, 2006 10:19 AM</A> | <A title=3D"comments, pingbacks, =
trackbacks"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/05/23/13250.aspx#feedbac=
k">Feedback=20
      (4)</A> </P></DIV>
      <P class=3Ddate><SPAN><A=20
      id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl12_DayItem_ImageLink=20
      title=3D"Day Archive" style=3D"DISPLAY: inline-block"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/04/06.aspx">Thursday, =
April=20
      06, 2006</A> </SPAN></P>
      <DIV class=3Dpost>
      <H2><A=20
      =
id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl12_DayItem_DayList_ctl00_Title=
Url=20
      title=3D"Click To View Entry."=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/04/06/12776.aspx">Great =

      tutorial on JavaScript</A></H2>
      <P><A title=3D"Javascript Tutorial"=20
      =
href=3D"http://simon.incutio.com/slides/2006/etech/javascript/js-reintrod=
uction-notes.html">http://simon.incutio.com/slides/2006/etech/javascript/=
js-reintroduction-notes.html</A></P>
      <P>This is a fantastic article on Javascript IMHO, perfectly aimed =
at a=20
      developer like myself who has lots of programming experience but =
not so=20
      much knowledge of Javascript.</P>
      <P>The bits on closures and IE Memory Leaks was especially well =
explained,=20
      as that's something I've come across but never really =
understood!</P>
      <P>And here's a link to his blog on the matter: <A =
title=3D"Simon's Blog"=20
      =
href=3D"http://simon.incutio.com/archive/2006/03/07/etech">http://simon.i=
ncutio.com/archive/2006/03/07/etech</A></P>
      <P class=3Dpostfoot>posted @ <A title=3D"Permanent link to this =
post"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/04/06/12776.aspx">Thursd=
ay,=20
      April 06, 2006 5:53 PM</A> | <A title=3D"comments, pingbacks, =
trackbacks"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/04/06/12776.aspx#feedbac=
k">Feedback=20
      (2)</A> </P></DIV>
      <P class=3Ddate><SPAN><A=20
      id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl13_DayItem_ImageLink=20
      title=3D"Day Archive" style=3D"DISPLAY: inline-block"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/03/08.aspx">Wednesday,=20
      March 08, 2006</A> </SPAN></P>
      <DIV class=3Dpost>
      <H2><A=20
      =
id=3D_6b43eb1e3d3_HomePageDays_DaysList_ctl13_DayItem_DayList_ctl00_Title=
Url=20
      title=3D"Click To View Entry."=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/03/08/12499.aspx">ADO=20
      change in .NET2 (DataSet.Merge) broke my code!</A></H2>
      <P><FONT face=3DArial>I have been porting a system to .NET2 for =
the last few=20
      weeks.&nbsp; It has been an interesting experience to say the =
least!&nbsp;=20
      I have just come across the latest in a long line of =
problems.</FONT></P>
      <P><FONT face=3DArial>My business entities are using datarows for =
their=20
      underlying persistence mechanism.&nbsp; One thing they allow is to =
add=20
      child entities to other entities in a many to many =
relationship.&nbsp; The=20
      following code gives an example of how this works:</FONT></P>
      <P><FONT face=3D"Courier New">Lesson lesson =3D new =
Lesson();</FONT></P>
      <P><FONT face=3D"Courier New">Student student =3D new =
Student();</FONT></P>
      <P><FONT face=3D"Courier =
New">lesson.Students.Add(student);</FONT></P>
      <P><FONT face=3DArial>The data model for persisting this involves =
three=20
      tables,&nbsp;<EM>Lessons</EM> , <EM>Students </EM>and=20
      <EM>LessonsStudents.&nbsp; </EM>When a student is added to the =
lesson,=20
      what is actually happening is a new row is insterted into the=20
      LessonsStudents table.&nbsp; When a student is removed from a =
lesson, the=20
      row is removed from the LessonsStudents table.&nbsp; This extra =
table is=20
      the standard way of handling many to many relationships in =
relational=20
      databases.</FONT></P>
      <P><FONT face=3DArial>In order to save all this data to the =
database&nbsp;I=20
      pass the appropriate <EM>LessonsStudents</EM> rows to the =
DAL.&nbsp; This=20
      then merges the rows into a new DataSet (it has to do this as the =
data=20
      access application block cannot update single DataRows) and passes =
the=20
      dataSet to the application block to persist the changes to the=20
      database.</FONT></P>
      <P><FONT face=3DArial>The problem&nbsp;occurs&nbsp;if&nbsp;I =
remove a=20
      student from the lesson, then add him again. =
Now&nbsp;I&nbsp;have&nbsp;two=20
      rows in the DataTable.&nbsp; The original row has a RowState of =
Deleted,=20
      and the new row has a RowState of Added.&nbsp; </FONT><FONT=20
      face=3DArial>However, after I do the merge, there is only one row =
in the new=20
      DataSet, with a&nbsp;RowState of Modified.&nbsp; This was not the =
case in=20
      .NET1.1</FONT></P>
      <P><FONT face=3DArial>I can only put this down to an optimisation =
by=20
      microsoft (only having one data row means we only hit the database =
once),=20
      but an annoying one at that!&nbsp; As I am&nbsp;never updating the =
joining=20
      tables (they have no columns other than the composite key), there =
is no=20
      stored procedure in the database to update these rows.&nbsp; This =
causes=20
      the data updater's Update() method&nbsp;to fail when it comes =
across the=20
      Modified row. (with the&nbsp;error <EM>Update requires a valid=20
      UpdateCommand when passed DataRow collection with modified=20
      rows</EM>)</FONT></P>
      <P><FONT face=3DArial>The only solution I can think of right now =
is to=20
      create a 'dummy' <EM>NullUpdateCommand</EM> which is an empty =
DbCommand=20
      which does nothing.&nbsp; </FONT></P>
      <P><FONT face=3DArial>I would rather that the <EM>Merge</EM>()=20
      method&nbsp;would have either&nbsp;set the RowState to Unchanged, =
or done=20
      nothing like this.&nbsp; </FONT><FONT face=3DArial>This is just =
plain=20
      wrong.</FONT></P>
      <P class=3Dpostfoot>posted @ <A title=3D"Permanent link to this =
post"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/03/08/12499.aspx">Wednes=
day,=20
      March 08, 2006 6:21 PM</A> | <A title=3D"comments, pingbacks, =
trackbacks"=20
      =
href=3D"http://blogs.wdevs.com/neil/archive/2006/03/08/12499.aspx#feedbac=
k">Feedback=20
      (1)</A> </P></DIV></DIV></TD></TR>
  <TR>
    <TD class=3DFooterCell>
      <P id=3Dfooter>
      <P class=3Dpowererdby>Powered by: <BR><A id=3DFooter1_Hyperlink2=20
      title=3D"Powered By Subtext" =
href=3D"http://sourceforge.net/projects/subtext/"=20
      name=3DHyperlink1><IMG title=3D"Powered By Subtext" src=3D"" =
border=3D0></A> <A=20
      id=3DFooter1_Hyperlink3 title=3D"Powered By ASP.NET"=20
      href=3D"http://asp.net/"><IMG title=3D"Powered By ASP.NET" =
src=3D""=20
      border=3D0></A> </P>
      <P class=3Dcopyright>Copyright =C2=A9 Neil Mosafi </P>
      <P></P></TD></TR></TBODY></TABLE></FORM><!-- SOME SCRIPT SRC'S ON =
THIS PAGE HAVE BEEN REWRITTEN BY THE WAYBACK MACHINE=0A=
OF THE INTERNET ARCHIVE IN ORDER TO PRESERVE THE TEMPORAL INTEGRITY OF =
THE SESSION. --><!-- SOME LINK HREF'S ON THIS PAGE HAVE BEEN REWRITTEN =
BY THE WAYBACK MACHINE=0A=
OF THE INTERNET ARCHIVE IN ORDER TO PRESERVE THE TEMPORAL INTEGRITY OF =
THE SESSION. -->
<SCRIPT language=3DJavascript>=0A=
<!--=0A=
=0A=
// FILE ARCHIVED ON 20070607185501 AND RETRIEVED FROM THE=0A=
// INTERNET ARCHIVE ON 20080218052306.=0A=
// JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.=0A=
// ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.=0A=
// SECTION 108(a)(3)).=0A=
=0A=
   var sWayBackCGI =3D "http://web.archive.org/web/20070607185501/";=0A=
=0A=
   function xResolveUrl(url) {=0A=
      var image =3D new Image();=0A=
      image.src =3D url;=0A=
      return image.src;=0A=
   }=0A=
   function xLateUrl(aCollection, sProp) {=0A=
      var i =3D 0;=0A=
      for(i =3D 0; i < aCollection.length; i++) {=0A=
         if (typeof(aCollection[i][sProp]) =3D=3D "string") { =0A=
          if (aCollection[i][sProp].indexOf("mailto:") =3D=3D -1 &&=0A=
             aCollection[i][sProp].indexOf("javascript:") =3D=3D -1) {=0A=
            if(aCollection[i][sProp].indexOf("http") =3D=3D 0) {=0A=
                aCollection[i][sProp] =3D sWayBackCGI + =
aCollection[i][sProp];=0A=
            } else {=0A=
                aCollection[i][sProp] =3D sWayBackCGI + =
xResolveUrl(aCollection[i][sProp]);=0A=
            }=0A=
         }=0A=
         }=0A=
      }=0A=
   }=0A=
=0A=
   xLateUrl(document.getElementsByTagName("IMG"),"src");=0A=
   xLateUrl(document.getElementsByTagName("A"),"href");=0A=
   xLateUrl(document.getElementsByTagName("AREA"),"href");=0A=
   xLateUrl(document.getElementsByTagName("OBJECT"),"codebase");=0A=
   xLateUrl(document.getElementsByTagName("OBJECT"),"data");=0A=
   xLateUrl(document.getElementsByTagName("APPLET"),"codebase");=0A=
   xLateUrl(document.getElementsByTagName("APPLET"),"archive");=0A=
   xLateUrl(document.getElementsByTagName("EMBED"),"src");=0A=
   xLateUrl(document.getElementsByTagName("BODY"),"background");=0A=
   var forms =3D document.getElementsByTagName("FORM");=0A=
   if (forms) {=0A=
       var j =3D 0;=0A=
       for (j =3D 0; j < forms.length; j++) {=0A=
              f =3D forms[j];=0A=
              if (typeof(f.action)  =3D=3D "string") {=0A=
                 if(typeof(f.method)  =3D=3D "string") {=0A=
                     if(typeof(f.method) !=3D "post") {=0A=
                        f.action =3D sWayBackCGI + f.action;=0A=
                     }=0A=
                  }=0A=
              }=0A=
        }=0A=
    }=0A=
=0A=
=0A=
//-->=0A=
</SCRIPT>
</BODY></HTML>

------=_NextPart_000_00F0_01C871AB.52053B40
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://web.archive.org/web/20070607185501/http://blogs.wdevs.com/skins/_System/csharp.css

.csharpcode {
	FONT-SIZE: small; COLOR: black; FONT-FAMILY: Consolas, "Courier New", =
Courier, Monospace; BACKGROUND-COLOR: #ffffff
}
.csharpcode PRE {
	FONT-SIZE: small; COLOR: black; FONT-FAMILY: Consolas, "Courier New", =
Courier, Monospace; BACKGROUND-COLOR: #ffffff
}
.csharpcode PRE {
	MARGIN: 0em
}
.csharpcode .rem {
	COLOR: #008000
}
.csharpcode .kwrd {
	COLOR: #0000ff
}
.csharpcode .str {
	COLOR: #006080
}
.csharpcode .op {
	COLOR: #0000c0
}
.csharpcode .preproc {
	COLOR: #cc6633
}
.csharpcode .asp {
	BACKGROUND-COLOR: #ffff00
}
.csharpcode .html {
	COLOR: #800000
}
.csharpcode .attr {
	COLOR: #ff0000
}
.csharpcode .alt {
	MARGIN: 0em; WIDTH: 100%; BACKGROUND-COLOR: #f4f4f4
}
.csharpcode .lnum {
	COLOR: #606060
}

------=_NextPart_000_00F0_01C871AB.52053B40
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://web.archive.org/web/20070607185501/http://blogs.wdevs.com/skins/_System/commonstyle.css

.dropcap {
	BORDER-RIGHT: 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: 1px solid; =
PADDING-LEFT: 5px; FLOAT: left; PADDING-BOTTOM: 5px; FONT: 4em georgia, =
helvetica, verdana, arial, sans-serif; BORDER-LEFT: 1px solid; =
MARGIN-RIGHT: 5px; PADDING-TOP: 5px; BORDER-BOTTOM: 1px solid
}
.dropshadow {
	CLEAR: left; PADDING-RIGHT: 0px; DISPLAY: block; PADDING-LEFT: 0px; =
BACKGROUND: url(../../images/shadowAlpha.png) no-repeat right bottom; =
FLOAT: left; PADDING-BOTTOM: 0px; MARGIN: 10px 0px 10px 10px; =
PADDING-TOP: 0px
}
.innerbox {
	BORDER-RIGHT: #999999 1px solid; PADDING-RIGHT: 4px; BORDER-TOP: =
#999999 1px solid; DISPLAY: block; PADDING-LEFT: 4px; RIGHT: 6px; =
PADDING-BOTTOM: 4px; MARGIN: 0px; BORDER-LEFT: #999999 1px solid; =
BOTTOM: 6px; PADDING-TOP: 4px; BORDER-BOTTOM: #999999 1px solid; =
POSITION: relative
}
.innerbox {
	MARGIN: 0px
}
DIV.debug {
	FONT-SIZE: x-small; WIDTH: 200px; POSITION: absolute
}
A.printIcon {
	BACKGROUND: url(../../images/printer.png) no-repeat left top; =
PADDING-BOTTOM: 4px
}
A.printIcon SPAN {
	PADDING-LEFT: 17px; BACKGROUND: url(../../images/printer.png) no-repeat =
left top
}
IMG.avatar {
	BORDER-TOP-WIDTH: 0px; PADDING-RIGHT: 5px; DISPLAY: block; =
PADDING-LEFT: 5px; BORDER-LEFT-WIDTH: 0px; FLOAT: left; =
BORDER-BOTTOM-WIDTH: 0px; PADDING-BOTTOM: 5px; WIDTH: 50px; PADDING-TOP: =
5px; BORDER-RIGHT-WIDTH: 0px
}
.commentInfo {
	CLEAR: left
}
.accessKey {
	TEXT-DECORATION: underline
}
.pullout {
	CLEAR: both; BORDER-RIGHT: 1px solid; PADDING-RIGHT: 10px; BORDER-TOP: =
1px solid; DISPLAY: block; PADDING-LEFT: 10px; FLOAT: right; =
PADDING-BOTTOM: 10px; MARGIN: 5px; FONT: bold 1em arial, helvetica, =
sans-serif; BORDER-LEFT: 1px solid; WIDTH: 30%; PADDING-TOP: 10px; =
BORDER-BOTTOM: 1px solid; LETTER-SPACING: 0.05em; BACKGROUND-COLOR: =
#ddd; TEXT-ALIGN: left
}
.alt.pullout {
	FLOAT: left
}
BLOCKQUOTE.withline {
	PADDING-RIGHT: 5px; PADDING-LEFT: 5px; PADDING-BOTTOM: 5px; =
BORDER-LEFT: #9acd32 1px solid; PADDING-TOP: 5px; TEXT-ALIGN: justify
}
DL.form DT {
	MARGIN-TOP: 5px; HEIGHT: 18px
}
DL.form DD {
	MARGIN-LEFT: 0px
}
DL.form INPUT {
	WIDTH: 300px
}
DL.form TEXTAREA {
	WIDTH: 400px; HEIGHT: 200px
}
LABEL.required {
	FONT-WEIGHT: bold
}
UL.horizontal {
	LIST-STYLE-TYPE: none
}
UL.horizontal LI {
	DISPLAY: inline
}
.postTitle {
	CLEAR: both
}
.postTitleDate {
	CLEAR: both
}
.clear {
	CLEAR: both
}

------=_NextPart_000_00F0_01C871AB.52053B40
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://web.archive.org/web/20070607185501/http://blogs.wdevs.com/skins/_System/commonlayout.css

#search {
	FLOAT: right; WIDTH: 280px
}
#search #searchResults {
	BORDER-RIGHT: 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: 1px solid; =
PADDING-LEFT: 5px; Z-INDEX: 10; PADDING-BOTTOM: 5px; MARGIN: 0px; =
BORDER-LEFT: 1px solid; PADDING-TOP: 5px; BORDER-BOTTOM: 1px solid; =
POSITION: relative
}
#searchResults UL {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
5px; PADDING-TOP: 0px
}
#searchResults UL LI {
	LIST-STYLE-POSITION: inside
}
DIV.previousNext {
	PADDING-RIGHT: 4px; PADDING-LEFT: 4px; FONT-SIZE: 0.9em; =
PADDING-BOTTOM: 4px; WIDTH: 100%; PADDING-TOP: 4px; TEXT-ALIGN: center
}
#blogStats {
	FONT-SIZE: 0.7em; FLOAT: right; TEXT-ALIGN: right
}
#blogStats DT {
	FLOAT: left; MARGIN: 0px
}
#blogStats DD {
	FLOAT: left; MARGIN: 0px
}
#blogStats DT {
	PADDING-RIGHT: 2px; TEXT-TRANSFORM: lowercase; MARGIN-RIGHT: 2px
}
#blogStats DD {
	MARGIN-RIGHT: 7px
}
DIV.captcha {
	MARGIN: 2px 0px 8px 6px
}
DIV.captcha IMG {
	BORDER-RIGHT: #999 1px solid; BORDER-TOP: #999 1px solid; DISPLAY: =
block; BORDER-LEFT: #999 1px solid; WIDTH: 180px; BORDER-BOTTOM: #999 =
1px solid; HEIGHT: 50px
}
DIV.captcha LABEL {
	DISPLAY: inline; FLOAT: left
}
DIV.captcha INPUT {
	DISPLAY: inline; MARGIN-LEFT: 4px
}

------=_NextPart_000_00F0_01C871AB.52053B40
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://web.archive.org/web/20070607185501/http://blogs.wdevs.com/Skins/AnotherEon001/print.css

BODY {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; WIDTH: 100%; COLOR: #000; BORDER-TOP-STYLE: none; PADDING-TOP: 0px; =
BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; BACKGROUND-COLOR: =
#fff; BORDER-BOTTOM-STYLE: none
}
#top {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; WIDTH: 100%; COLOR: #000; BORDER-TOP-STYLE: none; PADDING-TOP: 0px; =
BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; BACKGROUND-COLOR: =
#fff; BORDER-BOTTOM-STYLE: none
}
#tagline {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; WIDTH: 100%; COLOR: #000; BORDER-TOP-STYLE: none; PADDING-TOP: 0px; =
BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; BACKGROUND-COLOR: =
#fff; BORDER-BOTTOM-STYLE: none
}
#main {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; WIDTH: 100%; COLOR: #000; BORDER-TOP-STYLE: none; PADDING-TOP: 0px; =
BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; BACKGROUND-COLOR: =
#fff; BORDER-BOTTOM-STYLE: none
}
.Framework {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; WIDTH: 100%; COLOR: #000; BORDER-TOP-STYLE: none; PADDING-TOP: 0px; =
BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; BACKGROUND-COLOR: =
#fff; BORDER-BOTTOM-STYLE: none
}
.MainCell {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; WIDTH: 100%; COLOR: #000; BORDER-TOP-STYLE: none; PADDING-TOP: 0px; =
BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; BACKGROUND-COLOR: =
#fff; BORDER-BOTTOM-STYLE: none
}
TD.LeftCell {
	DISPLAY: none
}
#leftmenu {
	DISPLAY: none
}
#commentform {
	DISPLAY: none
}
.powererdby {
	DISPLAY: none
}
.BlogStats {
	DISPLAY: none
}
#sub {
	DISPLAY: none
}
#top H1 TD {
	COLOR: #000
}
#top H1 A {
	COLOR: #000
}
#subtitle {
	COLOR: #000
}
.post {
	BORDER-TOP-STYLE: none; BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: =
none; BORDER-BOTTOM-STYLE: none
}

------=_NextPart_000_00F0_01C871AB.52053B40
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://web.archive.org/web/20070607185501/http://blogs.wdevs.com/skins/AnotherEon001/style.css

BODY {
	PADDING-RIGHT: 30px; PADDING-LEFT: 30px; FONT-SIZE: small; =
PADDING-BOTTOM: 10px; MARGIN: 10px 30px; PADDING-TOP: 10px; FONT-FAMILY: =
Verdana, Geneva, Arial, Helvetica, sans-serif; BACKGROUND-COLOR: #d9d6cb
}
IMG {
	BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: =
0px; BORDER-RIGHT-WIDTH: 0px
}
TD {
	FONT-SIZE: small
}
A {
	COLOR: #223355; TEXT-DECORATION: none
}
A:hover {
	TEXT-DECORATION: underline
}
H1 {
	FONT-SIZE: 1.8em; MARGIN: 0px; PADDING-TOP: 5px
}
H1 A:visited {
	MARGIN-TOP: 10px; COLOR: #fff; TEXT-DECORATION: none
}
H1 A:active {
	MARGIN-TOP: 10px; COLOR: #fff; TEXT-DECORATION: none
}
H1 A:link {
	MARGIN-TOP: 10px; COLOR: #fff; TEXT-DECORATION: none
}
H1 A:hover {
	MARGIN-TOP: 10px; COLOR: #fff; TEXT-DECORATION: none
}
H2 {
	MARGIN-TOP: 10px; FONT-SIZE: 1em
}
H5 {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
0px; PADDING-TOP: 0px
}
#top {
	VERTICAL-ALIGN: middle; HEIGHT: 75px; BACKGROUND-COLOR: #20375f
}
#top TD {
	COLOR: white
}
#sub {
	PADDING-RIGHT: 4px; PADDING-LEFT: 4px; FONT-SIZE: 0.8em; =
PADDING-BOTTOM: 4px; COLOR: #cccccc; PADDING-TOP: 4px; BACKGROUND-COLOR: =
black; TEXT-ALIGN: right
}
.headermaintitle {
	FONT-FAMILY: "Trebuchet MS"
}
#tagline {
	PADDING-RIGHT: 5px; PADDING-LEFT: 5px; FONT-SIZE: 1em; PADDING-BOTTOM: =
5px; MARGIN: 0px; COLOR: #ffffff; PADDING-TOP: 5px; BACKGROUND-COLOR: =
#0000ff
}
P.date IMG {
	VERTICAL-ALIGN: middle
}
P.date {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; FONT-WEIGHT: bold; FONT-SIZE: =
1.2em; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 2px; COLOR: #aaaaaa; =
PADDING-TOP: 2px; TEXT-ALIGN: right
}
P.date SPAN {
	BACKGROUND-COLOR: #fff
}
P.date A {
	COLOR: #888888
}
BLOCKQUOTE {
	BORDER-TOP-WIDTH: 0px; PADDING-RIGHT: 4px; PADDING-LEFT: 4px; =
BORDER-BOTTOM-WIDTH: 0px; PADDING-BOTTOM: 4px; MARGIN: 0px; BORDER-LEFT: =
#cccccc 18px solid; PADDING-TOP: 4px; BACKGROUND-COLOR: #eeeeee; =
BORDER-RIGHT-WIDTH: 0px
}
#leftmenu {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; LEFT: 0px; PADDING-BOTTOM: 5px; =
WIDTH: 180px; PADDING-TOP: 0px; POSITION: relative; HEIGHT: 100%
}
#leftmenu H3 {
	PADDING-RIGHT: 4px; PADDING-LEFT: 4px; FONT-SIZE: 1em; PADDING-BOTTOM: =
4px; MARGIN: 0px; PADDING-TOP: 4px; BORDER-BOTTOM: #bbbbbb 1px solid
}
#leftmenu UL {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: 0px =
0px 10px 8px; PADDING-TOP: 0px; LIST-STYLE-TYPE: none
}
#leftmenu LI {
	DISPLAY: inline
}
#leftmenu A:active {
	PADDING-RIGHT: 2px; DISPLAY: block; PADDING-LEFT: 2px; PADDING-BOTTOM: =
2px; COLOR: #000; MARGIN-RIGHT: 0px; PADDING-TOP: 2px; TEXT-DECORATION: =
none
}
#leftmenu A:visited {
	PADDING-RIGHT: 2px; DISPLAY: block; PADDING-LEFT: 2px; PADDING-BOTTOM: =
2px; COLOR: #000; MARGIN-RIGHT: 0px; PADDING-TOP: 2px; TEXT-DECORATION: =
none
}
#leftmenu A:link {
	PADDING-RIGHT: 2px; DISPLAY: block; PADDING-LEFT: 2px; PADDING-BOTTOM: =
2px; COLOR: #000; MARGIN-RIGHT: 0px; PADDING-TOP: 2px; TEXT-DECORATION: =
none
}
#leftmenu A:hover {
	BACKGROUND-COLOR: #ccd5e0
}
#main {
=09
}
#footer {
	FONT-SIZE: 0.7em; MARGIN: 0px; PADDING-TOP: 5px; TEXT-ALIGN: center
}
INPUT.text {
	WIDTH: 300px
}
TEXTAREA {
	WIDTH: 300px; HEIGHT: 200px
}
#comments H4 SPAN {
	COLOR: #999
}
#comments H4 {
	FONT-SIZE: 0.9em; MARGIN: 0px
}
P {
	MARGIN: 0px 0px 14px
}
H3 {
	FONT-SIZE: 1.2em; BORDER-BOTTOM: #aaa 1px solid
}
#relatedlinks UL {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; =
MARGIN-LEFT: 10px; PADDING-TOP: 0px; LIST-STYLE-TYPE: none
}
.post {
	BORDER-RIGHT: #cccccc 2px solid; PADDING-RIGHT: 4px; BORDER-TOP: =
#cccccc 1px solid; PADDING-LEFT: 4px; MARGIN-BOTTOM: 28px; =
PADDING-BOTTOM: 4px; BORDER-LEFT: #cccccc 1px solid; PADDING-TOP: 4px; =
BORDER-BOTTOM: #cccccc 2px solid
}
.post H5 {
	FONT-SIZE: 1.5em; MARGIN: 0px 0px 4px
}
.post H2 {
	FONT-SIZE: 1.5em; MARGIN: 0px 0px 4px
}
#comments .post H2 {
	FONT-SIZE: 0.9em
}
.post .postfoot {
	BORDER-TOP: #dddddd 1px solid; FONT-SIZE: 0.8em; MARGIN: 14px 0px 0px; =
COLOR: #aaaaaa; HEIGHT: 17px
}
#comments .post {
	MARGIN-LEFT: 60px
}
PRE {
	FONT-SIZE: 1em; MARGIN: 0px 0px 0px 22px
}
.Textbox {
	BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; =
BORDER-LEFT: #aaaaaa 1px solid; WIDTH: 100%; BORDER-BOTTOM: #aaaaaa 1px =
solid
}
TEXTAREA {
	BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; =
BORDER-LEFT: #aaaaaa 1px solid; WIDTH: 100%; BORDER-BOTTOM: #aaaaaa 1px =
solid
}
.button {
	BORDER-RIGHT: #aaaaaa 1px solid; BORDER-TOP: #aaaaaa 1px solid; =
BORDER-LEFT: #aaaaaa 1px solid; BORDER-BOTTOM: #aaaaaa 1px solid; =
BACKGROUND-COLOR: #ccd4e0
}
INPUT {
	FONT-SIZE: 10px; FONT-FAMILY: Verdana, Geneva, Arial, Sans-Serif
}
TEXTAREA {
	FONT-SIZE: 10px; FONT-FAMILY: Verdana, Geneva, Arial, Sans-Serif
}
.Framework {
	BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; =
BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid; =
BACKGROUND-COLOR: #eeeeee
}
.MainCell {
	PADDING-RIGHT: 10px; PADDING-LEFT: 10px; PADDING-BOTTOM: 10px; =
VERTICAL-ALIGN: top; BORDER-LEFT: #dddddd 1px solid; PADDING-TOP: 10px; =
BORDER-BOTTOM: #dddddd 1px solid; BACKGROUND-COLOR: white
}
.LeftCell {
	VERTICAL-ALIGN: top; WIDTH: 200px
}
.FooterCell {
	VERTICAL-ALIGN: top
}
DIV.news {
	PADDING-RIGHT: 4px; PADDING-LEFT: 6px; PADDING-BOTTOM: 4px; =
PADDING-TOP: 0px
}

------=_NextPart_000_00F0_01C871AB.52053B40
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://web.archive.org/web/20070607185501js_/http://blogs.wdevs.com/Scripts/common.js

//
// addLoadEvent()
// Adds event to window.onload without overwriting currently assigned =
onload functions.
// Function found at Simon Willison's weblog - http://simon.incutio.com/
//
function addLoadEvent(func)
{=09
	var oldonload =3D window.onload;
	if (typeof window.onload !=3D 'function')
	{
    	window.onload =3D func;
	}=20
	else=20
	{
		window.onload =3D function()
		{
			oldonload();
			func();
		}
	}
}

/* =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 * =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D COMMON =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 * Some common functions for the basic JavaScript objects
 *
 * =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 */

String.prototype.trim =3D function()
{
    return this.replace(/^\s+|\s+$/, "");
}

// Define methods for the Array data structure.
Array.prototype.indexOf =3D function(item, start)=20
{=20
	for (var i =3D (start || 0); i < this.length; i++)=20
	{=20
		if (this[i] =3D=3D item)=20
		{=20
			return i;=20
		}=20
	}=20
	return -1;=20
}

Array.prototype.remove =3D function(obj)
{=20
	x =3D [];=20
	for (i=3D0; i<this.length; i++)
	{=20
		if (this[i] !=3D obj)
		{=20
			x.push(this[i]);=20
		}=20
	}=20
	return x;=20
}

Array.prototype.replace =3D function(obj1, obj2)
{=20
	var x =3D [];
	var len =3D this.length;
	for (i=3D0; i<len; i++)
	{=20
		if (this[i] =3D=3D obj1)
		{=20
			x.push(obj2);=20
		}=20
		else
		{=20
			x.push(this[i]);=20
		}=20
	}=20
	return x;=20
}


/* =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 * =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D GET ELEMENTS =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 * Methods to help retrieve elements from the DOM.
 *
 * =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 */

/*
 * Gets all the Elements by given Class Name.=20
 *=20
 * @param string searchClass - Name of the css class to look for.
 * @param object node - (optional) The node you want to start from. =
Defaults to 'document' if none is specified.=20
 * @param string tagName - (optional) Limit  results by adding a =
tagName. Defaults to '*' if none is specified.
 *=20
 * @returns array - Returns an array containing all the nodes given by =
the specified className.
 */=20
function getElementsByClass(searchClass, node, tagName)
{
	var	classElements =3D	new	Array();
	if (node =3D=3D null)
		node =3D document;
	if (tagName =3D=3D	null)
		tagName	=3D '*';
=09
	var	els	=3D node.getElementsByTagName(tagName);
	var	elsLen =3D els.length;
=09
	for	(i =3D 0,	j =3D	0; i < elsLen; i++)
	{
		if (hasClass(els[i], searchClass))
		{
			classElements[j] =3D els[i];
			j++;
		}
	}
	return classElements;
}

/*
 * Get the element from the DOM Tree. If the given parameter (e) is a =
string,=20
 * it is assumed to be the element's ID, and that element will be =
retrieved, else=20
 * the given parameter is returned.=20
 *=20
 * @param string/element e - the element ID / element to be retrieved =
from the DOM tree.=20
 *=20
 * @returns element
 */
function getElement(e)
{
	if (typeof e =3D=3D	'string')
		return document.getElementById(e);
	else
		return e;
}

/* =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 * =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D STYLING =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 * Methods for manipulating an element's styles (CSS).
 *
 * =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
 */

function getClasses(element)
{
	return element.className.trim().split(/\s+/);
}

function hasClass(element, className)
{
	return getClasses(element).indexOf(className) !=3D -1;
}

function addClass(element, className)
{
    var classes =3D getClasses(element);
   =20
    if (classes.indexOf(className) =3D=3D -1)
    {
        classes.push(className);
        element.className =3D classes.join(' ');
    }
}

function removeClass(element, className)
{
    var classes =3D getClasses(element);
    var index =3D classes.indexOf(className);
   =20
    if (index !=3D -1)
    {
        classes.splice(index, 1);
        element.className =3D classes.join(' ');
    }
}

function showElement(element)
{=20
	element =3D getElement(element);
=09
	if (element) // if we don't find the element, don't try to access it's =
properties.
	{
		element.style.display =3D "";
	}
}

function hideElement(element)
{
	element =3D getElement(element);
       =20
	if (element)
	{
		element.style.display =3D "none";
	}
}

------=_NextPart_000_00F0_01C871AB.52053B40
Content-Type: application/octet-stream
Content-Transfer-Encoding: 7bit
Content-Location: http://web.archive.org/web/20070607185501js_/http://blogs.wdevs.com/Scripts/tableEffects.js

function initRowHighlighting()
{
	if (!document.getElementsByTagName)
		{ return; }

	var tables = getElementsByClass('highlightTable', document, 'table');
	
	for(var i = 0; i < tables.length; i++)
	{
		var table = tables[i];
		//Make sure to use th tags for header row.
		attachRowMouseEvents(table.getElementsByTagName('tr'));
	}
}

function attachRowMouseEvents(rows)
{
	for(var i = 0; i < rows.length; i++)
	{
		var row = rows[i];
		if(i%2 == 1)
		{
			row.onmouseover = function() { addClass(this, 'highlight'); }
			row.onmouseout = function() { removeClass(this, 'highlight'); }
		}
		else
		{
			row.onmouseover = function() { addClass(this, 'highlightAlt'); }
			row.onmouseout = function() { removeClass(this, 'highlightAlt'); }
		}
	}
}

addLoadEvent(initRowHighlighting);
------=_NextPart_000_00F0_01C871AB.52053B40
Content-Type: application/octet-stream
Content-Transfer-Encoding: 7bit
Content-Location: http://web.archive.org/web/20070607185501js_/http://blogs.wdevs.com/Scripts/BlogInfo.js

/*
	Prototype for a javascript BlogInfo object 
	that provides information to client scripts 
	much as a server version does.
*/
function blogInfo(virtualRoot, virtualBlogRoot)
{
	this.virtualRoot = virtualRoot;
	this.virtualBlogRoot = virtualBlogRoot;
	
	this.getVirtualRoot = getVirtualRoot;
	this.getVirtualBlogRoot = getVirtualBlogRoot;
	this.getScriptsVirtualRoot = getScriptsVirtualRoot;
	this.getImagesVirtualRoot = getImagesVirtualRoot;
	
	/*
	Returns the virtual root for the entire website.
	*/
	function getVirtualRoot()
	{
		return this.virtualRoot;
	}
	
	/*
	Gets the virtual root for the specific blog.
	*/
	function getVirtualBlogRoot()
	{
		return this.virtualBlogRoot;
	}
	
	/*
	Returns the virtual root to the default "scripts" directory 
	*/
	function getScriptsVirtualRoot()
	{
		return this.virtualRoot + "Scripts/";
	}
	
	/*
	Returns the virtual root to the default "scripts" directory 
	*/
	function getImagesVirtualRoot()
	{
		return this.virtualRoot + "Images/";
	}
}
------=_NextPart_000_00F0_01C871AB.52053B40--

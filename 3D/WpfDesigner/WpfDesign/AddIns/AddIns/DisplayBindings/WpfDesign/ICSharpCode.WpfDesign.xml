<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ICSharpCode.WpfDesign</name>
    </assembly>
    <members>
        <member name="T:ICSharpCode.WpfDesign.Extensions.ExtensionForAttribute">
            <summary>
            Attribute to specify that the decorated class is a WPF extension for the specified item type.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.ExtensionForAttribute.#ctor(System.Type)">
            <summary>
            Create a new ExtensionForAttribute that specifies that the decorated class
            is a WPF extension for the specified item type.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Extensions.ExtensionForAttribute.DesignedItemType">
            <summary>
            Gets the type of the item that is designed using this extension.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Extensions.ExtensionForAttribute.OverrideExtension">
            <summary>
            Gets/Sets the type of another extension that this extension is overriding.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Extensions.DefaultInitializer">
            <summary>
            Base class for extensions that initialize new controls with default values.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Extensions.Extension">
            <summary>
            Base class for all Extensions.
            </summary>
            <remarks>
            The class design in the ICSharpCode.WpfDesign.Extensions namespace was made to match that of Cider
            as described in the blog posts:
            http://blogs.msdn.com/jnak/archive/2006/04/24/580393.aspx
            http://blogs.msdn.com/jnak/archive/2006/08/04/687166.aspx
            </remarks>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.DefaultInitializer.InitializeDefaults(ICSharpCode.WpfDesign.DesignItem)">
            <summary>
            Initializes the design item to default values.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Extensions.CustomInstanceFactory">
            <summary>
            A special kind of extension that is used to create instances of objects when loading XAML inside
            the designer.
            </summary>
            <remarks>
            CustomInstanceFactory in Cider: http://blogs.msdn.com/jnak/archive/2006/04/10/572241.aspx
            </remarks>
        </member>
        <member name="F:ICSharpCode.WpfDesign.Extensions.CustomInstanceFactory.DefaultInstanceFactory">
            <summary>
            Gets a default instance factory that uses Activator.CreateInstance to create instances.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.CustomInstanceFactory.#ctor">
            <summary>
            Creates a new CustomInstanceFactory instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.CustomInstanceFactory.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates an instance of the specified type, passing the specified arguments to its constructor.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Extensions.ExtensionServer">
            <summary>
            An ExtensionServer manages a creating and removing extensions of the specific extension type.
            For a given DesignContext, a ExtensionServer is created only once.
            The ExtensionServer can handle events raised by services without having to unregister its events
            handlers because the ExtensionServer runs for the lifetime of the DesignContext.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.ExtensionServer.OnInitialized">
            <summary>
            Is called after the extension server is initialized and the <see cref="P:ICSharpCode.WpfDesign.Extensions.ExtensionServer.Context"/> property has been set.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.ExtensionServer.ShouldApplyExtensions(ICSharpCode.WpfDesign.DesignItem)">
            <summary>
            Gets if the extension manager should apply the extensions from this server to the specified item.
            Is called by the ExtensionManager.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.ExtensionServer.CreateExtension(System.Type,ICSharpCode.WpfDesign.DesignItem)">
            <summary>
            Create an extension of the specified type.
            Is called by the ExtensionManager.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.ExtensionServer.RemoveExtension(ICSharpCode.WpfDesign.Extensions.Extension)">
            <summary>
            This method is called before an extension is removed from its DesignItem because it should not be applied anymore.
            Is called by the ExtensionManager.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Extensions.ExtensionServer.Context">
            <summary>
            Gets the context this extension server was created for.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Extensions.ExtensionServer.Services">
            <summary>
            Gets the service container of the current context. "x.Services" is equivalent to "x.Context.Services".
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.Extensions.ExtensionServer.ShouldApplyExtensionsInvalidated">
            <summary>
            This event is raised when ShouldApplyExtensions is invalidated for a set of items.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.DesignItemEventArgs">
            <summary>
            Event arguments specifying a component as parameter.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignItemEventArgs.#ctor(ICSharpCode.WpfDesign.DesignItem)">
            <summary>
            Creates a new ComponentEventArgs instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItemEventArgs.Item">
            <summary>
            The component affected by the event.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.DesignItemCollectionEventArgs">
            <summary>
            Event arguments specifying a component as parameter.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignItemCollectionEventArgs.#ctor(System.Collections.Generic.ICollection{ICSharpCode.WpfDesign.DesignItem})">
            <summary>
            Creates a new ComponentCollectionEventArgs instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItemCollectionEventArgs.Items">
            <summary>
            The components affected by the event.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Extensions.DefaultExtension">
            <summary>
            Base class for extensions that have an parameter-less constructor and are initialized using the
            OnInitialize method.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.DefaultExtension.OnInitialized">
            <summary>
            Is called after the ExtendedItem was set.
            Override this method to register your behavior with the item.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.DefaultExtension.OnRemove">
            <summary>
            Is called when the extension is removed.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Extensions.DefaultExtension.ExtendedItem">
            <summary>
            Gets the item that is being extended by the BehaviorExtension.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Extensions.DefaultExtension.Context">
            <summary>
            Gets the design context of the extended item. "Context" is equivalent to "ExtendedItem.Context".
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Extensions.DefaultExtension.Services">
            <summary>
            Gets the service container of the extended item. "Services" is equivalent to "ExtendedItem.Services".
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Extensions.DefaultExtensionServer">
            <summary>
            Base class for extension servers that create extensions that derive from <see cref="T:ICSharpCode.WpfDesign.Extensions.DefaultExtension"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.DefaultExtensionServer.CreateExtension(System.Type,ICSharpCode.WpfDesign.DesignItem)">
            <summary>
            Creates an instance of the DefaultExtension and calls OnInitialize on it.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.DefaultExtensionServer.RemoveExtension(ICSharpCode.WpfDesign.Extensions.Extension)">
            <summary>
            Calls OnRemove() on the DefaultExtension.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.DefaultExtensionServer.ReapplyExtensions(System.Collections.Generic.ICollection{ICSharpCode.WpfDesign.DesignItem})">
            <summary>
            Raise the ShouldApplyExtensionsInvalidated event for the specified set of design items.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.Extensions.DefaultExtensionServer.ShouldApplyExtensionsInvalidated">
            <summary>
            This event is raised when ShouldApplyExtensions is invalidated for a set of items.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Adorners.AdornerPlacement">
            <summary>
            Defines how a design-time adorner is placed.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.Adorners.AdornerPlacement.FillContent">
            <summary>
            A placement instance that places the adorner above the content, using the same bounds as the content.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerPlacement.Arrange(ICSharpCode.WpfDesign.Adorners.AdornerPanel,System.Windows.UIElement,System.Windows.Size)">
            <summary>
            Arranges the adorner element on the specified adorner panel.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Func.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Outputs distinct elements only, filtering all duplicates.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Func.First``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element from <paramref name="input"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Func.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
            <summary>
            Skips the first <paramref name="skipCount"/> items in input and returns the rest.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PlacementInformation">
            <summary>
            Stores information about the placement of an individual item during a <see cref="T:ICSharpCode.WpfDesign.PlacementOperation"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PlacementInformation.Item">
            <summary>
            The item being placed.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PlacementInformation.Operation">
            <summary>
            The <see cref="T:ICSharpCode.WpfDesign.PlacementOperation"/> to which this PlacementInformation belongs.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PlacementInformation.OriginalBounds">
            <summary>
            Gets/sets the original bounds.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PlacementInformation.Bounds">
            <summary>
            Gets/sets the current bounds of the item.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Adorners.AdornerPlacementSpace">
            <summary>
            Describes the space in which an adorner is placed.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.Adorners.AdornerPlacementSpace.Render">
            <summary>
            The adorner is affected by the render transform of the adorned element.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.Adorners.AdornerPlacementSpace.Layout">
            <summary>
            The adorner is affected by the layout transform of the adorned element.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.Adorners.AdornerPlacementSpace.Designer">
            <summary>
            The adorner is not affected by transforms of designed controls.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PropertyEditor.StandardValuesComboBoxEditor">
            <summary>
            Type editor used to edit enum properties.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.StandardValuesComboBoxEditor.#ctor(ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty)">
            <summary>
            Creates a new EnumEditor instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PropertyEditor.TypeEditorAttribute">
            <summary>
            Attribute to specify that the decorated class is a editor for properties with the specified
            return type.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.TypeEditorAttribute.#ctor(System.Type)">
            <summary>
            Creates a new TypeEditorAttribute that specifies that the decorated class is a editor
            for properties with the return type "<paramref name="supportedPropertyType"/>".
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.TypeEditorAttribute.SupportedPropertyType">
            <summary>
            Gets the supported property type.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource">
            <summary>
            Interface for data sources used by the property editor to display the list of properties.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource.CreateThumbnailBrush">
            <summary>
            Gets a brush used as a preview for the data source.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource.Name">
            <summary>
            Gets/Sets the name of the item. Returns null when the item does not support having a name.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource.NameChanged">
            <summary>
            Is raised whenever the Name property changes value.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource.Type">
            <summary>
            Gets the type of the item (for display only).
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource.Icon">
            <summary>
            Gets the icon of the item (for display only)
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource.Properties">
            <summary>
            Gets the collection of properties.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource.CanAddAttachedProperties">
            <summary>
            Gets if adding attached properties is supported.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource.Services">
            <summary>
            Gets the service container attached to this data source.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty">
            <summary>
            Represents a property inside a <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty.GetDescription">
            <summary>
            Gets the description of the property. The returned object should be something that
            can be used as Content for a WPF tooltip.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty.SetCustomExpression(System.String)">
            <summary>
            Sets a custom expression.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty.CreateEditor">
            <summary>
            Creates a UIElement that can edit the property value.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty.OwnerDataSource">
            <summary>
            Gets the data source that own this property.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty.Category">
            <summary>
            Gets the category this property uses.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty.ReturnType">
            <summary>
            Gets the type of the property value.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty.DeclaringType">
            <summary>
            Gets the type that declares the property.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty.TypeConverter">
            <summary>
            Gets the type converter used to convert property values to/from string.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty.IsSet">
            <summary>
            Gets/Sets if the property has been assigned a local value.
            Setting this property to false has the effect of resetting the value, setting it to true
            copies the default value to a local value.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty.IsSetChanged">
            <summary>
            Is raised when the IsSet property has changed.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty.IsAmbiguous">
            <summary>
            Gets if the property value is ambiguous.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty.Value">
            <summary>
            Gets/Sets the value of the property.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty.ValueChanged">
            <summary>
            Is raised when the Value property has changed.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty.CanUseCustomExpression">
            <summary>
            Gets if using a custom expression is supported.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PropertyEditor.DesignItemDataProperty">
            <summary>
            wraps a DesignItemDataProperty for the property editor/grid.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.DesignItemDataProperty.CreateEditor">
            <summary>
            Creates a UIElement that can edit the property value.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.DesignItemDataProperty.ReturnType">
            <summary>
            Gets the type of the property value.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.DesignItemDataProperty.DeclaringType">
            <summary>
            Gets the type that declares the property.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.DesignPanelHitTestResult">
            <summary>
            Describes the result of a <see cref="M:ICSharpCode.WpfDesign.IDesignPanel.HitTest(System.Windows.Point,System.Boolean,System.Boolean)"/> call.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.DesignPanelHitTestResult.NoHit">
            <summary>
            Represents the result that nothing was hit.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignPanelHitTestResult.#ctor(System.Windows.Media.Visual)">
            <summary>
            Create a new DesignPanelHitTestResult instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignPanelHitTestResult.Equals(System.Object)">
            <summary>
            Tests if this hit test result equals the other result.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignPanelHitTestResult.Equals(ICSharpCode.WpfDesign.DesignPanelHitTestResult)">
            <summary>
            Tests if this hit test result equals the other result.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignPanelHitTestResult.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignPanelHitTestResult.op_Equality(ICSharpCode.WpfDesign.DesignPanelHitTestResult,ICSharpCode.WpfDesign.DesignPanelHitTestResult)">
            <summary/>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignPanelHitTestResult.op_Inequality(ICSharpCode.WpfDesign.DesignPanelHitTestResult,ICSharpCode.WpfDesign.DesignPanelHitTestResult)">
            <summary/>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignPanelHitTestResult.VisualHit">
            <summary>
            The actual visual that was hit.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignPanelHitTestResult.AdornerHit">
            <summary>
            The adorner panel containing the adorner that was hit.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignPanelHitTestResult.ModelHit">
            <summary>
            The model item that was hit.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Adorners.PermanentAdornerProvider">
            <summary>
            An adorner extension that is attached permanently.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Adorners.AdornerProvider">
            <summary>
            Base class for extensions that present adorners on the screen.
            </summary>
            <remarks>
            Cider adorner introduction:
            http://blogs.msdn.com/jnak/archive/2006/04/24/580393.aspx
            <quote>
            Adorners are WPF elements that float on top of the design surface and track the
            size and location of the elements they are adorning. All of the UI the designer
            presents to the user, including snap lines, grab handles and grid rulers,
            is composed of these adorners.
            </quote>
            About design-time adorners and their placement:
            read http://myfun.spaces.live.com/blog/cns!AC1291870308F748!240.entry
            and http://myfun.spaces.live.com/blog/cns!AC1291870308F748!242.entry
            </remarks>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerProvider.#ctor">
            <summary>
            Creates a new AdornerProvider instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerProvider.OnInitialized">
            <summary>
            Is called after the ExtendedItem was set.
            This methods displays the registered adorners
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerProvider.OnRemove">
            <summary>
            Is called when the extension is removed.
            This method hides the registered adorners.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerProvider.AddAdorner(ICSharpCode.WpfDesign.Adorners.AdornerPlacement,ICSharpCode.WpfDesign.Adorners.AdornerOrder,System.Windows.UIElement)">
            <summary>
            Adds an UIElement as adorner with the specified placement.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerProvider.AddAdorners(ICSharpCode.WpfDesign.Adorners.AdornerPlacement,System.Windows.UIElement[])">
            <summary>
            Adds several UIElements as adorners with the specified placement.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Adorners.AdornerProvider.Adorners">
            <summary>
            Gets the list of adorners displayed by this AdornerProvider.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Adorners.AdornerProvider.AdornerPanelCollection">
            <summary>
            Describes a collection of adorner visuals.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerProvider.AdornerPanelCollection.InsertItem(System.Int32,ICSharpCode.WpfDesign.Adorners.AdornerPanel)">
            <summary/>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerProvider.AdornerPanelCollection.RemoveItem(System.Int32)">
            <summary/>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerProvider.AdornerPanelCollection.SetItem(System.Int32,ICSharpCode.WpfDesign.Adorners.AdornerPanel)">
            <summary/>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerProvider.AdornerPanelCollection.ClearItems">
            <summary/>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Adorners.SelectionAdornerProvider">
            <summary>
            An adorner extension that is attached to selected components.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Adorners.PrimarySelectionAdornerProvider">
            <summary>
            An adorner extension that is attached to the primary selection.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Adorners.SecondarySelectionAdornerProvider">
            <summary>
            An adorner extension that is attached to the secondary selection.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.SelectionTypes">
            <summary>
            Defines the type how a selection can be changed.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.SelectionTypes.None">
            <summary>
            No selection type specified.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.SelectionTypes.Auto">
            <summary>
            Automatically determine the selection type using the currently pressed
            modifier keys.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.SelectionTypes.Primary">
            <summary>
            Change the primary selection only.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.SelectionTypes.Toggle">
            <summary>
            Toggle the selection.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.SelectionTypes.Add">
            <summary>
            Add to the selection.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.SelectionTypes.Remove">
            <summary>
            Remove from the selection.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.SelectionTypes.Replace">
            <summary>
            Replace the selection.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.ISelectionService">
            <summary>
            Manages selecting components.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.ISelectionService.IsComponentSelected(ICSharpCode.WpfDesign.DesignItem)">
            <summary>
            Gets if the specified component is selected.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.ISelectionService.SetSelectedComponents(System.Collections.Generic.ICollection{ICSharpCode.WpfDesign.DesignItem})">
            <summary>
            Replaces the current selection with the specified selection.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.ISelectionService.SetSelectedComponents(System.Collections.Generic.ICollection{ICSharpCode.WpfDesign.DesignItem},ICSharpCode.WpfDesign.SelectionTypes)">
            <summary>
            Modifies the current selection using the specified components and selectionType.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.ISelectionService.SelectionChanging">
            <summary>Occurs when the current selection is about to change.</summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.ISelectionService.SelectionChanged">
            <summary>Occurs after the current selection has changed.</summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.ISelectionService.PrimarySelectionChanging">
            <summary>Occurs when the primary selection is about to change.</summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.ISelectionService.PrimarySelectionChanged">
            <summary>Occurs after the primary selection has changed.</summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.ISelectionService.SelectedItems">
            <summary>
            Gets the collection of selected components.
            This is a copy of the actual selected components collection, the returned copy
            of the collection will not reflect future changes to the selection.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.ISelectionService.PrimarySelection">
            <summary>Gets the object that is currently the primary selected object.</summary>
            <returns>The object that is currently the primary selected object.</returns>
        </member>
        <member name="P:ICSharpCode.WpfDesign.ISelectionService.SelectionCount">
            <summary>Gets the count of selected objects.</summary>
            <returns>The number of selected objects.</returns>
        </member>
        <member name="T:ICSharpCode.WpfDesign.IComponentService">
            <summary>Supports adding and removing components</summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.IComponentService.GetDesignItem(System.Object)">
            <summary>
            Gets the site of an existing, registered component.
            </summary>
            <returns>
            The site of the component, or null if the component is not registered.
            </returns>
        </member>
        <member name="M:ICSharpCode.WpfDesign.IComponentService.RegisterComponentForDesigner(System.Object)">
            <summary>Registers a component for usage in the designer.</summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.IComponentService.ComponentRegistered">
            <summary>Event raised whenever a component is registered</summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.ViewService">
            <summary>
            Service for getting the view for a model or the model for a view.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.ViewService.GetModel(System.Windows.DependencyObject)">
            <summary>
            Gets the model represented by the specified view element.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.ViewService.GetView(ICSharpCode.WpfDesign.DesignItem)">
            <summary>
            Gets the view for the specified model item.
            This is equivalent to using <c>model.View</c>.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.IPropertyDescriptionService">
            <summary>
            Used to get a description for properties.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.IPropertyDescriptionService.GetDescription(ICSharpCode.WpfDesign.DesignItemProperty)">
            <summary>
            Gets a WPF object representing a graphical description of the property.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.IErrorService">
            <summary>
            Service for showing error UI.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.IErrorService.ShowErrorTooltip(System.Windows.FrameworkElement,System.Windows.UIElement)">
            <summary>
            Shows an error tool tip.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PlacementAlignment">
            <summary>
            A combination of HorizontalAlignment/VerticalAlignment.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PlacementAlignment.#ctor(System.Windows.HorizontalAlignment,System.Windows.VerticalAlignment)">
            <summary>
            Creates a new instance of the PlacementAlignment structure.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PlacementAlignment.Equals(System.Object)">
            <summary>Compares this to <paramref name="other"/>.</summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PlacementAlignment.Equals(ICSharpCode.WpfDesign.PlacementAlignment)">
            <summary>Compares this to <paramref name="other"/>.</summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PlacementAlignment.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PlacementAlignment.op_Equality(ICSharpCode.WpfDesign.PlacementAlignment,ICSharpCode.WpfDesign.PlacementAlignment)">
            <summary>Compares <paramref name="lhs"/> to <paramref name="rhs"/>.</summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PlacementAlignment.op_Inequality(ICSharpCode.WpfDesign.PlacementAlignment,ICSharpCode.WpfDesign.PlacementAlignment)">
            <summary>Compares <paramref name="lhs"/> to <paramref name="rhs"/>.</summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.PlacementAlignment.TopLeft">
            <summary>Top left</summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.PlacementAlignment.Top">
            <summary>Top center</summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.PlacementAlignment.TopRight">
            <summary>Top right</summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.PlacementAlignment.Left">
            <summary>Center left</summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.PlacementAlignment.Center">
            <summary>Center center</summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.PlacementAlignment.Right">
            <summary>Center right</summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.PlacementAlignment.BottomLeft">
            <summary>Bottom left</summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.PlacementAlignment.Bottom">
            <summary>Bottom center</summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.PlacementAlignment.BottomRight">
            <summary>Bottom right</summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PlacementAlignment.Horizontal">
            <summary>
            Gets the horizontal component.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PlacementAlignment.Vertical">
            <summary>
            Gets the vertical component.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PropertyEditor.DesignItemDataSource">
            <summary>
            Implements IPropertyEditorDataSource accessing the properties on a DesignItem.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.DesignItemDataSource.#ctor(ICSharpCode.WpfDesign.DesignItem)">
            <summary>
            Constructs a new DesignItemDataSource for the specified design item.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.DesignItemDataSource.GetDataSourceForDesignItem(ICSharpCode.WpfDesign.DesignItem)">
            <summary>
            Gets a data source for the specified design item.
            This tries to get an existing data source instance (as behavior), or constructs a new
            DesignItemDataSource instance if that fails.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.DesignItemDataSource.GetDataSourceForDesignItems(System.Collections.Generic.ICollection{ICSharpCode.WpfDesign.DesignItem})">
            <summary>
            Gets a data source for the specified design item.
            This tries to get an existing data source instance (as behavior), or constructs a new
            DesignItemDataSource instance if that fails.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.DesignItemDataSource.CreateThumbnailBrush">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource"/></summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.DesignItemDataSource.DesignItem">
            <summary>
            Gets the design item for which this DesignItemDataSource was created.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.DesignItemDataSource.Name">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource"/></summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.PropertyEditor.DesignItemDataSource.NameChanged">
            <summary>
            Is raised when the name of the design item changes.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.DesignItemDataSource.Type">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource"/></summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.DesignItemDataSource.Icon">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource"/></summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.DesignItemDataSource.Properties">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource"/></summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.DesignItemDataSource.CanAddAttachedProperties">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource"/></summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.DesignItemDataSource.Services">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource"/></summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Extensions.SelectionExtensionServer">
            <summary>
            Applies an extension to the selected components.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.SelectionExtensionServer.OnInitialized">
            <summary>
            Is called after the extension server is initialized and the Context property has been set.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.SelectionExtensionServer.ShouldApplyExtensions(ICSharpCode.WpfDesign.DesignItem)">
            <summary>
            Gets if the item is selected.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Extensions.SecondarySelectionExtensionServer">
            <summary>
            Applies an extension to the selected components, but not to the primary selection.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.SecondarySelectionExtensionServer.ShouldApplyExtensions(ICSharpCode.WpfDesign.DesignItem)">
            <summary>
            Gets if the item is in the secondary selection.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Extensions.PrimarySelectionExtensionServer">
            <summary>
            Applies an extension to the primary selection.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.PrimarySelectionExtensionServer.OnInitialized">
            <summary>
            Is called after the extension server is initialized and the Context property has been set.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.PrimarySelectionExtensionServer.ShouldApplyExtensions(ICSharpCode.WpfDesign.DesignItem)">
            <summary>
            Gets if the item is the primary selection.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Extensions.PrimarySelectionParentExtensionServer">
            <summary>
            Applies an extension to the parent of the primary selection.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.PrimarySelectionParentExtensionServer.OnInitialized">
            <summary>
            Is called after the extension server is initialized and the Context property has been set.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.PrimarySelectionParentExtensionServer.ShouldApplyExtensions(ICSharpCode.WpfDesign.DesignItem)">
            <summary>
            Gets if the item is the primary selection.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Extensions.ExtensionManager">
            <summary>
            Manages extension creation for a design context.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.ExtensionManager.ReapplyExtensions(System.Collections.Generic.IEnumerable{ICSharpCode.WpfDesign.DesignItem},ICSharpCode.WpfDesign.Extensions.ExtensionServer)">
            <summary>
            Re-applies extensions from the ExtensionServer to the specified design items.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.ExtensionManager.GetExtensionTypes(System.Type)">
            <summary>
            Gets all the types of all extensions that are applied to the specified item type.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.ExtensionManager.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers extensions from the specified assembly.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.ExtensionManager.GetExtensionServer(ICSharpCode.WpfDesign.Extensions.ExtensionServerAttribute)">
            <summary>
            Gets the extension server for the specified extension server attribute.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.ExtensionManager.CreateInstanceWithCustomInstanceFactory(System.Type,System.Object[])">
            <summary>
            Create an instance of the specified type using the specified arguments.
            The instance is created using a CustomInstanceFactory registered for the type,
            or using reflection if no instance factory is found.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Adorners.RelativePlacement">
            <summary>
            Placement class providing properties for different kinds of relative placements.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.RelativePlacement.#ctor">
            <summary>
            Creates a new RelativePlacement instance. The default instance is a adorner with zero size, you
            have to set some properties to define the placement.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.RelativePlacement.#ctor(System.Windows.HorizontalAlignment,System.Windows.VerticalAlignment)">
            <summary>
            Creates a new RelativePlacement instance from the specified horizontal and vertical alignments.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.RelativePlacement.Arrange(ICSharpCode.WpfDesign.Adorners.AdornerPanel,System.Windows.UIElement,System.Windows.Size)">
            <summary>
            Arranges the adorner element on the specified adorner panel.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Adorners.RelativePlacement.WidthRelativeToDesiredWidth">
            <summary>
            Gets/Sets the width of the adorner as factor relative to the desired adorner width.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Adorners.RelativePlacement.HeightRelativeToDesiredHeight">
            <summary>
            Gets/Sets the height of the adorner as factor relative to the desired adorner height.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Adorners.RelativePlacement.WidthRelativeToContentWidth">
            <summary>
            Gets/Sets the width of the adorner as factor relative to the width of the adorned item.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Adorners.RelativePlacement.HeightRelativeToContentHeight">
            <summary>
            Gets/Sets the height of the adorner as factor relative to the height of the adorned item.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Adorners.RelativePlacement.WidthOffset">
            <summary>
            Gets/Sets an offset that is added to the adorner width for the size calculation.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Adorners.RelativePlacement.HeightOffset">
            <summary>
            Gets/Sets an offset that is added to the adorner height for the size calculation.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Adorners.RelativePlacement.XOffset">
            <summary>
            Gets/Sets an offset that is added to the adorner position.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Adorners.RelativePlacement.YOffset">
            <summary>
            Gets/Sets an offset that is added to the adorner position.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Adorners.RelativePlacement.XRelativeToAdornerWidth">
            <summary>
            Gets/Sets the left border of the adorner element as factor relative to the width of the adorner.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Adorners.RelativePlacement.YRelativeToAdornerHeight">
            <summary>
            Gets/Sets the top border of the adorner element as factor relative to the height of the adorner.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Adorners.RelativePlacement.XRelativeToContentWidth">
            <summary>
            Gets/Sets the left border of the adorner element as factor relative to the width of the adorned content.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Adorners.RelativePlacement.YRelativeToContentHeight">
            <summary>
            Gets/Sets the top border of the adorner element as factor relative to the height of the adorned content.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PropertyEditor.PropertyEditorBindingHelper">
            <summary>
            Provides a static method to create a binding between a dependency property
            and a data property.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.PropertyEditorBindingHelper.AddValueChangedEventHandler(System.Windows.FrameworkElement,ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty,System.EventHandler)">
            <summary>
            Registers a value changed event handler for the data property that gets unregistered when the
            editor FrameworkElement is unloaded.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.PropertyEditorBindingHelper.CreateBinding(System.Windows.FrameworkElement,ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty)">
            <summary>
            Binds editor.property to dataProperty.Value.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.HashSet`1">
            <summary>
            Represents a set of items. The set does not preserve the order of items and does not allow items to
            be added twice.
            It supports collection change notifications and is cloned by sharing the underlying
            data structure and delaying the actual copy until the next change.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.HashSet`1.#ctor">
            <summary>
            Creates a new, empty set.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.HashSet`1.#ctor(ICSharpCode.WpfDesign.HashSet{`0})">
            <summary>
            Creates a copy of the existing set.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.HashSet`1.Add(`0)">
            <summary>
            Adds the item to the set.
            Trying to add <c>null</c> will return false without changing the collection.
            </summary>
            <returns>True when the item was added, false when it was not added because it already is in the set</returns>
        </member>
        <member name="M:ICSharpCode.WpfDesign.HashSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a list of items to the set. This is equivalent to calling <see cref="M:ICSharpCode.WpfDesign.HashSet`1.Add(`0)"/> for each item in <paramref name="items"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.HashSet`1.Clear">
            <summary>
            Removes all items from the set.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.HashSet`1.Contains(`0)">
            <summary>
            Tests if this set contains the specified item.
            Checking for <c>null</c> always returns false.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.HashSet`1.Remove(`0)">
            <summary>
            Removes an item from the set.
            Trying to remove <c>null</c> will return false without changing the collection.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.HashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            Copy all items to the specified array.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.HashSet`1.GetEnumerator">
            <summary>
            Gets an enumerator to enumerate the items in the set.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.HashSet`1.Clone">
            <summary>
            Create a copy of this set.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.HashSet`1.CollectionChanged">
            <summary>
            This event is raised whenever the collection changes.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.HashSet`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Extensions.LogicalOrExtensionServer`2">
            <summary>
            Combines two extension servers using a logical OR.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.LogicalOrExtensionServer`2.OnInitialized">
            <summary/>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.LogicalOrExtensionServer`2.ShouldApplyExtensions(ICSharpCode.WpfDesign.DesignItem)">
            <summary/>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Extensions.LogicalAndExtensionServer`2">
            <summary>
            Combines two extension servers using a logical AND.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.LogicalAndExtensionServer`2.OnInitialized">
            <summary/>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.LogicalAndExtensionServer`2.ShouldApplyExtensions(ICSharpCode.WpfDesign.DesignItem)">
            <summary/>
        </member>
        <member name="T:ICSharpCode.WpfDesign.ITool">
            <summary>
            Describes a tool that can handle input on the design surface.
            Modelled after the description on http://urbanpotato.net/Default.aspx/document/2300
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.ITool.Activate(ICSharpCode.WpfDesign.IDesignPanel)">
            <summary>
            Activates the tool, attaching its event handlers to the design panel.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.ITool.Deactivate(ICSharpCode.WpfDesign.IDesignPanel)">
            <summary>
            Deactivates the tool, detaching its event handlers from the design panel.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.ITool.Cursor">
            <summary>
            Gets the cursor used by the tool.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.IToolService">
            <summary>
            Service that manages tool selection.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.IToolService.PointerTool">
            <summary>
            Gets the 'pointer' tool.
            The pointer tool is the default tool for selecting and moving elements.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.IToolService.CurrentTool">
            <summary>
            Gets/Sets the currently selected tool.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.IToolService.CurrentToolChanged">
            <summary>
            Is raised when the current tool changes.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.IDesignPanel">
            <summary>
            Interface for the design panel. The design panel is the UIElement containing the
            designed elements and is responsible for handling mouse and keyboard events.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.IDesignPanel.HitTest(System.Windows.Point,System.Boolean,System.Boolean)">
            <summary>
            Performs a hit test on the design surface.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.IDesignPanel.HitTest(System.Windows.Point,System.Boolean,System.Boolean,System.Predicate{ICSharpCode.WpfDesign.DesignPanelHitTestResult})">
            <summary>
            Performs a hit test on the design surface, raising <paramref name="callback"/> for each match.
            Hit testing continues while the callback returns true.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.IDesignPanel.Context">
            <summary>
            Gets the design context used by the DesignPanel.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.IDesignPanel.IsContentHitTestVisible">
            <summary>
            Gets/Sets if the design content is visible for hit-testing purposes.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.IDesignPanel.IsAdornerLayerHitTestVisible">
            <summary>
            Gets/Sets if the adorner layer is visible for hit-testing purposes.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.IDesignPanel.Adorners">
            <summary>
            Gets the list of adorners displayed on the design panel.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.IDesignPanel.MouseDown">
            <summary>
            Occurs when a mouse button is pressed.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.IDesignPanel.MouseUp">
            <summary>
            Occurs when a mouse button is released.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.IDesignPanel.DragEnter">
            <summary>
            Occurs when a drag operation enters the design panel.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.IDesignPanel.DragOver">
            <summary>
            Occurs when a drag operation is over the design panel.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.IDesignPanel.DragLeave">
            <summary>
            Occurs when a drag operation leaves the design panel.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.IDesignPanel.Drop">
            <summary>
            Occurs when an element is dropped on the design panel.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.ServiceContainer">
            <summary>
            The <see cref="T:ICSharpCode.WpfDesign.ServiceContainer"/> is a built-in service that manages the list of services.
            You can only add services to it, removing or replacing services is not supported because
            many designers depend on keeping their services available.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.ServiceContainer.AddService(System.Type,System.Object)">
            <summary>
            Adds a new service to the container.
            </summary>
            <param name="serviceInterface">
            The type of the service interface to use as a key for the service.
            </param>
            <param name="serviceInstance">
            The service instance implementing that interface.
            </param>
        </member>
        <member name="M:ICSharpCode.WpfDesign.ServiceContainer.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.ServiceContainer.GetService``1">
            <summary>
            Gets the service object of the type T.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.ServiceContainer.RunWhenAvailable``1(System.Action{``0})">
            <summary>
            Subscribes to the service of type T.
            serviceAvailableAction will be called after the service gets available. If the service is already available,
            the action will be called immediately.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.ServiceContainer.AllServices">
            <summary>
            Gets a collection of all registered services.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.ServiceContainer.Selection">
            <summary>
            Gets the <see cref="T:ICSharpCode.WpfDesign.ISelectionService"/>.
            Throws an exception if the service is not found.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.ServiceContainer.Tool">
            <summary>
            Gets the <see cref="T:ICSharpCode.WpfDesign.IToolService"/>.
            Throws an exception if the service is not found.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.ServiceContainer.Component">
            <summary>
            Gets the <see cref="T:ICSharpCode.WpfDesign.IComponentService"/>.
            Throws an exception if the service is not found.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.ServiceContainer.View">
            <summary>
            Gets the <see cref="T:ICSharpCode.WpfDesign.ViewService"/>.
            Throws an exception if the service is not found.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.ServiceContainer.ExtensionManager">
            <summary>
            Gets the <see cref="P:ICSharpCode.WpfDesign.ServiceContainer.ExtensionManager"/>.
            Throws an exception if the service is not found.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PlacementOperation">
            <summary>
            Stores data about a placement operation.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PlacementOperation.ChangeContainer(ICSharpCode.WpfDesign.DesignItem)">
            <summary>
            Make the placed item switch the container.
            This method assumes that you already have checked if changing the container is possible.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PlacementOperation.DeleteItemsAndCommit">
            <summary>
            Deletes the items being placed, and commits the placement operation.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PlacementOperation.Start(System.Collections.Generic.ICollection{ICSharpCode.WpfDesign.DesignItem},ICSharpCode.WpfDesign.PlacementType)">
            <summary>
            Starts a new placement operation that changes the placement of <paramref name="placedItem"/>.
            </summary>
            <param name="placedItems">The items to be placed.</param>
            <param name="type">The type of the placement.</param>
            <returns>A PlacementOperation object.</returns>
            <remarks>
            You MUST call either <see cref="M:ICSharpCode.WpfDesign.PlacementOperation.Abort"/> or <see cref="M:ICSharpCode.WpfDesign.PlacementOperation.Commit"/> on the returned PlacementOperation
            once you are done with it, otherwise a ChangeGroup will be left open and Undo/Redo will fail to work!
            </remarks>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PlacementOperation.GetPlacementBehavior(System.Collections.Generic.ICollection{ICSharpCode.WpfDesign.DesignItem})">
            <summary>
            Gets the placement behavior associated with the specified items.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PlacementOperation.TryStartInsertNewComponents(ICSharpCode.WpfDesign.DesignItem,System.Collections.Generic.IList{ICSharpCode.WpfDesign.DesignItem},System.Collections.Generic.IList{System.Windows.Rect},ICSharpCode.WpfDesign.PlacementType)">
            <summary>
            Try to insert new components into the container.
            </summary>
            <param name="container">The container that should become the parent of the components.</param>
            <param name="placedItems">The components to add to the container.</param>
            <param name="positions">The rectangle specifying the position the element should get.</param>
            <param name="type">The type </param>
            <returns>The operation that inserts the new components, or null if inserting is not possible.</returns>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PlacementOperation.Abort">
            <summary>
            Aborts the operation.
            This aborts the underlying change group, reverting all changes done while the operation was running.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PlacementOperation.Commit">
            <summary>
            Commits the operation.
            This commits the underlying change group.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PlacementOperation.PlacedItems">
            <summary>
            The items being placed.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PlacementOperation.Type">
            <summary>
            The type of the placement being done.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PlacementOperation.IsAborted">
            <summary>
            Gets if the placement operation was aborted.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PlacementOperation.IsCommitted">
            <summary>
            Gets if the placement operation was committed.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PlacementOperation.CurrentContainer">
            <summary>
            Gets the current container for the placement operation.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PlacementOperation.CurrentContainerBehavior">
            <summary>
            Gets the placement behavior for the current container.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PlacementOperation.Description">
            <summary>
            Gets/Sets the description of the underlying change group.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Extensions.ExtensionServerAttribute">
            <summary>
            Attribute to specify that the decorated class is an extension using the specified extension server.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Extensions.ExtensionServerAttribute.#ctor(System.Type)">
            <summary>
            Create a new ExtensionServerAttribute that specifies that the decorated extension
            uses the specified extension server.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Extensions.ExtensionServerAttribute.ExtensionServerType">
            <summary>
            Gets the type of the item that is designed using this extension.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.DesignContext">
            <summary>
            The context that the designer uses.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignContext.#ctor">
            <summary>
            Creates a new DesignContext instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignContext.Save(System.Xml.XmlWriter)">
            <summary>
            Save the designed elements as XML.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignContext.OpenGroup(System.String,System.Collections.Generic.ICollection{ICSharpCode.WpfDesign.DesignItem})">
            <summary>
            Opens a new change group used to batch several changes.
            ChangeGroups work as transactions and are used to support the Undo/Redo system.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignContext.Services">
            <summary>
            Gets the <see cref="T:ICSharpCode.WpfDesign.ServiceContainer"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignContext.RootItem">
            <summary>
            Gets the root design item.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.IHandlePointerToolMouseDown">
            <summary>
            Behavior interface implemented by elements to handle the mouse down event
            on them.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.IHandlePointerToolMouseDown.HandleSelectionMouseDown(ICSharpCode.WpfDesign.IDesignPanel,System.Windows.Input.MouseButtonEventArgs,ICSharpCode.WpfDesign.DesignPanelHitTestResult)">
            <summary>
            Called to handle the mouse down event.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PropertyEditor.FallbackEditor">
            <summary>
            The type editor used when no other type editor could be found.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.FallbackEditor.#ctor(ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty)">
            <summary>
            Creates a new FallbackEditor instance for the specified property.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.IPlacementBehavior">
            <summary>
            Behavior interface implemented by container elements to support resizing
            child elements.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.IPlacementBehavior.CanPlace(System.Collections.Generic.ICollection{ICSharpCode.WpfDesign.DesignItem},ICSharpCode.WpfDesign.PlacementType,ICSharpCode.WpfDesign.PlacementAlignment)">
            <summary>
            Gets if the child element can be resized.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.IPlacementBehavior.BeginPlacement(ICSharpCode.WpfDesign.PlacementOperation)">
            <summary>
            Starts placement mode for this container.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.IPlacementBehavior.EndPlacement(ICSharpCode.WpfDesign.PlacementOperation)">
            <summary>
            Ends placement mode for this container.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.IPlacementBehavior.GetPosition(ICSharpCode.WpfDesign.PlacementOperation,ICSharpCode.WpfDesign.DesignItem)">
            <summary>
            Gets the original position of the child item.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.IPlacementBehavior.SetPosition(ICSharpCode.WpfDesign.PlacementInformation)">
            <summary>
            Updates the placement of the element specified in the placement operation.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.IPlacementBehavior.CanLeaveContainer(ICSharpCode.WpfDesign.PlacementOperation)">
            <summary>
            Gets if leaving this container is allowed for the specified operation.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.IPlacementBehavior.LeaveContainer(ICSharpCode.WpfDesign.PlacementOperation)">
            <summary>
            Remove the placed children from this container.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.IPlacementBehavior.CanEnterContainer(ICSharpCode.WpfDesign.PlacementOperation)">
            <summary>
            Gets if entering this container is allowed for the specified operation.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.IPlacementBehavior.EnterContainer(ICSharpCode.WpfDesign.PlacementOperation)">
            <summary>
            Let the placed children enter this container.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.IRootPlacementBehavior">
            <summary>
            Behavior interface for root elements (elements where item.Parent is null).
            Is used instead of <see cref="T:ICSharpCode.WpfDesign.IPlacementBehavior"/> to support resizing the root element.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PropertyEditor.ProxyPropertyEditorDataProperty">
            <summary>
            Implements IPropertyEditorDataProperty by forwarding all calls to another IPropertyEditorDataProperty.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.ProxyPropertyEditorDataProperty.#ctor(ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty)">
            <summary></summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.ProxyPropertyEditorDataProperty.GetDescription">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty"/></summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.ProxyPropertyEditorDataProperty.SetCustomExpression(System.String)">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty"/></summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.ProxyPropertyEditorDataProperty.CreateEditor">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty"/></summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.PropertyEditor.ProxyPropertyEditorDataProperty.IsSetChanged">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty"/></summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.PropertyEditor.ProxyPropertyEditorDataProperty.ValueChanged">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty"/></summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.ProxyPropertyEditorDataProperty.OwnerDataSource">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty"/></summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.ProxyPropertyEditorDataProperty.Category">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty"/></summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.ProxyPropertyEditorDataProperty.Name">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty"/></summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.ProxyPropertyEditorDataProperty.ReturnType">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty"/></summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.ProxyPropertyEditorDataProperty.DeclaringType">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty"/></summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.ProxyPropertyEditorDataProperty.TypeConverter">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty"/></summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.ProxyPropertyEditorDataProperty.IsSet">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty"/></summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.ProxyPropertyEditorDataProperty.IsAmbiguous">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty"/></summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.ProxyPropertyEditorDataProperty.Value">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty"/></summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.ProxyPropertyEditorDataProperty.CanUseCustomExpression">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty"/></summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Adorners.AdornerPanel">
            <summary>
            Manages display of adorners on the design surface.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.Adorners.AdornerPanel.PlacementProperty">
            <summary>
            The dependency property used to store the placement of adorner visuals.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerPanel.GetPlacement(System.Windows.UIElement)">
            <summary>
            Gets the placement of the specified adorner.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerPanel.SetPlacement(System.Windows.UIElement,ICSharpCode.WpfDesign.Adorners.AdornerPlacement)">
            <summary>
            Sets the placement of the specified adorner.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerPanel.SetAdornedElement(System.Windows.UIElement,ICSharpCode.WpfDesign.DesignItem)">
            <summary>
            Sets the AdornedElement and AdornedDesignItem properties.
            This method can be called only once.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerPanel.MeasureOverride(System.Windows.Size)">
            <summary/>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerPanel.ArrangeOverride(System.Windows.Size)">
            <summary/>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Adorners.AdornerPanel.AdornedElement">
            <summary>
            Gets the element adorned by this AdornerPanel.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Adorners.AdornerPanel.AdornedDesignItem">
            <summary>
            Gets the design item adorned by this AdornerPanel.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.Adorners.AdornerPanel.Order">
            <summary>
            Gets/Sets the order used to display the AdornerPanel relative to other AdornerPanels.
            Do not change this property after the panel was added to an AdornerLayer!
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Adorners.AdornerOrder">
            <summary>
            Describes where an Adorner is positioned on the Z-Layer.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.Adorners.AdornerOrder.Background">
            <summary>
            The adorner is in the background layer.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.Adorners.AdornerOrder.Content">
            <summary>
            The adorner is in the content layer.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.Adorners.AdornerOrder.BehindForeground">
            <summary>
            The adorner is in the layer behind the foreground but above the content. This layer
            is used for the gray-out effect.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.Adorners.AdornerOrder.Foreground">
            <summary>
            The adorner is in the foreground layer.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerOrder.GetHashCode">
            <summary/>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerOrder.Equals(System.Object)">
            <summary/>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerOrder.Equals(ICSharpCode.WpfDesign.Adorners.AdornerOrder)">
            <summary/>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerOrder.CompareTo(ICSharpCode.WpfDesign.Adorners.AdornerOrder)">
            <summary>
            Compares the <see cref="T:ICSharpCode.WpfDesign.Adorners.AdornerOrder"/> to another AdornerOrder.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerOrder.op_Equality(ICSharpCode.WpfDesign.Adorners.AdornerOrder,ICSharpCode.WpfDesign.Adorners.AdornerOrder)">
            <summary/>
        </member>
        <member name="M:ICSharpCode.WpfDesign.Adorners.AdornerOrder.op_Inequality(ICSharpCode.WpfDesign.Adorners.AdornerOrder,ICSharpCode.WpfDesign.Adorners.AdornerOrder)">
            <summary/>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PropertyEditor.TextBoxEditor">
            <summary>
            Type editor used to edit properties using a text box and the type's default type converter.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.TextBoxEditor.#ctor(ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty)">
            <summary>
            Creates a new TextBoxEditor instance.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.PropertyEditor.MultipleSelectionDataProperty.preventOnValueChanged">
            <summary>0 = don't prevent, 1 = prevent, 2 = prevented</summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.DesignerException">
            <summary>
            Exception class used for designer failures.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignerException.#ctor">
            <summary>
            Create a new DesignerException instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignerException.#ctor(System.String)">
            <summary>
            Create a new DesignerException instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignerException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new DesignerException instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new DesignerException instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.DesignItem">
            <summary>
            The DesignItem connects a component with the service system and the designers.
            Equivalent to Cider's ModelItem.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignItem.OpenGroup(System.String)">
            <summary>
            Opens a new change group used to batch several changes.
            ChangeGroups work as transactions and are used to support the Undo/Redo system.
            Note: the ChangeGroup applies to the whole <see cref="T:ICSharpCode.WpfDesign.DesignContext"/>, not just to
            this item!
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignItem.AddBehavior(System.Type,System.Object)">
            <summary>
            Adds a bevahior extension object to this design item.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignItem.GetBehavior``1">
            <summary>
            Gets a bevahior extension object from the design item.
            </summary>
            <returns>The behavior object, or null if it was not found.</returns>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignItem.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ICSharpCode.WpfDesign.DesignItem.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItem.Component">
            <summary>
            Gets the component this DesignSite was created for.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItem.ComponentType">
            <summary>
            Gets the component type of this design site.
            This value may be different from Component.GetType() if a CustomInstanceFactory created
            an object using a different type (e.g. ComponentType=Window but Component.GetType()=WindowClone).
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItem.View">
            <summary>
            Gets the view used for the component.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItem.Context">
            <summary>
            Gets the design context.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItem.Parent">
            <summary>
            Gets the parent design item.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.DesignItem.ParentChanged">
            <summary>
            Occurs when the parent of this design item changes.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItem.ParentProperty">
            <summary>
            Gets the property where this DesignItem is used as a value.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItem.Properties">
            <summary>
            Gets properties set on the design item.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItem.Name">
            <summary>
            Gets/Sets the name of the design item.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.DesignItem.NameChanged">
            <summary>
            Is raised when the name of the design item changes.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItem.Services">
            <summary>
            Gets an instance that provides convenience properties for the most-used designers.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItem.Extensions">
            <summary>
            Gets the extensions registered for this DesignItem.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.DesignItem.PropertyChanged">
            <summary>
            This event is raised whenever a model property on the DesignItem changes.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PropertyEditor.PropertyEditorAttribute">
            <summary>
            Attribute to specify that the decorated class is a editor for the specified property.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.PropertyEditorAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates a new PropertyEditorAttribute that specifies that the decorated class is a editor
            for the "<paramref name="propertyDeclaringType"/>.<paramref name="propertyName"/>".
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.PropertyEditorAttribute.PropertyDeclaringType">
            <summary>
            Gets the type that declares the property that the decorated editor supports.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.PropertyEditorAttribute.PropertyName">
            <summary>
            Gets the name of the property that the decorated editor supports.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PropertyEditor.MultipleSelectionDataSource">
            <summary>
            Implements IPropertyEditorDataSource by combining the information from multiple data sources.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.MultipleSelectionDataSource.CreateDataSource(ICSharpCode.WpfDesign.ServiceContainer,System.Collections.Generic.ICollection{ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource})">
            <summary>
            Creates a data source for a collection of data sources.
            </summary>
            <param name="services">The service container to use.</param>
            <param name="sources">The collection of data sources.</param>
            <returns>
            <c>null</c>, if sources is <c>null</c> or empty.
            <c>sources[0]</c>, if sources.Count == 1.
            A new MultiSelectionDataSource, if sources.Count >= 2.
            </returns>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.MultipleSelectionDataSource.#ctor(ICSharpCode.WpfDesign.ServiceContainer,System.Collections.Generic.ICollection{ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource})">
            <summary>
            Creates a new MultiSelectionDataSource instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.MultipleSelectionDataSource.CreateThumbnailBrush">
            <summary>See <see cref="T:ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataSource"/></summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.PropertyEditor.MultipleSelectionDataSource.NameChanged">
            <summary>
            Is never raised because Name cannot change.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.MultipleSelectionDataSource.Name">
            <summary>
            Always returns null. The setter throws an exception.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.MultipleSelectionDataSource.Type">
            <summary>
            Gets the type of the selected objects.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.MultipleSelectionDataSource.Icon">
            <summary>
            Gets the icon of the selected objects.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.MultipleSelectionDataSource.Properties">
            <summary>
            Gets the collection of properties.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.MultipleSelectionDataSource.CanAddAttachedProperties">
            <summary>
            Gets if adding attached properties is supported.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.PropertyEditor.MultipleSelectionDataSource.Services">
            <summary>
            Gets the service container used by this data source.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PropertyEditor.EditorManager">
            <summary>
            Manages registered type and property editors.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.EditorManager.CreateEditor(ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty)">
            <summary>
            Creates an editor for the specified property.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.EditorManager.CreateFallbackEditor(ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty)">
            <summary>
            Creates the fallback editor for the specified property.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.EditorManager.GetEditorType(ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty)">
            <summary>
            Gets the type of the editor that can edit the specified property.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.EditorManager.GetFallbackEditorType(ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty)">
            <summary>
            Gets the type of the fallback editor used for the specified property.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.EditorManager.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers property editors defined in the specified assembly.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.DesignItemProperty">
            <summary>
            Represents a property of a DesignItem.
            All changes done via the DesignItemProperty class are represented in the underlying model (e.g. XAML).
            All such changes are recorded in the currently running designer transaction (<see cref="T:ICSharpCode.WpfDesign.ChangeGroup"/>),
            enabling Undo/Redo support.
            Warning: Changes directly done to control instances might not be reflected in the model.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignItemProperty.SetValue(System.Object)">
            <summary>
            Sets the value of the property.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignItemProperty.Reset">
            <summary>
            Resets the property value to the default, possibly removing it from the list of properties.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItemProperty.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItemProperty.ReturnType">
            <summary>
            Gets the return type of the property.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItemProperty.DeclaringType">
            <summary>
            Gets the type that declares the property.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItemProperty.Category">
            <summary>
            Gets the category of the property.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItemProperty.TypeConverter">
            <summary>
            Gets the type converter used to convert property values to/from string.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItemProperty.IsCollection">
            <summary>
            Gets if the property represents a collection.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItemProperty.CollectionElements">
            <summary>
            Gets the elements represented by the collection.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItemProperty.Value">
            <summary>
            Gets the value of the property. This property returns null if the value is not set,
            or if the value is set to a primitive value.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.DesignItemProperty.ValueChanged">
            <summary>
            Is raised when the value of the property changes (by calling <see cref="M:ICSharpCode.WpfDesign.DesignItemProperty.SetValue(System.Object)"/> or <see cref="M:ICSharpCode.WpfDesign.DesignItemProperty.Reset"/>).
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItemProperty.ValueOnInstance">
            <summary>
            Gets/Sets the value of the property on the designed instance.
            If the property is not set, this returns the default value.
            The setter does NOT update the underlying model, use SetValue() instead!
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItemProperty.IsSet">
            <summary>
            Gets if the property is set on the design item.
            </summary>
        </member>
        <member name="E:ICSharpCode.WpfDesign.DesignItemProperty.IsSetChanged">
            <summary>
            Occurs when the value of the IsSet property changes.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.DesignItemPropertyCollection">
            <summary>
            Represents a collection of design item properties.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignItemPropertyCollection.GetProperty(System.String)">
            <summary>
            Gets the design item property with the specified name.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignItemPropertyCollection.GetAttachedProperty(System.Type,System.String)">
            <summary>
            Gets the attached property on the specified owner with the specified name.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignItemPropertyCollection.GetProperty(System.Windows.DependencyProperty)">
            <summary>
            Gets the design item property representing the specified dependency property.
            The property must not be an attached property.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignItemPropertyCollection.GetAttachedProperty(System.Windows.DependencyProperty)">
            <summary>
            Gets the design item property representing the specified attached dependency property.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.DesignItemPropertyCollection.GetEnumerator">
            <summary>
            Gets an enumerator to enumerate the properties that have a non-default value.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItemPropertyCollection.Item(System.String)">
            <summary>
            Gets the property with the specified name.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.DesignItemPropertyCollection.Item(System.Windows.DependencyProperty)">
            <summary>
            Gets the design item property representing the specified dependency property.
            The property must not be an attached property.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PropertyEditor.BooleanEditor">
            <summary>
            Type editor used to edit bool properties.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PropertyEditor.BooleanEditor.#ctor(ICSharpCode.WpfDesign.PropertyEditor.IPropertyEditorDataProperty)">
            <summary>
            Creates a new BooleanEditor instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.Extensions.BehaviorExtension">
            <summary>
            Base class for extensions that provide a behavior interface for the designed item.
            These extensions are always loaded. They must have an parameter-less constructor.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.ChangeGroup">
            <summary>
            Base class for change groups.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.ChangeGroup.Commit">
            <summary>
            Commits the change group.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.ChangeGroup.Abort">
            <summary>
            Aborts the change group.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.ChangeGroup.Disposed">
            <summary>
            Is called when the change group is disposed. Should Abort the change group if it is not already committed.
            </summary>
        </member>
        <member name="P:ICSharpCode.WpfDesign.ChangeGroup.Title">
            <summary>
            Gets/Sets the title of the change group.
            </summary>
        </member>
        <member name="T:ICSharpCode.WpfDesign.PlacementType">
            <summary>
            Describes how a placement is done.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.PlacementType.Resize">
            <summary>
            Placement is done by resizing an element in a drag'n'drop operation.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.PlacementType.Move">
            <summary>
            Placement is done by moving an element in a drag'n'drop operation.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.PlacementType.AddItem">
            <summary>
            Adding an element to a specified position in the container.
            AddItem is used when dragging a toolbox item to the design surface.
            </summary>
        </member>
        <member name="F:ICSharpCode.WpfDesign.PlacementType.Delete">
            <summary>
            Not a "real" placement, but deleting the element.
            </summary>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PlacementType.Register(System.String)">
            <summary>
            Creates a new unique PlacementKind.
            </summary>
            <param name="name">The name to return from a ToString() call.
            Note that two PlacementTypes with the same name are NOT equal!</param>
        </member>
        <member name="M:ICSharpCode.WpfDesign.PlacementType.ToString">
            <summary>
            Gets the name used to register this PlacementType.
            </summary>
        </member>
    </members>
</doc>

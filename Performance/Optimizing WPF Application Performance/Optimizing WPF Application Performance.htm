<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html id="ctl00_Html1" xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-us"><head><!-- MTPS 0606 -->



<meta name="robots" content="NOINDEX,NOFOLLOW"><meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="ms.locale" content="en-us">
<meta name="robots" content="NOINDEX,NOFOLLOW">
<meta name="MN" content="956-13:03:04"><meta name="Search.CodeSnippet" value="1"><meta name="MSHKeywordK" content="application optimization [Windows Presentation Foundation]">
<meta name="Search.MSHKeywordK" content="application optimization [Windows Presentation Foundation]">
<meta name="MSHKeywordK" content="application rendering [Windows Presentation Foundation],performance">
<meta name="Search.MSHKeywordK" content="application rendering [Windows Presentation Foundation],performance">
<meta name="MSHKeywordK" content="applications [Windows Presentation Foundation],optimizing">
<meta name="Search.MSHKeywordK" content="applications [Windows Presentation Foundation],optimizing">
<meta name="MSHKeywordK" content="applications [Windows Presentation Foundation],performance">
<meta name="Search.MSHKeywordK" content="applications [Windows Presentation Foundation],performance">
<meta name="MSHKeywordS" content="WPF">
<meta name="Search.MSHKeywordS" content="WPF">
<meta name="MSHKeywordF" content="WPF">
<meta name="Search.MSHKeywordF" content="WPF">
<meta name="MSHKeywordA" content="ac8c6aa3-3c68-4a24-9827-3b6c829c1ebf">
<meta name="Search.MSHKeywordA" content="ac8c6aa3-3c68-4a24-9827-3b6c829c1ebf">
<meta name="MSHAttr" content="DocSetTitle:Windows Presentation Foundation">
<meta name="Search.DocSetTitle" content="Windows Presentation Foundation">
<meta name="MSHAttr" content="DocSetRoot:Aa970683">
<meta name="Search.DocSetRoot" content="Aa970683">
<meta name="MSHAttr" content="Catalog Container:System_Default_Catalog">
<meta name="Search.Catalog Container" content="System_Default_Catalog">
<meta name="MSHAttr" content="Content Set Container:System_Default_Content_Set">
<meta name="Search.Content Set Container" content="System_Default_Content_Set">
<meta name="MSHAttr" content="DocSet:wpf">
<meta name="Search.DocSet" content="wpf">
<meta name="MSHAttr" content="PlatformIntro:vista">
<meta name="Search.PlatformIntro" content="vista">
<meta name="MSHAttr" content="Locale:kbEnglish">
<meta name="Search.Locale" content="kbEnglish">
<meta name="MSHAttr" content="AssetID:ac8c6aa3-3c68-4a24-9827-3b6c829c1ebf">
<meta name="Search.AssetID" content="ac8c6aa3-3c68-4a24-9827-3b6c829c1ebf">
<meta name="MSHAttr" content="TopicType:kbArticle">
<meta name="Search.TopicType" content="kbArticle">
<meta name="MSHAttr" content="DevLang:XAML">
<meta name="Search.DevLang" content="XAML">
<meta name="MSHAttr" content="DevLang:CSharp">
<meta name="Search.DevLang" content="CSharp">
<meta name="MSHAttr" content="DocSet:ExpressLibVS">
<meta name="Search.DocSet" content="ExpressLibVS">
<meta name="MSHAttr" content="DocSet:VisualStudioPartner">
<meta name="Search.DocSet" content="VisualStudioPartner">
<meta name="MSHAttr" content="DocSet:C#">
<meta name="Search.DocSet" content="C#">
<meta name="MSHAttr" content="DocSet:Visual Basic">
<meta name="Search.DocSet" content="Visual Basic">
<meta name="Description" content="This topic is intended as a reference for Windows Presentation Foundation (WPF) application developers who are looking for ways to improve the performance of their applications. If you are a developer who is new to the Microsoft .NET Framework version 3.0 and WPF, you should first familiarize yourself with both platforms. This topic assumes working knowledge of both, and is written for programmers who already know enough to get their applications up and running. Information in this topic is based on version 1.0 of WPF.">
<meta name="Search.Description" content="This topic is intended as a reference for Windows Presentation Foundation (WPF) application developers who are looking for ways to improve the performance of their applications. If you are a developer who is new to the Microsoft .NET Framework version 3.0 and WPF, you should first familiarize yourself with both platforms. This topic assumes working knowledge of both, and is written for programmers who already know enough to get their applications up and running. Information in this topic is based on version 1.0 of WPF.">
<meta name="MSHAttr" content="Abstract:This topic is intended as a reference for Windows Presentation Foundation (WPF) application developers who are looking for ways to improve the performance of their applications. If you are a developer who is new to the Microsoft .NET Framework version 3.0 and WPF, you should first familiarize yourself with both platforms. This topic assumes working knowledge of both, and is written for programmers who already know enough to get their applications up and running. Information in this topic is based on version 1.0 of WPF.">
<meta name="Search.Abstract" content="This topic is intended as a reference for Windows Presentation Foundation (WPF) application developers who are looking for ways to improve the performance of their applications. If you are a developer who is new to the Microsoft .NET Framework version 3.0 and WPF, you should first familiarize yourself with both platforms. This topic assumes working knowledge of both, and is written for programmers who already know enough to get their applications up and running. Information in this topic is based on version 1.0 of WPF.">
<meta name="MSHAttr" content="CommunityContent:1">
<meta name="Search.CommunityContent" content="1">
<meta name="Search.TagsTopic" content="">
<meta name="Search.MScategory" content="ms123401">
<meta name="MSHAttr" content="MScategory:ms310249">
<meta name="Search.MScategory" content="ms310249">
<meta name="MSHAttr" content="MScategory:ms310241">
<meta name="Search.MScategory" content="ms310241">
<meta name="MSHAttr" content="MScategory:aa139615">
<meta name="Search.MScategory" content="aa139615">
<meta name="MSHAttr" content="MScategory:ms768636">
<meta name="Search.MScategory" content="ms768636">
<meta name="MSHAttr" content="MScategory:ms754130">
<meta name="Search.MScategory" content="ms754130">
<meta name="MSHAttr" content="MScategory:ms754032">
<meta name="Search.MScategory" content="ms754032">
<meta name="MSHAttr" content="MScategory:aa970776">
<meta name="Search.MScategory" content="aa970776">
<meta name="MSHAttr" content="MScategory:aa970683">
<meta name="Search.MScategory" content="aa970683">
<meta name="MSHAttr" content="ShippedIn:VS.85">
<meta name="Search.ShippedIn" content="VS85">
<meta name="MSHAttr" content="OnlineHelp:VS2005">
<meta name="Search.OnlineHelp" content="VS2005">
<meta name="Search.ShortId" content="aa970683">
<link rel="stylesheet" type="text/css" href="Optimizing%20WPF%20Application%20Performance_files/PrinterFriendlyType_master.css">
<link rel="stylesheet" type="text/css" href="Optimizing%20WPF%20Application%20Performance_files/css.css">
<script src="Optimizing%20WPF%20Application%20Performance_files/js.js" type="text/javascript"></script><!--[if IE]><style>pre { white-space: normal; }</style><![endif]-->

    
	<link href="Optimizing%20WPF%20Application%20Performance_files/global.css" rel="stylesheet" type="text/css">
    <script defer="defer" type="text/javascript">window.print();</script><title>Optimizing WPF Application Performance</title></head><body>
    <form name="aspnetForm" method="post" action="aa970683(d=printer).aspx" id="aspnetForm">
<div>
<input name="__EVENTTARGET" id="__EVENTTARGET" value="" type="hidden">
<input name="__EVENTARGUMENT" id="__EVENTARGUMENT" value="" type="hidden">
<input name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwUBMGRkqSgZUoaitkg2JMm+JLUDeCZ4WGs=" type="hidden">
</div>

<script type="text/javascript">
<!--
var theForm = document.forms['aspnetForm'];
if (!theForm) {
    theForm = document.aspnetForm;
}
function __doPostBack(eventTarget, eventArgument) {
    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {
        theForm.__EVENTTARGET.value = eventTarget;
        theForm.__EVENTARGUMENT.value = eventArgument;
        theForm.submit();
    }
}
// -->
</script>


<script src="Optimizing%20WPF%20Application%20Performance_files/WebResource.js" type="text/javascript"></script>


<script src="Optimizing%20WPF%20Application%20Performance_files/ScriptResource.js" type="text/javascript"></script>
    
        <div id="ctl00_BannerControl1_MTPS_PrinterFriendlyBanner" class="MTPS_PrinterFriendlyBanner_msdn">
	
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tbody><tr>
	<td class="PFB_Left"><img id="ctl00_BannerControl1_LogoImage" src="Optimizing%20WPF%20Application%20Performance_files/msdn.gif" style="border-width: 0px;"></td>
	<td class="PFB_Right"><span id="ctl00_BannerControl1_CopyrightLabel" title="©2007 Microsoft Corporation. All rights reserved." class="MTPS_PrinterFriendlyCopyrightText">©2007 Microsoft Corporation. All rights reserved.</span></td>
</tr>
</tbody></table>

</div>
        <div class="ContentArea">
            <div id="ctl00_MainContent">
	<div class="topic"><div class="majorTitle">
            
              
            
          </div><div class="title">
            Optimizing WPF Application Performance
          </div><!--Content type: DocStudio. Transform: psdk2mtps.xslt.--><div id="mainSection"> <div id="mainBody">  <p>This
topic is intended as a reference for Windows Presentation Foundation
(WPF) application developers who are looking for ways to improve the
performance of their applications. If you are a developer who is new to
the Microsoft .NET Framework version 3.0 and WPF, you should first
familiarize yourself with both platforms. This topic assumes working
knowledge of both, and is written for programmers who already know
enough to get their applications up and running. Information in this
topic is based on version 1.0 of WPF.</p> <div class="alert"><table width="100%"><tbody><tr><th align="left"><img class="note" alt="Note" src="Optimizing%20WPF%20Application%20Performance_files/Aa970683.gif">Note: </th></tr><tr><td> <p>The
performance data provided in this topic are based on WPF applications
running on a 2.8 GHz PC with 512 RAM and an ATI Radeon 9700 graphics
card.</p> </td></tr></tbody></table></div> <p> </p><p>This topic contains the following sections.</p> <ul><li><a href="#planning_for_performance">Planning for Performance</a></li><li><a href="#taking_advantage_of_hardware">Taking Advantage of Hardware</a></li><li><a href="#layout_and_design">Layout and Design</a></li><li><a href="#twoD_graphics_and_imaging">2D Graphics and Imaging</a></li><li><a href="#object_behavior">Object Behavior</a></li><li><a href="#application_resources">Application Resources</a></li><li><a href="#text">Text</a></li><li><a href="#data_binding">Data Binding</a></li><li><a href="#other_performance_recommendations">Other Performance Recommendations</a></li><li><a href="#wpf_performance_tools_and_resources">WPF Performance Tools and Resources</a></li><li><a href="#seeAlsoSection">Related Topics</a></li></ul> <a name="planning_for_performance"><!----></a><h1 class="heading">Planning for Performance</h1><div id="sectionSection0" class="seeAlsoNoToggleSection"> <p>The
success of achieving your performance goals depends on how well you
develop your performance strategy. Planning is the first stage in
developing any product. The following are a few very simple rules for
developing a good performance strategy.</p>  <h3 class="subHeading">Think in Terms of Scenarios</h3><div class="subSection"> <p>Scenarios
can help you focus on the critical components of your application.
Scenarios are generally derived from your customers, as well as
competitive products. Always study your customers and find out what
really makes them excited about your product, and your competitors'
products. Your customers' feedback can help you to determine your
application's primary scenario. For instance, if you are designing a
component that will be used at startup, it is likely that the component
will be called only once, when the application starts up. Startup time
becomes your key scenario. Other examples of key scenarios could be the
desired frame rate for animation sequences, or the maximum working set
allowed for the application.</p> </div> <h3 class="subHeading">Define Goals</h3><div class="subSection"> <p>Goals
help you to determine whether an application is performing faster or
slower. You should define goals for all of your scenarios. All
performance goals that you define should be based on your customers'
expectations. It may be difficult to set performance goals early on in
the application development cycle, when there are still many unresolved
issues. However, it is better to set an initial goal and revise it
later than not to have a goal at all.</p> </div> <h3 class="subHeading">Understand Your Platform</h3><div class="subSection"> <p>Always
maintain the cycle of measuring, investigating, refining/correcting
during your application development cycle. From the beginning to the
end of the development cycle, you need to measure your application's
performance in a reliable, stable environment. You should avoid
variability caused by external factors. For example, when testing
performance, you should disable anti-virus or any automatic update such
as SMS, in order not to impact performance test results. Once you have
measured your application's performance, you need to identify the
changes that will result in the biggest improvements. Once you have
modified your application, start the cycle again.</p> </div> <h3 class="subHeading">Make Performance Tuning an Iterative Process</h3><div class="subSection"> <p>You
should know the relative cost of each feature you will use. For
example, the use of reflection in Microsoft .NET Framework version 3.0
is generally performance intensive in terms of computing resources, so
you would want to use it judiciously. This does not mean to avoid the
use of reflection, only that you should be careful to balance the
performance requirements of your application with the performance
demands of the features you use.</p> </div> <h3 class="subHeading">Build Towards Graphical Richness</h3><div class="subSection"> <p>A
key technique for creating a scalable approach towards achieving WPF
application performance is to build towards graphical richness and
complexity. Always start with using the least performance intensive
resources to achieve your scenario goals. Once you achieve these goals,
build towards graphic richness by using more performance intensive
features, always keeping your scenario goals in mind. Remember, WPF is
a very rich platform and provides very rich graphic features. Using
performance intensive features without thinking can negatively impact
your overall application performance.</p> <p> WPF controls are
inherently extensible by allowing for wide-spread customization of
their appearance, while not altering their control behavior. By taking
advantage of styles, data templates, and control templates, you can
create and incrementally evolve a customizable user interface (UI) that
adapts to your performance requirements. The <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl04',this);" href="http://msdn2.microsoft.com/en-gb/library/ms771354.aspx">Photo Store Demo</a>
[ http://msdn2.microsoft.com/en-gb/library/ms771354.aspx ] illustrates
how you can easily create a separation between the basic user interface
(UI) and the logic of the application. Once you have created this
separation, if gives you the option of building towards graphical
richness.</p> </div> </div><a name="taking_advantage_of_hardware"><!----></a><h1 class="heading">Taking Advantage of Hardware</h1><div id="sectionSection1" class="seeAlsoNoToggleSection"> <p>The internal architecture of WPF has two rendering pipelines, hardware and software.</p>  <h3 class="subHeading">Hardware Rendering Pipeline</h3><div class="subSection"> <p>One
of the most important factors in determining WPF performance is that it
is render bound—the more pixels you have to render, the greater the
performance cost. However, the more rendering that can be offloaded to
the graphics processing unit (GPU), the more performance benefits you
can gain. The WPF application hardware rendering pipeline takes full
advantage of Microsoft DirectX features on hardware that supports a
minimum of Microsoft DirectX version 7.0. Further optimizations can be
gained by hardware that supports Microsoft DirectX version 7.0 and
PixelShader 2.0+ features.</p> </div> <h3 class="subHeading">Software Rendering Pipeline</h3><div class="subSection"> <p>The
WPF software rendering pipeline is entirely CPU bound. WPF takes
advantage of the SSE and SSE2 instruction sets in the CPU to implement
an optimized, fully-featured software rasterizer. Fallback to software
is seamless any time application functionality cannot be rendered using
the hardware rendering pipeline.</p> <p>The biggest performance issue
you will encounter when rendering in software mode is related to fill
rate, which is defined as the number of pixels that you are rendering.
If you are concerned about performance in software rendering mode, try
to minimize the number of times a pixel is redrawn. For example, if you
have an application with a blue background, which then renders a
slightly transparent image over it, you will render all of the pixels
in the application twice. As a result, it will take twice as long to
render the application with the image than if you had only the blue
background.</p>  <h4 class="subHeading">Graphics Rendering Tiers</h4><div class="subSection"> <p>It
may be very difficult to predict the hardware configuration that your
application will be running on. However, you might want to consider a
design that allows your application to seamlessly switch features when
running on different hardware, so that it can take full advantage of
each different hardware configuration.</p> <p>To achieve this, WPF
provides functionality to determine the graphics capability of a system
at runtime. Graphics capability is determined by categorizing the video
card as one of three rendering capability tiers. WPF exposes an API
that allows an application to query the rendering capability tier. Your
application can then take different code paths at run time depending on
the rendering tier supported by the hardware.</p> <p>The features of the graphics hardware that most impact the rendering tier levels are:</p> <ul><li> <p> <b>Video RAM</b>
The amount of video memory on the graphics hardware determines the size
and number of buffers that can be used for compositing graphics.</p> </li><li> <p> <b>Pixel Shader</b>
A pixel shader is a graphics processing function that calculates
effects on a per-pixel basis. Depending on the resolution of the
displayed graphics, there could be several million pixels that need to
be processed for each display frame.</p> </li><li> <p> <b>Vertex Shader</b>  A vertex shader is a graphics processing function that performs mathematical operations on the vertex data of the object.</p> </li><li> <p> <b>Multitexture Support</b>
Multitexture support refers to the ability to apply two or more
distinct textures during a blending operation on a 3D graphics object.
The degree of multitexture support is determined by the number of
multitexture units on the graphics hardware.</p> </li></ul> <p>The
pixel shader, vertex shader, and multitexture features are used to
define specific DirectX version levels, which, in turn, are used to
define the different rendering tiers in WPF.</p> <p>The features of the
graphics hardware determine the rendering capability of a WPF
application. The WPF system defines three rendering tiers:</p> <ul><li> <p> <b>Rendering Tier 0</b>  No graphics hardware acceleration. The DirectX version level is less than version 7.0.</p> </li><li> <p> <b>Rendering Tier 1</b>  Partial graphics hardware acceleration. The DirectX version level is greater than or equal to version 7.0, and <b>lesser</b> than version 9.0.</p> </li><li> <p> <b>Rendering Tier 2</b>  Most graphics features use graphics hardware acceleration. The DirectX version level is greater than or equal to version 9.0.</p> </li></ul> <p>For more information on WPF rendering tiers, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl05',this);" href="http://msdn2.microsoft.com/en-gb/library/ms742196.aspx">Graphics Rendering Tiers</a> [ http://msdn2.microsoft.com/en-gb/library/ms742196.aspx ] .</p> </div> </div> </div><a name="layout_and_design"><!----></a><h1 class="heading">Layout and Design</h1><div id="sectionSection2" class="seeAlsoNoToggleSection"> <p>The
design of your WPF application can impact its performance by creating
unnecessary overhead in calculating layout and validating object
references. For more information, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl06',this);" href="http://msdn2.microsoft.com/en-gb/library/ms745058.aspx">The Layout System</a> [ http://msdn2.microsoft.com/en-gb/library/ms745058.aspx ] .</p>  <h3 class="subHeading">Layout</h3><div class="subSection"> <p>The term "layout pass" describes the process of measuring and arranging the members of a <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl07',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.panel.aspx">Panel</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.controls.panel.aspx
] -derived object's collection of children, and then drawing them
onscreen. The layout pass is a mathematically-intensive process—the
larger the number of children in the collection, the greater the number
of calculations required. For example, each time a child <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl08',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.uielement.aspx">UIElement</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.uielement.aspx
] object in the collection changes its position, it has the potential
to trigger a new pass by the layout system. Because of the close
relationship between object characteristics and layout behavior, it's
important to understand the type of events that can invoke the layout
system. Your application will perform better by reducing as much as
possible any unnecessary invocations of the layout pass.</p> <p>The
layout system completes two passes for each child member in a
collection: a measure pass, and an arrange pass. Each child object
provides its own overridden implementation of the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl09',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.uielement.measure.aspx">Measure</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.uielement.measure.aspx ]  and <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl10',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.uielement.arrange.aspx">Arrange</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.uielement.arrange.aspx
] methods in order to provide its own specific layout behavior. At its
simplest, layout is a recursive system that leads to an element being
sized, positioned, and drawn onscreen.</p> <ul><li> <p>A child <b>UIElement</b> object begins the layout process by first having its core properties measured.</p> </li><li> <p>The object's <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl11',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.frameworkelement.aspx">FrameworkElement</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.frameworkelement.aspx
] properties that are related to size, such as <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl12',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.frameworkelement.width.aspx">Width</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.frameworkelement.width.aspx ] , <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl13',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.frameworkelement.height.aspx">Height</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.frameworkelement.height.aspx ] , and <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl14',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.frameworkelement.margin.aspx">Margin</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.frameworkelement.margin.aspx ] , are evaluated.</p> </li><li> <p> <b>Panel</b>-specific logic is applied, such as the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl15',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.dockpanel.dock.aspx">Dock</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.dockpanel.dock.aspx ]  property of the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl16',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.dockpanel.aspx">DockPanel</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.dockpanel.aspx ] , or the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl17',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.stackpanel.orientation.aspx">Orientation</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.stackpanel.orientation.aspx ]  property of the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl18',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.stackpanel.aspx">StackPanel</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.stackpanel.aspx ] .</p> </li><li> <p>Content is arranged, or positioned, after all child objects have been measured.</p> </li><li> <p>The collection of child objects is drawn to the screen.</p> </li></ul> <p>The layout pass process is invoked again if any of the following actions occur:</p> <ul><li> <p>A child object is added to the collection.</p> </li><li> <p>A <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl19',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.frameworkelement.layouttransform.aspx">LayoutTransform</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.frameworkelement.layouttransform.aspx
] is applied to the child object.</p> </li><li> <p>The <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl20',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.uielement.updatelayout.aspx">UpdateLayout</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.uielement.updatelayout.aspx ]  method is called for the child object.</p> </li><li> <p>When a change occurs to the value of a <span class="clsGlossary" onmouseover="showDef()" onmouseout="clearDef()" g_rid="dependency_property#6e0c4170-1210-480a-be7a-f35368767ca4">dependency property</span> that is marked with metadata affecting the measure or arrange passes.</p> </li></ul>  <h4 class="subHeading">Use the Most Efficient Panel where Possible</h4><div class="subSection"> <p>The complexity of the layout process is directly based on the layout behavior of the <b>Panel</b>-derived elements you use. For example, a <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl21',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.grid.aspx">Grid</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.grid.aspx ]  or <b>StackPanel</b> control provides much more functionality than a <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl22',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.canvas.aspx">Canvas</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.controls.canvas.aspx
] control. The price for this greater increase in functionality is a
greater increase in performance costs. However, if you do not require
the functionality that a <b>Grid</b> control provides, you should use the less costly alternatives, such as a <b>Canvas</b> or a custom panel.</p> <p>For more information, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl23',this);" href="http://msdn2.microsoft.com/en-gb/library/ms754152.aspx">Panels Overview</a> [ http://msdn2.microsoft.com/en-gb/library/ms754152.aspx ] .</p> </div> <h4 class="subHeading">Update Rather than Replace a RenderTransform</h4><div class="subSection"> <p>You may be able to update a <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl24',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.transform.aspx">Transform</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.transform.aspx ]  rather than replacing it as the value of a <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl25',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.uielement.rendertransform.aspx">RenderTransform</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.uielement.rendertransform.aspx
] property. This is particularly true in scenarios that involve
animation. By updating an existing <b>Transform</b>, you avoid initiating an unnecessary layout calculation.</p> </div> </div> <h3 class="subHeading">Design</h3><div class="subSection"> <p>The construction of objects, particularly at run time, can affect the performance characteristics of your application.</p>  <h4 class="subHeading">Build Your Tree Top-Down</h4><div class="subSection"> <p>When a node is added or removed from the <span class="clsGlossary" onmouseover="showDef()" onmouseout="clearDef()" g_rid="logical_tree#1115d9b4-4a6f-45fd-a51c-491c50065f7d">logical tree</span>,
property invalidations are raised on the node's parent and all its
children. As a result, a top-down construction pattern should always be
followed to avoid the cost of unnecessary invalidations on nodes that
have already been validated. The following table shows the difference
in execution speed between building a tree top-down versus bottom-up,
where the tree is 150 levels deep with a single <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl26',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.textblock.aspx">TextBlock</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.textblock.aspx ]  and <b>DockPanel</b> at each level.</p> <div class="labelheading"><b><!----></b></div><div class="tableSection"><table width="100%"><tbody><tr> <th> <b>Action</b> </th> <th> <b>Tree building (in ms)</b> </th> <th> <b>Render—includes tree building (in ms)</b> </th> </tr><tr> <td> <p>Bottom-up</p> </td> <td> <p>366</p> </td> <td> <p>454</p> </td> </tr><tr> <td> <p>Top-down</p> </td> <td> <p>11</p> </td> <td> <p>96</p> </td> </tr></tbody></table></div> <p>The following code example demonstrates how to create a tree top down.</p> <div class="code" id="ctl00_ctl27_CSharp"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">C#</div></div><pre class="code" id="ctl00_ctl27CSharp" space="preserve"><span style="color: blue;">private</span> <span style="color: blue;">void</span> OnBuildTreeTopDown(object sender, RoutedEventArgs e)
{
    TextBlock textBlock = <span style="color: blue;">new</span> TextBlock();
    textBlock.Text = <span style="color: maroon;">"Default"</span>;

    DockPanel parentPanel = <span style="color: blue;">new</span> DockPanel();
    DockPanel childPanel;

    myCanvas.Children.Add(parentPanel);
    myCanvas.Children.Add(textBlock);

    <span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; 150; i++)
    {
        textBlock = <span style="color: blue;">new</span> TextBlock();
        textBlock.Text = <span style="color: maroon;">"Default"</span>;
        parentPanel.Children.Add(textBlock);

        childPanel = <span style="color: blue;">new</span> DockPanel();
        parentPanel.Children.Add(childPanel);
        parentPanel = childPanel;
    }
}
</pre></div> <p>For more information on the logical tree, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl28',this);" href="http://msdn2.microsoft.com/en-gb/library/ms753391.aspx">Element Tree</a> [ http://msdn2.microsoft.com/en-gb/library/ms753391.aspx ] .</p> </div> </div> </div><a name="twoD_graphics_and_imaging"><!----></a><h1 class="heading">2D Graphics and Imaging</h1><div id="sectionSection3" class="seeAlsoNoToggleSection"> <p>
WPF provides a wide range of 2D graphics and imaging functionality that
can be optimized for your application requirements.</p>  <h3 class="subHeading">Drawings and Shapes</h3><div class="subSection"> <p>
            WPF provides both <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl29',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.drawing.aspx">Drawing</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.drawing.aspx ]  and <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl30',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.shape.aspx">Shape</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.shape.aspx
] objects to represent graphical drawing content. However, <b>Drawing</b> objects are simpler constructs than <b>Shape</b> objects and provide better performance characteristics.</p> <p>A <b>Shape</b> allows you to draw a graphical shape to the screen. Because they are derived from the <b>FrameworkElement</b> class, <b>Shape</b> objects can be used inside panels and most controls.</p> <p>
            WPF offers several layers of access to graphics and rendering services. At the top layer, <b>Shape</b>
objects are easy to use and provide many useful features, such as
layout and event handling. WPF provides a number of ready-to-use shape
objects. All shape objects inherit from the <b>Shape</b> class. Available shape objects include <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl31',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.ellipse.aspx">Ellipse</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.ellipse.aspx ] , <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl32',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.line.aspx">Line</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.line.aspx ] , <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl33',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.path.aspx">Path</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.path.aspx ] , <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl34',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.polygon.aspx">Polygon</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.polygon.aspx ] , <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl35',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.polyline.aspx">Polyline</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.polyline.aspx ] , and <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl36',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.rectangle.aspx">Rectangle</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.rectangle.aspx ] .</p> <p> <b>Drawing</b> objects, on the other hand, do not derive from the <b>FrameworkElement</b> class and provide a lighter-weight implementation for rendering shapes, images, and text.</p> <p>There are four types of <b>Drawing</b> objects:</p> <ul><li> <p> <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl37',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.geometrydrawing.aspx">GeometryDrawing</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.geometrydrawing.aspx ]   Draws a shape.</p> </li><li> <p> <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl38',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.imagedrawing.aspx">ImageDrawing</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.imagedrawing.aspx ]   Draws an image.</p> </li><li> <p> <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl39',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.glyphrundrawing.aspx">GlyphRunDrawing</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.glyphrundrawing.aspx ]   Draws text.</p> </li><li> <p> <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl40',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.drawinggroup.aspx">DrawingGroup</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.media.drawinggroup.aspx
] Draws other drawings. Use a drawing group to combine other drawings
into a single composite drawing.</p> </li></ul> <p>The <b>GeometryDrawing</b> object is used to render geometry content. The <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl41',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.geometry.aspx">Geometry</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.media.geometry.aspx
] class and the concrete classes which derive from it, such as <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl42',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.combinedgeometry.aspx">CombinedGeometry</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.combinedgeometry.aspx ] , <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl43',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.ellipsegeometry.aspx">EllipseGeometry</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.ellipsegeometry.aspx ] , and <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl44',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.pathgeometry.aspx">PathGeometry</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.media.pathgeometry.aspx
] , provide a means for rendering 2D graphics, as well as providing
hit-testing and clipping support. Geometry objects can be used to
define the region of a control, for example, or to define the clip
region to apply to an image. Geometry objects can be simple regions,
such as rectangles and circles, or composite regions created from two
or more geometry objects. More complex geometric regions can be created
by combining <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl45',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.pathsegment.aspx">PathSegment</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.pathsegment.aspx ] -derived objects, such as <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl46',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.arcsegment.aspx">ArcSegment</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.arcsegment.aspx ] , <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl47',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.beziersegment.aspx">BezierSegment</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.beziersegment.aspx ] , and <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl48',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.quadraticbeziersegment.aspx">QuadraticBezierSegment</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.quadraticbeziersegment.aspx ] .</p> <p>On the surface, the <b>Geometry</b> class and the <b>Shape</b>
class are quite similar. Both are used in the rendering of 2D graphics
and both have similar concrete classes which derive from them, for
example, <b>EllipseGeometry</b> and <b>Ellipse</b>. However, there are important differences between these two sets of classes. For one, the <b>Geometry</b> class lacks some of the functionality of the <b>Shape</b>
class, such as the ability to draw itself. To draw a geometry object,
another class such as DrawingContext, Drawing, or a Path (it is worth
noting that a Path is a Shape) must be used to perform the drawing
operation. Rendering properties such as fill, stroke, and the stroke
thickness are on the class which draws the geometry object, while a
shape object contains these properties. One way to think of this
difference is that a geometry object defines a region, a circle for
example, while a shape object defines a region, defines how that region
is filled and outlined, and participates in the layout system.</p> <p>Since <b>Shape</b> objects derive from the <b>FrameworkElement</b> class, using them can add significantly more memory consumption in your application. If you really do not need the <b>FrameworkElement</b> features for your graphical content, consider using the lighter-weight <b>Drawing</b> objects.</p> <p>For more information on <b>Drawing</b> objects, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl49',this);" href="http://msdn2.microsoft.com/en-gb/library/ms751619.aspx">Drawing Objects Overview</a> [ http://msdn2.microsoft.com/en-gb/library/ms751619.aspx ] .</p> </div> <h3 class="subHeading">StreamGeometry Objects</h3><div class="subSection"> <p>The <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl50',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.streamgeometry.aspx">StreamGeometry</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.streamgeometry.aspx ]  object is a light-weight alternative to <b>PathGeometry</b> for creating geometric shapes. Use a <b>StreamGeometry</b> when you need to describe a complex geometry. <b>StreamGeometry</b> is optimized for handling many <b>PathGeometry</b> objects and performs better when compared to using many individual <b>PathGeometry</b> objects.</p> <p>The following example uses attribute syntax to create a triangular <b>StreamGeometry</b> in XAML.</p> <div class="code" id="ctl00_ctl51_XAML"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">XAML</div></div><pre class="code" id="ctl00_ctl51XAML" space="preserve"><span style="color: blue;">&lt;</span><span style="color: maroon;">Page</span> xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"<span style="color: blue;">&gt;</span>
  <span style="color: blue;">&lt;</span><span style="color: maroon;">StackPanel</span><span style="color: blue;">&gt;</span>
  
    <span style="color: blue;">&lt;</span><span style="color: maroon;">Path</span> Data="F0 M10,100 L100,100 100,50Z" 
      StrokeThickness="1" Stroke="Black"<span style="color: blue;">/&gt;</span>

  <span style="color: blue;">&lt;/</span><span style="color: maroon;">StackPanel</span><span style="color: blue;">&gt;</span>
<span style="color: blue;">&lt;/</span><span style="color: maroon;">Page</span><span style="color: blue;">&gt;</span>
</pre></div> <p>For more information on <b>StreamGeometry</b> objects, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl52',this);" href="http://msdn2.microsoft.com/en-gb/library/ms742199.aspx">How to: Create a Shape Using a StreamGeometry</a> [ http://msdn2.microsoft.com/en-gb/library/ms742199.aspx ] .</p> </div> <h3 class="subHeading">DrawingVisual Objects</h3><div class="subSection"> <p>The <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl53',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.drawingvisual.aspx">DrawingVisual</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.media.drawingvisual.aspx
] object is a lightweight drawing class that is used to render shapes,
images, or text. This class is considered lightweight because it does
not provide layout or event handling, which improves its performance.
For this reason, drawings are ideal for backgrounds and clip art. For
more information, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl54',this);" href="http://msdn2.microsoft.com/en-gb/library/ms742254.aspx">Using DrawingVisual Objects</a> [ http://msdn2.microsoft.com/en-gb/library/ms742254.aspx ] .</p> </div> <h3 class="subHeading">Images</h3><div class="subSection"> <p>
WPF imaging provides a significant improvement over the imaging
capabilities in previous versions of Windows. Imaging capabilities,
such as displaying a bitmap or using an image on a common control were
primarily handled by the Microsoft Windows Graphics Device Interface
(GDI) or Microsoft Windows GDI+ application programming interface
(API). These API provided baseline imaging functionality, but lacked
features such as support for codec extensibility and high fidelity
image support. WPF Imaging API have been redesigned to overcome the
shortcomings of GDI and GDI+ and provide a new set of API to display
and use images within your applications.</p> <p>When using images, consider the following recommendations for gaining better performance:</p> <ul><li> <p>If
your application requires you to display thumbnail images, consider
creating a reduced-sized version of the image. By default, WPF loads
your image and decodes it to its full size. If you only want a
thumbnail version of the image, WPF unnecessary decodes the image to
its full-size and then scales it down to a thumbnail size. To avoid
this unnecessary overhead, you can either request WPF to decode the
image to a thumbnail size, or request WPF to load a thumbnail size
image.</p> </li><li> <p>Always decode the image to desired size and not
to the default size. As mentioned above, request WPF to decode your
image to a desired size and not the default full size. You will reduce
not only your application's working set, but execution speed as well.</p> </li><li> <p>If possible, combine the images into a single image, such as a film strip composed of multiple images.</p> </li><li> <p>For more information, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl55',this);" href="http://msdn2.microsoft.com/en-gb/library/ms748873.aspx">Imaging Overview</a> [ http://msdn2.microsoft.com/en-gb/library/ms748873.aspx ] .</p> </li></ul>  <h4 class="subHeading">BitmapScalingMode</h4><div class="subSection"> <p>When
animating the scale of any bitmap, the default high-quality image
re-sampling algorithm can sometimes consume sufficient system resources
to cause frame rate degradation, effectively causing animations to
stutter. By setting the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl56',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.renderoptions.bitmapscalingmode.aspx">BitmapScalingMode</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.renderoptions.bitmapscalingmode.aspx ]  property of the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl57',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.renderoptions.aspx">RenderOptions</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.renderoptions.aspx ]  object to <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl58',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.bitmapscalingmode.aspx">LowQuality</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.media.bitmapscalingmode.aspx
] you can create a smoother animation when scaling a bitmap. <b>LowQuality</b>
mode tells the WPF rendering engine to switch from a quality-optimized
algorithm to a speed-optimized algorithm when processing images.</p> <p>The following example shows how to set the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl59',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.bitmapscalingmode.aspx">BitmapScalingMode</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.bitmapscalingmode.aspx ]  for an image object.</p> <div class="code" id="ctl00_ctl60_CSharp"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">C#</div></div><pre class="code" id="ctl00_ctl60CSharp" space="preserve"><span style="color: green;">// Set the bitmap scaling mode for the image to render faster.</span>
RenderOptions.SetBitmapScalingMode(MyImage, BitmapScalingMode.LowQuality);
</pre></div> </div> <h4 class="subHeading">CachingHint</h4><div class="subSection"> <p>By default, WPF does not cache the rendered contents of <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl61',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.tilebrush.aspx">TileBrush</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.tilebrush.aspx ]  objects, such as <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl62',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.drawingbrush.aspx">DrawingBrush</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.drawingbrush.aspx ]  and <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl63',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.visualbrush.aspx">VisualBrush</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.media.visualbrush.aspx
] . In static scenarios where neither the contents nor use of the <b>TileBrush</b> in the scene is changing, this makes sense, since it conserves video memory. It does not make as much sense when a <b>TileBrush</b> with static content is used in a non-static way—for example, when a static <b>DrawingBrush</b> or <b>VisualBrush</b> is mapped to the surface of a rotating 3D object. The default behavior of WPF is to re-render the entire content of the <b>DrawingBrush</b> or <b>VisualBrush</b> for every frame, even though the content is unchanging.</p> <p>By setting the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl64',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.renderoptions.cachinghint.aspx">CachingHint</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.renderoptions.cachinghint.aspx ]  property of the <b>RenderOptions</b> object to <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl65',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.cachinghint.aspx">Cache</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.media.cachinghint.aspx
] you can increase performance by using cached versions of the tiled
brush objects.</p> <p>The <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl66',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.renderoptions.cacheinvalidationthresholdminimum.aspx">CacheInvalidationThresholdMinimum</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.renderoptions.cacheinvalidationthresholdminimum.aspx ]  and <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl67',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.renderoptions.cacheinvalidationthresholdmaximum.aspx">CacheInvalidationThresholdMaximum</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.media.renderoptions.cacheinvalidationthresholdmaximum.aspx
] property values are relative size values that determine when the <b>TileBrush</b> object should be regenerated due to changes in scale. For example, by setting the <b>CacheInvalidationThresholdMaximum</b> property to 2.0, the cache for the <b>TileBrush</b> only needs to be regenerated when its size exceeds twice the size of the current cache.</p> <p>The following example shows how to use the caching hint option for a <b>DrawingBrush</b>.</p> <div class="code" id="ctl00_ctl68_CSharp"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">C#</div></div><pre class="code" id="ctl00_ctl68CSharp" space="preserve"><span style="color: green;">// Set the minimum and maximum relative sizes for regenerating the tiled brush.</span>
RenderOptions.SetCacheInvalidationThresholdMinimum(drawingBrush, 0.5);
RenderOptions.SetCacheInvalidationThresholdMaximum(drawingBrush, 2.0);

<span style="color: green;">// The tiled brush will be regenerated when the size is</span>
<span style="color: green;">//   0.5x, 0.25x (and so forth)</span>
<span style="color: green;">// and</span>
<span style="color: green;">//   2x, 4x, 8x (and so forth)</span>
<span style="color: green;">// of the original size.</span>

<span style="color: green;">// Set the caching hint option for the brush.</span>
RenderOptions.SetCachingHint(drawingBrush, CachingHint.Cache);
</pre></div> </div> </div> </div><a name="object_behavior"><!----></a><h1 class="heading">Object Behavior</h1><div id="sectionSection4" class="seeAlsoNoToggleSection"> <p>Understanding
the intrinsic behavior of WPF objects will help you make the right
tradeoffs between functionality and performance.</p>  <div class="subSection">  <h4 class="subHeading">Not Removing Event Handlers on Objects may Keep Objects Alive</h4><div class="subSection"> <p>The
delegate that an object passes to its event is effectively a reference
to that object. Therefore, event handlers can keep objects alive longer
than expected. When performing clean up of an object that has
registered to listen to an object's event, it is essential to remove
that delegate before releasing the object. Keeping unneeded objects
alive increases the application's memory usage. This is especially true
when the object is the root of a logical tree or a <span class="clsGlossary" onmouseover="showDef()" onmouseout="clearDef()" g_rid="visual_tree#484ef710-6484-400c-832c-768cb3a33aa5">visual tree</span>.</p> <p>
WPF introduces a weak event listener pattern for events that can be
useful in situations where the object lifetime relationships between
source and listener are difficult to keep track of. Some existing WPF
events use this pattern. If you are implementing objects with custom
events, this pattern may be of use to you. For details, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl69',this);" href="http://msdn2.microsoft.com/en-gb/library/aa970850.aspx">WeakEvent Patterns</a> [ http://msdn2.microsoft.com/en-gb/library/aa970850.aspx ] .</p> <p>There
are several tools, such as the CLR Profiler and the Working Set Viewer,
that can provides information on the memory usage of a specified
process. The CLR Profiler includes a number of very useful views of the
allocation profile, including a histogram of allocated types,
allocation and call graphs, a time line showing garbage collections of
various generations and the resulting state of the managed heap after
those collections, and a call tree showing per-method allocations and
assembly loads. For more information, see Microsoft .NET Framework
Developer Center.</p> <p>The Working Set Viewer is a WPF performance
analysis tool that provides information on the memory usage of a
specified process. This tool allows you to generate a snapshot of
application memory usage information at a particular application state.
For more information on WPF performance tools, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl71',this);" href="http://msdn2.microsoft.com/en-gb/library/aa969767.aspx">Performance Profiling Tools for WPF</a> [ http://msdn2.microsoft.com/en-gb/library/aa969767.aspx ] .</p> </div> </div> <h3 class="subHeading">Dependency Properties and Objects</h3><div class="subSection"> <p>In general, accessing a dependency property of a <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl72',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.dependencyobject.aspx">DependencyObject</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.dependencyobject.aspx
] is not slower than accessing a CLR property. While there is a small
performance overhead for setting a property value, getting a value is
as fast as getting the value from a CLR property. Offsetting the small
performance overhead is the fact that dependency properties support
robust features, such as data binding, animation, inheritance, and
styling. For more information, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl73',this);" href="http://msdn2.microsoft.com/en-gb/library/ms752914.aspx">Dependency Properties Overview</a> [ http://msdn2.microsoft.com/en-gb/library/ms752914.aspx ] .</p>  <h4 class="subHeading">DependencyProperty Optimizations</h4><div class="subSection"> <p>You should define dependency properties in your application very carefully. If your <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl74',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.dependencyproperty.aspx">DependencyProperty</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.dependencyproperty.aspx
] affects only render type metadata options, rather than other metadata
options such as <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl75',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.frameworkpropertymetadata.affectsmeasure.aspx">AffectsMeasure</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.frameworkpropertymetadata.affectsmeasure.aspx
] , you should mark it as such by overriding its metadata. For more
information about overriding or obtaining property metadata, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl76',this);" href="http://msdn2.microsoft.com/en-gb/library/ms752375.aspx">Dependency Property Metadata</a> [ http://msdn2.microsoft.com/en-gb/library/ms752375.aspx ] .</p> <p>It
may be more efficient to have a property change handler invalidate the
measure, arrange, and render passes manually if not all property
changes actually affect measure, arrange, and render. For instance, you
might decide to re-render a background only when a value is greater
than a set limit. In this case, your property change handler would only
invalidate render when the value exceeds the set limit.</p> </div> <h4 class="subHeading">Making a DependencyProperty Inheritable is Not Free</h4><div class="subSection"> <p>By
default, registered dependency properties are non-inheritable. However,
you can explicitly make any property inheritable. While this is a
useful feature, converting a property to be inheritable impacts
performance by increasing the length of time for property invalidation.</p> </div> <h4 class="subHeading">Use RegisterClassHandler Carefully</h4><div class="subSection"> <p>While calling <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl77',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.eventmanager.registerclasshandler.aspx">RegisterClassHandler</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.eventmanager.registerclasshandler.aspx
] allows you to save your instance state, it is important to be aware
that the handler is called on every instance, which can cause
performance problems. Only use <b>RegisterClassHandler</b> when your application requires that you save your instance state.</p> </div> <h4 class="subHeading">Set the Default Value for a DependencyProperty during Registration</h4><div class="subSection"> <p>When creating a <b>DependencyProperty</b> that requires a default value, set the value using the default metadata passed as a parameter to the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl78',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.dependencyproperty.register.aspx">Register</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.dependencyproperty.register.aspx ]  method of the <b>DependencyProperty</b>. Use this technique rather than setting the property value in a constructor or on each instance of an element.</p> </div> <h4 class="subHeading">Set the PropertyMetadata Value using Register</h4><div class="subSection"> <p>When creating a <b>DependencyProperty</b>, you have the option of setting the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl79',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.propertymetadata.aspx">PropertyMetadata</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.propertymetadata.aspx ]  using either the <b>Register</b> or <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl80',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.dependencyproperty.overridemetadata.aspx">OverrideMetadata</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.dependencyproperty.overridemetadata.aspx
] methods. Although your object could have a static constructor to call
<b>OverrideMetadata</b>, this is not the optimal solution and will impact performance. For best performance, set the <b>PropertyMetadata</b> during the call to <b>Register</b>.</p> </div> </div> <h3 class="subHeading">Freezable Objects</h3><div class="subSection"> <p>A <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl81',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.freezable.aspx">Freezable</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.freezable.aspx
] is a special type of object that has two states: unfrozen and frozen.
Freezing objects whenever possible improves the performance of your
application and reduces its working set. For more information, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl82',this);" href="http://msdn2.microsoft.com/en-gb/library/ms750509.aspx">Freezable Objects Overview</a> [ http://msdn2.microsoft.com/en-gb/library/ms750509.aspx ] .</p> <p>Each <b>Freezable</b> has a <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl83',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.freezable.changed.aspx">Changed</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.freezable.changed.aspx
] event that is raised whenever it changes. However, change
notifications are costly in terms of application performance.</p> <p>Consider the following example in which each <b>Rectangle</b> uses the same <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl84',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.brush.aspx">Brush</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.brush.aspx ]  object:</p> <div class="code" id="ctl00_ctl85_CSharp"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">C#</div></div><pre class="code" id="ctl00_ctl85CSharp" space="preserve">rectangle_1.Fill = myBrush;
rectangle_2.Fill = myBrush;
rectangle_3.Fill = myBrush;
<span style="color: green;">// ...</span>
rectangle_10.Fill = myBrush;
</pre></div> <p>By default, WPF provides an event handler for the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl86',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.solidcolorbrush.aspx">SolidColorBrush</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.solidcolorbrush.aspx ]  object's <b>Changed</b> event in order to invalidate the <b>Rectangle</b> object's <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl87',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.shape.fill.aspx">Fill</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.shape.fill.aspx ]  property. In this case, each time the <b>SolidColorBrush</b> has to fire its <b>Changed</b> event it is required to invoke the callback function for each <b>Rectangle</b>—the
accumulation of these callback function invocations impose a
significant performance penalty. In addition, it is very performance
intensive to add and remove handlers at this point since the
application would have to traverse the entire list to do so. If your
application scenario never changes the <b>SolidColorBrush</b>, you will be paying the cost of maintaining <b>Changed</b> event handlers unnecessarily.</p> <p>Freezing a <b>Freezable</b>
can improve its performance, because it no longer needs to expend
resources on maintaining change notifications. The table below shows
the size of a simple <b>SolidColorBrush</b> when its <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl88',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.freezable.isfrozen.aspx">IsFrozen</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.freezable.isfrozen.aspx ]  property is set to <b>true</b>, compared to when it is not. This assumes applying one brush to the <b>Fill</b> property of ten <b>Rectangle</b> objects.</p> <div class="labelheading"><b><!----></b></div><div class="tableSection"><table width="100%"><tbody><tr> <th> <b>State</b> </th> <th> <b>Size</b> </th> </tr><tr> <td> <p>Frozen <b>SolidColorBrush</b></p> </td> <td> <p>212 Bytes</p> </td> </tr><tr> <td> <p>Non-frozen <b>SolidColorBrush</b></p> </td> <td> <p>972 Bytes</p> </td> </tr></tbody></table></div> <p>The following code sample demonstrates this concept:</p> <div class="code" id="ctl00_ctl89_CSharp"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">C#</div></div><pre class="code" id="ctl00_ctl89CSharp" space="preserve">Brush frozenBrush = <span style="color: blue;">new</span> SolidColorBrush(Colors.Blue);
frozenBrush.Freeze();
Brush nonFrozenBrush = <span style="color: blue;">new</span> SolidColorBrush(Colors.Blue);

<span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = 0; i &lt; 10; i++)
{
    <span style="color: green;">// Create a Rectangle using a non-frozed Brush.</span>
    Rectangle rectangleNonFrozen = <span style="color: blue;">new</span> Rectangle();
    rectangleNonFrozen.Fill = nonFrozenBrush;

    <span style="color: green;">// Create a Rectangle using a frozed Brush.</span>
    Rectangle rectangleFrozen = <span style="color: blue;">new</span> Rectangle();
    rectangleFrozen.Fill = frozenBrush;
}
</pre></div>  <h4 class="subHeading">Changed Handlers on Unfrozen Freezables may Keep Objects Alive</h4><div class="subSection"> <p>The delegate that an object passes to a <b>Freezable</b> object's <b>Changed</b> event is effectively a reference to that object. Therefore, <b>Changed</b>
event handlers can keep objects alive longer than expected. When
performing clean up of an object that has registered to listen to a <b>Freezable</b> object's <b>Changed</b> event, it is essential to remove that delegate before releasing the object.</p> <p>
                WPF also hooks up <b>Changed</b> events internally. For example, all dependency properties which take <b>Freezable</b> as a value will listen to <b>Changed</b> events automatically. The <b>Fill</b> property, which takes a <b>Brush</b>, illustrates this concept.</p> <div class="code" id="ctl00_ctl90_CSharp"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">C#</div></div><pre class="code" id="ctl00_ctl90CSharp" space="preserve">Brush myBrush = <span style="color: blue;">new</span> SolidColorBrush(Colors.Red);
Rectangle myRectangle = <span style="color: blue;">new</span> Rectangle();
myRectangle.Fill = myBrush;
</pre></div> <p>On the assignment of <code>myBrush</code> to <code>myRectangle.Fill</code>, a delegate pointing back to the <b>Rectangle</b> object will be added to the <b>SolidColorBrush</b> object's <b>Changed</b> event. This means the following code does not actually make <code>myRect</code> eligible for garbage collection:</p> <div class="code" id="ctl00_ctl91_CSharp"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">C#</div></div><pre class="code" id="ctl00_ctl91CSharp" space="preserve">myRectangle = <span style="color: blue;">null</span>;
</pre></div> <p>In this case <code>myBrush</code> is still keeping <code>myRectangle</code> alive and will call back to it when it fires its <b>Changed</b> event. Note that assigning <code>myBrush</code> to the <b>Fill</b> property of a new <b>Rectangle</b> will simply add another event handler to <code>myBrush</code>. </p> <p>The recommended way to clean up these types of objects is to remove the <b>Brush</b> from the <b>Fill</b> property, which will in turn remove the <b>Changed</b> event handler.</p> <div class="code" id="ctl00_ctl92_CSharp"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">C#</div></div><pre class="code" id="ctl00_ctl92CSharp" space="preserve">myRectangle.Fill = <span style="color: blue;">null</span>;
myRectangle = <span style="color: blue;">null</span>;
</pre></div> </div> </div> <h3 class="subHeading">User Interface Virtualization</h3><div class="subSection"> <p>
            WPF also provides a variation of the <b>StackPanel</b>
element that automatically "virtualizes" data-bound child content. In
this context, the word virtualize refers to a technique by which a
subset of <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl93',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.frameworkelement.aspx">UIElements</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.frameworkelement.aspx
] are generated from a larger number of data items based upon which
items are visible on-screen. It is intensive, both in terms of memory
and processor, to generate a large number of UI elements when only a
few may be on the screen at a given time. <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl94',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.virtualizingstackpanel.aspx">VirtualizingStackPanel</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.controls.virtualizingstackpanel.aspx
] (through functionality provided by <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl95',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.virtualizingpanel.aspx">VirtualizingPanel</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.controls.virtualizingpanel.aspx
] ) calculates visible items and works with the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl96',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.itemcontainergenerator.aspx">ItemContainerGenerator</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.itemcontainergenerator.aspx ]  from an <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl97',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.itemscontrol.aspx">ItemsControl</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.itemscontrol.aspx ]  (such as <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl98',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.listbox.aspx">ListBox</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.listbox.aspx ]  or <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl99',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.listview.aspx">ListView</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.listview.aspx ] ) to only create <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl100',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.frameworkelement.aspx">UIElements</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.frameworkelement.aspx ]  for visible items.</p> <p>As
a performance optimization, visual objects for these items are only
generated or kept alive if they are visible on the screen. When they
are no longer in the viewable area of the control, the visual objects
may be removed. This is not to be confused with data virtualization,
where data objects are not all present in the local collection- rather
streamed in as needed. </p> <p>The table below shows the elapsed time adding and rendering 5000 <b>TextBlock</b> elements to a <b>StackPanel</b> and a <b>VirtualizingStackPanel</b>. In this scenario, the measurements represent the time between attaching a text string to the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl101',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.itemscontrol.itemssource.aspx">ItemsSource</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.itemscontrol.itemssource.aspx ]  property of an <b>ItemsControl</b> object to the time when the panel elements display the text string.</p> <div class="labelheading"><b><!----></b></div><div class="tableSection"><table width="100%"><tbody><tr> <th> <b>Host panel</b> </th> <th> <b>Render time (ms)</b> </th> </tr><tr> <td> <p> <b>StackPanel</b> </p> </td> <td> <p>3210</p> </td> </tr><tr> <td> <p> <b>VirtualizingStackPanel</b> </p> </td> <td> <p>46</p> </td> </tr></tbody></table></div> </div> </div><a name="application_resources"><!----></a><h1 class="heading">Application Resources</h1><div id="sectionSection5" class="seeAlsoNoToggleSection"> <p>
WPF allows you to share application resources so that you can support a
consistent look or behavior across similar-typed elements. For more
information on resources, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl102',this);" href="http://msdn2.microsoft.com/en-gb/library/ms750613.aspx">Resources Overview</a> [ http://msdn2.microsoft.com/en-gb/library/ms750613.aspx ] .</p>  <div class="subSection">  <h4 class="subHeading">Sharing resources</h4><div class="subSection"> <p>If your application uses custom controls and defines resources in a <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl103',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.resourcedictionary.aspx">ResourceDictionary</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.resourcedictionary.aspx
] (or XAML Resources node), it is recommended that you either define
the resources at the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl104',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.application.aspx">Application</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.application.aspx ]  or <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl105',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.window.aspx">Window</a>
[ http://msdn2.microsoft.com/en-gb/library/system.windows.window.aspx ]
object level, or define them in the default theme for the custom
controls. Defining resources in a custom control's <b>ResourceDictionary</b>
imposes a performance impact for every instance of that control. For
example, if you have performance-intensive brush operations defined as
part of the resource definition of a custom control and many instances
of the custom control, the application's working set will increase
significantly.</p> <p>To illustrate this point, consider the following.
Let's say you are developing a card game using WPF. For most card
games, you need 52 cards with 52 different faces. You decide to
implement a card custom control and you define 52 brushes (each
representing a card face) in the resources of your card custom control.
In your main application, you initially create 52 instances of this
card custom control. Each instance of the card custom control generates
52 instances of <b>Brush</b> objects, which gives you a total of 52 * 52 <b>Brush</b> objects in your application. By moving the brushes out of the card custom control resources to the <b>Application</b> or <b>Window</b>
object level, or defining them in the default theme for the custom
control, you reduce the working set of the application, since you are
now sharing the 52 brushes among 52 instances of the card control.</p> </div> <h4 class="subHeading">Sharing a Brush without Copying</h4><div class="subSection"> <p>If you have multiple elements using the same <b>Brush</b>
object, define the brush as a resource and reference it, rather than
defining the brush inline in XAML. This method will create one instance
and reuse it, whereas defining brushes inline in XAML creates a new
instance for each element.</p> <p>The following markup sample illustrates this point:</p> <div class="code" id="ctl00_ctl106_XAML"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">XAML</div></div><pre class="code" id="ctl00_ctl106XAML" space="preserve"><span style="color: blue;">&lt;</span><span style="color: maroon;">StackPanel.Resources</span><span style="color: blue;">&gt;</span>
  <span style="color: blue;">&lt;</span><span style="color: maroon;">LinearGradientBrush</span> x:Key="myBrush" StartPoint="0,0.5" EndPoint="1,0.5" Opacity="0.5"<span style="color: blue;">&gt;</span>
    <span style="color: blue;">&lt;</span><span style="color: maroon;">LinearGradientBrush.GradientStops</span><span style="color: blue;">&gt;</span>
      <span style="color: blue;">&lt;</span><span style="color: maroon;">GradientStopCollection</span><span style="color: blue;">&gt;</span>
        <span style="color: blue;">&lt;</span><span style="color: maroon;">GradientStop</span> Color="GoldenRod" Offset="0" <span style="color: blue;">/&gt;</span>
        <span style="color: blue;">&lt;</span><span style="color: maroon;">GradientStop</span> Color="White" Offset="1" <span style="color: blue;">/&gt;</span>
      <span style="color: blue;">&lt;/</span><span style="color: maroon;">GradientStopCollection</span><span style="color: blue;">&gt;</span>
    <span style="color: blue;">&lt;/</span><span style="color: maroon;">LinearGradientBrush.GradientStops</span><span style="color: blue;">&gt;</span>
  <span style="color: blue;">&lt;/</span><span style="color: maroon;">LinearGradientBrush</span><span style="color: blue;">&gt;</span>
<span style="color: blue;">&lt;/</span><span style="color: maroon;">StackPanel.Resources</span><span style="color: blue;">&gt;</span>

<span style="color: green;">&lt;!-- Non-shared Brush object. --&gt;</span>
<span style="color: blue;">&lt;</span><span style="color: maroon;">Label</span><span style="color: blue;">&gt;</span>
  Label 1
  <span style="color: blue;">&lt;</span><span style="color: maroon;">Label.Background</span><span style="color: blue;">&gt;</span>
    <span style="color: blue;">&lt;</span><span style="color: maroon;">LinearGradientBrush</span> StartPoint="0,0.5" EndPoint="1,0.5" Opacity="0.5"<span style="color: blue;">&gt;</span>
      <span style="color: blue;">&lt;</span><span style="color: maroon;">LinearGradientBrush.GradientStops</span><span style="color: blue;">&gt;</span>
        <span style="color: blue;">&lt;</span><span style="color: maroon;">GradientStopCollection</span><span style="color: blue;">&gt;</span>
          <span style="color: blue;">&lt;</span><span style="color: maroon;">GradientStop</span> Color="GoldenRod" Offset="0" <span style="color: blue;">/&gt;</span>
          <span style="color: blue;">&lt;</span><span style="color: maroon;">GradientStop</span> Color="White" Offset="1" <span style="color: blue;">/&gt;</span>
        <span style="color: blue;">&lt;/</span><span style="color: maroon;">GradientStopCollection</span><span style="color: blue;">&gt;</span>
      <span style="color: blue;">&lt;/</span><span style="color: maroon;">LinearGradientBrush.GradientStops</span><span style="color: blue;">&gt;</span>
    <span style="color: blue;">&lt;/</span><span style="color: maroon;">LinearGradientBrush</span><span style="color: blue;">&gt;</span>
  <span style="color: blue;">&lt;/</span><span style="color: maroon;">Label.Background</span><span style="color: blue;">&gt;</span>
<span style="color: blue;">&lt;/</span><span style="color: maroon;">Label</span><span style="color: blue;">&gt;</span>

<span style="color: green;">&lt;!-- Shared Brush object. --&gt;</span>
<span style="color: blue;">&lt;</span><span style="color: maroon;">Label</span> Background="{StaticResource myBrush}"<span style="color: blue;">&gt;</span>Label 2<span style="color: blue;">&lt;/</span><span style="color: maroon;">Label</span><span style="color: blue;">&gt;</span>
<span style="color: blue;">&lt;</span><span style="color: maroon;">Label</span> Background="{StaticResource myBrush}"<span style="color: blue;">&gt;</span>Label 3<span style="color: blue;">&lt;/</span><span style="color: maroon;">Label</span><span style="color: blue;">&gt;</span>
</pre></div> </div> <h4 class="subHeading">Use Static Resources when Possible</h4><div class="subSection"> <p>A
static resource provides a value for any XAML property attribute by
looking up a reference to an already defined resource. Lookup behavior
for that resource is analogous to compile-time lookup.</p> <p>A dynamic
resource, on the other hand, will create a temporary expression during
the initial compilation and thus defer lookup for resources until the
requested resource value is actually required in order to construct an
object. Lookup behavior for that resource is analogous to run-time
lookup, which imposes a performance impact. Use static resources
whenever possible in your application, using dynamic resources only
when necessary.</p> <p>The following markup sample shows the use of both types of resources:</p> <div class="code" id="ctl00_ctl107_XAML"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">XAML</div></div><pre class="code" id="ctl00_ctl107XAML" space="preserve"><span style="color: blue;">&lt;</span><span style="color: maroon;">StackPanel.Resources</span><span style="color: blue;">&gt;</span>
  <span style="color: blue;">&lt;</span><span style="color: maroon;">SolidColorBrush</span> x:Key="myBrush" Color="Teal"<span style="color: blue;">/&gt;</span>
<span style="color: blue;">&lt;/</span><span style="color: maroon;">StackPanel.Resources</span><span style="color: blue;">&gt;</span>

<span style="color: green;">&lt;!-- StaticResource reference --&gt;</span>
<span style="color: blue;">&lt;</span><span style="color: maroon;">Label</span> Foreground="{StaticResource myBrush}"<span style="color: blue;">&gt;</span>Label 1<span style="color: blue;">&lt;/</span><span style="color: maroon;">Label</span><span style="color: blue;">&gt;</span>

<span style="color: green;">&lt;!-- DynamicResource reference --&gt;</span>
<span style="color: blue;">&lt;</span><span style="color: maroon;">Label</span> Foreground="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"<span style="color: blue;">&gt;</span>Label 2<span style="color: blue;">&lt;/</span><span style="color: maroon;">Label</span><span style="color: blue;">&gt;</span>
</pre></div> </div> </div> </div><a name="text"><!----></a><h1 class="heading">Text</h1><div id="sectionSection6" class="seeAlsoNoToggleSection"> <p>
WPF includes support for the presentation of text content through the
use of feature-rich user interface (UI) controls. In general you can
divide text rendering in three layers:</p> <ol><li> <p>Using the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl108',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.documents.glyphs.aspx">Glyphs</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.documents.glyphs.aspx ]  and <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl109',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.glyphrun.aspx">GlyphRun</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.glyphrun.aspx ]  objects directly.</p> </li><li> <p>Using the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl110',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.formattedtext.aspx">FormattedText</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.formattedtext.aspx ]  object.</p> </li><li> <p>Using high-level controls, such as the <b>TextBlock</b> and <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl111',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.documents.flowdocument.aspx">FlowDocument</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.documents.flowdocument.aspx ]  objects.</p> </li></ol>  <h3 class="subHeading">Rendering Text at the Glyph Level</h3><div class="subSection"> <p>
Windows Presentation Foundation (WPF) provides advanced text support
including glyph-level markup with direct access to <b>Glyphs</b>
for customers who want to intercept and persist text after formatting.
These features provide critical support for the different text
rendering requirements in each of the following scenarios.</p> <ul><li> <p>Screen display of fixed-format documents.</p> </li><li> <p>Print scenarios.</p> <ul><li> <p>
                    Extensible Application Markup Language (XAML) as a device printer language.</p> </li><li> <p>
                    Microsoft XPS Document Writer.</p> </li><li> <p>Previous printer drivers, output from Win32 applications to the fixed format.</p> </li><li> <p>Print spool format. </p> </li></ul> </li><li> <p>Fixed-format document representation, including clients for previous versions of Windows and other computing devices.</p> </li></ul> <div class="alert"><table width="100%"><tbody><tr><th align="left"><img class="note" alt="Note" src="Optimizing%20WPF%20Application%20Performance_files/Aa970683.gif">Note: </th></tr><tr><td> <p> <b>Glyphs</b> and <b>GlyphRun</b>
are designed for fixed-format document presentation and print
scenarios. Windows Presentation Foundation (WPF) provides several
elements for general layout and user interface (UI) scenarios such as <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl112',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.label.aspx">Label</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.label.aspx ]  and <b>TextBlock</b>. For more information on layout and UI scenarios, see the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl113',this);" href="http://msdn2.microsoft.com/en-gb/library/ms742190.aspx">Typography in Windows Presentation Foundation</a> [ http://msdn2.microsoft.com/en-gb/library/ms742190.aspx ] .</p> </td></tr></tbody></table></div> <p>The following examples show how to define properties for a <b>Glyphs</b> object in Extensible Application Markup Language (XAML). The <b>Glyphs</b> object represents the output of a <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl114',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.glyphrun.aspx">GlyphRun</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.media.glyphrun.aspx
] in XAML. The examples assume that the Arial, Courier New, and Times
New Roman fonts are installed in the <b>C:\WINDOWS\Fonts</b> folder on the local computer.</p> <div class="code" id="ctl00_ctl115_XAML"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">XAML</div></div><pre class="code" id="ctl00_ctl115XAML" space="preserve"><span style="color: green;">&lt;!-- The example shows how to use a Glyphs object. --&gt;</span>
<span style="color: blue;">&lt;</span><span style="color: maroon;">Page</span>
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  <span style="color: blue;">&gt;</span>

   <span style="color: blue;">&lt;</span><span style="color: maroon;">StackPanel</span> Background="PowderBlue"<span style="color: blue;">&gt;</span>

      <span style="color: blue;">&lt;</span><span style="color: maroon;">Glyphs</span>
         FontUri             = "C:\WINDOWS\Fonts\TIMES.TTF"
         FontRenderingEmSize = "100"
         StyleSimulations    = "BoldSimulation"
         UnicodeString       = "Hello World!"
         Fill                = "Black"
         OriginX             = "100"
         OriginY             = "200"
      <span style="color: blue;">/&gt;</span>

   <span style="color: blue;">&lt;/</span><span style="color: maroon;">StackPanel</span><span style="color: blue;">&gt;</span>
<span style="color: blue;">&lt;/</span><span style="color: maroon;">Page</span><span style="color: blue;">&gt;</span>
</pre></div>  <h4 class="subHeading">Using DrawGlyphRun</h4><div class="subSection"> <p>If you have custom control and you want to render glyphs, use the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl116',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.drawingcontext.drawglyphrun.aspx">DrawGlyphRun</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.drawingcontext.drawglyphrun.aspx ]  method.</p> <p>
                WPF also provides lower-level services for custom text formatting through the use of the <b>FormattedText</b>
object. The most efficient way of rendering text in Windows
Presentation Foundation (WPF) is by generating text content at the
glyph level using <b>Glyphs</b> and <b>GlyphRun</b>. However, the cost
of this efficiency is the loss of easy to use rich text formatting,
which are built-in features of Windows Presentation Foundation (WPF)
controls, such as <b>TextBlock</b> and <b>FlowDocument</b>.</p> </div> </div> <h3 class="subHeading">FormattedText Object</h3><div class="subSection"> <p>The <b>FormattedText</b>
object allows you to draw multi-line text, in which each character in
the text can be individually formatted. For more information, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl117',this);" href="http://msdn2.microsoft.com/en-gb/library/ms752098.aspx">Drawing Formatted Text</a> [ http://msdn2.microsoft.com/en-gb/library/ms752098.aspx ] .</p> <p>To create formatted text, call the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl118',this);" href="http://msdn2.microsoft.com/en-gb/library/ms602325.aspx">FormattedText</a> [ http://msdn2.microsoft.com/en-gb/library/ms602325.aspx ]  constructor to create a <b>FormattedText</b>
object. Once you have created the initial formatted text string, you
can apply a range of formatting styles. If your application wants to
implement its own layout, then the <b>FormattedText</b> object is better choice than using a control, such as <b>TextBlock</b>. For more information on the <b>FormattedText</b> object, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl119',this);" href="http://msdn2.microsoft.com/en-gb/library/ms752098.aspx">Drawing Formatted Text</a> [ http://msdn2.microsoft.com/en-gb/library/ms752098.aspx ]  .</p> <p>The <b>FormattedText</b>
object provides low-level text formatting capability. You can apply
multiple formatting styles to one or more characters. For example, you
could call both the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl120',this);" href="http://msdn2.microsoft.com/en-gb/library/ms607359.aspx">SetFontSize</a> [ http://msdn2.microsoft.com/en-gb/library/ms607359.aspx ]  and <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl121',this);" href="http://msdn2.microsoft.com/en-gb/library/ms607369.aspx">SetForegroundBrush</a>
[ http://msdn2.microsoft.com/en-gb/library/ms607369.aspx ] methods to
change the formatting of the first five characters in the text.</p> <p>The following code example creates a <b>FormattedText</b> object and renders it.</p> <div class="code" id="ctl00_ctl122_CSharp"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">C#</div></div><pre class="code" id="ctl00_ctl122CSharp" space="preserve"><span style="color: blue;">protected</span> override <span style="color: blue;">void</span> OnRender(DrawingContext drawingContext)
{
    <span style="color: blue;">string</span> testString = <span style="color: maroon;">"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor"</span>;

    <span style="color: green;">// Create the initial formatted text string.</span>
    FormattedText formattedText = <span style="color: blue;">new</span> FormattedText(
        testString,
        CultureInfo.GetCultureInfo(<span style="color: maroon;">"en-us"</span>),
        FlowDirection.LeftToRight,
        <span style="color: blue;">new</span> Typeface(<span style="color: maroon;">"Verdana"</span>),
        32,
        Brushes.Black);

    <span style="color: green;">// Set a maximum width and height. If the text overflows these values, an ellipsis <span style="color: maroon;">"..."</span> appears.</span>
    formattedText.MaxTextWidth = 300;
    formattedText.MaxTextHeight = 240;

    <span style="color: green;">// Use a larger font size beginning at the first (zero-based) character and continuing for 5 characters.</span>
    <span style="color: green;">// The font size is calculated in terms of points -- not as device-independent pixels.</span>
    formattedText.SetFontSize(36 * (96.0 / 72.0), 0, 5);

    <span style="color: green;">// Use a Bold font weight beginning at the 6th character and continuing for 11 characters.</span>
    formattedText.SetFontWeight(FontWeights.Bold, 6, 11);

    <span style="color: green;">// Use a linear gradient brush beginning at the 6th character and continuing for 11 characters.</span>
    formattedText.SetForegroundBrush(
                            <span style="color: blue;">new</span> LinearGradientBrush(
                            Colors.Orange,
                            Colors.Teal,
                            90.0),
                            6, 11);

    <span style="color: green;">// Use an Italic font style beginning at the 28th character and continuing for 28 characters.</span>
    formattedText.SetFontStyle(FontStyles.Italic, 28, 28);

    <span style="color: green;">// Draw the formatted text string to the DrawingContext of the control.</span>
    drawingContext.DrawText(formattedText, <span style="color: blue;">new</span> Point(10, 0));
}
</pre></div> </div> <h3 class="subHeading">FlowDocument, TextBlock, and Label Controls</h3><div class="subSection"> <p>
WPF includes multiple controls for drawing text to the screen. Each
control is targeted to a different scenario and has its own list of
features and limitations.</p>  <h4 class="subHeading">FlowDocument Impacts Performance More than TextBlock or Label</h4><div class="subSection"> <p>In general, the <b>TextBlock</b> element should be used when limited text support is required, such as a brief sentence in a user interface (UI). <b>Label</b> can be used when minimal text support is required. The <b>FlowDocument</b>
element is a container for re-flowable documents that support rich
presentation of content, and therefore, has a greater performance
impact than using the <b>TextBlock</b> or <b>Label</b> controls.</p> <p>For more information on <b>FlowDocument</b>, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl123',this);" href="http://msdn2.microsoft.com/en-gb/library/aa970909.aspx">Flow Document Overview</a> [ http://msdn2.microsoft.com/en-gb/library/aa970909.aspx ] .</p> </div> <h4 class="subHeading">Avoid Using TextBlock in FlowDocument</h4><div class="subSection"> <p>The <b>TextBlock</b> element is derived from <b>UIElement</b>. The <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl124',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.documents.run.aspx">Run</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.documents.run.aspx ]  element is derived from <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl125',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.documents.textelement.aspx">TextElement</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.documents.textelement.aspx ] , which is less costly to use than a <b>UIElement</b>-derived object. When possible, use <b>Run</b> rather than <b>TextBlock</b> for displaying text content in a <b>FlowDocument</b>.</p> <p>The following markup sample illustrates two ways of setting text content within a <b>FlowDocument</b>:</p> <div class="code" id="ctl00_ctl126_XAML"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">XAML</div></div><pre class="code" id="ctl00_ctl126XAML" space="preserve"><span style="color: blue;">&lt;</span><span style="color: maroon;">FlowDocument</span><span style="color: blue;">&gt;</span>

  <span style="color: green;">&lt;!-- Text content within a Run (more efficient). --&gt;</span>
  <span style="color: blue;">&lt;</span><span style="color: maroon;">Paragraph</span><span style="color: blue;">&gt;</span>
    <span style="color: blue;">&lt;</span><span style="color: maroon;">Run</span><span style="color: blue;">&gt;</span>Line one<span style="color: blue;">&lt;/</span><span style="color: maroon;">Run</span><span style="color: blue;">&gt;</span>
  <span style="color: blue;">&lt;/</span><span style="color: maroon;">Paragraph</span><span style="color: blue;">&gt;</span>

  <span style="color: green;">&lt;!-- Text content within a TextBlock (less efficient). --&gt;</span>
  <span style="color: blue;">&lt;</span><span style="color: maroon;">Paragraph</span><span style="color: blue;">&gt;</span>
    <span style="color: blue;">&lt;</span><span style="color: maroon;">TextBlock</span><span style="color: blue;">&gt;</span>Line two<span style="color: blue;">&lt;/</span><span style="color: maroon;">TextBlock</span><span style="color: blue;">&gt;</span>
  <span style="color: blue;">&lt;/</span><span style="color: maroon;">Paragraph</span><span style="color: blue;">&gt;</span>

<span style="color: blue;">&lt;/</span><span style="color: maroon;">FlowDocument</span><span style="color: blue;">&gt;</span>
</pre></div> </div> <h4 class="subHeading">Avoid Using TextBlock to Set Text Properties</h4><div class="subSection"> <p>In general, using a <b>Run</b> within a <b>TextBlock</b> is more performance intensive than not using an explicit <b>Run</b> object at all. If you are using a <b>Run</b> in order to set text properties, set those properties directly on the <b>TextBlock</b> instead.</p> <p>The following markup sample illustrates these two ways of setting a text property, in this case, the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl127',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.textblock.fontweight.aspx">FontWeight</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.textblock.fontweight.aspx ]  property:</p> <div class="code" id="ctl00_ctl128_XAML"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">XAML</div></div><pre class="code" id="ctl00_ctl128XAML" space="preserve"><span style="color: green;">&lt;!-- Run is used to set text properties. --&gt;</span>
<span style="color: blue;">&lt;</span><span style="color: maroon;">TextBlock</span><span style="color: blue;">&gt;</span>
  <span style="color: blue;">&lt;</span><span style="color: maroon;">Run</span> FontWeight="Bold"<span style="color: blue;">&gt;</span>Hello, world<span style="color: blue;">&lt;/</span><span style="color: maroon;">Run</span><span style="color: blue;">&gt;</span>
<span style="color: blue;">&lt;/</span><span style="color: maroon;">TextBlock</span><span style="color: blue;">&gt;</span>

<span style="color: green;">&lt;!-- TextBlock is used to set text properties, which is more efficient. --&gt;</span>
<span style="color: blue;">&lt;</span><span style="color: maroon;">TextBlock</span> FontWeight="Bold"<span style="color: blue;">&gt;</span>
  Hello, world
<span style="color: blue;">&lt;/</span><span style="color: maroon;">TextBlock</span><span style="color: blue;">&gt;</span>
</pre></div> <p>The following table shows the cost of displaying 1000 <b>TextBlock</b> objects with and without an explicit <b>Run</b>.</p> <div class="labelheading"><b><!----></b></div><div class="tableSection"><table width="100%"><tbody><tr> <th> <b>TextBlock type</b> </th> <th> <b>Creation time (ms)</b> </th> <th> <b>Render time (ms)</b> </th> </tr><tr> <td> <p>Run setting text properties</p> </td> <td> <p>146</p> </td> <td> <p>540</p> </td> </tr><tr> <td> <p>TextBlock setting text properties</p> </td> <td> <p>43</p> </td> <td> <p>453</p> </td> </tr></tbody></table></div> </div> <h4 class="subHeading">Avoid Databinding to the Label.Content Property</h4><div class="subSection"> <p>Imagine a scenario where you have a <b>Label</b> object that is updated frequently from a <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl129',this);" href="http://msdn2.microsoft.com/en-gb/library/system.string.aspx">String</a> [ http://msdn2.microsoft.com/en-gb/library/system.string.aspx ]  source. When data binding the <b>Label</b> element's <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl130',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.contentcontrol.content.aspx">Content</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.contentcontrol.content.aspx ]  property to the <b>String</b> source object, you may experience poor performance. Each time the source <b>String</b> is updated, the old <b>String</b> object is discarded and a new <b>String</b> is recreated—because a <b>String</b> object is immutable, it cannot be modified. This, in turn, causes the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl131',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.contentpresenter.aspx">ContentPresenter</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.contentpresenter.aspx ]  of the <b>Label</b> object to discard its old content and regenerate the new content to display the new <b>String</b>.</p> <p>The solution to this problem is simple. If the <b>Label</b> is not set to a custom <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl132',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.contentcontrol.contenttemplate.aspx">ContentTemplate</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.contentcontrol.contenttemplate.aspx ]  value, replace the <b>Label</b> with a <b>TextBlock</b> and data bind its <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl133',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.textblock.text.aspx">Text</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.textblock.text.aspx ]  property to the source string.</p> <div class="labelheading"><b><!----></b></div><div class="tableSection"><table width="100%"><tbody><tr> <th> <b>Data bound property</b> </th> <th> <b>Update time (ms)</b> </th> </tr><tr> <td> <p>Label.Content</p> </td> <td> <p>835</p> </td> </tr><tr> <td> <p>TextBlock.Text</p> </td> <td> <p>242</p> </td> </tr></tbody></table></div> </div> </div> <h3 class="subHeading">Hyperlink</h3><div class="subSection"> <p>The <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl134',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.documents.hyperlink.aspx">Hyperlink</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.documents.hyperlink.aspx
] object is an inline-level flow content element that allows you to
host hyperlinks within the flow content.</p>  <h4 class="subHeading">Combine Hyperlinks in One TextBlock Object</h4><div class="subSection"> <p>You can optimize the use of multiple <b>Hyperlink</b> elements by grouping them together within the same <b>TextBlock</b>.
This helps to minimize the number of objects you create in your
application. For example, you may want to display multiple hyperlinks,
such as the following:</p> <p>MSN Home | My MSN</p> <p>The following markup example shows multiple <b>TextBlock</b> elements used to display the hyperlinks:</p> <div class="code" id="ctl00_ctl135_XAML"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">XAML</div></div><pre class="code" id="ctl00_ctl135XAML" space="preserve"><span style="color: green;">&lt;!-- Hyperlinks in separate TextBlocks. --&gt;</span>
<span style="color: blue;">&lt;</span><span style="color: maroon;">TextBlock</span><span style="color: blue;">&gt;</span>
  <span style="color: blue;">&lt;</span><span style="color: maroon;">Hyperlink</span> TextDecorations="None" NavigateUri="http://www.msn.com"<span style="color: blue;">&gt;</span>MSN Home<span style="color: blue;">&lt;/</span><span style="color: maroon;">Hyperlink</span><span style="color: blue;">&gt;</span>
<span style="color: blue;">&lt;/</span><span style="color: maroon;">TextBlock</span><span style="color: blue;">&gt;</span>

<span style="color: blue;">&lt;</span><span style="color: maroon;">TextBlock</span> Text=" | "<span style="color: blue;">/&gt;</span>

<span style="color: blue;">&lt;</span><span style="color: maroon;">TextBlock</span><span style="color: blue;">&gt;</span>
  <span style="color: blue;">&lt;</span><span style="color: maroon;">Hyperlink</span> TextDecorations="None" NavigateUri="http://my.msn.com"<span style="color: blue;">&gt;</span>My MSN<span style="color: blue;">&lt;/</span><span style="color: maroon;">Hyperlink</span><span style="color: blue;">&gt;</span>
<span style="color: blue;">&lt;/</span><span style="color: maroon;">TextBlock</span><span style="color: blue;">&gt;</span>
</pre></div> <p>The following markup example shows a more efficient way of displaying the hyperlinks, this time, using a single <b>TextBlock</b>:</p> <div class="code" id="ctl00_ctl136_XAML"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">XAML</div></div><pre class="code" id="ctl00_ctl136XAML" space="preserve"><span style="color: green;">&lt;!-- Hyperlinks combined in the same TextBlock. --&gt;</span>
<span style="color: blue;">&lt;</span><span style="color: maroon;">TextBlock</span><span style="color: blue;">&gt;</span>
  <span style="color: blue;">&lt;</span><span style="color: maroon;">Hyperlink</span> TextDecorations="None" NavigateUri="http://www.msn.com"<span style="color: blue;">&gt;</span>MSN Home<span style="color: blue;">&lt;/</span><span style="color: maroon;">Hyperlink</span><span style="color: blue;">&gt;</span>
  
  <span style="color: blue;">&lt;</span><span style="color: maroon;">Run</span> Text=" | " <span style="color: blue;">/&gt;</span>
  
  <span style="color: blue;">&lt;</span><span style="color: maroon;">Hyperlink</span> TextDecorations="None" NavigateUri="http://my.msn.com"<span style="color: blue;">&gt;</span>My MSN<span style="color: blue;">&lt;/</span><span style="color: maroon;">Hyperlink</span><span style="color: blue;">&gt;</span>
<span style="color: blue;">&lt;/</span><span style="color: maroon;">TextBlock</span><span style="color: blue;">&gt;</span>
</pre></div> </div> <h4 class="subHeading">Showing Underlines on Hyperlinks Only on MouseEnter Events</h4><div class="subSection"> <p>A <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl137',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.textdecoration.aspx">TextDecoration</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.textdecoration.aspx
] object is a visual ornamentation that you can add to text; however,
it can be performance intensive to instantiate. If you make extensive
use of <b>Hyperlink</b> elements, consider showing an underline only when triggering an event, such as the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl138',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.contentelement.mouseenter.aspx">MouseEnter</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.contentelement.mouseenter.aspx ]  event. For more information, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl139',this);" href="http://msdn2.microsoft.com/en-gb/library/aa970059.aspx">How to: Use a Text Decoration with a Hyperlink</a> [ http://msdn2.microsoft.com/en-gb/library/aa970059.aspx ] .</p> <div class="labelheading"><b>Hyperlink appearing on MouseEnter</b><br></div><img alt="Hyperlinks displaying TextDecorations" src="Optimizing%20WPF%20Application%20Performance_files/Aa970683_003.png"> <p>The following markup sample shows a <b>Hyperlink</b> defined with and without an underline:</p> <div class="code" id="ctl00_ctl140_XAML"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">XAML</div></div><pre class="code" id="ctl00_ctl140XAML" space="preserve"><span style="color: green;">&lt;!-- Hyperlink with default underline. --&gt;</span>
<span style="color: blue;">&lt;</span><span style="color: maroon;">Hyperlink</span> NavigateUri="http://www.msn.com"<span style="color: blue;">&gt;</span>
  MSN Home
<span style="color: blue;">&lt;/</span><span style="color: maroon;">Hyperlink</span><span style="color: blue;">&gt;</span>

<span style="color: blue;">&lt;</span><span style="color: maroon;">Run</span> Text=" | " <span style="color: blue;">/&gt;</span>

<span style="color: green;">&lt;!-- Hyperlink with no underline. --&gt;</span>
<span style="color: blue;">&lt;</span><span style="color: maroon;">Hyperlink</span> Name="myHyperlink" TextDecorations="None"
           MouseEnter="OnMouseEnter"
           MouseLeave="OnMouseLeave"
           NavigateUri="http://www.msn.com"<span style="color: blue;">&gt;</span>
  My MSN
<span style="color: blue;">&lt;/</span><span style="color: maroon;">Hyperlink</span><span style="color: blue;">&gt;</span>
</pre></div> <p>The following table shows the performance cost of displaying 1000 <b>Hyperlink</b> elements with and without an underline.</p> <div class="labelheading"><b><!----></b></div><div class="tableSection"><table width="100%"><tbody><tr> <th> <b>Hyperlink</b> </th> <th> <b>Creation time (ms)</b> </th> <th> <b>Render time (ms)</b> </th> </tr><tr> <td> <p>With underline</p> </td> <td> <p>289</p> </td> <td> <p>1130</p> </td> </tr><tr> <td> <p>Without underline</p> </td> <td> <p>299</p> </td> <td> <p>776</p> </td> </tr></tbody></table></div> </div> </div> <h3 class="subHeading">Text Formatting Features</h3><div class="subSection"> <p>
WPF provides rich text formatting services, such as automatic
hyphenations. These services may impact application performance and
should only be used when needed.</p>  <h4 class="subHeading">Avoid Unnecessary Use of Hyphenation</h4><div class="subSection"> <p>Automatic hyphenation finds hyphen breakpoints for lines of text, and allows additional break positions for lines in <b>TextBlock</b> and <b>FlowDocument</b>
objects. By default, the automatic hyphenation feature is disabled in
these objects. You can enable this feature by setting the object's
IsHyphenationEnabled property to <b>true</b>. However, enabling this
feature causes WPF to initiate Component Object Model (COM)
interoperability, which can impact application performance. It is
recommended that you do not use automatic hyphenation unless you need
it.</p> </div> <h4 class="subHeading">Use Figures Carefully</h4><div class="subSection"> <p>A <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl141',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.documents.figure.aspx">Figure</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.documents.figure.aspx
] element represents a portion of flow content that can be
absolutely-positioned within a page of content. In some cases, a <b>Figure</b>
may cause an entire page to automatically reformat if its position
collides with content that has already been laid-out. You can minimize
the possibility of unnecessary reformatting by either grouping <b>Figure</b> elements next to each other, or declaring them near the top of content in a fixed page size scenario.</p> </div> <h4 class="subHeading">Optimal Paragraph</h4><div class="subSection"> <p>The optimal paragraph feature of the <b>FlowDocument</b>
object lays out paragraphs so that white space is distributed as evenly
as possible. By default, the optimal paragraph feature is disabled. You
can enable this feature by setting the object's <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl142',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.documents.flowdocument.isoptimalparagraphenabled.aspx">IsOptimalParagraphEnabled</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.documents.flowdocument.isoptimalparagraphenabled.aspx ]  property to <b>true</b>.
However, enabling this feature impacts application performance. It is
recommended that you do not use the optimal paragraph feature unless
you need it.</p> </div> </div> </div><a name="data_binding"><!----></a><h1 class="heading">Data Binding</h1><div id="sectionSection7" class="seeAlsoNoToggleSection"> <p>
Windows Presentation Foundation (WPF) data binding provides a simple
and consistent way for applications to present and interact with data.
Elements can be bound to data from a variety of data sources in the
form of CLR objects and XML. For more information on data binding, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl143',this);" href="http://msdn2.microsoft.com/en-gb/library/ms752347.aspx">Data Binding Overview</a> [ http://msdn2.microsoft.com/en-gb/library/ms752347.aspx ] .</p>  <h3 class="subHeading">How Data Binding References are Resolved</h3><div class="subSection"> <p>Before
discussing data binding performance issues, it is worthwhile to explore
how the Windows Presentation Foundation (WPF) data binding engine
resolves object references for binding.</p> <p>The source of a Windows
Presentation Foundation (WPF) data binding can be any CLR object. You
can bind to properties, sub-properties, or indexers of a CLR object.
The binding references are resolved by using either Microsoft .NET
Framework version 3.0 reflection or an <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl144',this);" href="http://msdn2.microsoft.com/en-gb/library/system.componentmodel.icustomtypedescriptor.aspx">ICustomTypeDescriptor</a>
[
http://msdn2.microsoft.com/en-gb/library/system.componentmodel.icustomtypedescriptor.aspx
] . Here are three methods for resolving object references for binding.</p> <p>The first method involves using reflection. In this case, the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl145',this);" href="http://msdn2.microsoft.com/en-gb/library/system.reflection.propertyinfo.aspx">PropertyInfo</a>
[
http://msdn2.microsoft.com/en-gb/library/system.reflection.propertyinfo.aspx
] object is used to discover the attributes of the property and
provides access to property metadata. When using the <b>ICustomTypeDescriptor</b> interface, the data binding engine uses this interface to access the property values. The <b>ICustomTypeDescriptor</b> interface is especially useful in cases where the object does not have a static set of properties.</p> <p>Property change notifications can be provided either by implementing the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl146',this);" href="http://msdn2.microsoft.com/en-gb/library/system.componentmodel.inotifypropertychanged.aspx">INotifyPropertyChanged</a>
[
http://msdn2.microsoft.com/en-gb/library/system.componentmodel.inotifypropertychanged.aspx
] interface or by using the change notifications associated with the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl147',this);" href="http://msdn2.microsoft.com/en-gb/library/system.componentmodel.typedescriptor.aspx">TypeDescriptor</a>
[
http://msdn2.microsoft.com/en-gb/library/system.componentmodel.typedescriptor.aspx
] . However, the preferred strategy for implementing property change
notifications is to use <b>INotifyPropertyChanged</b>.</p> <p>If the
source object is a CLR object and the source property is a CLR
property, the Windows Presentation Foundation (WPF) data binding engine
has to first use reflection on the source object to get the <b>TypeDescriptor</b>, and then query for a <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl148',this);" href="http://msdn2.microsoft.com/en-gb/library/system.componentmodel.propertydescriptor.aspx">PropertyDescriptor</a>
[
http://msdn2.microsoft.com/en-gb/library/system.componentmodel.propertydescriptor.aspx
] . This sequence of reflection operations is potentially very
time-consuming from a performance perspective.</p> <p>The second method for resolving object references involves a CLR source object that implements the <b>INotifyPropertyChanged</b>
interface, and a source property that is a CLR property. In this case,
the data binding engine uses reflection directly on the source type and
gets the required property. This is still not the optimal method, but
it will cost less in working set requirements than the first method.</p> <p>The third method for resolving object references involves a source object that is a <b>DependencyObject</b> and a source property that is a <b>DependencyProperty</b>.
In this case, the data binding engine does not need to use reflection.
Instead, the property engine and the data binding engine together
resolve the property reference independently. This is the optimal
method for resolving object references used for data binding.</p> <p>The table below compares the speed of data binding the <b>Text</b> property of one thousand <b>TextBlock</b> elements using these three methods.</p> <div class="labelheading"><b><!----></b></div><div class="tableSection"><table width="100%"><tbody><tr> <th> <b>Binding the Text property of a TextBlock</b> </th> <th> <b>Binding time (ms)</b> </th> <th> <b>Render time -- includes binding (ms)</b> </th> </tr><tr> <td> <p>To a property of a CLR object</p> </td> <td> <p>115</p> </td> <td> <p>314</p> </td> </tr><tr> <td> <p>To a property of a CLR object which implements <b>INotifyPropertyChanged</b></p> </td> <td> <p>115</p> </td> <td> <p>305</p> </td> </tr><tr> <td> <p>To a <b>DependencyProperty</b> of a <b>DependencyObject</b>.</p> </td> <td> <p>90</p> </td> <td> <p>263</p> </td> </tr></tbody></table></div>  <h4 class="subHeading">Binding to Large CLR Objects</h4><div class="subSection"> <p>There
is a significant performance impact when you data bind to a single CLR
object with thousands of properties. You can minimize this impact by
dividing the single object into multiple CLR objects with fewer
properties. The table shows the binding and rendering times for data
binding to a single large CLR object versus multiple smaller objects.</p> <div class="labelheading"><b><!----></b></div><div class="tableSection"><table width="100%"><tbody><tr> <th> <b>Data binding 1000 TextBlock objects</b> </th> <th> <b>Binding time (ms)</b> </th> <th> <b>Render time -- includes binding (ms)</b> </th> </tr><tr> <td> <p>To a CLR object with 1000 properties</p> </td> <td> <p>950</p> </td> <td> <p>1200</p> </td> </tr><tr> <td> <p>To 1000 CLR objects with one property</p> </td> <td> <p>115</p> </td> <td> <p>314</p> </td> </tr></tbody></table></div> </div> <h4 class="subHeading">Binding to an ItemsSource</h4><div class="subSection"> <p>Consider a scenario in which you have a CLR <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl149',this);" href="http://msdn2.microsoft.com/en-gb/library/6sh2ey19.aspx">List</a>
[ http://msdn2.microsoft.com/en-gb/library/6sh2ey19.aspx ] object that
holds a list of employees that you want to display in a <b>ListBox</b>. To create a correspondence between these two objects, you would bind your employee list to the <b>ItemsSource</b> property of the <b>ListBox</b>.
However, suppose you have a new employee joining your group. You might
think that in order to insert this new person into your bound <b>ListBox</b>
values, you would simply add this person to your employee list and
expect this change to be recognized by the data binding engine
automatically. That assumption would prove false; in actuality, the
change will not be reflected in the <b>ListBox</b> automatically. This is because the CLR <b>List</b> object does not automatically raise a collection changed event. In order to get the <b>ListBox</b> to pick up the changes, you would have to recreate your list of employees and re-attach it to the <b>ItemsSource</b> property of the <b>ListBox</b>. While this solution works, it introduces a huge performance impact. Each time you reassign the <b>ItemsSource</b> of <b>ListBox</b> to a new object, the <b>ListBox</b> first throws away its previous items and regenerates its entire list. The performance impact is magnified if your <b>ListBox</b> maps to a complex <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl150',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.datatemplate.aspx">DataTemplate</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.datatemplate.aspx ] .</p> <p>A very efficient solution to this problem is to make your employee list an <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl151',this);" href="http://msdn2.microsoft.com/en-gb/library/ms668604.aspx">ObservableCollection</a> [ http://msdn2.microsoft.com/en-gb/library/ms668604.aspx ] . An <b>ObservableCollection</b> object raises a change notification which the data binding engine can receive. The event adds or removes an item from an <b>ItemsControl</b> without the need to regenerate the entire list.</p> <p>The table below shows the time it takes to update the <b>ListBox</b>
(with UI virtualization turned off) when one item is added. The number
in the first row represents the elapsed time when the CLR&nbsp;<b>List</b> object is bound to <b>ListBox</b> element's <b>ItemsSource</b>. The number in the second row represents the elapsed time when an <b>ObservableCollection</b> is bound to the <b>ListBox</b> element's <b>ItemsSource</b>. Note the significant time savings using the <b>ObservableCollection</b> data binding strategy.</p> <div class="labelheading"><b><!----></b></div><div class="tableSection"><table width="100%"><tbody><tr> <th> <b>Data binding the ItemsSource</b> </th> <th> <b>Update time for 1 item (ms)</b> </th> </tr><tr> <td> <p>To a CLR <b>List</b> object</p> </td> <td> <p>1656</p> </td> </tr><tr> <td> <p>To an <b>ObservableCollection</b></p> </td> <td> <p>20</p> </td> </tr></tbody></table></div> </div> <h4 class="subHeading">Bind IList to ItemsControl not IEnumerable</h4><div class="subSection"> <p>If you have a choice between binding an <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl152',this);" href="http://msdn2.microsoft.com/en-gb/library/5y536ey6.aspx">IList</a> [ http://msdn2.microsoft.com/en-gb/library/5y536ey6.aspx ]  or an <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl153',this);" href="http://msdn2.microsoft.com/en-gb/library/system.collections.ienumerable.aspx">IEnumerable</a> [ http://msdn2.microsoft.com/en-gb/library/system.collections.ienumerable.aspx ]  to an <b>ItemsControl</b> object, choose the <b>IList</b> object. Binding <b>IEnumerable</b> to an <b>ItemsControl</b> forces WPF to create a wrapper <b>IList</b> object, which means your performance is impacted by the unnecessary overhead of a second object.</p> </div> <h4 class="subHeading">Do not Convert CLR objects to XML Just for Data Binding.</h4><div class="subSection"> <p>
WPF allows you to data bind to XML content; however, data binding to
XML content is slower than data binding to CLR objects. Do not convert
CLR object data to XML if the only purpose is for data binding.</p> </div> </div> </div><a name="other_performance_recommendations"><!----></a><h1 class="heading">Other Performance Recommendations</h1><div id="sectionSection8" class="seeAlsoNoToggleSection">  <div class="subSection">  <h4 class="subHeading">Opacity on Brushes versus Opacity on Elements</h4><div class="subSection"> <p>When you use a <b>Brush</b> to set the <b>Fill</b> or <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl154',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.shape.stroke.aspx">Stroke</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.shapes.shape.stroke.aspx
] of an element, it is better to set the Brush.<a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl155',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.brush.opacity.aspx">Opacity</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.media.brush.opacity.aspx
] value rather than the setting the element's <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl156',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.uielement.opacity.aspx">Opacity</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.uielement.opacity.aspx ]  property. Modifying an element's <b>Opacity</b> property can cause WPF to create a temporary surface.</p> </div> <h4 class="subHeading">Navigation to Object</h4><div class="subSection"> <p>The <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl157',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.navigation.navigationwindow.aspx">NavigationWindow</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.navigation.navigationwindow.aspx ]  object derives from <b>Window</b> and extends it with content navigation support, primarily by aggregating <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl158',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.navigation.navigationservice.aspx">NavigationService</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.navigation.navigationservice.aspx
] and the journal. You can update the client area of <b>NavigationWindow</b> by specifying either a uniform resource identifier (URI) or an object. The following sample shows both methods:</p> <div class="code" id="ctl00_ctl159_CSharp"><div class="CodeSnippetTitleBar"><div class="CodeDisplayLanguage">C#</div></div><pre class="code" id="ctl00_ctl159CSharp" space="preserve"><span style="color: blue;">private</span> <span style="color: blue;">void</span> buttonGoToUri(object sender, RoutedEventArgs args)
{
    navWindow.Source = <span style="color: blue;">new</span> Uri(<span style="color: maroon;">"NewPage.xaml"</span>, UriKind.RelativeOrAbsolute);
}

<span style="color: blue;">private</span> <span style="color: blue;">void</span> buttonGoNewObject(object sender, RoutedEventArgs args)
{
    NewPage nextPage = <span style="color: blue;">new</span> NewPage();
    nextPage.InitializeComponent();
    navWindow.Content = nextPage;
}
</pre></div> <p>Each <b>NavigationWindow</b> object has a journal that
records the user's navigation history in that window. One of the
purposes of the journal is to allow users to retrace their steps.</p> <p>When
you navigate using a uniform resource identifier (URI), the journal
stores only the uniform resource identifier (URI) reference. This means
that each time you revisit the page, it is dynamically reconstructed,
which may be time consuming depending on the complexity of the page. In
this case, the journal storage cost is low, but the time to
reconstitute the page is potentially high.</p> <p>When you navigate
using an object, the journal stores the entire visual tree of the
object. This means that each time you revisit the page, it renders
immediately without having to be reconstructed. In this case, the
journal storage cost is high, but the time to reconstitute the page is
low.</p> <p>When you use the <b>NavigationWindow</b> object, you will
need to keep in mind how the journaling support impacts your
application's performance. For more information, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl160',this);" href="http://msdn2.microsoft.com/en-gb/library/ms750478.aspx">Navigation Overview</a> [ http://msdn2.microsoft.com/en-gb/library/ms750478.aspx ] .</p> </div> <h4 class="subHeading">Hit Testing on Large 3D Surfaces</h4><div class="subSection"> <p>Hit
testing on large 3D surfaces is a very performance intensive operation
in terms of CPU consumption. This is especially true when the 3D
surface is animating. If you do not require hit testing on these
surfaces, then disable hit testing. Objects that are derived from <b>UIElement</b> can disable hit testing by setting the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl161',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.uielement.ishittestvisible.aspx">IsHitTestVisible</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.uielement.ishittestvisible.aspx ]  property to <b>false</b>.</p> </div> <h4 class="subHeading">Avoid Using ScrollBarVisibility=Auto</h4><div class="subSection"> <p>Whenever possible, avoid using the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl162',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.scrollbarvisibility.aspx">ScrollBarVisibility</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.scrollbarvisibility.aspx ]  value <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl163',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.scrollbarvisibility.aspx">Auto</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.controls.scrollbarvisibility.aspx
] for the HorizontalScrollBarVisibility and VerticalScrollBarVisibility
properties. These properties are defined for <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl164',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.richtextbox.aspx">RichTextBox</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.richtextbox.aspx ] , <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl165',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.scrollviewer.aspx">ScrollViewer</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.scrollviewer.aspx ] , <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl166',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.textbox.aspx">TextBox</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.controls.textbox.aspx
] objects, and as an attached property for the <b>ListBox</b> object. Instead, set <b>ScrollBarVisibility</b> to <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl167',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.scrollbarvisibility.aspx">Disabled</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.scrollbarvisibility.aspx ] , <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl168',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.scrollbarvisibility.aspx">Hidden</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.scrollbarvisibility.aspx ] , or <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl169',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.scrollbarvisibility.aspx">Visible</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.controls.scrollbarvisibility.aspx ] .</p> <p>The <b>Auto</b>
value is intended for cases when space is limited and scrollbars should
only be displayed when necessary. For example, it may be useful to use
this <b>ScrollBarVisibility</b> value with a <b>ListBox</b> of 30 items as opposed to a <b>TextBox</b> with hundreds of lines of text.</p> </div> </div> </div><a name="wpf_performance_tools_and_resources"><!----></a><h1 class="heading">WPF Performance Tools and Resources</h1><div id="sectionSection9" class="seeAlsoNoToggleSection"> <p>
WPF provides a suite of performance profiling tools that allow you to
analyze the run-time behavior of your application and determine the
types of performance optimizations you can apply. The following table
lists the five performance profiling tools that are included in the
Windows SDK tool, WPFPerf:</p> <div class="labelheading"><b><!----></b></div><div class="tableSection"><table width="100%"><tbody><tr> <th> <b>Tool</b> </th> <th> <b>Description</b> </th> </tr><tr> <td> <p>Event Trace</p> </td> <td> <p>Use for analyzing events and generating event log files.</p> </td> </tr><tr> <td> <p>Perforator</p> </td> <td> <p>Use for analyzing rendering behavior.</p> </td> </tr><tr> <td> <p>Trace Viewer</p> </td> <td> <p>Record, display, and browse Event Tracing for Windows (ETW) log files in a WPF user-interface format.</p> </td> </tr><tr> <td> <p>Visual Profiler</p> </td> <td> <p>Use for profiling the use of WPF services, such as layout and event handling, by elements in the visual tree.</p> </td> </tr><tr> <td> <p>Working Set Viewer</p> </td> <td> <p>Use for analyzing the working set characteristics of your application.</p> </td> </tr></tbody></table></div> <p>The Visual Profiler tool suite provides a rich, graphical view of performance data. In this screenshot, the <b>CPU Usage</b> section of the Visual Profiler gives you a precise breakdown of an object's use of WPF services, such as rendering and layout.</p> <div class="labelheading"><b>Visual Profiler display output</b><br></div><img alt="Visual Profiler display output" src="Optimizing%20WPF%20Application%20Performance_files/Aa970683.png"> <p>For more information on WPF performance tools, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl170',this);" href="http://msdn2.microsoft.com/en-gb/library/aa969767.aspx">Performance Profiling Tools for WPF</a> [ http://msdn2.microsoft.com/en-gb/library/aa969767.aspx ] .</p>  <div class="subSection">  <h4 class="subHeading">Viewing the Visual Tree with XamlPad</h4><div class="subSection"> <p>Analyzing the visual tree hierarchy using <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl171',this);" href="http://msdn2.microsoft.com/en-gb/library/ms742398.aspx">XAMLPad</a>
[ http://msdn2.microsoft.com/en-gb/library/ms742398.aspx ] may give you
insight into how control template expansion works. This knowledge may
help you understand the performance costs and tradeoffs of the user
interface design you are creating.</p> <p>XamlPad provides an option
for viewing and exploring the visual tree that corresponds to the
currently defined XAML content. Click the <b>Show Visual Tree </b>button
on the menu bar to display the visual tree. The following illustrates
the expansion of XAML content into visual tree nodes in the <b>Visual Tree Explorer</b> panel of XamlPad:</p> <div class="labelheading"><b>Visual Tree Explorer panel in XamlPad</b><br></div><img alt="Visual Tree Explorer panel in XamlPad" src="Optimizing%20WPF%20Application%20Performance_files/Aa970683_004.png"> <p>Notice how the <b>Label</b>, <b>TextBox</b>, and <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl172',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.button.aspx">Button</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.controls.button.aspx
] controls each display a separate visual object hierarchy in the <b>Visual Tree Explorer</b> panel of XamlPad. This is because WPF controls have a <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl173',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.controls.controltemplate.aspx">ControlTemplate</a>
[
http://msdn2.microsoft.com/en-gb/library/system.windows.controls.controltemplate.aspx
] that contains the visual tree of that control. When you explicitly
reference a control, you implicitly reference its visual hierarchy. For
more information on visual objects and the visual tree, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl174',this);" href="http://msdn2.microsoft.com/en-gb/library/ms748373.aspx">Windows Presentation Foundation Graphics Rendering Overview</a> [ http://msdn2.microsoft.com/en-gb/library/ms748373.aspx ] .</p> <p>You can view the property settings of an item in the <b>Visual Tree Explorer</b> by selecting the item. The <b>Property Tree Explorer</b> panel, below the <b>Visual Tree Explorer</b> panel, displays the current property settings for the selected visual object.</p> <div class="labelheading"><b>Property Tree Explorer panel in XamlPad</b><br></div><img alt="Property Tree Explorer" src="Optimizing%20WPF%20Application%20Performance_files/Aa970683_002.png"> <p>For more information, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl175',this);" href="http://msdn2.microsoft.com/en-gb/library/ms742398.aspx">XAMLPad</a> [ http://msdn2.microsoft.com/en-gb/library/ms742398.aspx ] .</p> </div> <h4 class="subHeading">Debug Tracing Support for WPF</h4><div class="subSection"> <p>The <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl176',this);" href="http://msdn2.microsoft.com/en-gb/library/system.diagnostics.presentationtracesources.aspx">PresentationTraceSources</a>
[
http://msdn2.microsoft.com/en-gb/library/system.diagnostics.presentationtracesources.aspx
] class provides debug tracing support that specifically targets
Windows Presentation Foundation (WPF) applications. Tracing is a
diagnostics system by which an application's progression can be
tracked. The tracing statements report information, much the way the <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl177',this);" href="http://msdn2.microsoft.com/en-gb/library/zdf6yhx5.aspx">WriteLine</a>
[ http://msdn2.microsoft.com/en-gb/library/zdf6yhx5.aspx ] method is
often used. However, tracing statements can be switched on or off by
using a configuration file. In addition, the output of tracing
statements can be customized.</p> <p>For other related .NET Framework 3.0 diagnostic classes, see <a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl178',this);" href="http://msdn2.microsoft.com/en-gb/library/system.diagnostics.aspx">System.Diagnostics</a> [ http://msdn2.microsoft.com/en-gb/library/system.diagnostics.aspx ] .</p> </div> </div> </div><h1 class="heading"><span id="seeAlsoNoToggle">See Also</span></h1><div id="seeAlsoSection" class="seeAlsoNoToggleSection"><h4 class="subHeading">Reference</h4><a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl179',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.renderoptions.aspx">RenderOptions</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.renderoptions.aspx ] <br><a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl180',this);" href="http://msdn2.microsoft.com/en-gb/library/system.windows.media.rendercapability.aspx">RenderCapability</a> [ http://msdn2.microsoft.com/en-gb/library/system.windows.media.rendercapability.aspx ] <br><h4 class="subHeading">Concepts</h4><a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl181',this);" href="http://msdn2.microsoft.com/en-gb/library/ms742196.aspx">Graphics Rendering Tiers</a> [ http://msdn2.microsoft.com/en-gb/library/ms742196.aspx ] <br><a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl182',this);" href="http://msdn2.microsoft.com/en-gb/library/ms748373.aspx">Windows Presentation Foundation Graphics Rendering Overview</a> [ http://msdn2.microsoft.com/en-gb/library/ms748373.aspx ] <br><a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl183',this);" href="http://msdn2.microsoft.com/en-gb/library/ms745058.aspx">The Layout System</a> [ http://msdn2.microsoft.com/en-gb/library/ms745058.aspx ] <br><a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl184',this);" href="http://msdn2.microsoft.com/en-gb/library/ms753391.aspx">Element Tree</a> [ http://msdn2.microsoft.com/en-gb/library/ms753391.aspx ] <br><a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl185',this);" href="http://msdn2.microsoft.com/en-gb/library/ms751619.aspx">Drawing Objects Overview</a> [ http://msdn2.microsoft.com/en-gb/library/ms751619.aspx ] <br><a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl186',this);" href="http://msdn2.microsoft.com/en-gb/library/ms742254.aspx">Using DrawingVisual Objects</a> [ http://msdn2.microsoft.com/en-gb/library/ms742254.aspx ] <br><a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl187',this);" href="http://msdn2.microsoft.com/en-gb/library/ms752914.aspx">Dependency Properties Overview</a> [ http://msdn2.microsoft.com/en-gb/library/ms752914.aspx ] <br><a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl188',this);" href="http://msdn2.microsoft.com/en-gb/library/ms750509.aspx">Freezable Objects Overview</a> [ http://msdn2.microsoft.com/en-gb/library/ms750509.aspx ] <br><a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl189',this);" href="http://msdn2.microsoft.com/en-gb/library/ms750613.aspx">Resources Overview</a> [ http://msdn2.microsoft.com/en-gb/library/ms750613.aspx ] <br><a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl190',this);" href="http://msdn2.microsoft.com/en-gb/library/ms748388.aspx">Documents in Windows Presentation Foundation</a> [ http://msdn2.microsoft.com/en-gb/library/ms748388.aspx ] <br><a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl191',this);" href="http://msdn2.microsoft.com/en-gb/library/ms752098.aspx">Drawing Formatted Text</a> [ http://msdn2.microsoft.com/en-gb/library/ms752098.aspx ] <br><a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl192',this);" href="http://msdn2.microsoft.com/en-gb/library/ms742190.aspx">Typography in Windows Presentation Foundation</a> [ http://msdn2.microsoft.com/en-gb/library/ms742190.aspx ] <br><a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl193',this);" href="http://msdn2.microsoft.com/en-gb/library/ms752347.aspx">Data Binding Overview</a> [ http://msdn2.microsoft.com/en-gb/library/ms752347.aspx ] <br><a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl194',this);" href="http://msdn2.microsoft.com/en-gb/library/ms750478.aspx">Navigation Overview</a> [ http://msdn2.microsoft.com/en-gb/library/ms750478.aspx ] <br><h4 class="subHeading">Other Resources</h4><a onclick="javascript:Track('ctl00_ctl03|ctl00_ctl195',this);" href="http://msdn2.microsoft.com/en-gb/library/aa969767.aspx">Performance Profiling Tools for WPF</a> [ http://msdn2.microsoft.com/en-gb/library/aa969767.aspx ] <br><br></div></div>  </div></div>
</div>
        </div>
        <div id="ctl00_WikiViewer1_cc" class="cc">
	
    <div id="ctl00_WikiViewer1_ccContainer" class="ccContainer">
		
        &nbsp;
        <div class="ccHeader">
            <span class="cch_left">
                <div class="cch_title">Community Content</div>
            </span><span class="cch_middle">
                <br>
            </span><span class="cch_right">&nbsp;</span>
        </div>
    
	</div>

</div>
<div id="ctl00_WikiViewer1_wikiItems">

</div>
    

<script type="text/javascript">
<!--
Sys.Application.initialize();
// -->
</script>
</form>
</body></html>
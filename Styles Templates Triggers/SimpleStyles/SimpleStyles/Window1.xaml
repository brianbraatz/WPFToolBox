<Window
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	x:Class="SimpleStyles.Window1"
	x:Name="Window"
	Title="Window1"
	Width="640" Height="480">

	<Grid x:Name="LayoutRoot">
    <Canvas Margin="10">

        <Canvas.Resources>

        <!-- 
            ===================================================================
            Simple Style for Button
            ===================================================================
            -->

        <!-- Button Style -->

        <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
            <!-- Setter Property="ThemeStyleKey" Value="{x:Null}" / -->
            <Setter Property="Background" Value="White" />
            <Setter Property="BorderBrush" Value="Silver" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="2" />
            <Setter Property="FontFamily" Value="Arial" />
            <Setter Property="FontSize" Value="8pt" />
            <Setter Property="FontStyle" Value="Normal" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                <Border 
                  x:Name="OuterBorder" 
                  Margin="1" 
                  CornerRadius="2" 
                  BorderBrush="{TemplateBinding BorderBrush}" 
                  Background="{TemplateBinding Background}" 
                  BorderThickness="{TemplateBinding BorderThickness}">
                    <Border 
                      x:Name="InnerBorder" 
                      CornerRadius="2" 
                      Background="VerticalGradient Transparent #33000000" 
                      Padding="{TemplateBinding Padding}">
                    <ContentPresenter 
                      x:Name="ContentSite" 
                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger 
                      Property="IsFocused" 
                      Value="true">
                    <Setter 
                      TargetName="OuterBorder" 
                      Property="BorderBrush" 
                      Value="Black" />
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="true">
                    <Setter 
                      TargetName="InnerBorder"  
                      Property="Background" 
                      Value="VerticalGradient #88FFFFFF #20000000" />
                    <Setter 
                      TargetName="OuterBorder" 
                      Property="BorderBrush" 
                      Value="Gray" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="true">
                    <Setter 
                      TargetName="InnerBorder"  
                      Property="Background" 
                      Value="VerticalGradient #10000000 #20000000" />
                    </Trigger>
                    <Trigger Property="IsDefaulted" Value="true">
                    <Setter 
                      TargetName="OuterBorder" 
                      Property="BorderBrush" 
                      Value="Black" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                    <Setter 
                      TargetName="InnerBorder" 
                      Property="Background" 
                      Value="#EEEEEE"  />
                    <Setter Property="BorderBrush" Value="Silver"  />
                    </Trigger>
                </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
            </Setter>
            <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="Gray" />
            </Trigger>
            <Trigger Property="Width" Value="Auto">
                <Setter Property="MinWidth" Value="75" />
            </Trigger>
            <Trigger Property="Height" Value="Auto">
                <Setter Property="MinHeight" Value="23" />
            </Trigger>
            </Style.Triggers>
        </Style>

        <!-- 
            ===================================================================
            Simple Style for ScrollBar
            ===================================================================
            -->

        <!-- ScrollBar Resources -->

        <Style x:Key="ScrollBar_LineButton" TargetType="{x:Type RepeatButton}">
            <!-- Setter Property="ThemeStyleKey" Value="{x:Null}" / -->
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                <Border x:Name="Border" CornerRadius="2" BorderBrush="Silver" BorderThickness="1" Background="VerticalGradient White #CDCDCD">
                    <!-- Path HorizontalAlignment="Center" VerticalAlignment="Center" Fill="Gray" Data="{Binding Path=Content,RelativeSource=/TemplatedParent}" / -->
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="VerticalGradient White #E0E0E0" />
                    <Setter TargetName="Border" Property="BorderBrush" Value="Gray" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="VerticalGradient #EEEEEE #DFDFDF" />
                    </Trigger>
                </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ScrollBar_PageButton" TargetType="{x:Type RepeatButton}">
            <!-- Setter Property="ThemeStyleKey" Value="{x:Null}" / -->
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                <Rectangle Fill="Transparent" />
                </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ScrollBar_Thumb" TargetType="{x:Type Thumb}">
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                <Border CornerRadius="3" BorderBrush="Silver" BorderThickness="1" Background="VerticalGradient White #E4E4E4" />
                </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>

        <!-- ScrollBar Style -->

        <!-- Style x:Key="{x:Type HorizontalScrollBar}" TargetType="{x:Type HorizontalScrollBar}">
            <Setter Property="Background" Value="#FBFBFB" />
            <Setter Property="Width" Value="Auto" />
            <Setter Property="MinWidth" Value="0" />
            <Setter Property="Height" Value="16" />
            <Setter Property="MinHeight" Value="16" />
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type HorizontalScrollBar}">
                <Grid>
                    <Border Grid.Column="1" BorderBrush="Silver" BorderThickness="1" Background="{TemplateBinding Background}" CornerRadius="2" />
                    <ScrollBarPanel Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" Value="{TemplateBinding Value}" ViewportSize="{TemplateBinding ViewportSize}" Orientation="{TemplateBinding Orientation}" Background="{TemplateBinding Background}" IsTrackEnabled="{TemplateBinding IsEnabled}" ScrollBar.IsScrollBarPanel="true">
                    <RepeatButton Style="{DynamicResource ScrollBar_LineButton}" Command="ScrollBar.LineLeftCommand" Width="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" Content="M 0 4 L 4 8 L 4 0 Z" />
                    <RepeatButton Style="{DynamicResource ScrollBar_PageButton}" Command="ScrollBar.PageLeftCommand" />
                    <Thumb Height="16" >
                        <Thumb.Style>
                        <Style BasedOn="{StaticResource ScrollBar_Thumb}" TargetType="{x:Type Thumb}">
                            <Setter Property="MinWidth" Value="4" />
                        </Style>
                        </Thumb.Style>
                    </Thumb>
                    <RepeatButton Style="{DynamicResource ScrollBar_PageButton}" Command="ScrollBar.PageRightCommand" />
                    <RepeatButton Style="{DynamicResource ScrollBar_LineButton}" Command="ScrollBar.LineRightCommand" Width="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" Content="M 0 0 L 0 8 L 4 4 Z" />
                    </ScrollBarPanel>
                </Grid>
                </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style -->

        <!-- Style x:Key="{x:Type VerticalScrollBar}" TargetType="{x:Type VerticalScrollBar}">
            <Setter Property="Background" Value="#FBFBFB" />
            <Setter Property="Height" Value="Auto" />
            <Setter Property="MinHeight" Value="0" />
            <Setter Property="Width" Value="16" />
            <Setter Property="MinWidth" Value="16" />
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type VerticalScrollBar}">
                <Grid>
                    <Border Grid.Column="1" BorderBrush="Silver" BorderThickness="1" Background="{TemplateBinding Background}" CornerRadius="2" />
                    <ScrollBarPanel Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" Value="{TemplateBinding Value}" ViewportSize="{TemplateBinding ViewportSize}" Orientation="{TemplateBinding Orientation}" Background="{TemplateBinding Background}" IsTrackEnabled="{TemplateBinding IsEnabled}" ScrollBar.IsScrollBarPanel="true">
                    <RepeatButton Style="{DynamicResource ScrollBar_LineButton}" Command="ScrollBar.LineUpCommand" Height="16" Content="M 0 4 L 7 4 L 3.5 0 Z" />
                    <RepeatButton Style="{DynamicResource ScrollBar_PageButton}" Command="ScrollBar.PageUpCommand" />
                    <Thumb Width="16" >
                        <Thumb.Style>
                        <Style BasedOn="{StaticResource ScrollBar_Thumb}" TargetType="{x:Type Thumb}">
                            <Setter Property="MinWidth" Value="4" />
                        </Style>
                        </Thumb.Style>
                    </Thumb>
                    <RepeatButton Style="{DynamicResource ScrollBar_PageButton}" Command="ScrollBar.PageDownCommand" />
                    <RepeatButton Style="{DynamicResource ScrollBar_LineButton}" Command="ScrollBar.LineDownCommand" Height="16" Content="M 0 0 L 3.5 4 L 7 0 Z" />
                    </ScrollBarPanel>
                </Grid>
                </ControlTemplate>
            </Setter.Value>
            </Setter>
            <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="Silver" />
            </Trigger>
            </Style.Triggers>
        </Style -->

        <!-- 
            ===================================================================
            Simple Style for ListBox
            ===================================================================
            -->

        <!-- ListBox Style -->

        <Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}">
            <!-- Setter Property="ThemeStyleKey" Value="{x:Null}" / -->
            <Setter Property="Background" Value="White" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="Silver" />
            <Setter Property="Padding" Value="2" />
            <Setter Property="FontFamily" Value="Arial" />
            <Setter Property="FontSize" Value="8pt" />
            <Setter Property="FontStyle" Value="Normal" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                <Border 
                    CornerRadius="2" 
                    Background="{TemplateBinding Background}" 
                    BorderBrush="{TemplateBinding BorderBrush}" 
                    BorderThickness="{TemplateBinding BorderThickness}"
                            >
                    <ScrollViewer 
                    CanContentScroll="true" 
                    Margin="1" 
                    HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" 
                    VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" 
                    Padding="{TemplateBinding Padding}"
                                >
                    <ItemsPresenter />
                    </ScrollViewer>
                </Border>
                </ControlTemplate>
            </Setter.Value>
            </Setter>
            <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="#EEEEEE" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                <Condition Property="HasItems" Value="false" />
                <Condition Property="Width" Value="Auto" />
                </MultiTrigger.Conditions>
                <Setter Property="MinWidth" Value="120"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                <Condition Property="HasItems" Value="false" />
                <Condition Property="Height" Value="Auto" />
                </MultiTrigger.Conditions>
                <Setter Property="MinHeight" Value="95"/>
            </MultiTrigger>
            </Style.Triggers>
        </Style>

        <!-- ListBoxItem Style -->

        <Style x:Key="{x:Type ListBoxItem}" TargetType="{x:Type ListBoxItem}">
            <!-- Setter Property="ThemeStyleKey" Value="{x:Null}" / -->
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="3" />
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                <Border 
                    Background="{TemplateBinding Background}" 
                    BorderBrush="{TemplateBinding BorderBrush}" 
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    Padding="{TemplateBinding Padding}"
                            >
                    <ContentPresenter x:Name="ContentSite" 
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                />
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsSelected" Value="true">
                    <Setter Property="Background" Value="VerticalGradient #F9F9F9 #E9E9E9" />
                    <Setter Property="BorderBrush" Value="Silver" />
                    </Trigger>
                    <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true" />
                        <Condition Property="Selector.IsSelectionActive" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="#F8F8F8" />
                    <Setter Property="BorderBrush" Value="#E0E0E0" />
                    </MultiTrigger>
                </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
            </Setter>
            <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="Gray" />
            </Trigger>
            </Style.Triggers>
        </Style>

        <!-- 
            ===================================================================
            Simple Style for ComboBox
            ===================================================================
            -->

        <!-- ComboBox Resources -->

        <Style x:Key="ComboBox_Button" TargetType="{x:Type ToggleButton}" BasedOn="{x:Null}">
            <!-- Setter Property="ThemeStyleKey" Value="{x:Null}" / -->
            <Setter Property="Focusable" Value="False" />
            <Setter Property="ClickMode" Value="OnPress" />
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                <Border x:Name="Border" CornerRadius="2" BorderBrush="Silver" BorderThickness="1"  Background="VerticalGradient White #CDCDCD">
                    <Path HorizontalAlignment="Center" VerticalAlignment="Center" Fill="Gray" Data="M 0 0 L 3.5 4 L 7 0 Z" />
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="VerticalGradient White #E0E0E0" />
                    <Setter TargetName="Border" Property="BorderBrush" Value="Gray" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="VerticalGradient #EEEEEE #DFDFDF" />
                    </Trigger>
                </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>

        <!-- ComboBox Style -->

        <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}" BasedOn="{x:Null}">

            <!-- Setter Property="ThemeStyleKey" Value="{x:Null}" / -->
            <Setter Property="Background" Value="White" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="Silver" />
            <Setter Property="FontFamily" Value="Arial" />
            <Setter Property="FontSize" Value="8pt" />
            <Setter Property="FontStyle" Value="Normal" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="Padding" Value="3" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="2">
                    <Grid Margin="1">
					 <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="16" />
					 </Grid.ColumnDefinitions>
                    <Border x:Name="ContentItemBorder" Margin="{TemplateBinding Padding}" >
                        <ContentPresenter x:Name="ContentSite" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" VerticalAlignment="Center" />
                    </Border>
                    <ToggleButton Grid.ColumnSpan="2" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource=/TemplatedParent}" ClickMode="OnPress"  Style="{x:Null}"> <!-- ThemeStyleKey="{x:Null}" -->
                        <ToggleButton.Template>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Rectangle Fill="Transparent" />
                        </ControlTemplate>
                        </ToggleButton.Template>
                    </ToggleButton>
                    <Border x:Name="EditableItemBorder" Margin="{TemplateBinding Padding}" Visibility="Collapsed" >
                        <!-- TextBox ComboBox.IsEditableTextBox="True" x:Name="PART_EditableTextBox" ThemeStyleKey="{x:Null}" MinWidth="0" MinHeight="0"  Background="Transparent" IsReadOnly="{Binding Path=IsReadOnly,RelativeSource=/TemplatedParent}">
                        <TextBox.Template>
                            <ControlTemplate TargetType="{x:Type TextBox}">
                            <Border x:Name="TextBoxContent" Focusable="false" Background="{TemplateBinding Background}" />
                            </ControlTemplate>
                        </TextBox.Template>
                        </TextBox -->
                    </Border>
                    <!-- ToggleButton Grid.Column="1" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource=/TemplatedParent}" Style="{DynamicResource ComboBox_Button}" / -->
                    <Popup Placement="Bottom" VerticalOffset="1" HorizontalOffset="-2" IsOpen="{TemplateBinding IsDropDownOpen}" Focusable="False" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                        <Border x:Name="DropDownBorder" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" >
                        <ScrollViewer CanContentScroll="true" Margin="3" >
                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                        </ScrollViewer>
                        </Border>
                    </Popup>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <!--<Condition Property="IsKeyboardFocusWithin" Value="true" />-->
                        <Condition Property="IsDropDownOpen" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter TargetName="ContentItemBorder" Property="Background" Value="Gray" />
                    </MultiTrigger>
                    <Trigger Property="HasItems" Value="false">
                    <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                    </Trigger>
                    <Trigger Property="IsEditable" Value="true">
                    <Setter TargetName="ContentItemBorder" Property="Visibility" Value="Collapsed" />
                    <Setter TargetName="EditableItemBorder" Property="Visibility" Value="Visible" />
                    <Setter Property="IsTabStop" Value="false" />
                    </Trigger>
                </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
            </Setter>
            <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="Gray" />
                <Setter Property="Background" Value="Silver" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                <!--<Condition Property="IsKeyboardFocusWithin" Value="true" />-->
                <Condition Property="IsDropDownOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="White" />
            </MultiTrigger>
            <Trigger Property="Width" Value="Auto">
                <Setter Property="MinWidth" Value="150" />
            </Trigger>
            <Trigger Property="Height" Value="Auto">
                <Setter Property="MinHeight" Value="20" />
            </Trigger>
            </Style.Triggers>
        </Style>

        <!-- ComboBoxItem Style -->

        <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
            <!-- Setter Property="ThemeStyleKey" Value="{x:Null}" / -->
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="3" />
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                <Border 
                    Background="{TemplateBinding Background}" 
                    BorderBrush="{TemplateBinding BorderBrush}" 
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    Padding="{TemplateBinding Padding}"
                            >
                    <ContentPresenter x:Name="ContentSite" 
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                />
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsHighlighted" Value="true">
                    <Setter Property="Background" Value="VerticalGradient #F9F9F9 #E9E9E9" />
                    <Setter Property="BorderBrush" Value="Silver" />
                    </Trigger>
                </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
            </Setter>
            <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="Gray" />
            </Trigger>
            </Style.Triggers>
        </Style>


        <!-- 
            ===================================================================
            Simple Style for Menu
            ===================================================================
            -->

        <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
            <Setter Property="Background" Value="Silver" />
            <Setter Property="FontFamily" Value="Tahoma" />
            <Setter Property="FontSize" Value="8pt" />
            <Setter Property="Foreground" Value="#333333" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" >
                    <ItemsPresenter KeyboardNavigation.TabNavigation="Cycle" Margin="{TemplateBinding Padding}" />
                </Border>
                </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>

        <!-- ContextMenu Style -->

        <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
            <Setter Property="Background" Value="Silver" />
            <Setter Property="BorderBrush" Value="Silver" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="FontFamily" Value="Tahoma" />
            <Setter Property="FontSize" Value="8pt" />
            <Setter Property="Foreground" Value="#333333" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                <Border Background="White" BorderBrush="Silver" BorderThickness="1">
                    <ItemsPresenter Margin="2" KeyboardNavigation.DirectionalNavigation="Cycle" />
                </Border>
                </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>

        <!-- MenuItem Resources -->

        <ControlTemplate x:Key="Separator_MenuItemStyle" TargetType="{x:Type MenuItem}">
            <Grid Margin="2" Height="1">
            <Rectangle Height="1" Fill="Gray" />
            </Grid>
        </ControlTemplate>

        <Style x:Key="MenuItem_SeparatorStyle" TargetType="{x:Type Separator}">
            <Setter Property="Template" Value="{DynamicResource Separator_MenuItemStyle}" />
        </Style>

        <!-- TopLevelItem -->

        <ControlTemplate x:Key="TopLevelItemTemplateKey" TargetType="{x:Type MenuItem}">
            <Border x:Name="ClassicBorder" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
            <DockPanel x:Name="ContentPanel" Margin="1">
                <ContentPresenter x:Name="Icon" Margin="2" VerticalAlignment="Center" ContentSource="Icon" />
                <Border x:Name="CheckMark" Margin="2" Visibility="Collapsed" VerticalAlignment="Center" Background="{TemplateBinding Foreground}" CornerRadius="1" Width="8" Height="8" />
                <ContentPresenter x:Name="HeaderHost" ContentSource="Header" Margin="{TemplateBinding Padding}"  />
            </DockPanel>
            </Border>
            <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" Value="VerticalGradient #F9F9F9 #E9E9E9" />
                <Setter Property="BorderBrush" Value="Silver" />
            </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- TopLevelHeader-->

        <ControlTemplate x:Key="TopLevelHeaderTemplateKey" TargetType="{x:Type MenuItem}">
            <Border x:Name="ClassicBorder" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
            <DockPanel x:Name="ContentPanel" Margin="1">
                <ContentPresenter x:Name="Icon" Margin="2" VerticalAlignment="Center" ContentSource="Icon" />
                <Border x:Name="CheckMark" Margin="2" Visibility="Collapsed" VerticalAlignment="Center" Background="{TemplateBinding Foreground}" CornerRadius="1" Width="6" Height="6" />
                <ContentPresenter x:Name="HeaderHost" ContentSource="Header" Margin="{TemplateBinding Padding}" />
                <Popup x:Name="SubMenuPopup" VerticalOffset="1" HorizontalOffset="-2"   Placement="Bottom" IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource=/TemplatedParent}" Focusable="false" >
                <Border Background="White" BorderBrush="Silver" BorderThickness="1">
                    <ItemsPresenter Margin="{TemplateBinding Padding}" KeyboardNavigation.DirectionalNavigation="Cycle" />
                </Border>
                </Popup>
            </DockPanel>
            </Border>
            <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" Value="VerticalGradient #F9F9F9 #E9E9E9" />
                <Setter Property="BorderBrush" Value="Silver" />
            </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- SubMenuItem -->

        <ControlTemplate x:Key="SubmenuItemTemplateKey" TargetType="{x:Type MenuItem}">
            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
            <Grid Margin="{TemplateBinding Padding}">
                <ColumnDefinition MinWidth="12" Width="Auto" SharedSizeGroup="IconGroup" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" SharedSizeGroup="InputGestureTextGroup" />
                <ColumnDefinition Width="12" />
                <ContentPresenter x:Name="Icon" Grid.Column="0" Margin="2" VerticalAlignment="Center" ContentSource="Icon" />
                <Border x:Name="CheckMark" Grid.Column="0" Margin="2" VerticalAlignment="Center" Visibility="Collapsed" Background="{TemplateBinding Foreground}" CornerRadius="1" Width="6" Height="6" />
                <ContentPresenter x:Name="Header" Grid.Column="1" Margin="2" VerticalAlignment="Center" ContentSource="Header" />
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Margin="2" VerticalAlignment="Center"  /> <!-- TextContent="{TemplateBinding InputGestureText}" -->
            </Grid>
            </Border>
            <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" Value="VerticalGradient #F9F9F9 #E9E9E9" />
                <Setter Property="BorderBrush" Value="Silver" />
            </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- SubMenuHeader -->

        <ControlTemplate x:Key="SubmenuHeaderTemplateKey" TargetType="{x:Type MenuItem}">
            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
            <Grid Margin="{TemplateBinding Padding}">
                <ColumnDefinition MinWidth="12" Width="Auto" SharedSizeGroup="IconGroup" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" SharedSizeGroup="InputGestureTextGroup" />
                <ColumnDefinition Width="12" />
                <ContentPresenter x:Name="Icon" Grid.Column="0" Margin="2" VerticalAlignment="Center" ContentSource="Icon" />
                <Border x:Name="CheckMark" Grid.Column="0" Margin="2" VerticalAlignment="Center" Visibility="Collapsed" Background="{TemplateBinding Foreground}" CornerRadius="1" Width="8" Height="8" />
                <ContentPresenter x:Name="Header" Grid.Column="1" Margin="2" VerticalAlignment="Center" ContentSource="Header" />
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Margin="2" VerticalAlignment="Center"  /> <!-- TextContent="{TemplateBinding InputGestureText}" -->
                <Path x:Name="Arrow" Grid.Column="3" Margin="2" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M 0 0L 0 8 L 4 4 Z" />
                <Popup x:Name="SubMenuPopup" Placement="Right" IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource=/TemplatedParent}" Focusable="false" >
                <Border Background="White" BorderBrush="Silver" BorderThickness="1">
                    <ItemsPresenter Margin="{TemplateBinding Padding}" KeyboardNavigation.DirectionalNavigation="Cycle" />
                </Border>
                </Popup>
            </Grid>
            </Border>
            <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" Value="VerticalGradient #F9F9F9 #E9E9E9" />
                <Setter Property="BorderBrush" Value="Silver" />
            </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- MenuItem Style -->

        <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="2" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Foreground" Value="#333333" />
            <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource TopLevelHeaderTemplateKey}" />
                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource TopLevelItemTemplateKey}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource SubmenuHeaderTemplateKey}" />
                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="DockPanel.Dock" Value="Top" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <!-- Trigger Property="Mode" Value="Separator">
                <Setter Property="Focusable" Value="false" />
                <Setter Property="Template" Value="{StaticResource Separator_MenuItemStyle}" />
                <Setter Property="Background" Value="Transparent" />
            </Trigger -->
            </Style.Triggers>
        </Style>

        <!-- 
            ===================================================================
            Simple Style for Slider
            ===================================================================
            -->

        <!-- Slider Resources -->

        <Style x:Key="Slider_RepeatButton" TargetType="{x:Type RepeatButton}">
            <!-- Setter Property="ThemeStyleKey" Value="{x:Null}" / -->
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="Slider_Thumb" TargetType="{x:Type Thumb}">
            <!-- Setter Property="ThemeStyleKey" Value="{x:Null}" / -->
            <Setter Property="Width" Value="14" />
            <Setter Property="Height" Value="14" />
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                <Ellipse Stroke="Silver" StrokeThickness="1" Fill="VerticalGradient White #CDCDCD" />
                </ControlTemplate>
            </Setter.Value>
            </Setter>
            <Style.Triggers>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Background" Value="VerticalGradient White #E0E0E0" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="#E4E4E4" />
            </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Slider Style -->

        <!-- Style x:Key="{x:Type HorizontalSlider}" TargetType="{x:Type HorizontalSlider}">
            <Setter Property="ThemeStyleKey" Value="{x:Null}" />
            <Setter Property="Background" Value="#E4E4E4" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="Silver" />
            <Setter Property="Foreground" Value="Gray" />
            <Setter Property="MinWidth" Value="11" />
            <Setter Property="MinHeight" Value="24" />
            <Setter Property="Width" Value="104" />
            <Setter Property="Height" Value="Auto" />
            <Setter Property="Template">
            <Setter.Value>

                <ControlTemplate TargetType="{x:Type Slider}">
                <Grid ClipToBounds="false">
                    <ColumnDefinition Width="*" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding Slider.MinHeight}" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                    <TickBar x:Name="TopTick" Grid.Row="0" Placement="Top" Fill="{TemplateBinding Foreground}" Height="4" Visibility="Collapsed" />
                    <Border Height="4" Grid.Row="1" CornerRadius="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Width="{TemplateBinding Width}"/>
                    <Canvas Grid.Row="1" VerticalAlignment="Center" Height="4">
                    <Rectangle x:Name="PART_SelectionRange" Canvas.Top="1" Fill="{TemplateBinding Foreground}" Height="2.0" Visibility="Hidden" />
                    </Canvas>
                    <DockPanel Grid.Row="1" Slider.IsTrack="true">
                    <RepeatButton DockPanel.Dock="Left" Style="{DynamicResource Slider_RepeatButton}" Delay="{TemplateBinding Delay}" Interval="{TemplateBinding Interval}" Slider.IsDecreaseButton="true" Command="Slider.DecreaseLarge" />
                    <Thumb DockPanel.Dock="Left" Style="{DynamicResource Slider_Thumb}" Slider.IsThumb="true" />
                    <RepeatButton Style="{DynamicResource Slider_RepeatButton}" Delay="{TemplateBinding Delay}" Interval="{TemplateBinding Interval}" Slider.IsIncreaseButton="true" Command="Slider.IncreaseLarge" />
                    </DockPanel>
                    <TickBar x:Name="BottomTick" Grid.Row="2" Fill="{TemplateBinding Foreground}" Placement="Bottom" Height="4" Visibility="Collapsed"  />
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="TickPlacement" Value="TopLeft">
                    <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="TickPlacement" Value="BottomRight">
                    <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="TickPlacement" Value="Both">
                    <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                    <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="IsSelectionRangeEnabled" Value="true">
                    <Setter TargetName="PART_SelectionRange" Property="Visibility" Value="Visible" />
                    </Trigger>
                </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style -->

        <!-- 
            ===================================================================
            Simple Style for CheckBox
            ===================================================================
            -->

        <!-- CheckBox Style -->

        <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">

            <!-- Setter Property="ThemeStyleKey" Value="{x:Null}" / -->
            <Setter Property="Background" Value="VerticalGradient White #CDCDCD" />
            <Setter Property="BorderBrush" Value="Silver" />
            <Setter Property="FontFamily" Value="Arial" />
            <Setter Property="FontSize" Value="8pt" />
            <Setter Property="FontStyle" Value="Normal" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="Padding" Value="3,1,0,0" />
            <Setter Property="Margin" Value="0,2,0,2" />
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                <!-- BulletPanel Background="Transparent">
                    <Grid>
                    <Rectangle x:Name="OuterRectangle" Width="12" Height="12" Fill="{TemplateBinding Background}" StrokeThickness="1" Stroke="{TemplateBinding BorderBrush}" RadiusX="1" RadiusY="1" />
                    <Rectangle x:Name="InnerRectangle" Width="6"  Height="6" Fill="Gray" RadiusX="1" RadiusY="1" />
                    </Grid>
                    <ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                </BulletPanel -->
                <ControlTemplate.Triggers>
                    <Trigger Property="IsChecked" Value="false">
                    <!-- Setter TargetName="InnerRectangle" Property="Visibility" Value="Collapsed" / -->
                    </Trigger>
                    <Trigger Property="IsChecked" Value="true">
                    <!-- Setter TargetName="InnerRectangle" Property="Fill" Value="Silver" / -->
                    </Trigger>
                    <Trigger Property="IsPressed" Value="true">
                    <!-- Setter TargetName="OuterRectangle" Property="Fill" Value="#F4F4F4" / -->
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                    <!-- Setter TargetName="OuterRectangle" Property="Fill" Value="Silver" />
                    <Setter TargetName="InnerRectangle" Property="Fill" Value="Silver" / -->
                    </Trigger>
                </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
            </Setter>
            <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
            </Trigger>
            </Style.Triggers>
        </Style>

        <!-- 
            ===================================================================
            Simple Style for RadioButton
            ===================================================================
            -->

        <!-- RadioButton Style -->

        <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
            <!-- Setter Property="ThemeStyleKey" Value="{x:Null}" / -->
            <Setter Property="Background" Value="VerticalGradient White #CDCDCD" />
            <Setter Property="BorderBrush" Value="Silver" />
            <Setter Property="FontFamily" Value="Arial" />
            <Setter Property="FontSize" Value="8pt" />
            <Setter Property="FontStyle" Value="Normal" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="Padding" Value="3,1,0,0" />
            <Setter Property="Margin" Value="0,2,0,2" />
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                <!-- BulletPanel Background="Transparent">
                    <Grid>
                    <Ellipse x:Name="OuterCircle" Width="12" Height="12" Fill="{TemplateBinding Background}" StrokeThickness="1" Stroke="{TemplateBinding BorderBrush}" />
                    <Ellipse x:Name="InnerCircle" Width="6"  Height="6" Fill="Gray" />
                    </Grid>
                    <ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"  />
                </BulletPanel -->
                <ControlTemplate.Triggers>
                    <Trigger Property="IsChecked" Value="false">
                    <Setter TargetName="InnerCircle" Property="Visibility" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="true">
                    <Setter TargetName="OuterCircle" Property="Fill" Value="#F4F4F4" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                    <Setter TargetName="OuterCircle" Property="Fill" Value="Silver" />
                    <Setter TargetName="InnerCircle" Property="Fill" Value="Silver" />
                    </Trigger>
                </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
            </Setter>
            <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="Silver" />
            </Trigger>
            </Style.Triggers>
        </Style>

        <!-- 
            ===================================================================
            Simple Style for TextBox
            ===================================================================
            -->

        <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBoxBase}">

            <!-- Setter Property="ThemeStyleKey" Value="{x:Null}" / -->
            <Setter Property="Background" Value="White" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="Silver" />
            <Setter Property="Padding" Value="2" />
            <Setter Property="FontFamily" Value="Arial" />
            <Setter Property="FontSize" Value="8pt" />
            <Setter Property="FontStyle" Value="Normal" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                <Border CornerRadius="2" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"  x:Name="TextBoxBorder">
                    <ScrollViewer x:Name="TextBoxContent" Focusable="false" Margin="1" />
                </Border>
                </ControlTemplate>
            </Setter.Value>
            </Setter>
            <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <!-- Width -->
            <Trigger Property="Width" Value="Auto">
                <Setter Property="MinWidth" Value="100" />
            </Trigger>
            <!-- Height -->
            <Trigger Property="Height" Value="Auto">
                <Setter Property="MinHeight" Value="20" />
            </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="ControlTextBlock" TargetType="{x:Type TextBlock}">
            <Setter Property="FontFamily" Value="Segoe"  />
            <Setter Property="FontWeight" Value="Bold"  />
            <Setter Property="FontSize" Value="10pt"  />
        </Style>


        </Canvas.Resources>


        <!-- BUTTON -->

        <TextBlock Canvas.Top="40" Canvas.Left="20" Style="{StaticResource ControlTextBlock}">Button</TextBlock>

        <Button Canvas.Top="70" Canvas.Left="20" IsDefault="true">OK</Button>
        <Button Canvas.Top="70" Canvas.Left="100">Cancel</Button>

        <!-- SLIDER -->

        <TextBlock Canvas.Top="120" Canvas.Left="20" Style="{StaticResource ControlTextBlock}" >Slider</TextBlock>

        <HorizontalSlider Width="150" Value="5" Canvas.Top="140" Canvas.Left="20" TickPlacement="BottomRight" SelectionStart="2" SelectionEnd="7" IsSelectionRangeEnabled="True" />

        <!-- CHECKBOX -->

        <TextBlock Canvas.Top="190" Canvas.Left="20" Style="{StaticResource ControlTextBlock}">CheckBox</TextBlock>

        <StackPanel Canvas.Top="220" Canvas.Left="20" Width="200">
        <CheckBox>One</CheckBox>
        <CheckBox>Two (this is a long one)</CheckBox>
        <CheckBox>Three</CheckBox>
        </StackPanel>


        <!-- RADIOBUTTON -->

        <TextBlock Canvas.Top="280" Canvas.Left="20" Style="{StaticResource ControlTextBlock}">RadioButton</TextBlock>

        <StackPanel Canvas.Top="310" Canvas.Left="20" Width="200">
        <RadioButtonList>
            <RadioButton>One</RadioButton>
            <RadioButton>Two (this is a long one)</RadioButton>
            <RadioButton>Three</RadioButton>
        </RadioButtonList>
        </StackPanel>

        <!-- TEXTBOX -->

        <TextBlock Canvas.Top="370" Canvas.Left="20" Style="{StaticResource ControlTextBlock}">TextBox</TextBlock>

        <TextBox Canvas.Top="400" Canvas.Left="20" Width="160" />


        <!-- LISTBOX -->

        <TextBlock Canvas.Top="40" Canvas.Left="300" Style="{StaticResource ControlTextBlock}">ListBox</TextBlock>

        <ListBox Canvas.Top="70" Canvas.Left="300" Width="185" Height="80">
        <ListBoxItem>Select an item 1</ListBoxItem>
        <ListBoxItem>Select an item 2</ListBoxItem>
        <ListBoxItem>Select an item 3</ListBoxItem>
        <ListBoxItem>Select an item 4</ListBoxItem>
        <ListBoxItem>Select an item 5</ListBoxItem>
        <ListBoxItem>Select an item 6</ListBoxItem>
        <ListBoxItem>Select an item 7</ListBoxItem>
        <ListBoxItem>Select an item 8 (This is a much longer item than some)</ListBoxItem>
        </ListBox>


        <!-- COMBOBOX-->

        <TextBlock Canvas.Top="170" Canvas.Left="300" Style="{StaticResource ControlTextBlock}">ComboBox</TextBlock>

        <ComboBox Canvas.Top="200" Canvas.Left="300">
        <ComboBoxItem>Select Me! 1</ComboBoxItem>
        <ComboBoxItem>Select Me! 2</ComboBoxItem>
        <ComboBoxItem>Select Me! 3</ComboBoxItem>
        <ComboBoxItem>Select Me! 4</ComboBoxItem>
        <ComboBoxItem>Select Me! 5</ComboBoxItem>
        <ComboBoxItem>Select Me! 6</ComboBoxItem>
        <ComboBoxItem>Select Me! 7</ComboBoxItem>
        <ComboBoxItem>Select Me! 8</ComboBoxItem>
        </ComboBox>

        <ComboBox Canvas.Top="240" Canvas.Left="300" IsEditable="true">
        <ComboBoxItem>Select Me! 1</ComboBoxItem>
        <ComboBoxItem>Select Me! 2</ComboBoxItem>
        <ComboBoxItem>Select Me! 3</ComboBoxItem>
        <ComboBoxItem>Select Me! 4</ComboBoxItem>
        <ComboBoxItem>Select Me! 5</ComboBoxItem>
        <ComboBoxItem>Select Me! 6</ComboBoxItem>
        <ComboBoxItem>Select Me! 7</ComboBoxItem>
        <ComboBoxItem>Select Me! 8</ComboBoxItem>
        </ComboBox>


        <!-- MENU / CONTEXT MENU -->

        <TextBlock Canvas.Top="280" Canvas.Left="300" Style="{StaticResource ControlTextBlock}">Menu / ContextMenu</TextBlock>

        <Menu Canvas.Top="310" Canvas.Left="300" Width="180" Background="#F4F4F4">
        <MenuItem Header="View">
            <MenuItem Mode="Checkable" Header="Status"/>
            <MenuItem Mode="Checkable" Header="Color Box"/>
            <MenuItem Mode="Checkable" Header="Status Bar"/>
            <MenuItem Mode="Checkable" IsEnabled="false" Header="TextBlock ToolBar"/>
            <MenuItem Mode="Separator"/>
            <MenuItem Header="Zoom">
            <MenuItem Header="Four"/>
            <MenuItem Header="Five"/>
            <MenuItem Header="Six"/>
            </MenuItem>
            <MenuItem Header="View Bitmap"/>
        </MenuItem>
        <MenuItem Header="Edit">
            <MenuItem Mode="Checkable" Header="Add to"/>
            <MenuItem Mode="Checkable" Header="Organize Favorites"/>
            <MenuItem Mode="Separator"/>
            <MenuItem Mode="Checkable" Header="Yahoo"/>
            <MenuItem Mode="Checkable" Header="Amazon"/>
            <MenuItem Mode="Checkable" Header="Search"/>
        </MenuItem>

        </Menu>

        <Label Canvas.Top="330" Canvas.Left="300">
        <Label.ContextMenu>
            <ContextMenu>
            <MenuItem Header="File">
                <MenuItem Header="One"/>
                <MenuItem Header="Two"/>
                <MenuItem Header="Three">
                <MenuItem Header="Four"/>
                <MenuItem Header="Five"/>
                <MenuItem Header="Six"/>
                </MenuItem>
                <MenuItem Mode="Separator"/>
                <MenuItem Header="Seven"/>
            </MenuItem>

            <MenuItem Header="Edit">
            </MenuItem>
            </ContextMenu>
        </Label.ContextMenu>
        Right click to see a ContextMenu.
        </Label>

    </Canvas>
    </Grid>
	
</Window>
<Page 
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
  x:Class="SDKSamples.BasicFromToPage" 
  Title="From/To"
  xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" 
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  mc:Ignorable="PresentationOptions">
  <Page.Resources>
    <!-- Creates a grid background. -->
    <DrawingBrush x:Key="myGridBrushResource"
      Viewport="0,0,10,10" ViewportUnits="Absolute"
      TileMode="Tile" Opacity="0.5"
      AlignmentX="Left" AlignmentY="Top"
      PresentationOptions:Freeze="True">
      <DrawingBrush.Drawing>
        <DrawingGroup>
          <GeometryDrawing Geometry="M0,0 L1,1" Brush="#44CCCCFF" />
          <GeometryDrawing Geometry="M0,0 L1,0 1,0.05 0.05,0.05 0.05,1 0,1Z" 
           Brush="Gray" />
        </DrawingGroup>
      </DrawingBrush.Drawing>
    </DrawingBrush>

    <DrawingBrush x:Key="arrowBackgroundBrush" Opacity="0.5"
      Viewbox="0,0,1,1" Viewport="0,0,10,20" ViewportUnits="Absolute"
      TileMode="Tile" PresentationOptions:Freeze="True">
      <DrawingBrush.Drawing>
        <DrawingGroup>
          <GeometryDrawing Geometry="M0,0 L1,0, 1,0.5" Brush="#9999FF" />
          <GeometryDrawing Geometry="M0,0 L1,0.5, 0,1">
            <GeometryDrawing.Brush>
              <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                <GradientStop Offset="0.0" Color="#9999FF" />
                <GradientStop Offset="1.0" Color="Transparent" />
              </LinearGradientBrush>
            </GeometryDrawing.Brush>
          </GeometryDrawing>
          <GeometryDrawing Geometry="M0,1 L1,1, 1,0.5" Brush="#9999FF" />
        </DrawingGroup>
      </DrawingBrush.Drawing>
    </DrawingBrush>

    <Style TargetType="{x:Type Button}" x:Key="CustomButtonStyle">
      <Setter Property="HorizontalAlignment" Value="Left" />
      <Setter Property="Padding" Value="20" />
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="{x:Type Button}">
            <Grid HorizontalAlignment="Stretch"
              VerticalAlignment="Stretch"
              Background="Transparent">
              <Rectangle
               RadiusX="10" RadiusY="10" 
               StrokeThickness="5" Stroke="{TemplateBinding Background}"/>
              <Rectangle 
                  Margin="10"
                  Fill="{TemplateBinding Background}" />
              <Rectangle x:Name="outlineRect"
                RadiusX="10" RadiusY="10" 
                StrokeThickness="5">
                <Rectangle.Stroke>
                  <SolidColorBrush x:Name="outlineRectangleBrush" Color="Transparent" />
                </Rectangle.Stroke>
              </Rectangle>
              <Rectangle x:Name="sBackingRect"                
                Margin="10">
                <Rectangle.Fill>
                  <SolidColorBrush x:Name="fillRectangleBrush" Color="Transparent" />
                </Rectangle.Fill>
              </Rectangle>
              <Rectangle Name="glassCube"
                RadiusX="10" RadiusY="10" Opacity="0" 
                Fill="{DynamicResource myGlassBrushResource}"
                StrokeThickness="2"
                RenderTransformOrigin="0.5,0.5">
                <Rectangle.Stroke>
                  <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <GradientStop Offset="0.0" Color="LightBlue" />
                    <GradientStop Offset="1.0" Color="Gray" />
                  </LinearGradientBrush>
                </Rectangle.Stroke>
                <Rectangle.OpacityMask>
                  <RadialGradientBrush>
                    <GradientStop Offset="0.0" Color="Transparent" />
                    <GradientStop Offset="1.0" Color="Black" />
                  </RadialGradientBrush>
                </Rectangle.OpacityMask>
                <Rectangle.RenderTransform>
                  <ScaleTransform x:Name="glassCubeScaleTransform" />
                </Rectangle.RenderTransform>
              </Rectangle>
              <ContentPresenter x:Name="myContentPresenter"
                Margin="{TemplateBinding Padding}"
                Grid.Row="0" Grid.Column="0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Content="{TemplateBinding Content}"  />
            </Grid>

            <ControlTemplate.Triggers>
              <Trigger Property="IsPressed" Value="true">
                <Trigger.EnterActions>
                  <BeginStoryboard HandoffBehavior="Compose">
                    <Storyboard>
                      <ColorAnimation 
                       Storyboard.TargetName="outlineRectangleBrush"
                       Storyboard.TargetProperty="Color"
                       To="Red" Duration="0:0:0.25"
                       AutoReverse="True" 
                       FillBehavior="Stop" />
                      <ColorAnimation 
                      Storyboard.TargetName="fillRectangleBrush"
                      Storyboard.TargetProperty="Color"
                      To="{x:Static SystemColors.HighlightColor}" Duration="0:0:0.25"
                      AutoReverse="True" 
                      FillBehavior="Stop" />
                    </Storyboard>
                  </BeginStoryboard>
                </Trigger.EnterActions>
              </Trigger>

              <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="outlineRect" Property="Rectangle.Opacity" Value="0"  />
                <Setter TargetName="glassCube" Property="Rectangle.Opacity" Value="0.75"  />
              </Trigger>

              <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <EventTrigger.Actions>
                  <BeginStoryboard Name="mouseEnterBeginStoryboard">
                    <Storyboard>
                      <DoubleAnimation 
                        Storyboard.TargetName="glassCube"
                        Storyboard.TargetProperty="Opacity"
                        To="1" Duration="0:0:0.5"
                       />
                      <ColorAnimation 
                        Storyboard.TargetName="outlineRectangleBrush"
                        Storyboard.TargetProperty="Color"
                        To="{x:Static SystemColors.HighlightColor}" Duration="0:0:0.5"
                       />
                      <DoubleAnimation 
                        Storyboard.TargetName="glassCubeScaleTransform"
                        Storyboard.TargetProperty="ScaleX"
                        By="-0.1" Duration="0:0:0.5"
                        AutoReverse="True" RepeatBehavior="Forever" />
                      <DoubleAnimation 
                        Storyboard.TargetName="glassCubeScaleTransform"
                        Storyboard.TargetProperty="ScaleY"
                        By="-0.1" Duration="0:0:0.5"
                        AutoReverse="True" RepeatBehavior="Forever" />
                    </Storyboard>
                  </BeginStoryboard>
                </EventTrigger.Actions>
              </EventTrigger>
              <EventTrigger RoutedEvent="Mouse.MouseLeave">
                <EventTrigger.Actions>
                  <RemoveStoryboard BeginStoryboardName="mouseEnterBeginStoryboard" />
                  <BeginStoryboard>
                    <Storyboard>
                      <DoubleAnimation 
                        Storyboard.TargetName="glassCube"
                        Storyboard.TargetProperty="Opacity"
                        To="0" Duration="0:0:0.5" />
                    </Storyboard>
                  </BeginStoryboard>
                </EventTrigger.Actions>
              </EventTrigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    
  </Page.Resources>
  <StackPanel>

    <TextBlock HorizontalAlignment="Left" TextWrapping="Wrap" Width="500" Margin="10">
          <Span Style="{StaticResource MyHeadingSpanStyle}">From/To/By</Span><LineBreak/>
          In basic animations, From, To, and By properties determine between what values an animation
          interpolates. The example below shows a series of different combinations of From/By/To applied
          to the Width property of this rectangle:
          <LineBreak/>
          <TextBlock Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
    ...
    &lt;Rectangle Name="animatedRectangle" Height="10" Width="100" 
        Fill="#99FF9900" ...  /&gt;
    ...
        </TextBlock>
    </TextBlock>

    <Grid Margin="20">

      <!-- Defines the rows and columns of the Grid.-->
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="500"/>
        <ColumnDefinition Width="20" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="20" />
        <RowDefinition Height="Auto" />
        <RowDefinition Height="20" />
        <RowDefinition Height="Auto" />
        <RowDefinition Height="20" />
        <RowDefinition Height="Auto" />
        <RowDefinition Height="20" />
        <RowDefinition Height="Auto" />
        <RowDefinition Height="20" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>

      <Border BorderBrush="#FF000000" BorderThickness="3" Grid.Row="2" Grid.Column="2"  Grid.RowSpan="10">
        <Border BorderBrush="#66000000" BorderThickness="1" Background="{StaticResource myGridBrushResource}">
        </Border>
      </Border>

      <!-- Highlight the animations' starting and ending values. -->
      <Rectangle Fill="{StaticResource arrowBackgroundBrush}" Grid.Row="2" Grid.Column="2" 
         Width="250" Height="20" HorizontalAlignment="Left" VerticalAlignment="Center"
         Margin="50,10,0,10" />
      <Rectangle Fill="{StaticResource arrowBackgroundBrush}" Grid.Row="4" Grid.Column="2" 
         Width="200" Height="20" HorizontalAlignment="Left" VerticalAlignment="Center"
         Margin="100,10,0,10" />
      <Rectangle Fill="{StaticResource arrowBackgroundBrush}" Grid.Row="6" Grid.Column="2" 
         Width="300" Height="20" HorizontalAlignment="Left" VerticalAlignment="Center"
         Margin="100,10,0,10" />
      <Rectangle Fill="{StaticResource arrowBackgroundBrush}" Grid.Row="8" Grid.Column="2" 
         Width="300" Height="20" HorizontalAlignment="Left" VerticalAlignment="Center"
         Margin="50,10,0,10" />
      <Rectangle Fill="{StaticResource arrowBackgroundBrush}" Grid.Row="10" Grid.Column="2"
         Width="50" Height="20" HorizontalAlignment="Left" VerticalAlignment="Center"
         Margin="50,10,0,10" />


      <!-- Demonstrates the From and To properties used together. -->
      <Rectangle Name="fromToAnimatedRectangle" Grid.Row="2" Grid.Column="2"
         Height="10" Width="100" HorizontalAlignment="Left" VerticalAlignment="Center"
         Fill="#99FF9900"  />

      <!-- Demonstrates the use of the To property. -->
      <Rectangle Name="toAnimatedRectangle" Grid.Row="4" Grid.Column="2"
         Height="10" Width="100" HorizontalAlignment="Left" VerticalAlignment="Center"
         Fill="#99FF9900"  />


      <!-- Demonstrates the use of the By property. -->
      <Rectangle Name="byAnimatedRectangle"  Grid.Row="6" Grid.Column="2"
         Height="10" Width="100" HorizontalAlignment="Left" VerticalAlignment="Center"
         Fill="#99FF9900" />


      <!-- Demonstrates the use of the From and By properties. -->
      <Rectangle Name="fromByAnimatedRectangle" Grid.Row="8" Grid.Column="2"
         Height="10" Width="100" HorizontalAlignment="Left" VerticalAlignment="Center"
         Fill="#99FF9900"  />


      <!-- Demonstrates the use of the From property. -->
      <Rectangle Name="fromAnimatedRectangle" Grid.Row="10" Grid.Column="2"
         Height="10" Width="100" HorizontalAlignment="Left" VerticalAlignment="Center"
         Fill="#99FF9900"  />

      <Button Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3"
        Background="LimeGreen" Style="{StaticResource CustomButtonStyle}">
        Start Animations
        <Button.Triggers>
          <EventTrigger RoutedEvent="Button.Click">
            <BeginStoryboard>
              <Storyboard FillBehavior="Stop">

                <!-- Demonstrates the From and To properties used together.
                   Animates the rectangle's Width property from 50 to 300 over 10 seconds. -->
                <DoubleAnimation 
                  Storyboard.TargetName="fromToAnimatedRectangle" 
                  Storyboard.TargetProperty="Width"
                  From="50" To="300" Duration="0:0:10" />

                <!-- Demonstrates the To property used by itself.
                   Animates the Rectangle's Width property from its base value
                   (100) to 300 over 10 seconds. -->
                <DoubleAnimation 
                  Storyboard.TargetName="toAnimatedRectangle" 
                  Storyboard.TargetProperty="Width"
                  To="300" Duration="0:0:10" />

                <!-- Demonstrates the By property used by itself.
                   Increments the Rectangle's Width property by 300 over 10 seconds.
                   As a result, the Width property is animated from its base value
                   (100) to 400 (100 + 300) over 10 seconds. -->
                <DoubleAnimation 
                  Storyboard.TargetName="byAnimatedRectangle" 
                  Storyboard.TargetProperty="Width" 
                  By="300" Duration="0:0:10" />

                <!-- Demonstrates the From and By properties used by together.
                   Increments the Rectangle's Width property by 300 over 10 seconds.
                   As a result, the Width property is animated from 50
                   to 350 (50 + 300) over 10 seconds. -->
                <DoubleAnimation 
                  Storyboard.TargetName="fromByAnimatedRectangle" 
                  Storyboard.TargetProperty="Width" 
                  From="50" By="300" Duration="0:0:10"  />

                <!-- Demonstrates the From property used by itself.
                   Animates the rectangle's Width property from 50 to its base value (100)
                   over 10 seconds. -->
                <DoubleAnimation 
                  Storyboard.TargetName="fromAnimatedRectangle" 
                  Storyboard.TargetProperty="Width"
                  From="50" Duration="0:0:10"  />
              </Storyboard>
            </BeginStoryboard>
          </EventTrigger>
        </Button.Triggers>
      </Button>


      <!-- Label the examples. -->
      <TextBlock Grid.Row="2" Grid.Column="0" TextWrapping="Wrap" >
        <Bold>"From/To" Animation</Bold><LineBreak />
        Animates the rectangle's Width property from 50 to 300 over 10 seconds.
        <LineBreak/>
        <TextBlock Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
    ...
    &lt;DoubleAnimation 
    Storyboard.TargetName="animatedRectangle" 
    Storyboard.TargetProperty="Width"
    From="50" To="300" Duration="0:0:10" /&gt;
    ...
        </TextBlock>
      </TextBlock>

      <TextBlock Grid.Row="4" Grid.Column="0" TextWrapping="Wrap"  >
        <Bold>"To" Animation</Bold><LineBreak />
        Animates the rectangle's Width property from its base value of
        100 to 300 over 10 seconds.
        <LineBreak/>
        <TextBlock Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
    ...
    &lt;DoubleAnimation 
    Storyboard.TargetName="animatedRectangle" 
    Storyboard.TargetProperty="Width"
    To="300" Duration="0:0:10" /&gt;
    ...
        </TextBlock>
      </TextBlock>

      <TextBlock Grid.Row="6" Grid.Column="0" TextWrapping="Wrap" >
        <Bold>"By" Animation</Bold><LineBreak />
        Animates the rectangle's Width property by offsetting its base value by
        300 over 10 seconds. As a result, the width animates from 100 to 400.
        <LineBreak/>
        <TextBlock Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
    ...
    &lt;DoubleAnimation 
    Storyboard.TargetName="animatedRectangle" 
    Storyboard.TargetProperty="Width" 
    By="300" Duration="0:0:10" />
    ...
        </TextBlock>
      </TextBlock>

      <TextBlock Grid.Row="8" Grid.Column="0" TextWrapping="Wrap" >
        <Bold>"From/By" Animation</Bold><LineBreak />
        Animates the rectangle's Width property by offsetting the animation's start value
        of 50 by 300 over 10 seconds.
        As a result, the width animates from 50 to 350.
        <LineBreak/>
        <TextBlock Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
    ...
    &lt;DoubleAnimation 
    Storyboard.TargetName="animatedRectangle" 
    Storyboard.TargetProperty="Width" 
    From="50" By="300"  Duration="0:0:10" />
    ...
        </TextBlock>
      </TextBlock>

      <TextBlock Grid.Row="10" Grid.Column="0" TextWrapping="Wrap" >
        <Bold>"From" Animation</Bold><LineBreak />
        Animates the rectangle's Width property from 50 to its base value of 100 over 10 seconds.
        <LineBreak/>
        <TextBlock Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
    ...
    &lt;DoubleAnimation 
    Storyboard.TargetName="animatedRectangle" 
    Storyboard.TargetProperty="Width" 
    From="50" Duration="0:0:10" />
    ...
        </TextBlock>
      </TextBlock>

    </Grid>


  </StackPanel>
</Page>

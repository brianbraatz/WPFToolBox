<Page 
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
  x:Class="SDKSamples.BasicExamplesPage" 
  Title="Basic Examples">

  <StackPanel>

    <FlowDocumentScrollViewer>
      <FlowDocument>
        <Paragraph>
          <Span Style="{StaticResource MyHeadingSpanStyle}">Basic Animation Examples</Span>
          <LineBreak/>
          Below are several simple examples of using basic animations.
        </Paragraph>
      </FlowDocument>
    </FlowDocumentScrollViewer>

    <Canvas HorizontalAlignment="Left" Width="1200" Height="50">
      <Rectangle Style="{StaticResource myAnimatedRectangleStyle}" Width="1200" Height="30" />
      <TextBlock FontSize="12" FontWeight="Bold" Margin="30,10,10,18">
        Animate the Thickness of a Border (ThicknessAnimation)
      </TextBlock>
    </Canvas>

    <StackPanel Orientation="Horizontal">

      <Border Background="#99FFFFFF" BorderBrush="#CCCCFF" BorderThickness="1"
      Margin="40" Padding="20" Width="300" VerticalAlignment="Top">
        <Border.Triggers>
          <EventTrigger RoutedEvent="Border.Loaded">
            <BeginStoryboard>
              <Storyboard>

                <!-- Animating the BorderThickness from its base value to 30. -->
                <ThicknessAnimation Storyboard.TargetProperty="BorderThickness"
                 Duration="0:0:5" RepeatBehavior="Forever" To="30" />

              </Storyboard>
            </BeginStoryboard>
          </EventTrigger>
        </Border.Triggers>

        <TextBlock>
          This example shows how to use the ThicknessAnimation to create
          an animation on the BorderThickness property of a Border.
        </TextBlock>
      </Border>

      <!-- Displays functional code for demonstration. -->
      <Border Background="#EEEEEE" BorderBrush="Black" Width="600" Height="400"  BorderThickness="1">
        <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
          <TextBlock Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
 ...
&lt;Border Background="#99FFFFFF" BorderBrush="#CCCCFF" BorderThickness="1"
Margin="40" Padding="20" Width="300" VerticalAlignment="Top"&gt;
  &lt;Border.Triggers&gt;
    &lt;EventTrigger RoutedEvent="Border.Loaded"&gt;
      &lt;BeginStoryboard&gt;
        &lt;Storyboard&gt;

          &lt;!-- Animating the BorderThickness from its base value to 30. --&gt;
          &lt;ThicknessAnimation Storyboard.TargetProperty="BorderThickness"
           Duration="0:0:5" RepeatBehavior="Forever" To="30" /&gt;

        &lt;/Storyboard&gt;
      &lt;/BeginStoryboard&gt;
    &lt;/EventTrigger&gt;
  &lt;/Border.Triggers&gt;

  &lt;TextBlock&gt;
    This example shows how to use the ThicknessAnimation to create
    an animation on the BorderThickness property of a Border.
  &lt;/TextBlock&gt;
&lt;/Border&gt;
      ...
      </TextBlock>
        </ScrollViewer>
      </Border>
      <!-- End of code display. -->
    </StackPanel>

    <Canvas HorizontalAlignment="Left" Width="1200" Height="50" Margin="0,30,0,0">
      <Rectangle Style="{StaticResource myAnimatedRectangleStyle}" Width="1200" Height="30" />
      <TextBlock FontSize="12" FontWeight="Bold" Margin="30,10,10,18">
        Animate the Color of a Border Background (ColorAnimation)
      </TextBlock>
    </Canvas>

    <StackPanel Orientation="Horizontal">
      <Border Background="#99FFFFFF"  BorderThickness="28"
      Margin="40" Width="300" Padding="20" >
        <Border.BorderBrush>
          <SolidColorBrush x:Name="MyAnimatedBrush" Color="Green" />
        </Border.BorderBrush>
        <Border.Triggers>
          <EventTrigger RoutedEvent="Border.Loaded">
            <BeginStoryboard>
              <Storyboard>

                <!-- Animate from green to red. -->
                <ColorAnimation
                  Storyboard.TargetProperty="(SolidColorBrush.Color)"
                  Storyboard.TargetName="MyAnimatedBrush" Duration="0:0:4"  
                  To="Red" AutoReverse="True" RepeatBehavior="Forever" />
              </Storyboard>
            </BeginStoryboard>
          </EventTrigger>
        </Border.Triggers>

        <TextBlock>
          This example shows how to use the ColorAnimation to create
          an animation on the BorderBrush property of a Border.
        </TextBlock>
      </Border>

      <!-- Displays functional code for demonstration. -->
      <Border Background="#EEEEEE" BorderBrush="Black" Width="600" Height="400"  BorderThickness="1">
        <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
          <TextBlock Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
...
&lt;Border Background="#99FFFFFF"  BorderThickness="28"
Margin="40" Width="300" Padding="20" &gt;
  &lt;Border.BorderBrush&gt;
    &lt;SolidColorBrush x:Name="MyAnimatedBrush" Color="Green" /&gt;
  &lt;/Border.BorderBrush&gt;
  &lt;Border.Triggers&gt;
    &lt;EventTrigger RoutedEvent="Border.Loaded"&gt;
      &lt;BeginStoryboard&gt;
        &lt;Storyboard&gt;

          &lt;!-- Animate from green to red. --&gt;
          &lt;ColorAnimation
            Storyboard.TargetProperty="(SolidColorBrush.Color)"
            Storyboard.TargetName="MyAnimatedBrush" Duration="0:0:4"  
            To="Red" AutoReverse="True" RepeatBehavior="Forever" /&gt;
        &lt;/Storyboard&gt;
      &lt;/BeginStoryboard&gt;
    &lt;/EventTrigger&gt;
  &lt;/Border.Triggers&gt;

  &lt;TextBlock&gt;
    This example shows how to use the ColorAnimation to create
    an animation on the BorderBrush property of a Border.
  &lt;/TextBlock&gt;
&lt;/Border&gt;
...
      </TextBlock>
        </ScrollViewer>
      </Border>
      <!-- End of code display. -->
    </StackPanel>

    <Canvas HorizontalAlignment="Left" Width="1200" Height="50" Margin="0,30,0,0">
      <Rectangle Style="{StaticResource myAnimatedRectangleStyle}" Width="1200" Height="30" />
      <TextBlock FontSize="12" FontWeight="Bold" Margin="30,10,10,18">
        Animate a Rectangle (RectAnimation)
      </TextBlock>
    </Canvas>

    <StackPanel Orientation="Horizontal">
      <Canvas Width="300" Height="400">
        <Path Stroke="Black" StrokeThickness="1" Fill="LemonChiffon">
          <Path.Data>
            <RectangleGeometry x:Name="myRectangleGeometry" Rect="0,200,100,100" />
          </Path.Data>
          <Path.Triggers>
            <EventTrigger RoutedEvent="Path.Loaded">
              <BeginStoryboard>
                <Storyboard>

                  <!-- Animate the Rect property of the RectangleGeometry which causes the
              rectangle to animate its position as well as its width and height. -->
                  <RectAnimation
                    Storyboard.TargetName="myRectangleGeometry"
                    Storyboard.TargetProperty ="Rect" Duration="0:0:4" 
                    AutoReverse="True" RepeatBehavior="Forever"
                    To="100,50,200,50" />
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
          </Path.Triggers>
        </Path>
      </Canvas>
      <!-- Displays functional code for demonstration. -->
      <Border Background="#EEEEEE" BorderBrush="Black" Width="600" Height="400" Margin="60,0,0,100"   BorderThickness="1">
        <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
          <TextBlock Style="{StaticResource CodeSnippetParagraph}" xml:space="preserve">
...
&lt;Path Stroke="Black" StrokeThickness="1" Fill="LemonChiffon"&gt;
  &lt;Path.Data&gt;
    &lt;RectangleGeometry x:Name="myRectangleGeometry" Rect="0,200,100,100" /&gt;
  &lt;/Path.Data&gt;
  &lt;Path.Triggers&gt;
    &lt;EventTrigger RoutedEvent="Path.Loaded"&gt;
      &lt;BeginStoryboard&gt;
        &lt;Storyboard&gt;

          &lt;!-- Animate the Rect property of the RectangleGeometry 
          which causes the rectangle to animate its position as well as 
          its width and height. --&gt;
          &lt;RectAnimation
            Storyboard.TargetName="myRectangleGeometry"
            Storyboard.TargetProperty ="Rect" Duration="0:0:4" 
            AutoReverse="True" RepeatBehavior="Forever"
            To="100,50,200,50" /&gt;
        &lt;/Storyboard&gt;
      &lt;/BeginStoryboard&gt;
    &lt;/EventTrigger&gt;
  &lt;/Path.Triggers&gt;
&lt;/Path&gt;
...
      </TextBlock>
        </ScrollViewer>
      </Border>
      <!-- End of code display. -->

    </StackPanel>

  </StackPanel>
</Page>

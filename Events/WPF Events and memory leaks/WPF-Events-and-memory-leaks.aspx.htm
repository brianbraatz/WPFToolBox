<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional-dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head id="ctl00_ctl00">
 

<meta name="description" content="Technology blog about new Microsoft technologies. E.g. WPF, crossbow, .NET framework 3, Live etc. It includes code sources and samples">
<meta name="keywords" content=".NET Framework, Example, Internals, Microsoft, Programming, Source Code, technology, tutorial, wpf.">
<meta name="GENERATOR" content="CommunityServer 2007 SP2 (Build: 20611.960)">
<link rel="pingback" href="http://blogs.microsoft.co.il/blogs/tamir/pingback.aspx">
<link rel="shortcut icon" type="image/ico" href="http://blogs.microsoft.co.il/favicon.ico">
<link rel="alternate" type="application/rss+xml" title="Just code - Tamir Khason (RSS 2.0)" href="http://feeds.feedburner.com/microsft">
<link rel="alternate" type="application/rss+xml" title="Just code - Tamir Khason - All Comments (RSS 2.0)" href="http://blogs.microsoft.co.il/blogs/tamir/rsscomments.aspx">
<link rel="alternate" type="application/rss+xml" title="WPF Events and memory leaks - Comments for this post (RSS 2.0)" href="http://blogs.microsoft.co.il/blogs/tamir/rsscomments.aspx?PostID=20706">

	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<link rel="stylesheet" href="WPF-Events-and-memory-leaks.aspx_files/style.css" type="text/css" media="screen">
	<link rel="stylesheet" href="WPF-Events-and-memory-leaks.aspx_files/print.htm" type="text/css" media="print">
	<link rel="stylesheet" href="WPF-Events-and-memory-leaks.aspx_files/light_sidebar_left_wide.css" type="text/css" media="screen">
	<link rel="stylesheet" href="WPF-Events-and-memory-leaks.aspx_files/DynamicStyle.css" type="text/css" media="screen">
<script src="WPF-Events-and-memory-leaks.aspx_files/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-486526-1";
urchinTracker();
</script><title>WPF Events and memory leaks - Just code - Tamir Khason</title></head><body>
    <form name="aspnetForm" method="post" action="/blogs/tamir/archive/2007/07/26/WPF-Events-and-memory-leaks.aspx" onsubmit="javascript:return WebForm_OnSubmit();" id="aspnetForm">
<div>
<input name="__EVENTTARGET" id="__EVENTTARGET" value="" type="hidden">
<input name="__EVENTARGUMENT" id="__EVENTARGUMENT" value="" type="hidden">
<input name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwULLTIwMjk4NDE1MzdkGAEFHl9fQ29udHJvbHNSZXF1aXJlUG9zdEJhY2tLZXlfXxYBBS5jdGwwMCRNYWluJGN0bDA4JGN0bDAyJGN0bDAyJGN0bDAyJGNoa1JlbWVtYmVyNnOa7G3ox0C7N39AE+DRj1GRFAw=" type="hidden">
</div>

<script type="text/javascript">
<!--
var theForm = document.forms['aspnetForm'];
if (!theForm) {
    theForm = document.aspnetForm;
}
function __doPostBack(eventTarget, eventArgument) {
    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {
        theForm.__EVENTTARGET.value = eventTarget;
        theForm.__EVENTARGUMENT.value = eventArgument;
        theForm.submit();
    }
}
// -->
</script>


<script src="WPF-Events-and-memory-leaks.aspx_files/WebResource.js" type="text/javascript"></script>


<script src="WPF-Events-and-memory-leaks.aspx_files/WebResource_002.axd" type="text/javascript"></script>
<script src="WPF-Events-and-memory-leaks.aspx_files/WebResource_004.axd" type="text/javascript"></script>
<script src="WPF-Events-and-memory-leaks.aspx_files/WebResource_003.axd" type="text/javascript"></script>
<script src="WPF-Events-and-memory-leaks.aspx_files/WebResource.axd" type="text/javascript"></script>
        
<script type="text/javascript">
<!--   
    function ValidateCaptcha(val, args) {
      
        var value = args.Value;
        var nameEQ = "CAPTCHA=";
        var captchaNumbers;        	
        var ca = document.cookie.split(';');
        
        for(var i=0;i < ca.length;i++) {
    	    var c = ca[i];
    	    while (c.charAt(0)==' ') c = c.substring(1,c.length);
    	    if (c.indexOf(nameEQ) == 0) captchaNumbers =  c.substring(nameEQ.length,c.length);
	    }

        args.IsValid = captchaNumbers == value;

    }
-->
</script>

<script src="WPF-Events-and-memory-leaks.aspx_files/WebResource_002.js" type="text/javascript"></script>
<script type="text/javascript">
<!--
function WebForm_OnSubmit() {
if (typeof(ValidatorOnSubmit) == "function" && ValidatorOnSubmit() == false) return false;
return true;
}
// -->
</script>


    			

    <div id="masthead">
        <div id="welcome" align="right">
            
        <a href="http://blogs.microsoft.co.il/login.aspx?ReturnUrl=%2fblogs%2ftamir%2farchive%2f2007%2f07%2f26%2fWPF-Events-and-memory-leaks.aspx">Sign in </a>
         | <a href="http://blogs.microsoft.co.il/user/CreateUser.aspx?ReturnUrl=">Join</a>
        | <a href="http://communityserver.org/r.ashx?K">Help</a>
     


        </div>
    </div>
    <div id="wrapper">
	        <div id="container">
		        <div id="header">
		            <div id="title">	                    
                        <h1 class="headermaintitle"><a href="http://blogs.microsoft.co.il/blogs/tamir/">Just code - Tamir Khason</a></h1>      
                        <p id="tagline">Take care of the sense, and the sounds will take care of themselves.</p>
                    </div>
                    <div id="SubscriptionsSideBar">
                        <div id="subscriptions"> 
                            <ul>
                                <li><a href="http://feeds.feedburner.com/microsft">RSS</a></li>
	                            <li><a href="http://feeds.feedburner.com/microsft">Atom</a></li>
						        <li id="RssComments"><a href="http://blogs.microsoft.co.il/blogs/tamir/rsscomments.aspx">Comments RSS</a></li>
                            </ul>
                        </div>
                    </div>
                    <div id="nav">                    
                        <ul>
                            <li><a href="http://blogs.microsoft.co.il/blogs/tamir/">Home</a></li>
                            <li><a href="http://blogs.microsoft.co.il/blogs/tamir/contact.aspx">Contact</a></li>
                            
                            
                        </ul>
                    </div>
                </div>
                
                    <div id="contentwrapper">
		                <div id="sidebar-a">              
                            <div id="TasksSideBar">                                
                                
                                
                            </div>
                            
                            <div id="SearchSideBar">    
                                <div id="Search">
	                                        <h3>Search</h3>
                                            <ul>
                                                <li>
                                                    <input name="ctl00$SideBar$ctl01$ctl00$SearchBox" id="ctl00_SideBar_ctl01_ctl00_SearchBox" class="searchBox" button="SearchButton" onclick="if(this.defaultValue==this.value) this.value='';" onblur="if(this.value=='') this.value=this.defaultValue;" type="text">
                                                    <a id="ctl00_SideBar_ctl01_ctl00_SearchButton" class="SearchButton" href="javascript:__doPostBack('ctl00$SideBar$ctl01$ctl00$SearchButton','')">Go</a>
                                                </li>
                                            </ul>
                                    </div>
                            </div>  
                                
                                <div id="TagSideBar">
                                        <h3>Tags</h3>
                                    <ul class="SidebarTagCloud">
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Accessibility/default.aspx" rel="tag">Accessibility</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/blogging+general/default.aspx" rel="tag">blogging general</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Blogging+rules/default.aspx" rel="tag">Blogging rules</a></li>
<li class="Tag3"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/blogging+tools/default.aspx" rel="tag">blogging tools</a></li>
<li class="Tag2"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/C_2300_/default.aspx" rel="tag">C#</a></li>
<li class="Tag5"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/demos/default.aspx" rel="tag">demos</a></li>
<li class="Tag2"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/download/default.aspx" rel="tag">download</a></li>
<li class="Tag5"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/events/default.aspx" rel="tag">events</a></li>
<li class="Tag4"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/fun/default.aspx" rel="tag">fun</a></li>
<li class="Tag4"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/help/default.aspx" rel="tag">help</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/jobs/default.aspx" rel="tag">jobs</a></li>
<li class="Tag4"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Mobile/default.aspx" rel="tag">Mobile</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Performance/default.aspx" rel="tag">Performance</a></li>
<li class="Tag1"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/promo/default.aspx" rel="tag">promo</a></li>
<li class="Tag3"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Silverlight/default.aspx" rel="tag">Silverlight</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/SkyDrive/default.aspx" rel="tag">SkyDrive</a></li>
<li class="Tag1"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/soft/default.aspx" rel="tag">soft</a></li>
<li class="Tag1"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/source/default.aspx" rel="tag">source</a></li>
<li class="Tag2"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/thoughts/default.aspx" rel="tag">thoughts</a></li>
<li class="Tag1"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Tips+and+Tricks/default.aspx" rel="tag">Tips and Tricks</a></li>
<li class="Tag2"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/tools/default.aspx" rel="tag">tools</a></li>
<li class="Tag1"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/tutorial/default.aspx" rel="tag">tutorial</a></li>
<li class="Tag2"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Vista/default.aspx" rel="tag">Vista</a></li>
<li class="Tag3"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Vista+Battery+Saver/default.aspx" rel="tag">Vista Battery Saver</a></li>
<li class="Tag3"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Visual+Studio/default.aspx" rel="tag">Visual Studio</a></li>
<li class="Tag5"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/VSTS/default.aspx" rel="tag">VSTS</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/WCF/default.aspx" rel="tag">WCF</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Web/default.aspx" rel="tag">Web</a></li>
<li class="Tag5"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Windows+Gadgets/default.aspx" rel="tag">Windows Gadgets</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Windows+Live/default.aspx" rel="tag">Windows Live</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Windows+Live+Writer/default.aspx" rel="tag">Windows Live Writer</a></li>
<li class="Tag1"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/WPF/default.aspx" rel="tag">WPF</a></li>
<li class="Tag5"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/WPF+crossbow/default.aspx" rel="tag">WPF crossbow</a></li>
<li class="Tag5"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/WPF_2F00_E/default.aspx" rel="tag">WPF/E</a></li>
</ul>
</div>
                              
                                
                                <div id="NewsSidebar">
                                        <h3>News</h3>
                                        <ul>
                                    <a href="http://www.linkedin.com/in/tamirk"><img src="WPF-Events-and-memory-leaks.aspx_files/btn_profile_bluetxt_80x15.gif" alt="View Tamir Khason's profile on LinkedIn" border="0" height="15" width="80"></a>


                                        </ul>
                                    </div>                
                                                
                                
                                <div id="NavSideBar"><h3>Navigation</h3>
<ul>
<li><a href="http://blogs.microsoft.co.il/">Home</a></li><li><a href="http://blogs.microsoft.co.il/blogs/">Blogs</a></li><li><a href="http://blogs.microsoft.co.il/blogs/MainFeed.aspx">RSS</a></li>
</ul></div>
                                
                                
                                
                                
                                <div id="ArchiveSideBar"><h3>Archives</h3>
<ul>
<li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/10.aspx">October 2007 (15)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/09.aspx">September 2007 (14)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/08.aspx">August 2007 (21)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/07.aspx">July 2007 (32)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/06.aspx">June 2007 (10)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/05.aspx">May 2007 (22)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/04.aspx">April 2007 (21)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/03.aspx">March 2007 (20)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/02.aspx">February 2007 (9)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/01.aspx">January 2007 (10)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2006/12.aspx">December 2006 (11)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2006/11.aspx">November 2006 (4)</a></li>
</ul></div> 
                                
                                
                                
	                    
                    </div>
                    <div id="content"><div id="content2">
	                    
    <div class="post">
        <div class="posthead">
            Thursday, July 26, 2007 8:55 AM
            <a href="http://blogs.microsoft.co.il/members/tamir.aspx">Tamir Khason</a>
            
            <h2>
                WPF Events and memory leaks
                
            </h2>
        </div>        
            <p>Today, we'll speak about RoutedEvent and possible memory leaks associated with them. If you ever use EventManager, that's <a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/03/16/Global-Events-Hooking.aspx" target="_blank">really cool mechanism of external attached event handling</a>,
you'll notice about lack of ability to unsubscribe from event handlers.
What to do? Is it bad design? Actually, yes. This is possible memory
leak. So, what to do with it?</p>
<p>First of all, you can try to null handler.</p>
<p></p><pre>    <br><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 255);">(em_handler == </span><span style="color: rgb(0, 0, 255);">null</span><span style="color: rgb(0, 0, 255);">)
      <br> em_handler = </span><span style="color: rgb(0, 0, 255);">new</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 255, 0);">RoutedEventHandler</span><span style="color: rgb(0, 0, 255);">(EM_HandlePreviewMouse);
      <br> </span><span style="color: rgb(0, 255, 0);">EventManager</span><span style="color: rgb(0, 0, 255);">.RegisterClassHandler(</span><span style="color: rgb(0, 0, 255);">typeof</span><span style="color: rgb(0, 0, 255);">(</span><span style="color: rgb(0, 255, 0);">Button</span><span style="color: rgb(0, 0, 255);">), </span><span style="color: rgb(0, 255, 0);">TextBlock</span><span style="color: rgb(0, 0, 255);">.PreviewMouseDownEvent, em_handler);</span></pre><span style="color: rgb(0, 0, 255);">
<p></p><pre>...
        <br>em_handler = <span style="color: rgb(43, 145, 175);">null</span><span style="color: rgb(0, 0, 0);"></span></pre>
<p></p>
<p>&nbsp;</p>&nbsp; </span><pre></pre>
<p></p>
<p></p>
<p>This will not work. Actually, the reference remains, event if
handler is nulled. So, what can we do? We can use attached events. As
well as we are able to attach to external event, we can unattach from it</p>
<p></p><pre>    <br><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 255);">(re_handler == </span><span style="color: rgb(0, 0, 255);">null</span><span style="color: rgb(0, 0, 255);">)
      <br> re_handler = </span><span style="color: rgb(0, 0, 255);">new</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 255, 0);">RoutedEventHandler</span><span style="color: rgb(0, 0, 255);">(RE_HandlePreviewMouse);
      <br> </span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 255);">.AddHandler(</span><span style="color: rgb(0, 255, 0);">Button</span><span style="color: rgb(0, 0, 255);">.PreviewMouseDownEvent, re_handler);</span></pre><pre><span style="color: rgb(0, 0, 255);">...
      <br></span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 255);">.RemoveHandler(</span><span style="color: rgb(0, 255, 0);">Button</span><span style="color: rgb(0, 0, 255);">.PreviewMouseDownEvent, re_handler)</span></pre>
<p></p>
<p></p><pre>          <p>&nbsp;</p>
        </pre>
<p></p><pre></pre>
<p></p>
<p>So, this can give us possible solution, but what to do with really
large objects? Unattaching from events will net destroy references to
them. Actually, even in .NET 2.0 and 1.1, when we're using -= operator,
we are not disposing handlers, we only disconnect from it.</p>
<p>In WPF where is new cool class, named <a href="http://msdn2.microsoft.com/EN-US/library/aa970850.aspx" target="_blank">WeakEventManager</a>
and it's implementation IWeakEventListener. But how to use them in our
case? For real it's rather simple. Create new object, derrived from
WeakEventManager for class you want to handle events. Just like this</p>
<p></p><pre>    <br><span style="color: rgb(0, 0, 255);">public</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 0, 255);">class</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 255, 0);">WeakButtonEventManager</span><span style="color: rgb(0, 0, 255);">:</span><span style="color: rgb(0, 255, 0);">WeakEventManager
      <br></span><span style="color: rgb(0, 0, 255);"> {
      <br> </span><span style="color: rgb(0, 0, 255);">protected</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 0, 255);">override</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 255);"> StartListening(</span><span style="color: rgb(0, 0, 255);">object</span><span style="color: rgb(0, 0, 255);"> source)
      <br> {

      <br> </span><span style="color: rgb(0, 255, 0);">Button</span><span style="color: rgb(0, 0, 255);"> b = source </span><span style="color: rgb(0, 0, 255);">as</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 255, 0);">Button</span><span style="color: rgb(0, 0, 255);">;
      <br> </span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 255);"> (b != </span><span style="color: rgb(0, 0, 255);">null</span><span style="color: rgb(0, 0, 255);">)
      <br> {

      <br> b.PreviewMouseDown += </span><span style="color: rgb(0, 0, 255);">new</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 255, 0);">MouseButtonEventHandler</span><span style="color: rgb(0, 0, 255);">(OnPreviewMouseDown);
      <br> }

      <br> }

      <br> </span><span style="color: rgb(0, 0, 255);">protected</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 0, 255);">override</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 255);"> StopListening(</span><span style="color: rgb(0, 0, 255);">object</span><span style="color: rgb(0, 0, 255);"> source)
      <br> {

      <br> </span><span style="color: rgb(0, 255, 0);">Button</span><span style="color: rgb(0, 0, 255);"> b = source </span><span style="color: rgb(0, 0, 255);">as</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 255, 0);">Button</span><span style="color: rgb(0, 0, 255);">;
      <br> </span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 255);"> (b != </span><span style="color: rgb(0, 0, 255);">null</span><span style="color: rgb(0, 0, 255);">)
      <br> {

      <br> b.PreviewMouseDown -= </span><span style="color: rgb(0, 0, 255);">new</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 255, 0);">MouseButtonEventHandler</span><span style="color: rgb(0, 0, 255);">(OnPreviewMouseDown);
      <br> }

      <br> }

      <br>

      <br> </span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 255);"> OnPreviewMouseDown(</span><span style="color: rgb(0, 0, 255);">object</span><span style="color: rgb(0, 0, 255);"> sender, </span><span style="color: rgb(0, 255, 0);">MouseButtonEventArgs</span><span style="color: rgb(0, 0, 255);"> e)
      <br> {

      <br> DeliverEvent(sender, e);

      <br> }

      <br>

      <br> </span><span style="color: rgb(0, 0, 255);">public</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 0, 255);">static</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 255);"> AddListener(</span><span style="color: rgb(0, 255, 0);">Button</span><span style="color: rgb(0, 0, 255);"> source, </span><span style="color: rgb(0, 255, 0);">IWeakEventListener</span><span style="color: rgb(0, 0, 255);"> listener)
      <br> {

      <br> Manager.ProtectedAddListener(source, listener); 

      <br> }

      <br>

      <br> </span><span style="color: rgb(0, 0, 255);">public</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 0, 255);">static</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 255);"> RemoveListener(</span><span style="color: rgb(0, 255, 0);">Button</span><span style="color: rgb(0, 0, 255);"> source, </span><span style="color: rgb(0, 255, 0);">IWeakEventListener</span><span style="color: rgb(0, 0, 255);"> listener)
      <br> {

      <br> Manager.ProtectedRemoveListener(source, listener);

      <br> }

      <br>

      <br> </span><span style="color: rgb(0, 0, 255);">static</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 255, 0);">WeakButtonEventManager</span><span style="color: rgb(0, 0, 255);"> Manager
      <br> { 

      <br> </span><span style="color: rgb(0, 0, 255);">get
      <br></span><span style="color: rgb(0, 0, 255);"> {
      <br> </span><span style="color: rgb(0, 255, 0);">Type</span><span style="color: rgb(0, 0, 255);"> t = </span><span style="color: rgb(0, 0, 255);">typeof</span><span style="color: rgb(0, 0, 255);">(</span><span style="color: rgb(0, 255, 0);">WeakButtonEventManager</span><span style="color: rgb(0, 0, 255);">);
      <br> </span><span style="color: rgb(0, 255, 0);">WeakButtonEventManager</span><span style="color: rgb(0, 0, 255);"> m = </span><span style="color: rgb(0, 255, 0);">WeakEventManager</span><span style="color: rgb(0, 0, 255);">.GetCurrentManager(t) </span><span style="color: rgb(0, 0, 255);">as</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 255, 0);">WeakButtonEventManager</span><span style="color: rgb(0, 0, 255);">;
      <br> </span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 255);"> (m == </span><span style="color: rgb(0, 0, 255);">null</span><span style="color: rgb(0, 0, 255);">)
      <br> {

      <br> m = </span><span style="color: rgb(0, 0, 255);">new</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 255, 0);">WeakButtonEventManager</span><span style="color: rgb(0, 0, 255);">();
      <br> </span><span style="color: rgb(0, 255, 0);">WeakEventManager</span><span style="color: rgb(0, 0, 255);">.SetCurrentManager(t, m);
      <br> }

      <br> </span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 255);"> m;
      <br> }

      <br> }

      <br> }&lt;/PRE&lt; P&gt;

      <p>&nbsp;</p>
    </span></pre>
<p></p>
<p>Then, create it's weak event implementation</p>
<p></p><pre>    <br><span style="color: rgb(0, 0, 255);">public</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 0, 255);">class</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 128, 0);">ExpensiveButton</span><span style="color: rgb(0, 0, 255);"> : </span><span style="color: rgb(0, 128, 0);">DispatcherObject</span><span style="color: rgb(0, 0, 255);">, </span><span style="color: rgb(0, 128, 0);">IWeakEventListener
      <br></span><span style="color: rgb(0, 0, 255);"> {
      <br> </span><span style="color: rgb(0, 128, 0);">Button</span><span style="color: rgb(0, 0, 255);"> b;
      <br> </span><span style="color: rgb(0, 0, 255);">public</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 0, 255);">event</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 128, 0);">MouseButtonEventHandler</span><span style="color: rgb(0, 0, 255);"> PreviewMouseDown;
      <br>

      <br> </span><span style="color: rgb(0, 0, 255);">public</span><span style="color: rgb(0, 0, 255);"> ExpensiveButton(</span><span style="color: rgb(0, 128, 0);">Button</span><span style="color: rgb(0, 0, 255);"> source, </span><span style="color: rgb(0, 0, 255);">bool</span><span style="color: rgb(0, 0, 255);"> isReallyExpensive)
      <br> {

      <br> b = source;

      <br> </span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 255);">(isReallyExpensive)
      <br> </span><span style="color: rgb(0, 128, 0);">WeakButtonEventManager</span><span style="color: rgb(0, 0, 255);">.AddListener(b, </span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 255);">);
      <br> </span><span style="color: rgb(0, 0, 255);">else
      <br></span><span style="color: rgb(0, 0, 255);"> b.PreviewMouseDown += </span><span style="color: rgb(0, 0, 255);">new</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 128, 0);">MouseButtonEventHandler</span><span style="color: rgb(0, 0, 255);">(OnPreviewMouseDown);
      <br> }

      <br>

      <br> ~ExpensiveButton()

      <br> {

      <br> </span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 255);">.Dispatcher.BeginInvoke(</span><span style="color: rgb(0, 128, 0);">DispatcherPriority</span><span style="color: rgb(0, 0, 255);">.Normal, (</span><span style="color: rgb(0, 128, 0);">SendOrPostCallback</span><span style="color: rgb(0, 0, 255);">)</span><span style="color: rgb(0, 0, 255);">delegate
      <br></span><span style="color: rgb(0, 0, 255);"> {
      <br> </span><span style="color: rgb(255, 0, 255);">//Clean up all resources
      <br>

      <br></span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 128, 0);">WeakButtonEventManager</span><span style="color: rgb(0, 0, 255);">.RemoveListener(b, </span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 255);">);
      <br> b.PreviewMouseDown -= </span><span style="color: rgb(0, 0, 255);">new</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 128, 0);">MouseButtonEventHandler</span><span style="color: rgb(0, 0, 255);">(OnPreviewMouseDown);
      <br> },</span><span style="color: rgb(0, 0, 255);">null</span><span style="color: rgb(0, 0, 255);">);
      <br> }

      <br>

      <br> </span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 255);"> OnPreviewMouseDown(</span><span style="color: rgb(0, 0, 255);">object</span><span style="color: rgb(0, 0, 255);"> sender, </span><span style="color: rgb(0, 128, 0);">MouseButtonEventArgs</span><span style="color: rgb(0, 0, 255);"> e)
      <br> {

      <br> </span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 255);"> (PreviewMouseDown != </span><span style="color: rgb(0, 0, 255);">null</span><span style="color: rgb(0, 0, 255);">)
      <br> PreviewMouseDown(sender, e);

      <br> }

      <br></span><span style="color: rgb(0, 0, 255);"> #region</span><span style="color: rgb(0, 0, 255);"> IWeakEventListener Members
      <br>

      <br> </span><span style="color: rgb(0, 0, 255);">public</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 0, 255);">bool</span><span style="color: rgb(0, 0, 255);"> ReceiveWeakEvent(</span><span style="color: rgb(0, 128, 0);">Type</span><span style="color: rgb(0, 0, 255);"> managerType, </span><span style="color: rgb(0, 0, 255);">object</span><span style="color: rgb(0, 0, 255);"> sender, </span><span style="color: rgb(0, 128, 0);">EventArgs</span><span style="color: rgb(0, 0, 255);"> e)
      <br> {

      <br> </span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 255);">(managerType == </span><span style="color: rgb(0, 0, 255);">typeof</span><span style="color: rgb(0, 0, 255);">(</span><span style="color: rgb(0, 128, 0);">WeakButtonEventManager</span><span style="color: rgb(0, 0, 255);">))
      <br> {

      <br> OnPreviewMouseDown(sender, e </span><span style="color: rgb(0, 0, 255);">as</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 128, 0);">MouseButtonEventArgs</span><span style="color: rgb(0, 0, 255);">);
      <br> </span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 0, 255);">true</span><span style="color: rgb(0, 0, 255);">;
      <br> }

      <br> </span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 255);"> </span><span style="color: rgb(0, 0, 255);">false</span><span style="color: rgb(0, 0, 255);">;
      <br> }

      <br>

      <br></span><span style="color: rgb(0, 0, 255);"> #endregion
      <br></span><span style="color: rgb(0, 0, 255);"> }&lt;/PRE&lt; P&gt;
      <p>&nbsp;</p>
    </span></pre>
<p></p>
<p>Now, you can easily handle and unhandle this class event, by disposing the event itself, rather then leave it in stack.</p>
<p></p><pre>    <br>ex_button = <span style="color: rgb(43, 145, 175);">new</span><span style="color: rgb(0, 0, 0);"> </span><span style="color: rgb(0, 128, 0);">ExpensiveButton</span><span style="color: rgb(0, 0, 0);">(butt, </span><span style="color: rgb(43, 145, 175);">true</span><span style="color: rgb(0, 0, 0);">);
      <br> ex_button.PreviewMouseDown += </span><span style="color: rgb(43, 145, 175);">new</span><span style="color: rgb(0, 0, 0);"> </span><span style="color: rgb(0, 128, 0);">MouseButtonEventHandler</span><span style="color: rgb(0, 0, 0);">(EX_HandleMouseDown);</span></pre><span style="color: rgb(0, 0, 0);">
<p></p><pre>....
        <br>ex_button.PreviewMouseDown -= <span style="color: rgb(43, 145, 175);">new</span><span style="color: rgb(0, 0, 0);"> </span><span style="color: rgb(0, 128, 0);">MouseButtonEventHandler</span><span style="color: rgb(0, 0, 0);">(EX_HandleMouseDown)</span></pre>
<p></p>
<p>&nbsp;</p></span><pre></pre>
<p></p><pre>&nbsp;</pre>
<p></p>
<p>Happy programming</p>
<p><a href="http://blogs.microsoft.co.il/blogs/tamir/attachment/20706.ashx">Source code for this article</a></p>  
                  
            <span id="ctl00_Main_ctl07_ctl01">Filed under: <a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/WPF/default.aspx" rel="tag">WPF</a>, <a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/tutorial/default.aspx" rel="tag">tutorial</a>, <a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Tips+and+Tricks/default.aspx" rel="tag">Tips and Tricks</a>, <a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/source/default.aspx" rel="tag">source</a></span><input name="ctl00$Main$ctl07$ctl01" id="ctl00_Main_ctl07_ctl01_State" value="value:Filed%20under%3A%20%3Ca%20href%3D%22%2Fblogs%2Ftamir%2Farchive%2Ftags%2FWPF%2Fdefault.aspx%22%20rel%3D%22tag%22%3EWPF%3C%2Fa%3E%2C%20%3Ca%20href%3D%22%2Fblogs%2Ftamir%2Farchive%2Ftags%2Ftutorial%2Fdefault.aspx%22%20rel%3D%22tag%22%3Etutorial%3C%2Fa%3E%2C%20%3Ca%20href%3D%22%2Fblogs%2Ftamir%2Farchive%2Ftags%2FTips%2Band%2BTricks%2Fdefault.aspx%22%20rel%3D%22tag%22%3ETips%20and%20Tricks%3C%2Fa%3E%2C%20%3Ca%20href%3D%22%2Fblogs%2Ftamir%2Farchive%2Ftags%2Fsource%2Fdefault.aspx%22%20rel%3D%22tag%22%3Esource%3C%2Fa%3E" type="hidden">
    </div>
        <div class="postfoot">
            <div><span class="em">Attachment:</span> <a href="http://blogs.microsoft.co.il/blogs/tamir/attachment/20706.ashx">testEventManager.zip</a></div>	
      </div>
    
            
                    <a name="Comments">
                    </a><h3><a name="Comments">Comments</a></h3>
<a name="Comments">                    </a><div id="comments">
<a name="Comments">                
                    </a><p><a name="Comments">No Comments</a></p>
<a name="Comments">                
                        </a></div>
<a name="Comments">                    </a></div>
<a name="Comments">                
            
            
            
            
                    </a><div id="commentform">
<a name="Comments">                    </a><h3><a name="Comments">Leave a Comment</a></h3>
<a name="Comments">	                    </a><dl>
<a name="Comments">                            <dt><label for="ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbTitle">Title</label> <em>(required)</em><span id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02" style="color: Red; visibility: hidden;">*</span></dt>
	                        <dd><input name="ctl00$Main$ctl08$ctl02$ctl02$ctl02$tbTitle" value="re: WPF Events and memory leaks" id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbTitle" class="smallbox" type="text"></dd>

                            <dt id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_NameTitle"><label for="ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbName">Name</label> <em>(required)</em><span id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10" style="color: Red; visibility: hidden;">*</span></dt>
                            <dd id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_NameDesc"><input name="ctl00$Main$ctl08$ctl02$ctl02$ctl02$tbName" id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbName" class="smallbox" type="text"></dd>

                            <dt><label for="ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbUrl">Your URL</label> <em>(optional</em>)</dt>
                            <dd><input name="ctl00$Main$ctl08$ctl02$ctl02$ctl02$tbUrl" id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbUrl" class="smallbox" type="text"></dd>

                            <dt><label for="ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbComment">Comments</label> <em>(required)</em><span id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07" style="color: Red; visibility: hidden;">*</span></dt>
                            <dd><textarea name="ctl00$Main$ctl08$ctl02$ctl02$ctl02$tbComment" rows="5" cols="25" id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbComment"></textarea></dd>

                            <dt><input id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_chkRemember" name="ctl00$Main$ctl08$ctl02$ctl02$ctl02$chkRemember" type="checkbox"><label for="ctl00_Main_ctl08_ctl02_ctl02_ctl02_chkRemember">Remember Me?</label></dt>
               
                            <dt><div id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_CaptchaPanel" class="Captcha_Div">
	<img src="WPF-Events-and-memory-leaks.aspx_files/captcha.jpg" style="border-width: 0px;"><br><span>Enter the numbers above: </span><input name="ctl00$Main$ctl08$ctl02$ctl02$ctl02$CaptchaTextBox" size="3" id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_CaptchaTextBox" type="text"><span id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13" style="color: Red; display: none;">*</span>
</div><input name="ctl00$Main$ctl08$ctl02$ctl02$ctl02$btnSubmit" value="Submit" onclick='javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions("ctl00$Main$ctl08$ctl02$ctl02$ctl02$btnSubmit", "", true, "CreateCommentForm", "", false, false))' id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_btnSubmit" type="submit"></dt>
	                    </a></dl>
<a name="Comments">                    </a></div>
<a name="Comments">                    
        
        
                    </a></div></div>
<a name="Comments">                    </a><div id="contentfooter"><a name="Comments">&nbsp;</a></div>
<a name="Comments">		        </a></div>
<a name="Comments">                </a><div id="footer">
<a name="Comments">                    
					    </a><div class="Copyright"><div align="center"><a name="Comments">‎©2006 Microsoft Corporation. All rights reserved.‎  <span></span></a><a href="http://www.microsoft.com/israel/info/cpyright.asp">תנאי שימוש</a> |<span><a href="http://www.microsoft.com/library/toolbar/3.0/trademarks/he-il.mspx">סימנים מסחריים</a> |</span><span><a href="http://www.microsoft.com/info/iw/privacy.mspx">הצהרת פרטיות</a></span></div></div>
					    
					    

                        
					            <a href="http://communityserver.org/r.ashx?j" target="_blank"><img id="ctl00_BodyFooterRegion_ctl02_ctl03_ctl00" src="WPF-Events-and-memory-leaks.aspx_files/PoweredByCS_commercial.gif" alt="Powered by Community Server (Commercial Edition), by Telligent Systems " style="border-width: 0px;"></a>
    						
    					
					
                </div>
            </div>        
        
    
<script type="text/javascript">
<!--
var Page_Validators =  new Array(document.getElementById("ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02"), document.getElementById("ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10"), document.getElementById("ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07"), document.getElementById("ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13"));
// -->
</script>

<script type="text/javascript">
<!--
var ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02 = document.all ? document.all["ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02"] : document.getElementById("ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02");
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02.controltovalidate = "ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbTitle";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02.errormessage = "*";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02.validationGroup = "CreateCommentForm";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02.initialvalue = "";
var ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10 = document.all ? document.all["ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10"] : document.getElementById("ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10");
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10.controltovalidate = "ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbName";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10.errormessage = "*";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10.validationGroup = "CreateCommentForm";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10.initialvalue = "";
var ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07 = document.all ? document.all["ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07"] : document.getElementById("ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07");
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07.controltovalidate = "ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbComment";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07.errormessage = "*";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07.validationGroup = "CreateCommentForm";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07.initialvalue = "";
var ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13 = document.all ? document.all["ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13"] : document.getElementById("ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13");
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13.controltovalidate = "ctl00_Main_ctl08_ctl02_ctl02_ctl02_CaptchaTextBox";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13.errormessage = "*";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13.display = "Dynamic";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13.validationGroup = "CreateCommentForm";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13.evaluationfunction = "CustomValidatorEvaluateIsValid";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13.clientvalidationfunction = "ValidateCaptcha";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13.validateemptytext = "true";
// -->
</script>


<!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
<rdf:Description
rdf:about="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/07/26/WPF-Events-and-memory-leaks.aspx"
dc:identifier="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/07/26/WPF-Events-and-memory-leaks.aspx"
dc:title="WPF Events and memory leaks"
trackback:ping="http://blogs.microsoft.co.il/blogs/tamir/trackback.ashx?PostID=20706" />
</rdf:RDF>
-->
<script src="WPF-Events-and-memory-leaks.aspx_files/microsft.js" type="text/javascript" charset="utf-8"></script><p class="feedburnerFlareBlock"><a href="http://del.icio.us/post?v=4&amp;partner=fb&amp;url=http%3A%2F%2Fblogs.microsoft.co.il%2Fblogs%2Ftamir%2Farchive%2F2007%2F07%2F26%2FWPF-Events-and-memory-leaks.aspx&amp;title=WPF%20Events%20and%20memory%20leaks" class="first">Add to del.icio.us</a><span> • </span><a href="http://digg.com/submit?phase=2&amp;partner=fb&amp;url=http%3A%2F%2Fblogs.microsoft.co.il%2Fblogs%2Ftamir%2Farchive%2F2007%2F07%2F26%2FWPF-Events-and-memory-leaks.aspx&amp;title=WPF+Events+and+memory+leaks">Digg This!</a><span> • </span><a href="http://www.stumbleupon.com/submit?url=http://blogs.microsoft.co.il/blogs/tamir/archive/2007/07/26/WPF-Events-and-memory-leaks.aspx&amp;title=WPF%20Events%20and%20memory%20leaks">Stumble It!</a><span> • </span><a href="http://www.feedburner.com/fb/a/emailFlare?itemTitle=WPF%20Events%20and%20memory%20leaks&amp;uri=http%3A%2F%2Fblogs.microsoft.co.il%2Fblogs%2Ftamir%2Farchive%2F2007%2F07%2F26%2FWPF-Events-and-memory-leaks.aspx">Email this</a></p><script type="text/javascript" charset="utf-8" src="WPF-Events-and-memory-leaks.aspx_files/site-tracker.js"></script> <script type="text/javascript">
// <![CDATA[
Telligent_Modal.Configure('/utility/loading.htm',['Modal'],['ModalTitle'],['ModalClose'],['ModalContent'],['ModalFooter'],['ModalResize'],['ModalMask'],100);
// ]]>
</script><script type="text/javascript">
// <![CDATA[
window.ctl00_Main_ctl07_ctl01 = new Telligent_InlineEditorPanel('ctl00_Main_ctl07_ctl01','ctl00_Main_ctl07_ctl01','ctl00_Main_ctl07_ctl01_State','ctl00_Main_ctl07_ctl00',false,null,null,null);
// ]]>
</script>
<script type="text/javascript">
<!--
var Page_ValidationActive = false;
if (typeof(ValidatorOnLoad) == "function") {
    ValidatorOnLoad();
}

function ValidatorOnSubmit() {
    if (Page_ValidationActive) {
        return ValidatorCommonOnSubmit();
    }
    else {
        return true;
    }
}
// -->
</script>
        </form>
</body></html>
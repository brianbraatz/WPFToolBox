<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><title>Dante's blog</title>
 




<meta name="GENERATOR" content="CommunityServer 2.1 SP1 (Build: 61025.2)">
<link rel="stylesheet" href="Command%20line%20arguments_files/style.css" type="text/css" media="screen">
<link rel="stylesheet" href="Command%20line%20arguments_files/print.htm" type="text/css" media="print">
<link rel="stylesheet" href="Command%20line%20arguments_files/fire.css" type="text/css" media="screen">
<link rel="shortcut icon" type="image/ico" href="http://blogs.msdn.com/favicon.ico">
<link rel="alternate" type="application/rss+xml" title="Dante's blog (RSS 2.0)" href="http://blogs.msdn.com/danteg/rss.xml">
<link rel="alternate" type="application/atom+xml" title="Dante's blog (Atom 1.0)" href="http://blogs.msdn.com/danteg/atom.xml">

	<script src="Command%20line%20arguments_files/global.js" type="text/javascript"></script></head><body>
<form name="aspnetForm" method="post" action="/danteg/Default.aspx" id="aspnetForm">
<div>
<input name="__EVENTTARGET" id="__EVENTTARGET" value="" type="hidden">
<input name="__EVENTARGUMENT" id="__EVENTARGUMENT" value="" type="hidden">
<input name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwUKLTMyNjg0MDc1MWQYAQUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgEFHGJwJF8kdiRfJGJ0JF8kd3MkXyRTZWFyY2hCb3j2HMfgHgArx14o8bM817edL2aWoA==" type="hidden">
</div>

<script type="text/javascript">
<!--
var theForm = document.forms['aspnetForm'];
if (!theForm) {
    theForm = document.aspnetForm;
}
function __doPostBack(eventTarget, eventArgument) {
    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {
        theForm.__EVENTTARGET.value = eventTarget;
        theForm.__EVENTARGUMENT.value = eventArgument;
        theForm.submit();
    }
}
// -->
</script>


<script language="javascript" type="text/javascript">
var RatingControlAJAX = {
"SaveRating":function(id,p0,cb){return Ajax_CallBack('CommunityServer.Blogs.Controls.BlogRatePost',id,'SaveRating',[p0],cb,0,0,0,1);}};
</script><script language="javascript" type="text/javascript" src="Command%20line%20arguments_files/Telligent_Modal.js"></script><script language="javascript" type="text/javascript">
// <![CDATA[
Telligent_Modal.Configure('/utility/loading.htm',['Modal'],['ModalTitle'],['ModalClose'],['ModalContent'],['ModalFooter'],['ModalResize'],['ModalMask'],100);
// ]]>
</script>
			
<div id="masthead">
	
		<div id="welcome" align="right">
			
					Signed in as <a href="http://blogs.msdn.com/user/EditProfile.aspx?ReturnUrl=/blogs/home.aspx?App=danteg">bbraatz</a>
 | <a id="bp___v___duw1_rc1___logout" href="http://blogs.msdn.com/logout.aspx">Sign out</a>



				
			 | 
			<a id="bp___v___duw1_Faq1" href="http://blogs.msdn.com/languages/en-US/docs/faq.aspx">Help</a>
		</div>
	
</div>
<div id="wrapper">
	<div id="container">
		<div id="header">
			
<div id="title">
	<div id="SearchSideBar">
		
<div id="search">
	<input name="bp$_$v$_$bt$_$ws$_$SearchBox" id="bp___v___bt___ws___SearchBox" class="searchBox" onkeydown="KeyDownHandlerbp___v___bt___ws___SearchButton(event);" type="text">
	<a id="bp___v___bt___ws___SearchButton" href="javascript:__doPostBack('bp$_$v$_$bt$_$ws$_$SearchButton','')">Search</a>
</div>	
	</div>
	<h1><a id="bp___v___bt___BlogTitle" class="headermaintitle" href="http://blogs.msdn.com/danteg/default.aspx">Dante's blog</a></h1>
	<p id="tagline"></p>
</div>
<div id="nav">
	<div id="SubscriptionsSideBar">
		
<div id="subscriptions">
<ul>
	<li><a id="bp___v___bt___s___rss" href="http://blogs.msdn.com/danteg/rss.xml">RSS 2.0</a></li>
	<li><a id="bp___v___bt___s___atom" href="http://blogs.msdn.com/danteg/atom.xml">Atom 1.0</a></li>
	<li><a id="bp___v___bt___s___email" href="http://blogs.msdn.com/danteg/emailsubscriptions.aspx">Email alerts</a></li>
</ul></div>
	</div>
	<ul>
		<li><a id="bp___v___bt___home" href="http://blogs.msdn.com/danteg/default.aspx">Home</a></li>
		<li><a id="bp___v___bt___Aboutlink1" href="http://blogs.msdn.com/danteg/about.aspx">About</a></li>
		<li><a id="bp___v___bt___Contactlink1" href="http://blogs.msdn.com/danteg/contact.aspx">Email</a></li>
	</ul>
</div></div>
		<div id="contentmargin"></div>
		<div id="contentwrapper">
			<div id="sidebar-a">
				

<div id="TasksSideBar">
	
</div>

<div id="TagSideBar">
	<h3>Tags</h3>
	<ul>
	<ul class="SidebarTagCloud">
<li class="Tag1"><a href="http://blogs.msdn.com/danteg/archive/tags/Blend/default.aspx" rel="tag">Blend</a></li>
<li class="Tag2"><a href="http://blogs.msdn.com/danteg/archive/tags/Code/default.aspx" rel="tag">Code</a></li>
<li class="Tag5"><a href="http://blogs.msdn.com/danteg/archive/tags/Databinding/default.aspx" rel="tag">Databinding</a></li>
<li class="Tag5"><a href="http://blogs.msdn.com/danteg/archive/tags/Gaming/default.aspx" rel="tag">Gaming</a></li>
<li class="Tag6"><a href="http://blogs.msdn.com/danteg/archive/tags/MyGame/default.aspx" rel="tag">MyGame</a></li>
<li class="Tag3"><a href="http://blogs.msdn.com/danteg/archive/tags/Personal/default.aspx" rel="tag">Personal</a></li>
</ul>

	</ul>
</div>

<div id="NewsSideBar">
	
</div>

<div id="ArchiveSideBar">
	

<h3>Archives</h3>
<ul>

	<li><a href="http://blogs.msdn.com/danteg/archive/2007/10.aspx">October 2007 (1)</a></li>

	<li><a href="http://blogs.msdn.com/danteg/archive/2007/08.aspx">August 2007 (1)</a></li>

	<li><a href="http://blogs.msdn.com/danteg/archive/2007/07.aspx">July 2007 (2)</a></li>

	<li><a href="http://blogs.msdn.com/danteg/archive/2007/06.aspx">June 2007 (3)</a></li>

	<li><a href="http://blogs.msdn.com/danteg/archive/2007/03.aspx">March 2007 (5)</a></li>

	<li><a href="http://blogs.msdn.com/danteg/archive/2006/10.aspx">October 2006 (1)</a></li>

	<li><a href="http://blogs.msdn.com/danteg/archive/2006/06.aspx">June 2006 (2)</a></li>

	<li><a href="http://blogs.msdn.com/danteg/archive/2006/03.aspx">March 2006 (2)</a></li>

</ul>
</div>

<div id="LinkSideBar">
	

</div>
			</div>
			<div id="content"><div id="content2">
				
			


	<div class="post">
		<div class="posthead">
			<h2><a id="bp___v___r___postlist___EntryItems_ctl00_PostTitle" href="http://blogs.msdn.com/danteg/archive/2007/10/15/changing-the-selection-color-in-a-listbox.aspx">Changing the selection color in a ListBox</a></h2>
			Posted
			<a id="bp___v___r___postlist___EntryItems_ctl00_PermaLink" href="http://blogs.msdn.com/danteg/archive/2007/10/15/changing-the-selection-color-in-a-listbox.aspx">Monday, October 15, 2007 9:36 PM</a>
			by
			<a id="bp___v___r___postlist___EntryItems_ctl00_AuthorLink" href="http://blogs.msdn.com/user/Profile.aspx?UserID=23987">DanteG</a>
		</div>
		
		<div class="postcontent">
			<p>I
just worked through figuring this out today, and since it was
sufficiently irritating, I thought I'd post it here. Plus, I don't want
all my 'loyal readers' to think I've disappeared :).</p>
<p>Anyway, in the application I'm working on, I have a ListBox with
specific elements in it. If it were databound, I know how to change the
selection color, but in this case, I couldn't seem to figure out how to
get anything except the System Colors.</p>
<p>If you want to see what I mean in Blend, drop a ListBox on the
artboard and using the Right Click menu, add a couple ListBoxItem to
it. Now, run the app. When you select any of the items, it is
highlighted in whatever color your computer has as the SelectedItem
color (On my machine, it's Silver, because I'm using XP with a Silver
color scheme).</p>
<p>However, digging through the properties of the ListBox, I couldn't
find which property was bound to that System Resource. So, how could I
override it and change it. </p>
<p>Here are the steps I eventually had to do: (These are the steps from the start)</p>
<ol>
<li>Create a ListBox</li>
<li>Add a ListBoxItem to the ListBox</li>
<li>Select the ListBoxItem</li>
<li>Edit the Template of the ListBoxItem (Remember the name, you'll need it later)</li>
<li>Now, in the Triggers pane, choose the property trigger for "IsSelected = True"</li>
<li>Select the Bd element</li>
<li>In the Property pane, you will see that next to the Background
brush, the property marker (the little square) is green. This is
indicating that it's using a resource. Just change the brush type to
something else, and the marker will switch back to white. You can now
edit the background to whatever you want.</li></ol>
<p>Now, with the IsSelected Property Trigger selected, any changes you
make will be put into the Template, and you're good to go. You will
probably want to go back to the root (using the scope up button), and
assign that Style to all the ListBoxItem, so select them all in the
Object Tree, and set the Style property to the local resource that was
created in step 4 above.</p> 
		</div>
	</div>
		
	<div class="postfoot">	
		
		 
		<a id="bp___v___r___postlist___EntryItems_ctl00_CommentsLink" href="http://blogs.msdn.com/danteg/archive/2007/10/15/changing-the-selection-color-in-a-listbox.aspx#comments">1 Comments</a>   
		<div><span id="bp___v___r___postlist___EntryItems_ctl00_InlineTagEditorPanel">Filed under: <a href="http://blogs.msdn.com/danteg/archive/tags/Blend/default.aspx" rel="tag">Blend</a></span><input name="bp$_$v$_$r$_$postlist$_$EntryItems$ctl00$InlineTagEditorPanel" id="bp___v___r___postlist___EntryItems_ctl00_InlineTagEditorPanel_State" value="nochange" type="hidden"></div>
		
	</div>                            

	<div class="post">
		<div class="posthead">
			<h2><a id="bp___v___r___postlist___EntryItems_ctl01_PostTitle" href="http://blogs.msdn.com/danteg/archive/2007/08/03/repeating-an-animation.aspx">Repeating an animation</a></h2>
			Posted
			<a id="bp___v___r___postlist___EntryItems_ctl01_PermaLink" href="http://blogs.msdn.com/danteg/archive/2007/08/03/repeating-an-animation.aspx">Friday, August 03, 2007 8:29 PM</a>
			by
			<a id="bp___v___r___postlist___EntryItems_ctl01_AuthorLink" href="http://blogs.msdn.com/user/Profile.aspx?UserID=23987">DanteG</a>
		</div>
		
		<div class="postcontent">
			<p>It
may not be a huge revelation for other folks, but with some of the
testing I've been doing, I really started getting frustrated with some
stuff.</p>
<p>Specifically, I've got a fairly complex animation, and I want it to
repeat forever. However, setting the repeat count on each and every
property that I'm animating is rather tedious. "Set the repeat count on
the X Rotation... set the repeat count on the Y Rotation... set the
repeat count on the X Skew... *sigh*... Set the repeat count on the Y
Skew..." etc...</p>
<p>Now, you can't set the repeat count on a composite keyframe in the
hopes that the RepeatCount will be propogated downward inside Blend
(Yes, I've asked my PMs for that feature, and MAYBE it will make it
into the product some day, but who knows...). </p>
<p>So, how do you handle this? Now, I'm sure the XAML experts already
knew this, but if you go into the XAML, you can just add
RepeatBehavior="Forever" to the Storyboard. The XAML now looks like:</p>
<p>&lt;Window.Resources&gt;<br>&nbsp;&nbsp;&lt;Storyboard x:Key="Timeline1" RepeatBehavior="Forever"&gt;</p>
<p>And that's it. Now, the animation will start at the beginning, run
until the time when all the existing animations have ended, then start
over again. </p>
<p>Again, most of the XAML folks probably already knew this, but I thought it was pretty cool.</p> 
		</div>
	</div>
		
	<div class="postfoot">	
		
		 
		<a id="bp___v___r___postlist___EntryItems_ctl01_CommentsLink" href="http://blogs.msdn.com/danteg/archive/2007/08/03/repeating-an-animation.aspx#comments">0 Comments</a>   
		<div><span id="bp___v___r___postlist___EntryItems_ctl01_InlineTagEditorPanel">Filed under: <a href="http://blogs.msdn.com/danteg/archive/tags/Blend/default.aspx" rel="tag">Blend</a></span><input name="bp$_$v$_$r$_$postlist$_$EntryItems$ctl01$InlineTagEditorPanel" id="bp___v___r___postlist___EntryItems_ctl01_InlineTagEditorPanel_State" value="nochange" type="hidden"></div>
		
	</div>                            

	<div class="post">
		<div class="posthead">
			<h2><a id="bp___v___r___postlist___EntryItems_ctl02_PostTitle" href="http://blogs.msdn.com/danteg/archive/2007/07/27/variable-value-converters.aspx">Variable Value Converters</a></h2>
			Posted
			<a id="bp___v___r___postlist___EntryItems_ctl02_PermaLink" href="http://blogs.msdn.com/danteg/archive/2007/07/27/variable-value-converters.aspx">Friday, July 27, 2007 10:52 PM</a>
			by
			<a id="bp___v___r___postlist___EntryItems_ctl02_AuthorLink" href="http://blogs.msdn.com/user/Profile.aspx?UserID=23987">DanteG</a>
		</div>
		
		<div class="postcontent">
I've been asked how to create a Value Converter that you can configure
the behavior of. In my Total Training series I showed you how to create
a Value Converter that would return a color, Red if the value was below
a hard coded value, Yellow if it's between the Red threshold and
another value, and Green otherwise. <p>But, in that case, the Red, Yellow and Green thresholds were hard
coded into the VC. What if I want a more generic Value Converter that I
can specify the thresholds, and even further, what if I want to specify
all the colors myself. (I.e. if the value is 100, turn Blue or
something). </p>
<p>This can be done in WPF by creating a parameterized Value Converter,
and Blend does support working with those kinds of VCs, so let's look
at how to do it.</p>
<p>First, create the simple "Rectangle, TextBlock, Slider" combination.
We're going to bring the Slider to the text of the TextBlock, and
change the Fill of the Rectangle based on the value.</p>
<p>Here's some XAML if you want to just use what I've got:</p>
<blockquote>
<p class="MsoNormal" style="line-height: normal;"><span style="font-family: 'Courier New';">&lt;Grid Margin="77,60,255,0" VerticalAlignment="Top" Height="34"&gt;<o:p></o:p></span></p>
<p class="MsoNormal" style="line-height: normal;"><span style="font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;Rectangle
HorizontalAlignment="Left" Margin="0,0,0,6" Width="49" Fill="#FFFFFFFF"
Stroke="#FF000000" RadiusX="7.5" RadiusY="7.5"/&gt;<o:p></o:p></span></p>
<p class="MsoNormal" style="line-height: normal;"><span style="font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;TextBlock
HorizontalAlignment="Left" Margin="53,6,0,0" Width="19" Text="{Binding
Path=Value, ElementName=Slider, Mode=OneWay}" TextWrapping="Wrap"/&gt;<o:p></o:p></span></p>
<p class="MsoNormal" style="line-height: normal;"><span style="font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;Slider Margin="76,0,0,6" x:Name="Slider" LargeChange="10" Maximum="100" SmallChange="1" IsSnapToTickEnabled="True"/&gt;<o:p></o:p></span></p>
<p class="MsoNormal" style="line-height: normal;"><span style="font-family: 'Courier New';">&lt;/Grid&gt;<o:p></o:p></span></p></blockquote>
<p mce_keep="true">&nbsp;</p>
<p>Ok, so now let's create the basic three-tier Value Converter. For
now, we're going to say a value of 80 or higher is Green, 50 or higher
is Yellow and anything else is Red. Here's the code:</p>
<div><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">using</span><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"> System;<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">using</span><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"> System.Collections.Generic;<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">using</span><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"> System.Text;<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">using</span><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"> System.Windows.Data;<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">using</span><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"> System.Windows.Media;<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><o:p><font color="#000000">&nbsp;</font></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">namespace</span><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"> ValueConverters<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000">&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;">class</span><font color="#000000"> </font><span style="color: rgb(43, 145, 175);">ThreeTierHardCodedVC</span><font color="#000000">: </font><span style="color: rgb(43, 145, 175);">IValueConverter<o:p></o:p></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>#region</span><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"> IValueConverter Members<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><o:p><font color="#000000">&nbsp;</font></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;">public</span><font color="#000000"> </font><span style="color: blue;">object</span><font color="#000000"> Convert(</font><span style="color: blue;">object</span><font color="#000000"> value, </font><span style="color: rgb(43, 145, 175);">Type</span><font color="#000000"> targetType, </font><span style="color: blue;">object</span><font color="#000000"> parameter, System.Globalization.</font><span style="color: rgb(43, 145, 175);">CultureInfo</span><font color="#000000"> culture)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;">try<o:p></o:p></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;">double</span><font color="#000000"> inputValue = System.</font><span style="color: rgb(43, 145, 175);">Convert</span><font color="#000000">.ToDouble(value);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"><span style="">&nbsp;</span><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></font><span style="color: blue;">if</span><font color="#000000"> (inputValue &gt;= 80)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;">return</span><font color="#000000"> </font><span style="color: blue;">new</span><font color="#000000"> </font><span style="color: rgb(43, 145, 175);">SolidColorBrush</span><font color="#000000">(</font><span style="color: rgb(43, 145, 175);">Colors</span><font color="#000000">.Green);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;">else</span><font color="#000000"> </font><span style="color: blue;">if</span><font color="#000000"> (inputValue &gt;= 50)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;">return</span><font color="#000000"> </font><span style="color: blue;">new</span><font color="#000000"> </font><span style="color: rgb(43, 145, 175);">SolidColorBrush</span><font color="#000000">(</font><span style="color: rgb(43, 145, 175);">Colors</span><font color="#000000">.Yellow);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;">else<o:p></o:p></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;">return</span><font color="#000000"> </font><span style="color: blue;">new</span><font color="#000000"> </font><span style="color: rgb(43, 145, 175);">SolidColorBrush</span><font color="#000000">(</font><span style="color: rgb(43, 145, 175);">Colors</span><font color="#000000">.Red);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;">catch</span><font color="#000000"> (</font><span style="color: rgb(43, 145, 175);">Exception</span><font color="#000000"> e)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;">return</span><font color="#000000"> </font><span style="color: blue;">new</span><font color="#000000"> </font><span style="color: rgb(43, 145, 175);">SolidColorBrush</span><font color="#000000">(</font><span style="color: rgb(43, 145, 175);">Colors</span><font color="#000000">.White);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><o:p><font color="#000000">&nbsp;</font></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;">public</span><font color="#000000"> </font><span style="color: blue;">object</span><font color="#000000"> ConvertBack(</font><span style="color: blue;">object</span><font color="#000000"> value, </font><span style="color: rgb(43, 145, 175);">Type</span><font color="#000000"> targetType, </font><span style="color: blue;">object</span><font color="#000000"> parameter, System.Globalization.</font><span style="color: rgb(43, 145, 175);">CultureInfo</span><font color="#000000"> culture)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;">throw</span><font color="#000000"> </font><span style="color: blue;">new</span><font color="#000000"> </font><span style="color: rgb(43, 145, 175);">Exception</span><font color="#000000">(</font><span style="color: rgb(163, 21, 21);">"The method or operation is not implemented."</span><font color="#000000">);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><o:p><font color="#000000">&nbsp;</font></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="">&nbsp;&nbsp;&nbsp;</span>#endregion<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000"><span style="">&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 10pt;"><o:p><font color="#000000" face="Calibri" size="3">&nbsp;</font></o:p></p>
<p class="MsoNormal" style="margin: 0in 0in 10pt;"><o:p><font color="#000000" face="Calibri" size="3">Ok,
so far so good. If you databind the fill of the Rectangle to the Text
of the TextBlock, and pass it through this VC, you'll see that the
Rectangle changes color as you move the slider. So, the next step is
how we're going to parameterize the VC. For now, I'm just going to
accept a two element string, seperated by semicolons. I use semicolons
instead of commas just so I don't need to worry about
internationalization right now.</font></o:p></p>
<p class="MsoNormal" style="margin: 0in 0in 10pt;"><o:p><font color="#000000" face="Calibri" size="3">So,
in effect, if the user passes 80;50, I'm stating that when the value is
greater then 80, turn green, between 80 and 50, turn yellow, and below
50, turn red. The parameter will be passed to us (unsurprisingly) as
the parameter named "parameter". We'll take it, split it into an array,
and just parse those values out. To see how this works, try hooking up
one slider like this using 80;50 and another at 95;5.</font></o:p></p>
<p class="MsoNormal" style="margin: 0in 0in 10pt;"><o:p><font color="#000000" face="Calibri" size="3">This
is better, except that you're forced into the red/yellow/green colors.
What if you want to expand on that? What if you want to be able to
configure those colors yourself. To do this, I wrote a quick function
that takes a string and converts it to a color. It's not too difficult
to write, but if you want to use it, here it is:</font></o:p></p><o:p><font color="#000000" face="Calibri" size="3">
</font></o:p><p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3">private</font></span><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3"> <span style="color: rgb(43, 145, 175);">Color</span> GetColorFromString(<span style="color: blue;">string</span> input)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: rgb(43, 145, 175);"><font color="#000000" face="Calibri" size="3">Type</font></span><font color="#000000" face="Calibri" size="3"> colorClass = <span style="color: blue;">typeof</span>(<span style="color: rgb(43, 145, 175);">Colors</span>);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: rgb(43, 145, 175);"><font color="#000000" face="Calibri" size="3">List</font></span><font color="#000000" face="Calibri" size="3">&lt;<span style="color: rgb(43, 145, 175);">MethodInfo</span>&gt; colorMethods = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">List</span>&lt;<span style="color: rgb(43, 145, 175);">MethodInfo</span>&gt;(colorClass.GetMethods());<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">foreach</font></span><font color="#000000" face="Calibri" size="3"> (<span style="color: rgb(43, 145, 175);">MethodInfo</span> info <span style="color: blue;">in</span> colorMethods)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">string</font></span><font color="#000000" face="Calibri" size="3"> methodName = info.Name;<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">if</font></span><font color="#000000" face="Calibri" size="3"> (info.Name.StartsWith(<span style="color: rgb(163, 21, 21);">"get_"</span>))<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">string</font></span><font color="#000000" face="Calibri" size="3"> actualColor = info.Name.Split(<span style="color: rgb(163, 21, 21);">'_'</span>)[1];<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">if</font></span><font color="#000000" face="Calibri" size="3"> (<span style="color: rgb(43, 145, 175);">String</span>.Compare(input, actualColor, <span style="color: blue;">true</span>) == 0)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: green;"><font color="#000000" face="Calibri" size="3">// We have a match!<o:p></o:p></font></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">return</font></span><font color="#000000" face="Calibri" size="3"> (<span style="color: rgb(43, 145, 175);">Color</span>)info.Invoke(<span style="color: blue;">null</span>, <span style="color: blue;">null</span>);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">return</font></span><font color="#000000" face="Calibri" size="3"> <span style="color: rgb(43, 145, 175);">Colors</span>.Black;<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 10pt;"><span style="font-size: 10pt; line-height: 115%; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3">}</font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 10pt;"><font color="#000000" face="Calibri" size="3">This
method will take any color that is in the Colors object, and return the
appropriate color. (If someone knows an easier way to do this, I'd love
to hear it). You will need to add System.Windows.Media,
System.Windows.Data and System.Reflection to use my method. If you want
more info on the Colors class, take a look at: <a href="http://msdn2.microsoft.com/en-us/library/system.windows.media.colors.aspx">http://msdn2.microsoft.com/en-us/library/system.windows.media.colors.aspx</a></font></p>
<p class="MsoNormal" style="margin: 0in 0in 10pt;"><font color="#000000" face="Calibri" size="3">Ok,
so now with this, we're going to modify our VC one more time, to allow
it to take three arguments. My plan is to go through the arguments one
at a time, check to see if our input is greater then the first, if so,
return the color, if not, go on to the second. I'm actually going to
ignore the first piece of the final argument, since it will simply end
up as the default. I'm going to seperate the arguments with ';', and
individual pieces with a ':'. So, here's the new code:</font></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3">public</font></span><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3"> <span style="color: blue;">object</span> Convert(<span style="color: blue;">object</span> value, <span style="color: rgb(43, 145, 175);">Type</span> targetType, <span style="color: blue;">object</span> parameter, System.Globalization.<span style="color: rgb(43, 145, 175);">CultureInfo</span> culture)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">try<o:p></o:p></font></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">string</font></span><font color="#000000" face="Calibri" size="3"> paramAsString = parameter.ToString();<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">string</font></span><font color="#000000" face="Calibri" size="3">[] splitParam = paramAsString.Split(<span style="color: rgb(163, 21, 21);">';'</span>);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">string</font></span><font color="#000000" face="Calibri" size="3">[] firstArgument = splitParam[0].Split(<span style="color: rgb(163, 21, 21);">':'</span>);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">string</font></span><font color="#000000" face="Calibri" size="3">[] secondArgument = splitParam[1].Split(<span style="color: rgb(163, 21, 21);">':'</span>);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">string</font></span><font color="#000000" face="Calibri" size="3">[] thirdArgument = splitParam[2].Split(<span style="color: rgb(163, 21, 21);">':'</span>);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">double</font></span><font color="#000000" face="Calibri" size="3"> firstInterval = System.<span style="color: rgb(43, 145, 175);">Convert</span>.ToDouble(firstArgument[0]);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: rgb(43, 145, 175);"><font color="#000000" face="Calibri" size="3">Color</font></span><font color="#000000" face="Calibri" size="3"> firstColor = <span style="color: blue;">this</span>.GetColorFromString(firstArgument[1]);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">double</font></span><font color="#000000" face="Calibri" size="3"> secondInterval = System.<span style="color: rgb(43, 145, 175);">Convert</span>.ToDouble(secondArgument[0]);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: rgb(43, 145, 175);"><font color="#000000" face="Calibri" size="3">Color</font></span><font color="#000000" face="Calibri" size="3"> secondColor = <span style="color: blue;">this</span>.GetColorFromString(secondArgument[1]);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: rgb(43, 145, 175);"><font color="#000000" face="Calibri" size="3">Color</font></span><font color="#000000" face="Calibri" size="3"> thirdColor = <span style="color: blue;">this</span>.GetColorFromString(thirdArgument[1]);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">double</font></span><font color="#000000" face="Calibri" size="3"> inputValue = System.<span style="color: rgb(43, 145, 175);">Convert</span>.ToDouble(value);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">if</font></span><font color="#000000" face="Calibri" size="3"> (inputValue &gt;= firstInterval)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">return</font></span><font color="#000000" face="Calibri" size="3"> <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">SolidColorBrush</span>(firstColor);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">else</font></span><font color="#000000" face="Calibri" size="3"> <span style="color: blue;">if</span> (inputValue &gt;= secondInterval)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">return</font></span><font color="#000000" face="Calibri" size="3"> <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">SolidColorBrush</span>(secondColor);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">else<o:p></o:p></font></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">return</font></span><font color="#000000" face="Calibri" size="3"> <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">SolidColorBrush</span>(thirdColor);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">catch</font></span><font color="#000000" face="Calibri" size="3"> (<span style="color: rgb(43, 145, 175);">Exception</span> e)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">return</font></span><font color="#000000" face="Calibri" size="3"> <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">SolidColorBrush</span>(<span style="color: rgb(43, 145, 175);">Colors</span>.White);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 10pt;"><span style="font-size: 10pt; line-height: 115%; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3">}</font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 10pt;"><font color="#000000" face="Calibri" size="3">If
you give THIS one a try, set the parameter to something like:
95:Azure;10:Coral;0:SeaGreen. Now we've got a VC that you can configure
all three brackets, as well as the colors that go with them.</font></p>
<p class="MsoNormal" style="margin: 0in 0in 10pt;"><font color="#000000" face="Calibri" size="3">Of
course, this is hideously inelegant, so I want to make one last change.
Instead of hard coding and breaking the parameters apart this way, I'm
going to just create a loop. This will tighten up the code, and
actually allow us to go an arbitrary number of brackets. So, if you
need to have 15 different brackets of different colors from Indigo to
MintCream, you can do it. So, we'll pull those ugly "secondParameter"
lines out, and replace it with a foreach. (I've included the entire
class here, in case you want to cut and paste)</font></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3">using</font></span><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3"> System;<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3">using</font></span><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3"> System.Collections.Generic;<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3">using</font></span><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3"> System.Text;<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3">using</font></span><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3"> System.Windows.Data;<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3">using</font></span><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3"> System.Windows.Media;<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3">using</font></span><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3"> System.Reflection;<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><o:p><font color="#000000" face="Calibri" size="3">&nbsp;</font></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3">namespace</font></span><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3"> ValueConverters<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">class</font></span><font color="#000000" face="Calibri" size="3"> <span style="color: rgb(43, 145, 175);">FullyVariableVC</span> : <span style="color: rgb(43, 145, 175);">IValueConverter<o:p></o:p></span></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">private</font></span><font color="#000000" face="Calibri" size="3"> <span style="color: rgb(43, 145, 175);">Color</span> GetColorFromString(<span style="color: blue;">string</span> input)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: rgb(43, 145, 175);"><font color="#000000" face="Calibri" size="3">Type</font></span><font color="#000000" face="Calibri" size="3"> colorClass = <span style="color: blue;">typeof</span>(<span style="color: rgb(43, 145, 175);">Colors</span>);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: rgb(43, 145, 175);"><font color="#000000" face="Calibri" size="3">List</font></span><font color="#000000" face="Calibri" size="3">&lt;<span style="color: rgb(43, 145, 175);">MethodInfo</span>&gt; colorMethods = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">List</span>&lt;<span style="color: rgb(43, 145, 175);">MethodInfo</span>&gt;(colorClass.GetMethods());<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">foreach</font></span><font color="#000000" face="Calibri" size="3"> (<span style="color: rgb(43, 145, 175);">MethodInfo</span> info <span style="color: blue;">in</span> colorMethods)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">string</font></span><font color="#000000" face="Calibri" size="3"> methodName = info.Name;<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">if</font></span><font color="#000000" face="Calibri" size="3"> (info.Name.StartsWith(<span style="color: rgb(163, 21, 21);">"get_"</span>))<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">string</font></span><font color="#000000" face="Calibri" size="3"> actualColor = info.Name.Split(<span style="color: rgb(163, 21, 21);">'_'</span>)[1];<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">if</font></span><font color="#000000" face="Calibri" size="3"> (<span style="color: rgb(43, 145, 175);">String</span>.Compare(input, actualColor, <span style="color: blue;">true</span>) == 0)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: green;"><font color="#000000" face="Calibri" size="3">// We have a match!<o:p></o:p></font></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">return</font></span><font color="#000000" face="Calibri" size="3"> (<span style="color: rgb(43, 145, 175);">Color</span>)info.Invoke(<span style="color: blue;">null</span>, <span style="color: blue;">null</span>);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">return</font></span><font color="#000000" face="Calibri" size="3"> <span style="color: rgb(43, 145, 175);">Colors</span>.Black;<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><o:p><font color="#000000" face="Calibri" size="3">&nbsp;</font></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">#region</font></span><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3"> IValueConverter Members<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">public</font></span><font color="#000000" face="Calibri" size="3"> <span style="color: blue;">object</span> Convert(<span style="color: blue;">object</span> value, <span style="color: rgb(43, 145, 175);">Type</span> targetType, <span style="color: blue;">object</span> parameter, System.Globalization.<span style="color: rgb(43, 145, 175);">CultureInfo</span> culture)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">try<o:p></o:p></font></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">string</font></span><font color="#000000" face="Calibri" size="3"> paramAsString = parameter.ToString();<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">string</font></span><font color="#000000" face="Calibri" size="3">[] splitParam = paramAsString.Split(<span style="color: rgb(163, 21, 21);">';'</span>);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">double</font></span><font color="#000000" face="Calibri" size="3"> inputValue = System.<span style="color: rgb(43, 145, 175);">Convert</span>.ToDouble(value);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">foreach</font></span><font color="#000000" face="Calibri" size="3"> (<span style="color: blue;">string</span> bracket <span style="color: blue;">in</span> splitParam)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">string</font></span><font color="#000000" face="Calibri" size="3">[] bracketParameters = bracket.Split(<span style="color: rgb(163, 21, 21);">':'</span>);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: rgb(43, 145, 175);"><font color="#000000" face="Calibri" size="3">Double</font></span><font color="#000000" face="Calibri" size="3"> bracketLimit;<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">try<o:p></o:p></font></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><font color="#000000" face="Calibri" size="3">bracketLimit = System.<span style="color: rgb(43, 145, 175);">Convert</span>.ToDouble(bracketParameters[0]);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">catch</font></span><font color="#000000" face="Calibri" size="3"> (<span style="color: rgb(43, 145, 175);">InvalidCastException</span>)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">return</font></span><font color="#000000" face="Calibri" size="3"> <span style="color: blue;">this</span>.GetColorFromString(bracketParameters[1]);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">if</font></span><font color="#000000" face="Calibri" size="3"> (inputValue &gt;= bracketLimit)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">return</font></span><font color="#000000" face="Calibri" size="3"> <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">SolidColorBrush</span>(<span style="color: blue;">this</span>.GetColorFromString(bracketParameters[1]));<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">catch</font></span><font color="#000000" face="Calibri" size="3"> (<span style="color: rgb(43, 145, 175);">Exception</span> e)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">return</font></span><font color="#000000" face="Calibri" size="3"> <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">SolidColorBrush</span>(<span style="color: rgb(43, 145, 175);">Colors</span>.White);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">return</font></span><font color="#000000" face="Calibri" size="3"> <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">SolidColorBrush</span>(<span style="color: rgb(43, 145, 175);">Colors</span>.White);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><o:p><font color="#000000" face="Calibri" size="3">&nbsp;</font></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">public</font></span><font color="#000000" face="Calibri" size="3"> <span style="color: blue;">object</span> ConvertBack(<span style="color: blue;">object</span> value, <span style="color: rgb(43, 145, 175);">Type</span> targetType, <span style="color: blue;">object</span> parameter, System.Globalization.<span style="color: rgb(43, 145, 175);">CultureInfo</span> culture)<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">{<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><span style="color: blue;"><font color="#000000" face="Calibri" size="3">throw</font></span><font color="#000000" face="Calibri" size="3"> <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">Exception</span>(<span style="color: rgb(163, 21, 21);">"The method or operation is not implemented."</span>);<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">#endregion<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""><font color="#000000" face="Calibri" size="3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font></span><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; line-height: normal;"><span style="font-size: 10pt; font-family: 'Courier New';"><font color="#000000" face="Calibri" size="3">}<o:p></o:p></font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 10pt;" mce_keep="true"><font color="#000000" face="Calibri" size="3">&nbsp;</font></p>
<p class="MsoNormal" style="margin: 0in 0in 10pt;"><font color="#000000" face="Calibri" size="3">Give this one a fly, and set the parameter to: 95:Azure;75:HotPink;40:Blue;10:Coral;-9999:Orange.</font></p>
<p class="MsoNormal" style="margin: 0in 0in 10pt;"><font color="#000000" face="Calibri" size="3">Enjoy :).</font></p>
<p class="MsoNormal" style="margin: 0in 0in 10pt;"><font color="#000000" face="Calibri" size="3">(As always, code here is provided "As-is" with no warranty, implied or otherwise. Use at your own risk)</font></p></span></div> 
		</div>
	</div>
		
	<div class="postfoot">	
		
		 
		<a id="bp___v___r___postlist___EntryItems_ctl02_CommentsLink" href="http://blogs.msdn.com/danteg/archive/2007/07/27/variable-value-converters.aspx#comments">2 Comments</a>   
		<div><span id="bp___v___r___postlist___EntryItems_ctl02_InlineTagEditorPanel"></span><input name="bp$_$v$_$r$_$postlist$_$EntryItems$ctl02$InlineTagEditorPanel" id="bp___v___r___postlist___EntryItems_ctl02_InlineTagEditorPanel_State" value="nochange" type="hidden"></div>
		
	</div>                            

	<div class="post">
		<div class="posthead">
			<h2><a id="bp___v___r___postlist___EntryItems_ctl03_PostTitle" href="http://blogs.msdn.com/danteg/archive/2007/07/27/one-of-the-worst-parts-of-my-job.aspx">One of the worst parts of my job...</a></h2>
			Posted
			<a id="bp___v___r___postlist___EntryItems_ctl03_PermaLink" href="http://blogs.msdn.com/danteg/archive/2007/07/27/one-of-the-worst-parts-of-my-job.aspx">Friday, July 27, 2007 7:34 PM</a>
			by
			<a id="bp___v___r___postlist___EntryItems_ctl03_AuthorLink" href="http://blogs.msdn.com/user/Profile.aspx?UserID=23987">DanteG</a>
		</div>
		
		<div class="postcontent">
			<p>Is when I can't talk about something!</p>
<p>By now, most folks should be downloading the August preview of
Expression Blend 2, which I'm super excited to see finally getting out.
(If you didn't already know... Get it <a href="http://www.microsoft.com/expression/products/download.aspx?key=blend2preview">HERE</a>)</p>
<p>But, one of the features that I've been testing personally is one
I'm really excited about, but got cut from the August preview for a
variety of reasons. For obvious reasons, I can't say what the feature
was and why it was cut. And that drives me CRAZY sometimes!</p>
<p>I can't wait to start talking about the new feature, what you can do
with it, how much fun I've had playing with it and so on... and now I
have to wait until our next tech preview. And even *I* don't know how
long that's going to be. (No, it's not a case of "I know but can't say
in a public forum", but I actually don't know).</p>
<p>Ah well, I guess my loyal readers will just have to wait and see. </p>
<p>And, for the record, I should have a new blog post coming out soon
that describes how to do a parameterized Value Converter. In the Total
Training series (Check out <a href="http://totaltraining.com/microsoft" mce_href="http://totaltraining.com/microsoft">http://totaltraining.com/microsoft</a>
for details), I go over how to create a Value Converter that changes a
control different colors based on the value (I.e. if it's greater then
90, turn it green, etc...). However, I had someone ask me privately how
to create a generic one that you could configure. I've got a couple
solutions, and I'm putting the polish on those now.</p> 
		</div>
	</div>
		
	<div class="postfoot">	
		
		 
		<a id="bp___v___r___postlist___EntryItems_ctl03_CommentsLink" href="http://blogs.msdn.com/danteg/archive/2007/07/27/one-of-the-worst-parts-of-my-job.aspx#comments">0 Comments</a>   
		<div><span id="bp___v___r___postlist___EntryItems_ctl03_InlineTagEditorPanel">Filed under: <a href="http://blogs.msdn.com/danteg/archive/tags/Personal/default.aspx" rel="tag">Personal</a>, <a href="http://blogs.msdn.com/danteg/archive/tags/Blend/default.aspx" rel="tag">Blend</a></span><input name="bp$_$v$_$r$_$postlist$_$EntryItems$ctl03$InlineTagEditorPanel" id="bp___v___r___postlist___EntryItems_ctl03_InlineTagEditorPanel_State" value="nochange" type="hidden"></div>
		
	</div>                            

	<div class="post">
		<div class="posthead">
			<h2><a id="bp___v___r___postlist___EntryItems_ctl04_PostTitle" href="http://blogs.msdn.com/danteg/archive/2007/06/20/calligraphy-in-ink-part-2.aspx">Calligraphy In Ink! (Part 2)</a></h2>
			Posted
			<a id="bp___v___r___postlist___EntryItems_ctl04_PermaLink" href="http://blogs.msdn.com/danteg/archive/2007/06/20/calligraphy-in-ink-part-2.aspx">Wednesday, June 20, 2007 11:09 PM</a>
			by
			<a id="bp___v___r___postlist___EntryItems_ctl04_AuthorLink" href="http://blogs.msdn.com/user/Profile.aspx?UserID=23987">DanteG</a>
		</div>
		
		<div class="postcontent">
			<p>Ok, see this is what happens when I have some time to 'play' with Blend.</p>
<p>My previous post showed how to modify the stylus tip to get
something akin to a calligraphy pen. But, the pen that I got most
recently got is called a scroll point. The tip itself looks like a
fairly broad pen, but there's a 'gap' in the middle, so it's
effectively drawing two parallel lines. You use the same gestures you'd
use with a normal pen, it just looks somewhat different. (Sorry, I
can't seem to find a bloody link on the web to show you what I'm
talking about).</p>
<p>So, I want to duplicate THIS effect. It's a bit trickier then it was with the widening the tip, but it's still doable.</p>
<p>First, I need to implement my own handler for when I'm working with
the Stylus, so I can intercept the event and add the second (and for
fun) third line. I only want to draw when the stylus is down, so easily
enough, add a property on the paper for when we're drawing. (Now, here
I was a bit lazy and did it on the Window itself, but moving it the
paper should be easy enough).</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">public</span><span style="font-size: 10pt; font-family: 'Courier New';"> <span style="color: blue;">partial</span> <span style="color: blue;">class</span> <span style="color: rgb(43, 145, 175);">Window1<o:p></o:p></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>bool</span><span style="font-size: 10pt; font-family: 'Courier New';"> drawing = <span style="color: blue;">false</span>;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">public</span> Window1()<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.InitializeComponent();<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style=""></span></span>&nbsp;</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">private</span> <span style="color: blue;">void</span> OnStylusDown(<span style="color: blue;">object</span> sender, System.Windows.Input.<span style="color: rgb(43, 145, 175);">StylusDownEventArgs</span> e)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.drawing = <span style="color: blue;">true</span>;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">private</span> <span style="color: blue;">void</span> OnStylusUp(<span style="color: blue;">object</span> sender, System.Windows.Input.<span style="color: rgb(43, 145, 175);">StylusEventArgs</span> e)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.drawing = <span style="color: blue;">false</span>;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">}</span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"></span>&nbsp;</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><font face="Arial">(Of
course, I do need to hook the StylusDown and StylusUp events up
correctly, but that's trivial in Blend). Ok, now I can just check
this.drawing, and if it's true, then the Stylus is actually on the
surface. All I need to do, is when I'm drawing, add another stroke. So,
add a StylusMove event:</font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><font face="Arial"></font></span>&nbsp;</p><span style="font-size: 10pt; font-family: 'Courier New';"><font face="Arial">
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">private</span><span style="font-size: 10pt; font-family: 'Courier New';"> <span style="color: blue;">void</span> OnStylusMove(<span style="color: blue;">object</span> sender, System.Windows.Input.<span style="color: rgb(43, 145, 175);">StylusEventArgs</span> e)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; font-family: 'Courier New';">{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 1in;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">if</span><span style="font-size: 10pt; font-family: 'Courier New';"> (<span style="color: blue;">this</span>.drawing)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: rgb(43, 145, 175);">StylusPointCollection</span> originalPoints = e.GetStylusPoints(Paper);<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: rgb(43, 145, 175);">StylusPointCollection</span> newPoints = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPointCollection</span>();<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: rgb(43, 145, 175);">StylusPointCollection</span> moreNewPoints = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPointCollection</span>();<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">foreach</span> (<span style="color: rgb(43, 145, 175);">StylusPoint</span> thisPoint <span style="color: blue;">in</span> originalPoints)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>newPoints.Add(<span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPoint</span>(thisPoint.X + 3, thisPoint.Y + 3, thisPoint.PressureFactor));<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>moreNewPoints.Add(<span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPoint</span>(thisPoint.X + 6, thisPoint.Y + 6, thisPoint.PressureFactor));<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Paper.Strokes.Add(<span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">Stroke</span>(newPoints));<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Paper.Strokes.Add(<span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">Stroke</span>(moreNewPoints));<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p></font></span>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><font face="Arial"></font></span>&nbsp;</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><font face="Arial">Add
this and run it, and it's almost there. You'll see the additional lines
get added, but there's one 'stupid' issue. if you look, the second and
third strokes, depending on your speed, will look somewhat dotted.
Here's what's happening. Let's say, for the sake of argument, that
based on your drawing speed, the StylusMove is getting called each time
with 3 points. Consider when you draw a line of length 9. The original
line will correctly connect every point, 1 to 2, 2 to 3, 3 to 4 and so
on. </font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><font face="Arial"></font></span>&nbsp;</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><font face="Arial">However,
in our instance, the StylusMove gets called with points 1, 2 and 3, so
it creates a stroke connecting those three points. It gets called the
second time with points 4, 5 and 6, and it creates that stroke. Here is
the problem... nothing ever connects points 3 and 4! So where the
original stroke is 9 connected points, our added strokes are three
seperate strokes, each three points long, and disconnected. </font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><font face="Arial"></font></span>&nbsp;</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><font face="Arial">Well,
that's no good. So, we need to remember what point 3 was, so that when
we start the next stroke segment, we use that as our initial point and
connect there. So, in effect, instead of 1-2-3 4-5-6 7-8-9, we end up
with 1-2-3 3-4-5-6 6-7-8-9, and since 3 and 3 match, it works.</font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><font face="Arial"></font></span>&nbsp;</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><font face="Arial">However,
once the Stylus comes off the page, we want to forget that final point,
otherwise, we'd be always attaching the end point to the begin point of
the new stroke, and that's obnoxious.</font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><font face="Arial"></font></span>&nbsp;</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><font face="Arial">So, start by adding two new properties, one for the last detected point, and one for whether or not we're 'remembering' a point.</font></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"></span>&nbsp;</p><span style="font-size: 10pt; font-family: 'Courier New';">
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; color: rgb(43, 145, 175); font-family: 'Courier New';">StylusPoint</span><span style="font-size: 10pt; font-family: 'Courier New';"> lastDetectedPoint = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPoint</span>();<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">bool</span><span style="font-size: 10pt; font-family: 'Courier New';"> drawingContinuousLine = <span style="color: blue;">false</span>;<o:p></o:p></span></p></span>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"></span>&nbsp;</p>
<p>So, whenever drawingContinuousLine is set to true, we need to
initialize the newPoints and moreNewPoints collections to that
lastDetectedPoint (adjusted, of course, by 3 and 6
respectively).&nbsp;And, every time we add a new stroke in the
StylusMove, we need to remember that lastDetectedPoint and&nbsp;state
that we are&nbsp;drawing.</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">private</span><span style="font-size: 10pt; font-family: 'Courier New';"> <span style="color: blue;">void</span> OnStylusMove(<span style="color: blue;">object</span> sender, System.Windows.Input.<span style="color: rgb(43, 145, 175);">StylusEventArgs</span> e)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; font-family: 'Courier New';">{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 1in;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">if</span><span style="font-size: 10pt; font-family: 'Courier New';"> (<span style="color: blue;">this</span>.drawing)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: rgb(43, 145, 175);">StylusPointCollection</span> originalPoints = e.GetStylusPoints(Paper);<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: rgb(43, 145, 175);">StylusPointCollection</span> newPoints = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPointCollection</span>();<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: rgb(43, 145, 175);">StylusPointCollection</span> moreNewPoints = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPointCollection</span>();<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">if</span> (<span style="color: blue;">this</span>.drawingContinuousLine)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>newPoints.Add(<span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPoint</span>(<span style="color: blue;">this</span>.lastDetectedPoint.X + 3, <span style="color: blue;">this</span>.lastDetectedPoint.Y + 3, <span style="color: blue;">this</span>.lastDetectedPoint.PressureFactor));<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>moreNewPoints.Add(<span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPoint</span>(<span style="color: blue;">this</span>.lastDetectedPoint.X + 6, <span style="color: blue;">this</span>.lastDetectedPoint.Y + 6, <span style="color: blue;">this</span>.lastDetectedPoint.PressureFactor));<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">foreach</span> (<span style="color: rgb(43, 145, 175);">StylusPoint</span> thisPoint <span style="color: blue;">in</span> originalPoints)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>newPoints.Add(<span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPoint</span>(thisPoint.X + 3, thisPoint.Y + 3, thisPoint.PressureFactor));<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>moreNewPoints.Add(<span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPoint</span>(thisPoint.X + 6, thisPoint.Y + 6, thisPoint.PressureFactor));<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Paper.Strokes.Add(<span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">Stroke</span>(newPoints));<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Paper.Strokes.Add(<span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">Stroke</span>(moreNewPoints));<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.drawingContinuousLine = <span style="color: blue;">true</span>;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.lastDetectedPoint = originalPoints[originalPoints.Count - 1];<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p>And, last&nbsp;but not least, we want to make sure that on StylusUp,
add&nbsp;state that we're no longer drawing a ContinuousLine, so our
strokes correctly stop getting drawn.</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">private</span> <span style="color: blue;">void</span> OnStylusUp(<span style="color: blue;">object</span> sender, System.Windows.Input.<span style="color: rgb(43, 145, 175);">StylusEventArgs</span> e)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.drawing = <span style="color: blue;">false</span>;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.drawingContinuousLine = <span style="color: blue;">false</span>;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p>And there you have it. Here's the final code (if you don't want to
go hunting and pasting throughout my code).&nbsp;In order to make this
work:</p>
<ul>
<li>Create an InkCanvas, and name it Paper</li>
<li>Hook StylusUp, StylusDown and StylusMove to OnStylusUp, OnStylusDown and OnStylusMove respectively</li>
<li>Add the code</li>
<li>Enjoy</li></ul>
<p>Note that this will only work with an actual Stylus, so you can't
use a Mouse to mock it up. However, it wouldn't be too hard to add the
code to work with a Mouse as well.</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">public</span><span style="font-size: 10pt; font-family: 'Courier New';"> <span style="color: blue;">partial</span> <span style="color: blue;">class</span> <span style="color: rgb(43, 145, 175);">Window1<o:p></o:p></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>bool</span><span style="font-size: 10pt; font-family: 'Courier New';"> drawing = <span style="color: blue;">false</span>;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; color: rgb(43, 145, 175); font-family: 'Courier New';">StylusPoint</span><span style="font-size: 10pt; font-family: 'Courier New';"> lastDetectedPoint = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPoint</span>();<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">bool</span><span style="font-size: 10pt; font-family: 'Courier New';"> drawingContinuousLine = <span style="color: blue;">false</span>;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">public</span> Window1()<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.InitializeComponent();<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">private</span><span style="font-size: 10pt; font-family: 'Courier New';"> <span style="color: blue;">void</span> OnStylusMove(<span style="color: blue;">object</span> sender, System.Windows.Input.<span style="color: rgb(43, 145, 175);">StylusEventArgs</span> e)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; font-family: 'Courier New';">{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 1in;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">if</span><span style="font-size: 10pt; font-family: 'Courier New';"> (<span style="color: blue;">this</span>.drawing)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: rgb(43, 145, 175);">StylusPointCollection</span> originalPoints = e.GetStylusPoints(Paper);<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: rgb(43, 145, 175);">StylusPointCollection</span> newPoints = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPointCollection</span>();<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: rgb(43, 145, 175);">StylusPointCollection</span> moreNewPoints = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPointCollection</span>();<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">if</span> (<span style="color: blue;">this</span>.drawingContinuousLine)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>newPoints.Add(<span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPoint</span>(<span style="color: blue;">this</span>.lastDetectedPoint.X + 3, <span style="color: blue;">this</span>.lastDetectedPoint.Y + 3, <span style="color: blue;">this</span>.lastDetectedPoint.PressureFactor));<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>moreNewPoints.Add(<span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPoint</span>(<span style="color: blue;">this</span>.lastDetectedPoint.X + 6, <span style="color: blue;">this</span>.lastDetectedPoint.Y + 6, <span style="color: blue;">this</span>.lastDetectedPoint.PressureFactor));<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">foreach</span> (<span style="color: rgb(43, 145, 175);">StylusPoint</span> thisPoint <span style="color: blue;">in</span> originalPoints)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>newPoints.Add(<span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPoint</span>(thisPoint.X + 3, thisPoint.Y + 3, thisPoint.PressureFactor));<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>moreNewPoints.Add(<span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StylusPoint</span>(thisPoint.X + 6, thisPoint.Y + 6, thisPoint.PressureFactor));<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Paper.Strokes.Add(<span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">Stroke</span>(newPoints));<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Paper.Strokes.Add(<span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">Stroke</span>(moreNewPoints));<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.drawingContinuousLine = <span style="color: blue;">true</span>;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.lastDetectedPoint = originalPoints[originalPoints.Count - 1];<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">private</span> <span style="color: blue;">void</span> OnStylusDown(<span style="color: blue;">object</span> sender, System.Windows.Input.<span style="color: rgb(43, 145, 175);">StylusDownEventArgs</span> e)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.drawing = <span style="color: blue;">true</span>;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">private</span> <span style="color: blue;">void</span> OnStylusUp(<span style="color: blue;">object</span> sender, System.Windows.Input.<span style="color: rgb(43, 145, 175);">StylusEventArgs</span> e)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.drawing = <span style="color: blue;">false</span>;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.drawingContinuousLine = <span style="color: blue;">false</span>;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">}</span><o:p></o:p></p>
<p mce_keep="true">&nbsp;</p>
<p mce_keep="true">&nbsp;</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"></span>&nbsp;</p> 
		</div>
	</div>
		
	<div class="postfoot">	
		
		 
		<a id="bp___v___r___postlist___EntryItems_ctl04_CommentsLink" href="http://blogs.msdn.com/danteg/archive/2007/06/20/calligraphy-in-ink-part-2.aspx#comments">0 Comments</a>   
		<div><span id="bp___v___r___postlist___EntryItems_ctl04_InlineTagEditorPanel">Filed under: <a href="http://blogs.msdn.com/danteg/archive/tags/Blend/default.aspx" rel="tag">Blend</a>, <a href="http://blogs.msdn.com/danteg/archive/tags/Code/default.aspx" rel="tag">Code</a></span><input name="bp$_$v$_$r$_$postlist$_$EntryItems$ctl04$InlineTagEditorPanel" id="bp___v___r___postlist___EntryItems_ctl04_InlineTagEditorPanel_State" value="nochange" type="hidden"></div>
		
	</div>                            

	<div class="post">
		<div class="posthead">
			<h2><a id="bp___v___r___postlist___EntryItems_ctl05_PostTitle" href="http://blogs.msdn.com/danteg/archive/2007/06/20/calligraphy-in-ink.aspx">Calligraphy in Ink!</a></h2>
			Posted
			<a id="bp___v___r___postlist___EntryItems_ctl05_PermaLink" href="http://blogs.msdn.com/danteg/archive/2007/06/20/calligraphy-in-ink.aspx">Wednesday, June 20, 2007 10:06 PM</a>
			by
			<a id="bp___v___r___postlist___EntryItems_ctl05_AuthorLink" href="http://blogs.msdn.com/user/Profile.aspx?UserID=23987">DanteG</a>
		</div>
		
		<div class="postcontent">
			<p>Ok,
this is something I think is kinda cool... one of my side hobbies is
calligraphy. I've been doing it since I was in early high school, and
there's something graceful in the old style of writing. Well, as far as
I knew, an InkCanvas only allows either a single rectangle or ellipse
tip, which is pretty much set.</p>
<p>Well, that's not true. I did some experimenting, and by using the
StylusTipTransform property on the DefaultDrawingAttributes of an
InkCanvas, you can create whatever tip you want. Check this code out,
that I call in the Window1 constructor: (My InkCanvas is named "Paper").</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">public</span><span style="font-size: 10pt; font-family: 'Courier New';"> Window1()<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">this</span><span style="font-size: 10pt; font-family: 'Courier New';">.InitializeComponent();<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; font-family: 'Courier New';">Paper.DefaultDrawingAttributes.StylusTipTransform = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">RotateTransform</span>(-45).Value;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; font-family: 'Courier New';">Paper.DefaultDrawingAttributes.Width = 20;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; font-family: 'Courier New';">Paper.DefaultDrawingAttributes.StylusTip = System.Windows.Ink.<span style="color: rgb(43, 145, 175);">StylusTip</span>.Rectangle;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; font-family: 'Courier New';">Paper.DefaultDrawingAttributes.IgnorePressure = <span style="color: blue;">false</span>;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt 0.5in;"><span style="font-size: 10pt; color: green; font-family: 'Courier New';">// Insert code required on object creation below this point.</span><span style="font-size: 10pt; font-family: 'Courier New';"><o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">}</span><o:p></o:p></p>
<p>Try that out, and it works pretty cool! Now, changing the Width of
the tip makes a small or wider nib, and you do get slightly different
looks if you change the StylusTip from Rectangle to Ellipse or turn on
IgnorePressure. Actually, the way it works right now, I prefer the
IgnorePressure to be ON, then it looks more like you're doing
calligraphy with a pen, as opposed to with it off, it looks like you
work with a brush.</p>
<p>So, the next thing I want to do (and I should be able to figure
something out), is to get a dual line. I got my hands on a neat
calligraphy marker that has two tips and&nbsp;a space between it. It's
hard to visualize, but imagine if you draw a straight line, what you
actually get are two straight lines spaced a little bit apart. </p> 
		</div>
	</div>
		
	<div class="postfoot">	
		
		 
		<a id="bp___v___r___postlist___EntryItems_ctl05_CommentsLink" href="http://blogs.msdn.com/danteg/archive/2007/06/20/calligraphy-in-ink.aspx#comments">0 Comments</a>   
		<div><span id="bp___v___r___postlist___EntryItems_ctl05_InlineTagEditorPanel">Filed under: <a href="http://blogs.msdn.com/danteg/archive/tags/Blend/default.aspx" rel="tag">Blend</a>, <a href="http://blogs.msdn.com/danteg/archive/tags/Code/default.aspx" rel="tag">Code</a></span><input name="bp$_$v$_$r$_$postlist$_$EntryItems$ctl05$InlineTagEditorPanel" id="bp___v___r___postlist___EntryItems_ctl05_InlineTagEditorPanel_State" value="nochange" type="hidden"></div>
		
	</div>                            

	<div class="post">
		<div class="posthead">
			<h2><a id="bp___v___r___postlist___EntryItems_ctl06_PostTitle" href="http://blogs.msdn.com/danteg/archive/2007/06/13/command-line-arguments.aspx">Command line arguments</a></h2>
			Posted
			<a id="bp___v___r___postlist___EntryItems_ctl06_PermaLink" href="http://blogs.msdn.com/danteg/archive/2007/06/13/command-line-arguments.aspx">Wednesday, June 13, 2007 1:41 AM</a>
			by
			<a id="bp___v___r___postlist___EntryItems_ctl06_AuthorLink" href="http://blogs.msdn.com/user/Profile.aspx?UserID=23987">DanteG</a>
		</div>
		
		<div class="postcontent">
			<p>Ok,
this was really bugging me... I needed to figure out how to create a
Window application, and parse in the command line arguments. I know how
to do it with a Console application, but not a Window app. So, how do
you do it?</p>
<p>Well, it's a little tricky, but it can be done. </p>
<p>First, you need to add an event handler to the Application (App)
itself, so go into App.xaml and add an event handler for Startup. The
code will now look like this (I added the lines in Italics):</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">&lt;</span><span style="font-size: 10pt; color: rgb(163, 21, 21); font-family: 'Courier New';">Application<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style="font-size: 10pt; color: red; font-family: 'Courier New';">xmlns</span><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">=</span><span style="font-size: 10pt; font-family: 'Courier New';">"<span style="color: blue;">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span>"<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style="font-size: 10pt; color: red; font-family: 'Courier New';">xmlns:x</span><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">=</span><span style="font-size: 10pt; font-family: 'Courier New';">"<span style="color: blue;">http://schemas.microsoft.com/winfx/2006/xaml</span>"<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style="font-size: 10pt; color: red; font-family: 'Courier New';">x:Class</span><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">=</span><span style="font-size: 10pt; font-family: 'Courier New';">"<span style="color: blue;">DragSource.App</span>"<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style="font-size: 10pt; color: red; font-family: 'Courier New';">StartupUri</span><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">=</span><span style="font-size: 10pt; font-family: 'Courier New';">"<span style="color: blue;">Window1.xaml</span>"<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span></span><strong><em><span style="font-size: 10pt; color: red; font-family: 'Courier New';">Startup</span><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">=</span><span style="font-size: 10pt; font-family: 'Courier New';">"<span style="color: blue;">app_Startup</span>"<span style="color: blue;">&gt;<o:p></o:p></span></span></em></strong></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;</span><span style="font-size: 10pt; color: rgb(163, 21, 21); font-family: 'Courier New';">Application.Resources</span><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">&gt;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;!--</span><span style="font-size: 10pt; color: green; font-family: 'Courier New';"> Resources scoped at the Application level should be defined here. </span><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">--&gt;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;/</span><span style="font-size: 10pt; color: rgb(163, 21, 21); font-family: 'Courier New';">Application.Resources</span><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">&gt;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">&lt;/</span><span style="font-size: 10pt; color: rgb(163, 21, 21); font-family: 'Courier New';">Application</span><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">&gt;</span><o:p></o:p></p>
<p>Now you need to define that method in your application, and you need
a place to put it. So, open App.xaml.cs. Define a string[] to hold the
arguments, and handle the event. Easily enough:</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">public</span><span style="font-size: 10pt; font-family: 'Courier New';"> <span style="color: blue;">partial</span> <span style="color: blue;">class</span> <span style="color: rgb(43, 145, 175);">App</span>: System.Windows.<span style="color: rgb(43, 145, 175);">Application<o:p></o:p></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">public</span> <span style="color: blue;">static</span> <span style="color: blue;">string</span>[] args;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">void</span> app_Startup(<span style="color: blue;">object</span> sender, <span style="color: rgb(43, 145, 175);">StartupEventArgs</span> e)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: rgb(43, 145, 175);">App</span>.args = e.Args;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">}</span><o:p></o:p></p>
<p>If you notice, the app_Startup event handler takes StartupEventArgs,
and one of the fields on that 'e' object is Args. The command lines are
broken up on quotes and then on spaces. So, if I called my app as:
MyApp "1 2 3" 4 "5 6", I would get three arguments. The first is 1 2 3,
the second is 4 and the last is 5 6.</p>
<p>Finally, you can now access those args in your Window1.Initialize by just accessing App.args.</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">public</span><span style="font-size: 10pt; font-family: 'Courier New';"> Window1()<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.InitializeComponent();<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">foreach</span> (<span style="color: blue;">string</span> key <span style="color: blue;">in</span> <span style="color: rgb(43, 145, 175);">App</span>.args)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="">&nbsp;&nbsp;&nbsp; </span><span style="color: rgb(43, 145, 175);">Console</span>.WriteLine(key);<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">}</span><o:p></o:p></p>
<p mce_keep="true">&nbsp;</p> 
		</div>
	</div>
		
	<div class="postfoot">	
		
		 
		<a id="bp___v___r___postlist___EntryItems_ctl06_CommentsLink" href="http://blogs.msdn.com/danteg/archive/2007/06/13/command-line-arguments.aspx#comments">0 Comments</a>   
		<div><span id="bp___v___r___postlist___EntryItems_ctl06_InlineTagEditorPanel">Filed under: <a href="http://blogs.msdn.com/danteg/archive/tags/Blend/default.aspx" rel="tag">Blend</a>, <a href="http://blogs.msdn.com/danteg/archive/tags/Code/default.aspx" rel="tag">Code</a></span><input name="bp$_$v$_$r$_$postlist$_$EntryItems$ctl06$InlineTagEditorPanel" id="bp___v___r___postlist___EntryItems_ctl06_InlineTagEditorPanel_State" value="nochange" type="hidden"></div>
		
	</div>                            

	<div class="post">
		<div class="posthead">
			<h2><a id="bp___v___r___postlist___EntryItems_ctl07_PostTitle" href="http://blogs.msdn.com/danteg/archive/2007/03/28/game-engine.aspx">Game Engine</a></h2>
			Posted
			<a id="bp___v___r___postlist___EntryItems_ctl07_PermaLink" href="http://blogs.msdn.com/danteg/archive/2007/03/28/game-engine.aspx">Wednesday, March 28, 2007 5:50 PM</a>
			by
			<a id="bp___v___r___postlist___EntryItems_ctl07_AuthorLink" href="http://blogs.msdn.com/user/Profile.aspx?UserID=23987">DanteG</a>
		</div>
		
		<div class="postcontent">
			<p>Ok,
as Blend continues its march, my mind starts moving to things I might
do with it. And, naturally, one of the thoughts I've been having, is to
write a game in it. There are plenty of technical aspects I need to
work out... but here's what I'm thinking.</p>
<p>It's a "Turn Based RTS". Yup... let's start off with an oxymoron. </p>
<p>I can't remember the game, but in my old Commodore 64 gaming days, I
remember a game where you'd give individual orders to each of your
units, hit "End Turn", and it would go into RT mode and you'd see the
moves carried out. I.e. you could tell unit A to move from location X
to location Y, and consider enemy B to be the primary target. When you
hit play, it would 'play' for about 10 seconds, and unit A would start
walking toward location Y, and if his chance to hit target B went above
some threshhold (You could set it from "Only fire on assured success"
to "Fire even if you can't see the idiot"), he would open fire.</p>
<p>I want to take this concept, and start a game with it. Basically,
you have a semi-open battlefield (Yes, fog of war would be good here),
and say four guys. You give each guy a "Destination" and either "Hold
Fire", "Aim at Target X" or "Shoot best target" along with a threshhold.</p>
<p>So, on an object level, I see:</p>
<p>Unit: Health (double), Accuracy (double), Camo (double), Armor
(double), Speed (double), Location (point), TargetLocation (point),
FireMode (enum), FireThreshhold (double), Weapon (Weapon)</p>
<p>Weapon: MinimumDamage (double), MaximumDamage (double), OptimumRange
(double), MinimumRange (double), MaximumRange (double),
ArmorPenetration (double), Accuracy (double), ShotsPerTurn (int),
CycleRate (double), ReloadRate (double), Ammunition (int),
CycleTimeRemaining (double), ReloadTimeRemaining (double), ClipSize
(int)</p>
<p>The percentage chance to hit is a function of:</p>
<p>Distance Modifier (A function of Range against the Range parameters
of the Weapon) * Unit.Accuracy * (1 - Target.Camo) * Weapon.Accuracy.</p>
<p>So, if a unit has an accuracy of 80% firing at perfect optimum range
at a target with 20% camo with a weapon with normal accuracy (100%),
the equation becomes: 1.0 * 0.8 * (1 - 0.2) * 1&nbsp;which results in a
chance to hit of 64% chance to hit. Furhtermore if the weapon has a 80%
accuracy, this drops the hit chance to 51.2%.</p>
<p>The BaseDamage becomes a random number betweeen MinimumDamage and MaximumDamage.</p>
<p>The target's actual armor is Target.Armor * (1 -
Weapon.ArmorPenetration). So a unit with 20% armor being fired on with
a weapon that has 25% Armor penetration results in an actual armor of
.2 * (1-.25) = 0.15 or 15%</p>
<p>So, the actual damage ends up being BaseDamage * (1 - (Target.Armor
* (1 - WeaponArmorPenetration))). So, if the target with 20% armor is
hit for 100 points from a weapon with 25%penetration, you get:</p>
<ul>
<li>100 * (1 - (.2 * (1-.25)))</li>
<li>100 * (1 - (.2 * .75))</li>
<li>100 * (1 - .15)</li>
<li>100 * .85</li>
<li>85 points of damage</li></ul>
<p>This scheme will allow for highly agile characters which are harder
to hit, as well as having highly accurate characters to compensate, as
well as heavily armored characters which take less damage, and armor
piercing weapons to deal with them.</p>
<p>I'm also thinking that accuracy and armor shouldn't be limited to
100%. I.e. if a unit has 200% armor, then it ignores all weapons that
have armor penetration of 50% or less. Similarly, a unit with 150%
accuracy will hit any unit that doesn't have at least 33% camo at
optimum range. I can also conceive of obstacles that will cause an
addition hit modifier to be included. I.e. if the line of fire traces
through any piece of the "Smoke" region, then an additional 10% penalty
is included into the calculation. (Multiply in another 0.9 to the hit
calculation).</p>
<p>As I'm thinking about it, I could also see the same weapon having
multiple profiles... i.e. an Assault Rifle can be fired "Single Shot",
which has a ShotsPerTurn of 1, but a higher accuracy (and maybe better
range) or fire it "Burst" which has a ShotsPerTurn of 3, but lower
accuracy. For the record, CycleRate is the amount of time between
shots, and ReloadRate is the time required once the ammunition is
expended to put in a new clip. </p>
<p>So, when a weapon fires:</p>
<ul>
<li>Number of shots to fire is Max(Ammunition, ShotsPerTurn)</li>
<li>Calculate all the shots</li>
<li>Ammunition -= Number of shots to fire</li>
<li>If Ammunition == 0 then ReloadTimeRemaining = ReloadRate</li>
<li>Otherwise CycleTimeRemaining = CycleRate</li>
<li>The weapon can't be fired if ReloadRate or CycleRate are non-zero</li></ul>
<p>At this point, I need to start thinking of how the weapons fire. I'm
thinking we need events for "WeaponReloaded" "WeaponCycled"
"WantsToShoot", etc...</p>
<p>More later as I go along.</p> 
		</div>
	</div>
		
	<div class="postfoot">	
		
		 
		<a id="bp___v___r___postlist___EntryItems_ctl07_CommentsLink" href="http://blogs.msdn.com/danteg/archive/2007/03/28/game-engine.aspx#comments">0 Comments</a>   
		<div><span id="bp___v___r___postlist___EntryItems_ctl07_InlineTagEditorPanel">Filed under: <a href="http://blogs.msdn.com/danteg/archive/tags/Personal/default.aspx" rel="tag">Personal</a>, <a href="http://blogs.msdn.com/danteg/archive/tags/Gaming/default.aspx" rel="tag">Gaming</a>, <a href="http://blogs.msdn.com/danteg/archive/tags/MyGame/default.aspx" rel="tag">MyGame</a></span><input name="bp$_$v$_$r$_$postlist$_$EntryItems$ctl07$InlineTagEditorPanel" id="bp___v___r___postlist___EntryItems_ctl07_InlineTagEditorPanel_State" value="nochange" type="hidden"></div>
		
	</div>                            

	<div class="post">
		<div class="posthead">
			<h2><a id="bp___v___r___postlist___EntryItems_ctl08_PostTitle" href="http://blogs.msdn.com/danteg/archive/2007/03/27/i-m-up-on-the-web.aspx">I'm up on the web!</a></h2>
			Posted
			<a id="bp___v___r___postlist___EntryItems_ctl08_PermaLink" href="http://blogs.msdn.com/danteg/archive/2007/03/27/i-m-up-on-the-web.aspx">Tuesday, March 27, 2007 7:40 PM</a>
			by
			<a id="bp___v___r___postlist___EntryItems_ctl08_AuthorLink" href="http://blogs.msdn.com/user/Profile.aspx?UserID=23987">DanteG</a>
		</div>
		
		<div class="postcontent">
			<p>Ok,
this isn't anything too new for most folks, but the "Trailer" for the
Total Training series on Expression Blend is on the net. Check it out
at <a href="http://youtube.com/watch?v=nqgjv0lODYU">http://youtube.com/watch?v=nqgjv0lODYU</a>. </p>
<p>Yeah, that's me. And yes, I'm quite proud of it. :)</p> 
		</div>
	</div>
		
	<div class="postfoot">	
		
		 
		<a id="bp___v___r___postlist___EntryItems_ctl08_CommentsLink" href="http://blogs.msdn.com/danteg/archive/2007/03/27/i-m-up-on-the-web.aspx#comments">0 Comments</a>   
		<div><span id="bp___v___r___postlist___EntryItems_ctl08_InlineTagEditorPanel">Filed under: <a href="http://blogs.msdn.com/danteg/archive/tags/Personal/default.aspx" rel="tag">Personal</a>, <a href="http://blogs.msdn.com/danteg/archive/tags/Blend/default.aspx" rel="tag">Blend</a></span><input name="bp$_$v$_$r$_$postlist$_$EntryItems$ctl08$InlineTagEditorPanel" id="bp___v___r___postlist___EntryItems_ctl08_InlineTagEditorPanel_State" value="nochange" type="hidden"></div>
		
	</div>                            

	<div class="post">
		<div class="posthead">
			<h2><a id="bp___v___r___postlist___EntryItems_ctl09_PostTitle" href="http://blogs.msdn.com/danteg/archive/2007/03/07/creating-an-alternate-layout-panel.aspx">Creating an alternate layout panel</a></h2>
			Posted
			<a id="bp___v___r___postlist___EntryItems_ctl09_PermaLink" href="http://blogs.msdn.com/danteg/archive/2007/03/07/creating-an-alternate-layout-panel.aspx">Wednesday, March 07, 2007 11:40 PM</a>
			by
			<a id="bp___v___r___postlist___EntryItems_ctl09_AuthorLink" href="http://blogs.msdn.com/user/Profile.aspx?UserID=23987">DanteG</a>
		</div>
		
		<div class="postcontent">
			<p>Ok, this is neat. This is the first time I've worked with layout panels and actually creating one of my own. Here's the code:</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">class</span><span style="font-size: 10pt; font-family: 'Courier New';"> <span style="color: rgb(43, 145, 175);">OverlapStackPanel</span> : <span style="color: rgb(43, 145, 175);">StackPanel<o:p></o:p></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">protected</span> <span style="color: blue;">override</span> <span style="color: rgb(43, 145, 175);">Size</span> ArrangeOverride(<span style="color: rgb(43, 145, 175);">Size</span> arrangeSize)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: rgb(43, 145, 175);">UIElementCollection</span> children = <span style="color: blue;">this</span>.InternalChildren;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">int</span> childrenResolved = 0;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">foreach</span> (<span style="color: rgb(43, 145, 175);">UIElement</span> child <span style="color: blue;">in</span> children)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: rgb(43, 145, 175);">Rect</span> targetRect = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">Rect</span>(40 * childrenResolved, 30, child.DesiredSize.Width, child.DesiredSize.Height);<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>child.RenderTransform = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">RotateTransform</span>(-20);<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>child.Arrange(targetRect);<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>childrenResolved++;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">return</span> arrangeSize;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">}</span><o:p></o:p></p>
<p>Now, let's look at it. First off, I could have inherited from Panel
instead of StackPanel, and to be honest, I'm not sure how much of a
change that would produce (I'll have to experiment with that).</p>
<p>The only method I'm introducing is modifying the ArrangeOverride.
This is telling the Panel that instead of using the built in Arranger,
I'm going to specify my own.</p>
<p>It's easy to see that I got the list of children, and all I did was
create a Rect and in that, calculate where the child should go. I'm
moving it over by childrenResolved * 40, so the first child is at X=0,
then next at 40, then 80, etc... I moved it down by 30 to be arbitrary,
and then used the child's desired size to get the width and height.</p>
<p>Adding the RotateTransform is just for fun, but it does cause
problems, since it's effectively overwriting ANY RenderTransform that
the user might apply. To do this correctly, I should probably get the
existing RenderTransform, and add the desired rotation and all of that,
but here, my goal is to demonstrate the simplicity.</p>
<p>The two lines that you can't forget... you need to call
child.Arrange and pass the rectangle, otherwise, the child just ends up
in Oblivion. And, if you don't return the arrangeSize, I'm sure it will
do something funky. Again, something else I haven't experimented with
yet.</p>
<p>To be honest, I've surprised myself with how easy this was to do.
With some math, it wouldn't be too hard to create a layout that takes
the controls and fans them out in a way that looks like a hand of cards
or something. </p> 
		</div>
	</div>
		
	<div class="postfoot">	
		
		 
		<a id="bp___v___r___postlist___EntryItems_ctl09_CommentsLink" href="http://blogs.msdn.com/danteg/archive/2007/03/07/creating-an-alternate-layout-panel.aspx#comments">0 Comments</a>   
		<div><span id="bp___v___r___postlist___EntryItems_ctl09_InlineTagEditorPanel">Filed under: <a href="http://blogs.msdn.com/danteg/archive/tags/Blend/default.aspx" rel="tag">Blend</a>, <a href="http://blogs.msdn.com/danteg/archive/tags/Code/default.aspx" rel="tag">Code</a></span><input name="bp$_$v$_$r$_$postlist$_$EntryItems$ctl09$InlineTagEditorPanel" id="bp___v___r___postlist___EntryItems_ctl09_InlineTagEditorPanel_State" value="nochange" type="hidden"></div>
		
	</div>                            

	<div class="post">
		<div class="posthead">
			<h2><a id="bp___v___r___postlist___EntryItems_ctl10_PostTitle" href="http://blogs.msdn.com/danteg/archive/2007/03/07/using-a-timer.aspx">Using a Timer</a></h2>
			Posted
			<a id="bp___v___r___postlist___EntryItems_ctl10_PermaLink" href="http://blogs.msdn.com/danteg/archive/2007/03/07/using-a-timer.aspx">Wednesday, March 07, 2007 7:24 PM</a>
			by
			<a id="bp___v___r___postlist___EntryItems_ctl10_AuthorLink" href="http://blogs.msdn.com/user/Profile.aspx?UserID=23987">DanteG</a>
		</div>
		
		<div class="postcontent">
			<p>Ok,
most C# developers can probably do this in their sleep, but I needed to
hook up a timer that would do something every N milliseconds. And every
time, I have to decide if I need a System.Threads.Timer or&nbsp;a
System.Timers.Timer and so on. So...</p>
<p>This is using the System.Threads.Timer class, since Timers had a lot
of discussion about Server side coding, and I just decided that it
didn't look right.</p>
<p>First, we need to keep the Timer in scope. I made a mistake of
creating a local timer in a method, and as soon as the method ended,
the Timer went out of scope and stopped working. That's not too useful.
So, start with:</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">private</span><span style="font-size: 10pt; font-family: 'Courier New';"> <span style="color: rgb(43, 145, 175);">Timer</span> tickTimer;<o:p></o:p></span></p>
<p>Now, create the method that the tickTimer will call. &nbsp;It has to
return void and accept a single parameter as an object. So, in this
case:</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">private</span><span style="font-size: 10pt; font-family: 'Courier New';"> <span style="color: blue;">void</span> NotifyTimer(<span style="color: rgb(43, 145, 175);">Object</span> stateInfo)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: rgb(43, 145, 175);">Debug</span>.WriteLine(<span style="color: rgb(163, 21, 21);">"Tick"</span>);<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
<p mce_keep="true">
</p><p mce_keep="true">I added the Debug statement, so I could run
dbmon, and see when the timer is running. If I were 'shipping' this,
I'd hide that with Debug controllers and such... but that's not a
critical discussion here.</p>
<p mce_keep="true">Finally, when I'm ready to start the timer, instantiate the object:</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">public</span><span style="font-size: 10pt; font-family: 'Courier New';"> WordGame()<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt; text-indent: 0.5in;"><span style="font-size: 10pt; color: rgb(43, 145, 175); font-family: 'Courier New';">TimerCallback</span><span style="font-size: 10pt; font-family: 'Courier New';"> notifier = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">TimerCallback</span>(<span style="color: blue;">this</span>.NotifyTimer);<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.tickTimer = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">Timer</span>(notifier, <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">AutoResetEvent</span>(<span style="color: blue;">true</span>), 0, 250);<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">}<o:p></o:p></span></p>
<p mce_keep="true">The first line creates the method that I'm going to
call whenever the timer gets called. Then, I instantiate it. I have to
pass the TimerCallback as the first argument, and I have to look up
what the AutoResetEvent does. </p>
<p mce_keep="true">The last two arguments, in this case 0 and 250
indicate how long the timer should wait until it calls the Callback for
the first time, then the interval between calls. In this case, I'm
telling it to start immediately, and keep calling that callback every
250ms. </p>
<p mce_keep="true">Keep in mind, in this case, that timer is going to
start as SOON as my object is instantiated (note that my code is in the
constructor for my class), and at the moment, it won't ever stop. I can
then use Timer.Change to modify those parameters... say start the timer
when the game actually starts and stop the timer once the player is out
of time, but those are just some performance improvements.</p> 
		</div>
	</div>
		
	<div class="postfoot">	
		
		 
		<a id="bp___v___r___postlist___EntryItems_ctl10_CommentsLink" href="http://blogs.msdn.com/danteg/archive/2007/03/07/using-a-timer.aspx#comments">0 Comments</a>   
		<div><span id="bp___v___r___postlist___EntryItems_ctl10_InlineTagEditorPanel">Filed under: <a href="http://blogs.msdn.com/danteg/archive/tags/Code/default.aspx" rel="tag">Code</a></span><input name="bp$_$v$_$r$_$postlist$_$EntryItems$ctl10$InlineTagEditorPanel" id="bp___v___r___postlist___EntryItems_ctl10_InlineTagEditorPanel_State" value="nochange" type="hidden"></div>
		
	</div>                            

	<div class="post">
		<div class="posthead">
			<h2><a id="bp___v___r___postlist___EntryItems_ctl11_PostTitle" href="http://blogs.msdn.com/danteg/archive/2007/03/07/databinding-to-clr-objects.aspx">Databinding to CLR Objects</a></h2>
			Posted
			<a id="bp___v___r___postlist___EntryItems_ctl11_PermaLink" href="http://blogs.msdn.com/danteg/archive/2007/03/07/databinding-to-clr-objects.aspx">Wednesday, March 07, 2007 6:08 PM</a>
			by
			<a id="bp___v___r___postlist___EntryItems_ctl11_AuthorLink" href="http://blogs.msdn.com/user/Profile.aspx?UserID=23987">DanteG</a>
		</div>
		
		<div class="postcontent">
			<p>I'm
sure everyone else runs into these issues all the time, but every time
I have to do this, I end up pulling up MSDN and looking all of this up.
It's not too efficient, so I'm going to drop a few points here for
reference.</p>
<p>First: Binding a basic type (String, Int, etc...)</p>
<p>For starters, if the CLR object is supposed to have properties that
you're going to bind to, then it needs to implement
INotifyPropertyChanged. VS makes it easy to implement the interface,
just right click and tell it to implement, and it puts the default
methods in. </p>
<p>Then, add this code:</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">private</span><span style="font-size: 10pt; font-family: 'Courier New';"> <span style="color: blue;">void</span> NotifyPropertyChanged(<span style="color: blue;">string</span> info)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">if</span> (PropertyChanged != <span style="color: blue;">null</span>)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PropertyChanged(<span style="color: blue;">this</span>, <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">PropertyChangedEventArgs</span>(info));<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">}</span><o:p></o:p></p>
<p mce_keep="true">Now, with this code in place, whenever you change
the value of any property that you're going to be databinding to, you
just need to call this.NotifyPropertyChanged(property). So, for
instance, if the player gets 5 more points, just do score += 5 and
this.NotifyPropertyChanged("Score");</p>
<p mce_keep="true">Second: Binding a List</p>
<p mce_keep="true">Then, in the game I'm working on, there is a list of
words that the user has already found. I want to display that list in a
list box. I thought I could just do a public property the looks like:</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">public</span><span style="font-size: 10pt; font-family: 'Courier New';"> <span style="color: rgb(43, 145, 175);">List</span>&lt;<span style="color: blue;">string</span>&gt; MyList<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">get<o:p></o:p></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">return</span> <span style="color: blue;">this</span>.myList;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">}</span><o:p></o:p></p>
<p mce_keep="true">This seemed straightforward, as I bound the
ItemsSource of my ListBox to this property. Problem was, when I updated
this.myList, and even when I called PropertyChanged, my ListBox didn't
update. I dug around for a while, and finally checked with a Dev, and
discovered that there is another class
ObservableCollection&lt;string&gt; that fixes everything. In fact, you
don't even need to do the PropertyChanged when you bind a ListBox to an
ObservableCollection. So, in the above case, I just used:</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">public</span><span style="font-size: 10pt; font-family: 'Courier New';"> <span style="color: rgb(43, 145, 175);">ObservableCollection</span>&lt;<span style="color: blue;">string</span>&gt; MyList<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">get<o:p></o:p></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">return</span> <span style="color: blue;">this</span>.myList;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">}<o:p></o:p></span></p>
<p mce_keep="true">
</p><p mce_keep="true">Third: Connecting the application's DataContext</p>
<p mce_keep="true">For this one, I've found two different ways to do the same thing, and I'm not sure which is correct (or more 'proper'). </p>
<p mce_keep="true">So, here's the scenario. I've got this engine for my
"WordGame", which is a class. I want to databind controls on my
application to the fields in the WordGame object, and I need to call
methods on it. The best way to do this is to bind the DataContext to an
instance of WordGame, and then bind everything through
ExplicitDataContexts. But, the tricky part comes when I want to call a
method on the WordGame object itself. In the event handler for my
Button, I don't have direct access to the object. For sake of
conversation, the method is called "StartNewGame()" on WordGame to
begin the whole process.</p>
<p mce_keep="true">Option 1:</p>
<p mce_keep="true">In Blend, Add the CLR Object as a data source, and
bind the DataContext of the LayoutRoot to the datasource. Then, I can
drop a TextBlock down and data bind the text to the
ExplicitDataContext, and I see all the fields that I want to bind to.
Ok, great. Now, in my Window1.xaml.cs, I have to add this property:</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">private</span><span style="font-size: 10pt; font-family: 'Courier New';"> <span style="color: rgb(43, 145, 175);">WordGame</span> myGame = <span style="color: blue;">null</span>;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">public</span><span style="font-size: 10pt; font-family: 'Courier New';"> <span style="color: rgb(43, 145, 175);">WordGame</span> MyGame<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">get<o:p></o:p></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">if</span> (<span style="color: blue;">this</span>.myGame == <span style="color: blue;">null</span>)<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.myGame = <span style="color: blue;">this</span>.LayoutRoot.GetValue(<span style="color: rgb(43, 145, 175);">Grid</span>.DataContextProperty) <span style="color: blue;">as</span> <span style="color: rgb(43, 145, 175);">WordGame</span>;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">return</span> <span style="color: blue;">this</span>.myGame;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">}<o:p></o:p></span></p>
<p mce_keep="true">Now, in any of my event handlers, I can access this.MyGame and get the desired behavior.</p>
<p mce_keep="true">Option 2</p>
<p mce_keep="true">In the Constructor for my Window, I added this code:</p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">private</span><span style="font-size: 10pt; font-family: 'Courier New';"> <span style="color: rgb(43, 145, 175);">WordGame</span> myGame = <span style="color: blue;">null</span>;<span style="color: blue;"><o:p></o:p></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: blue; font-family: 'Courier New';">public</span><span style="font-size: 10pt; font-family: 'Courier New';"> Window1()<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.InitializeComponent();<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.myGame = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">WordGame</span>();<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: blue;">this</span>.LayoutRoot.DataContext = <span style="color: blue;">this</span>.myGame;<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: green;">// Insert code required on object creation below this point.<o:p></o:p></span></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; font-family: 'Courier New';">}<o:p></o:p></span></p>
<p mce_keep="true">This looks simpler at first, but the BIG problem is
that since the actual DataBinding happens in the constructor, Blend
doesn't recognize it as design time, so I can't do any of my
databinding using the Property Markers and such.</p>
<p mce_keep="true">So, in this case, I'm happiest with option 1.</p>
<p mce_keep="true">I also want to include my Timer code, but I'll do that in a seperate post.</p> 
		</div>
	</div>
		
	<div class="postfoot">	
		
		 
		<a id="bp___v___r___postlist___EntryItems_ctl11_CommentsLink" href="http://blogs.msdn.com/danteg/archive/2007/03/07/databinding-to-clr-objects.aspx#comments">2 Comments</a>   
		<div><span id="bp___v___r___postlist___EntryItems_ctl11_InlineTagEditorPanel">Filed under: <a href="http://blogs.msdn.com/danteg/archive/tags/Blend/default.aspx" rel="tag">Blend</a>, <a href="http://blogs.msdn.com/danteg/archive/tags/Databinding/default.aspx" rel="tag">Databinding</a>, <a href="http://blogs.msdn.com/danteg/archive/tags/Gaming/default.aspx" rel="tag">Gaming</a>, <a href="http://blogs.msdn.com/danteg/archive/tags/Code/default.aspx" rel="tag">Code</a></span><input name="bp$_$v$_$r$_$postlist$_$EntryItems$ctl11$InlineTagEditorPanel" id="bp___v___r___postlist___EntryItems_ctl11_InlineTagEditorPanel_State" value="nochange" type="hidden"></div>
		
	</div>                            

	<div class="post">
		<div class="posthead">
			<h2><a id="bp___v___r___postlist___EntryItems_ctl12_PostTitle" href="http://blogs.msdn.com/danteg/archive/2006/10/09/Working-with-the-Opacity-Masks.aspx">Working with the Opacity Masks</a></h2>
			Posted
			<a id="bp___v___r___postlist___EntryItems_ctl12_PermaLink" href="http://blogs.msdn.com/danteg/archive/2006/10/09/Working-with-the-Opacity-Masks.aspx">Monday, October 09, 2006 6:43 PM</a>
			by
			<a id="bp___v___r___postlist___EntryItems_ctl12_AuthorLink" href="http://blogs.msdn.com/user/Profile.aspx?UserID=23987">DanteG</a>
		</div>
		
		<div class="postcontent">
			<p>Well,
it's been a while since I've managed to post, but I've been working
with Interactive Designer pretty heavily lately, and it's been a pretty
exciting time.</p>
<p>On top of that, I've starting doing internal training classes at
Microsoft for Interactive Designer. It started with a couple classes on
how Graphic Designer and Interactive Designer can work together, but
it's grown to a full-blown formal series of classes.</p>
<p>Last week, we spent a fair amount of time on the Appearance Palette,
talking about what it can do. Specifically, most people don't know how
to work with opacity masks, and just what you can do with them.</p>
<p>The best place to start, is on what an opacity mask actually is.
There are several ways you can make an object partially transparent...
to show what objects are underneath.</p>
<p>First, you can set the Opacity on the entire object. This applies a
uniform N% transparency to the entire object, stroke, fill, and all.
This opacity is an animatable property, so you can make the object fade
in or out with this, but you can't control which parts get more or less
transparency.</p>
<p>Second, you can set the Alpha channel on individual colors. This
allows a gradient where you can see through parts of the element, and
still have solid colors elsewhere. The downside is that an individual
channel is not animatable, and this sets individual colors on a single
piece (Fill/Stroke/etc...). So, if you want, for instance, a linear
gradient whose tranparency extends both into the stroke and the fill,
getting this correct is a VERY tricky business.</p>
<p>Finally, you can use an opacity mask. It's the least commonly used,
since it's not immediately apparent how it works. But, it provides some
functionality that the other two methods don't provide.</p>
<p>An opacity mask is a brush that is applied on top of all of the
other brushes that make up an element. However, in an opacity mask,
only the alpha channel is applied.</p>
<p>(I need to learn how to put pictures into my blog... I'll work on that for next time around)</p>
<p>But, if you've got Interactive Designer available, try this. Create
a rectangle with a wide stroke. Make the stroke Black and the rectangle
itself red.</p>
<p>Now, switch to the Opacity Mask, and change the type to a linear
gradient. At first, you won't see any change in the rectangle, but
that's because the Opacity Mask brush has an alpha that goes from 1.0
to 1.0. In other words, the opacity of every pixel in the element will
remain at it's previous setting.</p>
<p>Change the right gradient stop's Alpha to 0.0. </p>
<p>At this point, the right side of the rectangle, stroke and fill,
both disappear. What happened? Consider a pixel 3/4th of the way across
the rectangle. The brush that effects the color of that pixel has an
Alpha of 1.0, or completely opaque. The Opacity mask, 3/4s of the way
across has an alpha channel of 0.25. So, the 1.0 and the 0.25 are
multiplied together, and the pixel is displayed with a 25% transparency.</p>
<p>This may not be too exciting, but select the paint transform tool,
and drag the vector around. Change the spread method to either reflect
or repeat. As you drag around the gradient, you can see how you can do
things with the Opacity Mask that you wouldn't be able to do any other
way. Try using a Radial Gradient as well...</p>
<p>The biggest take-away here is that Opacity Masks are applied to the
entire object at once, regardless of fill/stroke, etc... and you can do
anything with an opacity mask that you can do with any other brush with
regards to animation and paint transform.</p>
<p>--Dante</p> 
		</div>
	</div>
		
	<div class="postfoot">	
		
		 
		<a id="bp___v___r___postlist___EntryItems_ctl12_CommentsLink" href="http://blogs.msdn.com/danteg/archive/2006/10/09/Working-with-the-Opacity-Masks.aspx#comments">0 Comments</a>   
		<div><span id="bp___v___r___postlist___EntryItems_ctl12_InlineTagEditorPanel">Filed under: <a href="http://blogs.msdn.com/danteg/archive/tags/Blend/default.aspx" rel="tag">Blend</a></span><input name="bp$_$v$_$r$_$postlist$_$EntryItems$ctl12$InlineTagEditorPanel" id="bp___v___r___postlist___EntryItems_ctl12_InlineTagEditorPanel_State" value="nochange" type="hidden"></div>
		
	</div>                            

	<div class="post">
		<div class="posthead">
			<h2><a id="bp___v___r___postlist___EntryItems_ctl13_PostTitle" href="http://blogs.msdn.com/danteg/archive/2006/06/20/updating-an-image-control.aspx">Updating an Image control</a></h2>
			Posted
			<a id="bp___v___r___postlist___EntryItems_ctl13_PermaLink" href="http://blogs.msdn.com/danteg/archive/2006/06/20/updating-an-image-control.aspx">Tuesday, June 20, 2006 9:21 PM</a>
			by
			<a id="bp___v___r___postlist___EntryItems_ctl13_AuthorLink" href="http://blogs.msdn.com/user/Profile.aspx?UserID=23987">DanteG</a>
		</div>
		
		<div class="postcontent">
			<p>I
had a coworker as me how to update an Image control in code.
Specifically, he wanted to create a quick file browser that had a Next
and Previous button to scroll through a preset list of Images.</p>
<p>Creating the list and iterating through directories is pretty easy,
so I'll omit that (Although, if someone wants to see that code, just
comment on this post, and I'll post it seperately). </p>
<p>Then, I just had a quick helper method that looks like this:</p><pre><p><font face="Courier New">public void LoadImage(Image image, string imagePath) <br>{<br>    if (File.Exists(imagePath))<br>    {</font></p><p><font face="Courier New">        image.Source = new BitmapImage(new Uri(imagePath)); </font></p><p><font face="Courier New">    } </font></p><p><font face="Courier New">} </font></p></pre>
<p></p>
<p>The challenge that our designer ran into, is that Source requires an
"ImageSource" class, and he didn't know how to create one. BitmapImage
is a class that inherits from ImageSource, and simply takes a Uri in
the constructor with the location of the image. The helper function
accepted the Image control as an argument, just so that I could use the
same method to update any number of Image controls.</p>
<p>And really, that's all there is to it. Of course, my version had a
transparent InkCanvas on top of the Image, and I discussed how to load
and save Ink in a previous post. If folks are interested, I can post
more of the code for my Image/Markup Browser here.</p>
<p>--Dante</p> 
		</div>
	</div>
		
	<div class="postfoot">	
		
		 
		<a id="bp___v___r___postlist___EntryItems_ctl13_CommentsLink" href="http://blogs.msdn.com/danteg/archive/2006/06/20/updating-an-image-control.aspx#comments">2 Comments</a>   
		<div><span id="bp___v___r___postlist___EntryItems_ctl13_InlineTagEditorPanel">Filed under: <a href="http://blogs.msdn.com/danteg/archive/tags/Blend/default.aspx" rel="tag">Blend</a>, <a href="http://blogs.msdn.com/danteg/archive/tags/Code/default.aspx" rel="tag">Code</a></span><input name="bp$_$v$_$r$_$postlist$_$EntryItems$ctl13$InlineTagEditorPanel" id="bp___v___r___postlist___EntryItems_ctl13_InlineTagEditorPanel_State" value="nochange" type="hidden"></div>
		
	</div>                            

	<div class="post">
		<div class="posthead">
			<h2><a id="bp___v___r___postlist___EntryItems_ctl14_PostTitle" href="http://blogs.msdn.com/danteg/archive/2006/06/09/saving-and-retrieving-ink.aspx">Saving and retrieving Ink</a></h2>
			Posted
			<a id="bp___v___r___postlist___EntryItems_ctl14_PermaLink" href="http://blogs.msdn.com/danteg/archive/2006/06/09/saving-and-retrieving-ink.aspx">Friday, June 09, 2006 11:16 PM</a>
			by
			<a id="bp___v___r___postlist___EntryItems_ctl14_AuthorLink" href="http://blogs.msdn.com/user/Profile.aspx?UserID=23987">DanteG</a>
		</div>
		
		<div class="postcontent">
			<p>Well,
we had another Application Bash for Expression Interactive Designer
this week, and my application did something I hadn't messed with
before. I wanted to work with ink in Expression, and specifically, I
wanted to be able to mark up a picture, and save that markup alongside
the picture to view later.<o:p></o:p></p>
<p>It was actually pretty easy. Drop an Image on the scene, then drop
an InkCanvas on top of it. You need to set the Background to a null
brush so you can see through it. By default, the InkCanvas has the
EditingMode set to "Ink", which is what I want, but I changed the
EditingModeInverted to EraseByPoint (just because I don't like the
whole EraseByStroke model... but that's just me).<o:p></o:p></p>
<p>Now, I dropped a "Save" and "Load" button on the scene, and hooked them up with this code:<o:p></o:p></p>
<p>To save:<o:p></o:p></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: black; font-family: Courier;">if (File.Exists(imagePath + ".Ink"))</span><o:p></o:p></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: black; font-family: Courier;">{</span><o:p></o:p></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: black; font-family: Courier;">&nbsp;&nbsp;&nbsp;File.Delete(imagePath + ".Ink");<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: black; font-family: Courier;">}<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: black; font-family: Courier;">FileStream myStream = new FileStream(imagePath + ".Ink", FileMode.CreateNew);<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: black; font-family: Courier;">inkCanvas.Strokes.Save(myStream);<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: black; font-family: Courier;">myStream.Close();</span><o:p></o:p></p>
<p>Then to load:<o:p></o:p></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: black; font-family: Courier;">if (File.Exists(imagePath + ".Ink"))<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: black; font-family: Courier;">{<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="color: black; font-family: Courier;">&nbsp;&nbsp;&nbsp;FileStream myStream = new FileStream(imagePath + ".Ink", FileMode.Open);</span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="color: black; font-family: Courier;"></span><span style="font-size: 10pt; color: black; font-family: Courier;">&nbsp;&nbsp;&nbsp;inkCanvas.Strokes = new StrokeCollection(myStream);<o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: black; font-family: Courier;">&nbsp;&nbsp;&nbsp;myStream.Close();</span><span style="color: black; font-family: Courier;"><o:p></o:p></span></p>
<p class="MsoNormal" style="margin: 0in 0in 0pt;"><span style="font-size: 10pt; color: black; font-family: Courier;">}</span><span style="color: black; font-family: Courier;"><o:p></o:p></span></p>
<p>Yes, I know there are better ways to trap the closing of the stream
in a finally loop, but I was going for quick and clean. Of course, now
I added controls to allow the user to browse through directories, pick
a file to load, and so on. Additionally, this keeps the markup in a
separate file, so it’s easy to transport the two around separately.<o:p></o:p></p>
<p>It’s interesting to note that the StrokeCollection can be
instantiated with any stream, and the Save function on the collection
can similarly use any stream, so it would be pretty easy to actually
implement a shared whiteboard between two or more users.<o:p></o:p></p>
<p>As a side project, I want to do some investigation on how to use the
handwriting APIs, and see if I can get my ink to actually get letters
and words recognized <span style="font-family: Wingdings;"><span style="">J</span></span>.<o:p></o:p></p> 
		</div>
	</div>
		
	<div class="postfoot">	
		
		 
		<a id="bp___v___r___postlist___EntryItems_ctl14_CommentsLink" href="http://blogs.msdn.com/danteg/archive/2006/06/09/saving-and-retrieving-ink.aspx#comments">0 Comments</a>   
		<div><span id="bp___v___r___postlist___EntryItems_ctl14_InlineTagEditorPanel">Filed under: <a href="http://blogs.msdn.com/danteg/archive/tags/Blend/default.aspx" rel="tag">Blend</a>, <a href="http://blogs.msdn.com/danteg/archive/tags/Code/default.aspx" rel="tag">Code</a></span><input name="bp$_$v$_$r$_$postlist$_$EntryItems$ctl14$InlineTagEditorPanel" id="bp___v___r___postlist___EntryItems_ctl14_InlineTagEditorPanel_State" value="nochange" type="hidden"></div>
		
	</div>                            

<div class="CommonSinglePager">More Posts <a href="http://blogs.msdn.com/danteg/Default.aspx?p=2">Next page »</a></div>

	    
    
			</div></div>
			<div id="contentfooter">&nbsp;</div>
		</div>
		<div id="footer">
			
		</div>
	</div>
</div>

<script language="javascript" type="text/javascript">
<!--
function KeyDownHandlerbp___v___bt___ws___SearchButton(event)
{
	if (event.keyCode == 13)
	{
		event.returnValue = false;
		event.cancel = true;
     __doPostBack('bp$_$v$_$bt$_$ws$_$SearchButton','')	}
}

//-->
</script>
</form>
</body></html>
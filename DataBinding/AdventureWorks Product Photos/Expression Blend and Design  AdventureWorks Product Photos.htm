<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0053)http://blogs.msdn.com/expression/articles/528008.aspx -->
<HTML lang=en xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Expression Blend and Design : AdventureWorks Product Photos</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<META content="Expression Interactive Designer" name=keywords>
<META 
content="Home &amp;gt; Samples and Tutorials Gallery - Expression Blend &amp;gt; AdventureWorks product photos Download the sample project files for the RC build of Expression Blend AWProductPhotos.zip AdventureWorks Product Photos Creating a c ommon l anguage r untime" 
name=description>
<META content="MSHTML 6.00.2900.3199" name=GENERATOR><LINK 
href="http://blogs.msdn.com/expression/pingback.aspx" rel=pingback><LINK 
media=screen 
href="Expression Blend and Design  AdventureWorks Product Photos_files/style.css" 
type=text/css rel=stylesheet><LINK media=print 
href="/Themes/Blogs/poisonivy/style/print.css" type=text/css 
rel=stylesheet><LINK media=screen 
href="Expression Blend and Design  AdventureWorks Product Photos_files/customcss.css" 
type=text/css rel=stylesheet><LINK href="/favicon.ico" type=image/ico 
rel="shortcut icon"><LINK title="Expression Blend and Design (RSS 2.0)" 
href="http://blogs.msdn.com/expression/rss.xml" type=application/rss+xml 
rel=alternate><LINK title="Expression Blend and Design (Atom 1.0)" 
href="http://blogs.msdn.com/expression/atom.xml" type=application/atom+xml 
rel=alternate><LINK title="AdventureWorks Product Photos Comment RSS (RSS 2.0)" 
href="http://blogs.msdn.com/expression/commentrss.aspx?PostID=528008" 
type=application/rss+xml rel=alternate>
<SCRIPT 
src="Expression Blend and Design  AdventureWorks Product Photos_files/global.js" 
type=text/javascript></SCRIPT>
</HEAD>
<BODY>
<FORM id=aspnetForm name=aspnetForm 
onsubmit="javascript:return WebForm_OnSubmit();" 
action=/expression/articles/528008.aspx method=post>
<DIV><INPUT id=__EVENTTARGET type=hidden name=__EVENTTARGET> <INPUT 
id=__EVENTARGUMENT type=hidden name=__EVENTARGUMENT> <INPUT id=__VIEWSTATE 
type=hidden 
value=/wEPDwUKLTMyNjg0MDc1MWQYAQUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgIFI2N0bDAwJF8kY3RsMDAkXyRidCRfJHdzJF8kU2VhcmNoQm94BSpjdGwwMCRfJGN0bDAwJF8kY3RsMDEkXyRmb3JtJF8kY2hrUmVtZW1iZXKJzx8ahfovNM/xd3pkqTZJHbbj0A== 
name=__VIEWSTATE> </DIV>
<SCRIPT type=text/javascript>
<!--
var theForm = document.forms['aspnetForm'];
if (!theForm) {
    theForm = document.aspnetForm;
}
function __doPostBack(eventTarget, eventArgument) {
    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {
        theForm.__EVENTTARGET.value = eventTarget;
        theForm.__EVENTARGUMENT.value = eventArgument;
        theForm.submit();
    }
}
// -->
</SCRIPT>

<SCRIPT 
src="Expression Blend and Design  AdventureWorks Product Photos_files/WebResource.axd" 
type=text/javascript></SCRIPT>

<SCRIPT language=javascript 
src="Expression Blend and Design  AdventureWorks Product Photos_files/Telligent_Modal.js" 
type=text/javascript></SCRIPT>

<SCRIPT language=javascript type=text/javascript>
// <![CDATA[
Telligent_Modal.Configure('/utility/loading.htm',['Modal'],['ModalTitle'],['ModalClose'],['ModalContent'],['ModalFooter'],['ModalResize'],['ModalMask'],100);
// ]]>
</SCRIPT>

<SCRIPT 
src="C:\Code\Example\WPF Xaml Expression\AdventureWorks Product Photos\Expression Blend and Design  AdventureWorks Product Photos_files\WebResource(1).axd" 
type=text/javascript></SCRIPT>

<SCRIPT type=text/javascript>
<!--
function WebForm_OnSubmit() {
if (typeof(ValidatorOnSubmit) == "function" && ValidatorOnSubmit() == false) return false;
return true;
}
// -->
</SCRIPT>

<DIV id=masthead>
<DIV id=welcome align=right>Welcome to MSDN Blogs <A 
id=ctl00___ctl00___duw1_ac1___Login 
href="http://blogs.msdn.com/login.aspx?ReturnUrl=%2fexpression%2farticles%2f528008.aspx">Sign 
in</A> | <A id=ctl00___ctl00___duw1_ac1___Register 
href="http://blogs.msdn.com/user/CreateUser.aspx?ReturnUrl=/expression/articles/528008.aspx">Join</A> 
| <A id=ctl00___ctl00___duw1_Faq1 
href="http://blogs.msdn.com/languages/en-US/docs/faq.aspx">Help</A> </DIV></DIV>
<DIV id=wrapper>
<DIV id=container>
<DIV id=header>
<DIV id=title>
<DIV id=SearchSideBar>
<DIV id=search><INPUT class=searchBox id=ctl00___ctl00___bt___ws___SearchBox 
onkeydown=KeyDownHandlerctl00___ctl00___bt___ws___SearchButton(event); 
name=ctl00$_$ctl00$_$bt$_$ws$_$SearchBox> <A 
id=ctl00___ctl00___bt___ws___SearchButton 
href="javascript:__doPostBack('ctl00$_$ctl00$_$bt$_$ws$_$SearchButton','')">Search</A> 
</DIV></DIV>
<H1><A class=headermaintitle id=ctl00___ctl00___bt___BlogTitle 
href="http://blogs.msdn.com/expression/default.aspx">Expression Blend and 
Design</A></H1>
<P id=tagline>The team blog of the Microsoft Expression Blend and Design 
products.</P></DIV>
<DIV id=nav>
<DIV id=SubscriptionsSideBar>
<DIV id=subscriptions>
<UL>
  <LI><A id=ctl00___ctl00___bt___s___rss 
  href="http://blogs.msdn.com/expression/rss.xml">RSS 2.0</A> 
  <LI><A id=ctl00___ctl00___bt___s___atom 
  href="http://blogs.msdn.com/expression/atom.xml">Atom 1.0</A> 
</LI></UL></DIV></DIV>
<UL>
  <LI><A id=ctl00___ctl00___bt___home 
  href="http://blogs.msdn.com/expression/default.aspx">Home</A> 
</LI></UL></DIV></DIV>
<DIV id=contentmargin></DIV>
<DIV id=contentwrapper>
<DIV id=sidebar-a>
<DIV id=TasksSideBar></DIV>
<DIV id=TagSideBar>
<H3>Tags</H3>
<UL>
  <UL class=SidebarTagCloud>
    <LI class=Tag2><A 
    href="http://blogs.msdn.com/expression/archive/tags/Designer+Tools/default.aspx" 
    rel=tag>Designer Tools</A> 
    <LI class=Tag2><A 
    href="http://blogs.msdn.com/expression/archive/tags/Expression/default.aspx" 
    rel=tag>Expression</A> 
    <LI class=Tag3><A 
    href="http://blogs.msdn.com/expression/archive/tags/Expression+Blend/default.aspx" 
    rel=tag>Expression Blend</A> 
    <LI class=Tag4><A 
    href="http://blogs.msdn.com/expression/archive/tags/Expression+Design/default.aspx" 
    rel=tag>Expression Design</A> 
    <LI class=Tag1><A 
    href="http://blogs.msdn.com/expression/archive/tags/Expression+Graphic+Designer/default.aspx" 
    rel=tag>Expression Graphic Designer</A> 
    <LI class=Tag1><A 
    href="http://blogs.msdn.com/expression/archive/tags/Expression+Interactive+Designer/default.aspx" 
    rel=tag>Expression Interactive Designer</A> 
    <LI class=Tag6><A 
    href="http://blogs.msdn.com/expression/archive/tags/Expression+Web/default.aspx" 
    rel=tag>Expression Web</A> 
    <LI class=Tag4><A 
    href="http://blogs.msdn.com/expression/archive/tags/Expression+Web+Designer/default.aspx" 
    rel=tag>Expression Web Designer</A> 
    <LI class=Tag6><A 
    href="http://blogs.msdn.com/expression/archive/tags/Microsoft+Silverlight/default.aspx" 
    rel=tag>Microsoft Silverlight</A> 
    <LI class=Tag6><A 
    href="http://blogs.msdn.com/expression/archive/tags/MSDN/default.aspx" 
    rel=tag>MSDN</A> 
    <LI class=Tag6><A 
    href="http://blogs.msdn.com/expression/archive/tags/survey/default.aspx" 
    rel=tag>survey</A> 
    <LI class=Tag3><A 
    href="http://blogs.msdn.com/expression/archive/tags/Windows+Presentation+Foundation/default.aspx" 
    rel=tag>Windows Presentation Foundation</A> </LI></UL></UL></DIV>
<DIV id=NewsSideBar></DIV>
<DIV id=ArchiveSideBar>
<H3>Archives</H3>
<UL>
  <LI><A href="http://blogs.msdn.com/expression/archive/2007/10.aspx">October 
  2007 (3)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2007/09.aspx">September 
  2007 (2)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2007/08.aspx">August 
  2007 (1)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2007/07.aspx">July 2007 
  (2)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2007/06.aspx">June 2007 
  (1)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2007/05.aspx">May 2007 
  (3)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2007/04.aspx">April 2007 
  (2)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2007/03.aspx">March 2007 
  (3)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2007/01.aspx">January 
  2007 (4)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2006/12.aspx">December 
  2006 (7)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2006/09.aspx">September 
  2006 (1)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2006/08.aspx">August 
  2006 (1)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2006/07.aspx">July 2006 
  (2)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2006/06.aspx">June 2006 
  (2)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2006/05.aspx">May 2006 
  (3)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2006/04.aspx">April 2006 
  (1)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2006/03.aspx">March 2006 
  (10)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2006/02.aspx">February 
  2006 (21)</A> 
  <LI><A href="http://blogs.msdn.com/expression/archive/2006/01.aspx">January 
  2006 (14)</A> </LI></UL></DIV>
<DIV id=LinkSideBar>
<H3>Additional links</H3>
<UL>
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl00_Links_ctl03_Link 
  href="http://channel9.msdn.com/ShowPost.aspx?PostID=247419#247419">iView 
  MediaPro To Become Expression Media</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl00_Links_ctl04_Link 
  href="http://channel9.msdn.com/Showpost.aspx?postid=263365">Getting Started 
  with "WPF/E"</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl00_Links_ctl05_Link 
  href="http://channel9.msdn.com/tags/expression">Expression Videos on Channel 
  9</A> </LI></UL>
<H3>Article Categories</H3>
<UL>
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl01_Links_ctl01_Link 
  href="http://blogs.msdn.com/expression/pages/samples-and-tutorials-gallery-expression-design.aspx">Samples 
  and Tutorials Gallery - Expression Design</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl01_Links_ctl02_Link 
  href="http://blogs.msdn.com/expression/articles/517022.aspx">Community Samples 
  Gallery - Expression Blend</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl01_Links_ctl03_Link 
  href="http://blogs.msdn.com/expression/articles/543834.aspx">Samples and 
  Tutorials Gallery - Expression Blend</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl01_Links_ctl04_Link 
  href="http://blogs.msdn.com/expression/pages/community-samples-gallery-expression-design.aspx">Community 
  Samples Gallery - Expression Design</A> </LI></UL>
<H3>Community</H3>
<UL>
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl02_Links_ctl01_Link 
  href="http://www.microsoft.com/communities/newsgroups/en-us/default.aspx?dg=microsoft.public.expression.discussion&amp;cat=en_US_717f231e-6256-4e36-975c-3a3ced16532b&amp;lang=en&amp;cr=US">Expression 
  Discussion</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl02_Links_ctl02_Link 
  href="http://www.microsoft.com/communities/newsgroups/en-us/default.aspx?dg=microsoft.public.expression.interactivedesigner&amp;lang=en&amp;cr=US">Expression 
  Blend Discussion</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl02_Links_ctl03_Link 
  href="http://www.microsoft.com/communities/newsgroups/en-us/default.aspx?dg=microsoft.public.expression.graphicdesigner&amp;lang=en&amp;cr=US">Expression 
  Design Discussion</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl02_Links_ctl04_Link 
  href="http://www.microsoft.com/communities/newsgroups/en-us/default.aspx?dg=microsoft.public.expression.webdesigner&amp;cat=&amp;lang=en&amp;cr=US">Expression 
  Web Discussion</A> </LI></UL>
<H3>Great WPF and Blend bloggers</H3>
<UL>
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl03_Links_ctl01_Link 
  href="http://blogs.msdn.com/okoboji">Kevin Moore, Program Manager, WPF</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl03_Links_ctl02_Link 
  href="http://blogs.msdn.com/atc_avalon_team">Advanced Technology Center WPF 
  team, Beijing</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl03_Links_ctl03_Link 
  href="http://notstatic.com/">Robert Ingebretsen, Program Manager, WPF</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl03_Links_ctl04_Link 
  href="http://www.beacosta.com/">Beatriz Costa, SDET, WPF</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl03_Links_ctl05_Link 
  href="http://www.simplegeek.com/">Chris Anderson, Architect</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl03_Links_ctl06_Link 
  href="http://blogs.msdn.com/henryh">Henry Hahn, Program Manager, WPF</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl03_Links_ctl07_Link 
  href="http://fortes.com/work">Filipe Fortes, Program Manager, WPF</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl03_Links_ctl08_Link 
  href="http://rrelyea.spaces.live.com/">Rob Relyea, Program Manager, WPF</A> 
  </LI></UL>
<H3>Team member blogs</H3>
<UL>
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl01_Link 
  href="http://blogs.msdn.com/adamu/">Adam Ulrich, Test Manager, Blend</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl02_Link 
  href="http://blogs.msdn.com/alanga/">Alan Gasperini, Software Design Engineer, 
  Blend</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl03_Link 
  href="http://www.scarynoises.com/blog">Brad Becker, Senior Product Manager, 
  Developer Marketing</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl04_Link 
  href="http://blogs.msdn.com/jeremykuhne/">Jeremy Kuhne, Software Design 
  Engineer in Test, Expression</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl05_Link 
  href="http://blogs.msdn.com/johngossman/">John Gossman, Architect, Blend</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl06_Link 
  href="http://www.aisto.com/roeder/frontier">Lutz Roeder, Software Design 
  Engineer, Blend</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl07_Link 
  href="http://blogs.msdn.com/micahel">Michael J Hunter, Software Design 
  Engineer in Test Tech Lead, Blend</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl08_Link 
  href="http://blogs.msdn.com/mswanson/default.aspx">Michael Swanson, Technical 
  Evangelist, Platform Evangelism</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl09_Link 
  href="http://blogs.msdn.com/stevewhitepsfd/">Steve White, Program Manager, 
  Blend</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl10_Link 
  href="http://blogs.msdn.com/tims">Tim Sneath, Windows Vista Technical 
  Evangelist</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl11_Link 
  href="http://blogs.msdn.com/unnir">Unni Ravindranathan, Program Manager, 
  Blend</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl12_Link 
  href="http://www.wayne-smith.org/">Wayne Smith, Senior Product Manager, 
  Expression</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl13_Link 
  href="http://blogs.msdn.com/mariogu">Mario Guzzi, Software Design Engineer in 
  Test, Blend</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl14_Link 
  href="http://blogs.msdn.com/adrianma">Adrian Mascarenhas, Software Design 
  Engineer in Test, Blend</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl15_Link 
  href="http://blogs.msdn.com/karstenj/">Karsten Januszewski, Technical 
  Evangelist</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl16_Link 
  href="http://blogs.msdn.com/adrianvinca/">Adrian Vinca, Software Engineer in 
  Test, Blend</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl17_Link 
  href="http://blogs.msdn.com/jrowe/">Jen Rowe, Lead Software Design Engineer in 
  Test, Blend</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl18_Link 
  href="http://blogs.msdn.com/danteg">Dante Gagne, Software Design Engineer in 
  Test, Blend</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl19_Link 
  href="http://www.clarkezone.net/">James Clarke, Program Manager, 
  Expression</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl20_Link 
  href="http://blogs.msdn.com/andrewj">Andrew Jewsbury, Program Manager, Web</A> 

  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl21_Link 
  href="http://blogs.msdn.com/lingesh">Lingesh Palaniappan Software Design 
  Engineer in Test, Blend</A> 
  <LI><A id=ctl00___ctl00___bs___lcl___Categories_ctl04_Links_ctl22_Link 
  href="http://ux.artu.tv/">Arturo Toledo, Product Manager, Expression</A> 
</LI></UL></DIV></DIV>
<DIV id=content>
<DIV id=content2>
<STYLE>.DoNotDisplay {
	DISPLAY: none
}
</STYLE>

<DIV class=post>
<DIV class=posthead>
<DIV class=postviewhead>Monday, March 19, 2007 5:23 PM by <A 
id=ctl00___ctl00___ctl01___Entry___AuthorLink 
href="http://blogs.msdn.com/user/Profile.aspx?UserID=4411">stevewhitepsfd</A> 
</DIV>
<H2>AdventureWorks Product Photos</H2></DIV>
<DIV class=postcontent>
<DIV id=breadcrumb><A 
href="http://blogs.msdn.com/expression/default.aspx">Home</A> &gt; <A 
href="http://blogs.msdn.com/expression/articles/543834.aspx">Samples and 
Tutorials Gallery - Expression Blend</A> &gt; AdventureWorks product 
photos</DIV>
<DIV>&nbsp;</DIV>
<H3><FONT face=Arial>Download the sample project files for the RC build of 
Expression Blend</FONT></H3>
<UL>
  <LI><A class="" 
  href="http://xamlshare.com/sparkle/samplesrc/AWProductPhotos.zip" 
  mce_href="http://xamlshare.com/sparkle/samplesrc/AWProductPhotos.zip"><FONT 
  face=Arial>AWProductPhotos.zip</FONT></A></LI></UL>
<H2><FONT face=Arial>AdventureWorks Product Photos</FONT></H2>
<P><EM>Creating a </EM>c<EM>ommon </EM>l<EM>anguage </EM>r<EM>untime data source 
and processing it so that Microsoft® Expression Blend™ can bind to the 
data.</EM></P>
<H3>Contents</H3>
<UL 
style="LIST-STYLE-IMAGE: url(http://www.xamlshare.com/sparkle/images/rctutorials/main/down_arrow.gif)">
  <LI><A 
  href="http://blogs.msdn.com/expression/articles/528008.aspx#overview">Overview</A> 

  <LI><A 
  href="http://blogs.msdn.com/expression/articles/528008.aspx#feat">Features 
  that you will learn about in this tutorial</A> 
  <LI><A href="http://blogs.msdn.com/expression/articles/528008.aspx#task1">Task 
  1: Defining and filling a DataTable</A> 
  <LI><A href="http://blogs.msdn.com/expression/articles/528008.aspx#task2">Task 
  2: Adapting the data collection to a WPF collection</A> 
  <LI><A href="http://blogs.msdn.com/expression/articles/528008.aspx#task3">Task 
  3: Binding to the data source in Expression Blend</A> 
  <LI><A href="http://blogs.msdn.com/expression/articles/528008.aspx#next">Where 
  to go from here</A></LI></UL>
<H3><A class="" title=overview name=overview></A>Overview</H3>
<P align=center><IMG alt="The finished project" 
src="Expression Blend and Design  AdventureWorks Product Photos_files/tutorial_awphotos.png" 
width=500></P>
<P align=center><EM>The finished project</EM></P>
<P><SPAN>This tutorial shows you how to display data from a common language 
runtime (CLR) data source in your Microsoft® Expression Blend™ application. 
</SPAN>The first two tasks involve obtaining data from a sample database and 
then converting the data to a format that Expression Blend can bind to. The 
third task involves creating an Expression Blend project that has elements that 
are bound to the data.</P>
<TABLE class="">
  <TBODY>
  <TR>
    <TD class=""><IMG alt=Tip 
      src="Expression Blend and Design  AdventureWorks Product Photos_files/Icon_tip.png" 
      border=0></TD>
    <TD class="">
      <P>To follow the entire tutorial as it is written, you need Microsoft® 
      Visual Studio® 2005 and Microsoft® SQL Server™ 2005 with the 
      <B>AdventureWorks</B> sample database installed. For more information 
      about how to obtain the <B>AdventureWorks</B> sample, see <A 
      href="http://go.microsoft.com/fwlink/?LinkId=77520" 
      target=_blank>Installing AdventureWorks Sample Databases and Samples</A> 
      on MSDN. <BR></P>
      <P>If you prefer, you can create a <B>DataTable</B> or <B>DataSet</B> from 
      a another database. If you do so, please adapt the first and second tasks 
      of this tutorial to suit the data that you have. The principles will be 
      exactly the same as long as you are using a CLR (or Microsoft® .NET 
      Framework) data source.<BR></P>
      <P>As another alternative source of data, you can download the <A class="" 
      href="http://xamlshare.com/sparkle/samplesrc/AWProductPhotos.zip" 
      mce_href="http://xamlshare.com/sparkle/samplesrc/AWProductPhotos.zip"><FONT 
      face=Arial>AWProductPhotos.zip</FONT></A> sample so that you can use the 
      .dll file&nbsp;that is included&nbsp;in the <B>AWDataSource</B> subfolder. 
      This will allow you to skip the first two tasks in this tutorial, because 
      the <B>AWProductPhotos</B> sample uses an XML file as its source of data 
      instead of a SQL Server database.&nbsp;(See the code comments in the 
      AWProductPhotos\AWDataSource\Class1.cs file for information about how to 
      convert the sample so that it uses the <B>AdventureWorks</B> sample 
      database instead of the XML file.)</P></TD></TR></TBODY></TABLE>
<UL 
style="LIST-STYLE-IMAGE: url(http://www.xamlshare.com/sparkle/images/rctutorials/main/up_arrow.gif); MARGIN-LEFT: 15px">
  <LI><A href="http://blogs.msdn.com/expression/articles/528008.aspx#top">Back 
  to top</A></LI></UL>
<H3><A class="" title=feat name=feat></A>Features that you will learn about in 
this tutorial</H3>
<UL>
  <LI>Creating and using a CLR data source 
  <LI>Converting data in a <B>System.Data.DataTable</B> to a 
  <B>System.Collections.ObjectModel.ObservableCollection</B> 
  <LI>Defining a data template 
  <LI>Binding to data 
  <LI>Binding a command to a <B>Button</B> 
  <LI>Displaying data in a <B>ListBox</B> 
  <LI>Synchronizing data between user interface elements</LI></UL>
<UL 
style="LIST-STYLE-IMAGE: url(http://www.xamlshare.com/sparkle/images/rctutorials/main/up_arrow.gif); MARGIN-LEFT: 15px">
  <LI><A href="http://blogs.msdn.com/expression/articles/528008.aspx#top">Back 
  to top</A></LI></UL>
<H3><A class="" title=task1 name=task1></A>Task 1: Defining and filling a 
DataTable</H3>
<P>The following procedure describes how to create a class library in Visual 
Studio 2005 to populate an instance of a <B>DataTable</B> with data from the 
<B>AdventureWorks</B> sample database. </P>
<OL>
  <LI>On the <B>File</B> menu of Visual Studio 2005, point to <B>New</B>, and 
  then click <B>Project</B>. <BR>The <B>New Project</B> dialog box opens. 
  <LI>Under <B>Project Types</B>, select <B>Visual C#</B>. Under 
  <B>Templates</B>, select <B>Class Library</B>. Name the new project 
  <B>AWDataSource</B>, and then click <B>OK</B>.<BR>Visual Studio generates the 
  code for your new class library project and opens the Class1.cs file for 
  editing. 
  <LI>In the Class1.cs file, change the name of the public class definition from 
  <B>Class1</B> to <B>ProductPhotosCollection</B>. <BR>This name is more 
  descriptive. 
  <LI>In Solution Explorer, right-click the name of your project 
  (<B>AWDataSource</B>), point to <B>Add</B>, and then click <B>New 
  Item</B>.<BR>The <B>Add New Item</B> dialog box opens. 
  <LI>Select <B>DataSet</B> from the list of templates, name the item 
  <B>ProductPhotos.xsd</B>, and then click <B>Add</B>. <BR>A <B>DataSet</B> is 
  added to your project in the form of a schema file and supporting class files, 
  and the schema file is opened for editing.<BR>A <B>DataSet</B> is an object 
  that contains data tables in which you can temporarily store data in-memory 
  for use in your running application. For more information, see <A 
  href="http://go.microsoft.com/fwlink/?LinkId=77627" target=_blank>Datasets in 
  Visual Studio Overview</A> on MSDN. 
  <LI>In <B>Server Explorer</B>, right-click <B>Data Connections</B>, and then 
  click <B>Add Connection</B>.<BR>The <B>Choose Data Source</B> dialog box 
  opens. 
  <LI>The <B>Data </B>s<B>ource</B> field should already list <B>Microsoft SQL 
  Server (SqlClient)</B>. <BR>
  <TABLE class="">
    <TBODY>
    <TR>
      <TD class=""><IMG alt=Tip 
        src="Expression Blend and Design  AdventureWorks Product Photos_files/Icon_note.png" 
        border=0></TD>
      <TD class=extra>If you are not going to use a SQL database, click the 
        <B>Change</B> button to select your alternative data source. The 
        following steps will not match what you will see in the <B>Choose Data 
        Source</B> dialog of Visual Studio.</TD></TR></TBODY></TABLE>
  <LI>In the <B>Server Name</B> field, enter the name of the SQL server that has 
  the <B>AdventureWorks</B> database installed. 
  <TABLE class="">
    <TBODY>
    <TR>
      <TD class=""><IMG alt=Tip 
        src="Expression Blend and Design  AdventureWorks Product Photos_files/Icon_note.png" 
        border=0></TD>
      <TD class=extra>If you are going to use a SQL database other than the 
        <B>AdventureWorks</B> database, then select the name of the server that 
        has your SQL database installed.</TD></TR></TBODY></TABLE>
  <LI>Under <B>Log on to the server</B>, select the authentication method that 
  is required to log onto your SQL server. You might have to contact the server 
  administrator for that information. <B>Windows Authentication</B> uses your 
  current logon credentials. <B>SQL Server Authentication</B> requires the user 
  name and password of the account that is configured to have access to your 
  database. 
  <LI>Under <B>Connect to a database</B>, select the <B>AdventureWorks</B> 
  database which will be visible only if your logon credentials are correct and 
  the <B>AdventureWorks</B> database is installed on the selected SQL server. 
  <LI>Click the <B>Test Connection</B> button.<BR>If the test connection does 
  not succeed, see your SQL server administrator for assistance. 
  <LI>Click <B>OK</B> to complete the creation of the data connection.<BR>In 
  <B>Server Explorer</B>, a new connection appears under the <B>Data 
  Connections</B> node named 
  <B><EM>&lt;servername&gt;</EM>.AdventureWorks.dbo</B>. 
  <LI>In <B>Server Explorer</B>, expand the new 
  <B><EM>&lt;servername&gt;</EM>.AdventureWorks.dbo</B> connection node, expand 
  the <B>Tables</B> node, and then locate the <B>ProductPhoto</B> table. With 
  the ProductPhotos.xsd file open on the design surface, drag the 
  <B>ProductPhoto</B> table from <B>Server Explorer</B> onto the design 
  surface.<BR>You now have a typed dataset which is capable of connecting to the 
  <B>AdventureWorks</B> database and returning the contents of the 
  <B>ProductPhoto</B> table. 
  <LI>In the Class1.cs file, add the following method inside the 
  <B>ProductPhotosCollection</B> class:<BR><PRE><CODE>&nbsp;&nbsp;&nbsp;&nbsp;private void GetData() 
&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductPhotosTableAdapters.ProductPhotoTableAdapter da = 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ProductPhotosTableAdapters.ProductPhotoTableAdapter(); 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductPhotos.ProductPhotoDataTable dt = da.GetData(); 
&nbsp;&nbsp;&nbsp;&nbsp;}</CODE></PRE>The <B>ProductPhotosTableAdapters</B> 
  namespace is defined in the ProductPhotos.Designer.cs file which was generated 
  by Visual Studio when you created the <B>ProductPhotos</B> 
  <B>DataSet</B>.<BR>You now have a method that will fill an instance of a 
  <B>ProductPhotos</B> <B>DataTable</B> with data when your application is run. 
  <LI>Build your project (<B>F6</B>) to make sure there are no errors.</LI></OL>
<UL 
style="LIST-STYLE-IMAGE: url(http://www.xamlshare.com/sparkle/images/rctutorials/main/up_arrow.gif); MARGIN-LEFT: 15px">
  <LI><A href="http://blogs.msdn.com/expression/articles/528008.aspx#top">Back 
  to top</A></LI></UL>
<H3><A class="" title=task2 name=task2></A>Task 2: Adapting the data collection 
to a WPF collection</H3>
<P>This procedure describes how to create a class library in Visual Studio 2005 
to convert data from a <B>DataTable</B> to an <B>ObservableCollection</B> so 
that Expression Blend (or any application that uses Windows Presentation 
Foundation) can bind to the data. You will define a <B>ProductPhoto</B> class to 
represent the data in a table row, add a collection of <B>ProductPhotos</B> to 
<B>ProductPhotosCollection</B> as a private member, then add a public accessor 
so that logic from outside the class can access it.</P>
<TABLE class="">
  <TBODY>
  <TR>
    <TD class=""><IMG alt=Tip 
      src="Expression Blend and Design  AdventureWorks Product Photos_files/Icon_tip.png" 
      border=0></TD>
    <TD class="">If you followed along with the previous task then you will 
      now have a <B>DataTable</B> instance to work with which contains data from 
      the <B>AdventureWorks</B> <B>ProductPhoto</B> database table. If you have 
      a <B>DataTable</B> or a <B>DataSet</B> filled from another source then 
      please adapt the data table name and field names in the following steps to 
      suit the data that you have.</TD></TR></TBODY></TABLE>
<OL>
  <LI>In Visual Studio, right-click your project name in Solution Explorer and 
  select <B>Add Reference</B>. In the <B>.NET</B> tab, select the 
  <B>WindowsBase</B> assembly. If you do not see the <B>WindowsBase</B> assembly 
  listed, you can select the <B>Browse</B> tab and locate the WindowsBase.dll 
  assembly in your <EM>%SystemDrive%</EM>\Program Files\Reference 
  Assemblies\Microsoft\Framework\v3.0 folder. Click <B>OK</B>.<BR>The 
  WindowsBase assembly implements the 
  <B>System.Collections.Object.ObservableCollection</B> class. 
  <LI>At the top of the Class1.cs file, add the following statement: <PRE><CODE>    using System.Collections.ObjectModel;</CODE></PRE>
  <LI>Still in the Class1.cs file, add the following <B>ProductPhoto</B> class 
  definition to the <B>AWDataSource</B> namespace so that you have a class to 
  work with in the following steps: <PRE><CODE>    public class ProductPhoto { }</CODE></PRE>
  <LI>Add the following member to <B>ProductPhotosCollection</B> class: <PRE><CODE>    private ObservableCollection&lt;ProductPhoto&gt; productPhotos = 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ObservableCollection&lt;ProductPhoto&gt;();</CODE></PRE>
  <LI>Add the following accessor method to the <B>ProductPhotosCollection</B> 
  class: <PRE><CODE>    public ObservableCollection&lt;ProductPhoto&gt; ProductPhotos 
&nbsp;&nbsp;&nbsp; { get { return this.productPhotos; } }</CODE></PRE>The next 
  steps involve copying the data from the <B>DataTable</B> into the 
  <B>ObservableCollection</B>. You don't need to copy every field so you will 
  only copy the ID, the modified date, and the two photos. 
  <LI>Right-click your project name in Solution Explorer and select <B>Add 
  Reference</B>. Add a reference to the <B>PresentationCore</B> assembly. 
  <LI>At the top of the Class1.cs file, add the following statements: <PRE><CODE>&nbsp;&nbsp;&nbsp;&nbsp;using System.Windows.Media; 
&nbsp;&nbsp;&nbsp;&nbsp;using System.Windows.Media.Imaging;</CODE></PRE>
  <LI>Add members to the <B>ProductPhoto</B> class so that the class looks like 
  the following:<BR><PRE><CODE>&nbsp;&nbsp;&nbsp;&nbsp;public class ProductPhoto
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Public Accessors to the private properties.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int ID { get { return id; } }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ImageSource ThumbNailPhoto { get { return thumbNailPhoto; } }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ImageSource LargePhoto { get { return largePhoto; } }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public DateTime ModifiedDate { get { return modifiedDate; } }

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Constructor.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ProductPhoto(int id, byte[] thumbNailPhoto, byte[] largePhoto,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DateTime modifiedDate)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.id = id;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.thumbNailPhoto = ByteArrayToImageSource(thumbNailPhoto);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.largePhoto = ByteArrayToImageSource(largePhoto);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.modifiedDate = modifiedDate;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Private properties.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private int id;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private ImageSource thumbNailPhoto;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private ImageSource largePhoto;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private DateTime modifiedDate;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Supporting method.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private ImageSource ByteArrayToImageSource(byte[] data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BitmapImage image = null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (null != data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image = new BitmapImage();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.BeginInit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.StreamSource = new System.IO.MemoryStream(data);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; image.EndInit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return image;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp; }</CODE></PRE>
  <LI>Add the following code to the <B>ProductPhotosCollection</B> class at the 
  end of the <B>GetData</B> method so that the method copies the 
  <B>DataTable</B> into the <B>ObservableCollection</B>:<BR><PRE><CODE>&nbsp;&nbsp;&nbsp;&nbsp;productPhotos.Clear(); 
&nbsp;&nbsp;&nbsp;&nbsp;foreach (ProductPhotos.ProductPhotoRow row in dt) 
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;productPhotos.Add(new ProductPhoto(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; row.ProductPhotoID, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; row.ThumbNailPhoto, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; row.LargePhoto, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; row.ModifiedDate)); 
&nbsp;&nbsp;&nbsp;&nbsp;} </CODE></PRE>
  <P>Now, as a convenient way of triggering the 
  <B>ProductsPhotosCollection.GetData</B> method, we can implement a 
  <B>Command</B>.</P>
  <LI>Right-click your project name in Solution Explorer, click <B>Add</B>, and 
  then click <B>Existing Item</B>. In the <B>Add Existing Item</B> dialog, 
  browse to the DelegateCommand.cs file in the Expression Blend samples folder, 
  <EM>%SystemDrive%</EM>\Program Files\Microsoft Expression\Blend 
  1.0\Samples\<EM>&lt;language&gt;</EM>\AnimationStudio and then click 
  <B>Add</B>. Make sure to change the namespace (<B>AWDataSource</B>) to match 
  your own. <BR>The code in the DelegateCommand.cs file allows you to bind any 
  command to your method. 
  <LI>In the Class1.cs file, add the following member to the 
  <B>ProductPhotosCollection</B> class: 
  <BR><CODE>&nbsp;&nbsp;&nbsp;&nbsp;private DelegateCommand 
  getDataCommand;</CODE> 
  <LI>Add the following constructor to the <B>ProductPhotosCollection</B> class 
  to initialize the command: <BR><PRE><CODE>&nbsp;&nbsp;&nbsp;&nbsp;public ProductPhotosCollection()
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getDataCommand = new DelegateCommand(delegate() { GetData(); }); 
&nbsp;&nbsp;&nbsp; }</CODE></PRE>
  <LI>Finally, expose the command by adding the following accessor method to the 
  <B>ProductPhotosCollection</B> class: <BR><CODE>&nbsp;&nbsp;&nbsp;&nbsp;public 
  DelegateCommand GetDataCommand { get { return getDataCommand; } }</CODE> 
  <LI>Build your project (<B>F6</B>) to make sure there are no errors.<BR>You 
  now have a class which may be used as a data source in an Expression Blend (or 
  any WPF) application. This class will either be <B>ProductPhotosCollection</B> 
  or an equivalent class if you defined your own. </LI></OL>
<UL 
style="LIST-STYLE-IMAGE: url(http://www.xamlshare.com/sparkle/images/rctutorials/main/up_arrow.gif); MARGIN-LEFT: 15px">
  <LI><A href="http://blogs.msdn.com/expression/articles/528008.aspx#top">Back 
  to top</A></LI></UL>
<H3><A class="" title=task3 name=task3></A>Task 3: Binding to the data source in 
Expression Blend</H3>
<P>This procedure describes how to create a very simple Expression Blend 
application with a ListBox control that is bound to your data source. The 
application uses a common UI design pattern known as a <EM>master-details</EM> 
view. The left pane, called the master pane, will contain the product list. 
Whenever you select a product in this pane, the details about that product will 
be displayed in the right pane, called the details pane. Updating the content of 
one pane when an element is selected in another pane is accomplished by using 
<EM>data synchronization</EM> between controls.</P>
<OL>
  <LI>In Expression Blend, click <B>File</B>, and then click <B>New Project</B>. 
  <BR>This opens the <B>Create New Project</B> window. 
  <LI>Select the <B>Standard Application (.exe)</B> project type. <BR>This 
  creates a project for a Windows application that can be built and run as you 
  are designing it. The other option is a <B>Control Library </B>project which 
  is used for designing controls that can be used in other Windows applications. 

  <LI>In the <B>Name</B> textbox, type <B>AWProductPhotos</B>. Leave 
  <B>Language</B> set to the default as there is no handwritten code in this 
  tutorial. Click <B>OK</B>.<BR>Expression Blend loads your new project and 
  displays it for editing. 
  <TABLE class="">
    <TBODY>
    <TR>
      <TD class=""><IMG alt=Tip 
        src="Expression Blend and Design  AdventureWorks Product Photos_files/Icon_note.png" 
        border=0></TD>
      <TD class="">If you previously had a project open, you might first see a 
        dialog box asking if you want to save or discard your current project 
        before opening the new one. </TD></TR></TBODY></TABLE>
  <LI>After your new project is loaded into memory, save it to disk. Click 
  <B>File</B>, and click <B>Save All</B>. The <B>Name</B> textbox should already 
  include the name <B>AWProductPhotos</B> so click <B>OK</B>. 
  <TABLE class="">
    <TBODY>
    <TR>
      <TD class=""><IMG alt=Tip 
        src="Expression Blend and Design  AdventureWorks Product Photos_files/Icon_note.png" 
        border=0></TD>
      <TD class="">As you work in Expression Blend, your changes take place in 
        memory and not on your hard drive, so be sure to save early and often. 
        <BR>For more information, see the topic "Managing Your Work" in the 
        Expression Blend&nbsp;User Guide (F1).</TD></TR></TBODY></TABLE>
  <LI>In the <B>Project</B> menu, click <B>Add Reference</B>. In the <B>Add 
  Reference</B> dialog that appears, browse to the add a reference to the 
  AWDataSource.dll file that you built at the end of task 2. The 
  AWDataSource.dll file will likely be in the bin/Debug folder of your 
  AWDataSource project. Click <B>OK</B>. <BR>The AWDataSource.dll is now a part 
  of your project. If you expand the <B>References</B> node under <B>Files</B> 
  in the <B>Projects</B> panel, you'll see a reference to the AWDataSource.dll. 
  <TABLE class="">
    <TBODY>
    <TR>
      <TD class=""><IMG alt=Tip 
        src="Expression Blend and Design  AdventureWorks Product Photos_files/Icon_tip.png" 
        border=0></TD>
      <TD class="">If you have the Expression Blend <B>AWProductPhotos</B> 
        sample project open in a second Expression Blend window for comparison, 
        you might notice that the project includes a reference to the 
        AWDataSource.csproj file instead of the AWDataSource.dll file. If you 
        would rather add a reference to the .csproj file in your own project, 
        you can do that by opening your AWProductPhotos project in Visual Studio 
        2005 and adding a reference to the AWDataSource.csproj file. 
    </TD></TR></TBODY></TABLE>
  <LI>Under <B>Data</B> in the <B>Project</B> panel, click the <B>+ CLR 
  Object</B> button.<BR>The <B>Add CLR Object Data Source</B> dialog is 
  displayed. 
  <LI>Expand the <B>AWDataSource</B> node, select 
  <B>ProductPhotosCollection</B>, and then click <B>OK</B>.<BR>Under <B>Data</B> 
  in the <B>Project</B> panel, a data source named 
  <B>ProductPhotosCollectionDS</B> has been added to your project. The 
  <B>ProductPhotosCollectionDS</B> data source represents the structure of an 
  instance of the CLR class you referenced. Expand 
  <B>ProductPhotosCollectionDS</B> and <B>ProductPhotosCollection</B> to see the 
  structure. In a later step in this task, you will drag data onto the artboard 
  from under <B>Data</B> in the <B>Project</B> panel to create new controls. 
  <LI>Under <B>Objects and Timeline</B> in the <B>Interaction</B> panel, 
  double-click <B>LayoutRoot</B> to activate it. <BR>Notice that when you 
  activate the element, a yellow bounding box appears around its name. This 
  element might have already been activated. 
  <TABLE class="">
    <TBODY>
    <TR>
      <TD class=""><IMG alt=Tip 
        src="Expression Blend and Design  AdventureWorks Product Photos_files/Icon_tip.png" 
        border=0></TD>
      <TD class="">When you want to add child elements to an element or do 
        other special operations, double-click the parent element under 
        <B>Objects and Timeline</B> in the <B>Interaction</B> panel and then add 
        the child element. This action is called <EM>activating</EM>. The 
        activated element is identified by a yellow bounding box around the 
        element name.<BR>When you want to change the properties of an element, 
        click the element name once under <B>Objects and Timeline</B> in the 
        <B>Interaction</B> panel. This action is called <EM>selection</EM>. The 
        selected element is identified by a highlighted background color.<BR>You 
        can select an element without activating it.</TD></TR></TBODY></TABLE>
  <LI>In the <B>Toolbox</B>, click the <B>Selection</B> tool <IMG 
  class=buttonart alt="Selection tool" 
  src="Expression Blend and Design  AdventureWorks Product Photos_files/tool_selection_on_24x24.png">. 
  On the artboard, move the mouse pointer over the thick blue ruler area at the 
  top of <B>LayoutRoot</B>. An orange column ruler will follow your mouse 
  pointer and indicate where a new column divider would be placed should you 
  click. <BR>Click to create a new column divider, making the left-hand column 
  about the same width as the right-hand column. The left-hand column will 
  contain a list of product photo thumbnails and the right-hand column will 
  contain a large photo representing the selected list item.<BR>A blue column 
  divider appears inside <B>LayoutRoot</B>.<BR>
  <TABLE class="">
    <TBODY>
    <TR>
      <TD class=""><IMG alt=Tip 
        src="Expression Blend and Design  AdventureWorks Product Photos_files/Icon_tip.png" 
        border=0></TD>
      <TD class="">To be able to see all of the LayoutRoot element on the 
        artboard, you might have to zoom out. To zoom out, enter a zoom value in 
        the text box at the bottom of the artboard <IMG class=buttonart 
        alt="Zoom textbox" 
        src="Expression Blend and Design  AdventureWorks Product Photos_files/artboard_zoomtextbox.png">, 
        click the arrow next to the zoom value, or rotate your mouse wheel while 
        holding down the <B>Ctrl</B> key.</TD></TR></TBODY></TABLE>
  <LI>On the artboard, move the mouse pointer over the thick blue ruler area on 
  the left side of <B>LayoutRoot</B>. Click to create a new row divider, making 
  the top row large enough to fit a button into. Click the open padlock icon 
  that appears next to the top row to lock the row to a fixed height.<BR>
  <TABLE class="">
    <TBODY>
    <TR>
      <TD class=""><IMG alt=Tip 
        src="Expression Blend and Design  AdventureWorks Product Photos_files/Icon_tip.png" 
        border=0></TD>
      <TD class="">
        <P>If you are curious to see the results of the action described in the 
        previous step, right-click <B>LayoutRoot</B> Under <B>Objects and 
        Timeline</B> in the <B>Interaction</B> panel and click <B>View XAML</B>. 
        This switches your artboard to the <B>XAML</B> view with the 
        <B>LayoutRoot</B> code highlighted. To see it better, click 
        <B>Window</B> and click <B>Hide Panels</B> (F4 or TAB). <BR>A 
        <CODE>&lt;Grid.ColumnDefinitions&gt;</CODE> section and a 
        <CODE>&lt;Grid.RowDefinitions&gt;</CODE> section have been added to the 
        <CODE>&lt;Grid&gt;</CODE> element that represents the <B>LayoutRoot</B>. 
        The <B>Width</B> and <B>Height</B> attributes use <EM>star-sizing</EM> 
        which means that the sizes of the columns are proportional to each 
        other. For example, a <B>Width</B> of "2*" will produce a column that is 
        twice the size of a column whose <B>width</B> is set to "*". The row 
        that you locked does not use star-sizing because its height is 
        fixed.<BR>When you are finished looking at the XAML, remember to switch 
        back to <B>Design</B> view and restore the panels (F4 or 
    TAB).</P></TD></TR></TBODY></TABLE>
  <LI>Under <B>Data</B> in the <B>Project</B> panel, drag <B>GetDataCommand</B> 
  (from under <B>ProductPhotosCollection</B>) into the top-left grid cell on the 
  artboard. In the drop-down list which appears, click <B>Button</B>.<BR>The 
  <B>Create Data Binding</B> dialog is displayed. 
  <LI>In <B>Select Field</B>, choose <B>Command</B> and click <B>OK</B>. <BR>A 
  new <B>Button</B> has been created which is bound to a the 
  <B>GetDataCommand</B> accessor method in your <B>AWDataSource</B> class. At 
  run-time, when the button is clicked, it will cause the <B>GetDataCommand</B> 
  to be executed on the <B>ProductPhotosCollection</B> data source and, as you 
  will recall from task 2, the implementation of that command simply calls the 
  <B>GetData</B> method. 
  <TABLE class="">
    <TBODY>
    <TR>
      <TD class=""><IMG alt=Tip 
        src="Expression Blend and Design  AdventureWorks Product Photos_files/Icon_tip.png" 
        border=0></TD>
      <TD class="">
        <P>You can move and resize the new button on the artboard by clicking 
        the <B>Selection</B> tool in the <B>Toolbox</B>, selecting the new 
        button on the artboard or under <B>Objects and Timeline</B>, and then 
        using the blue adorners on the artboard.</P></TD></TR></TBODY></TABLE>
  <TABLE class="">
    <TBODY>
    <TR>
      <TD class=""><IMG alt=Tip 
        src="Expression Blend and Design  AdventureWorks Product Photos_files/Icon_tip.png" 
        border=0></TD>
      <TD class="">
        <P>Data bindings can be accessed from the <B>Properties</B> panel. To 
        reopen the <B>Create Data Binding</B> dialog after you have already 
        created the data binding, select the <B>Button</B> under <B>Objects and 
        Timeline</B>, and in the <B>Miscellaneous</B> category of the 
        <B>Properties</B> panel, click <B>Advanced Property Options</B> beside 
        the <B>Command</B> property, and then click <B>Data 
    Binding</B>.</P></TD></TR></TBODY></TABLE>
  <LI>With <B>[Button]</B> selected under <B>Objects and Timeline</B>, look 
  under <B>Common Properties</B> in the <B>Properties</B> panel. Set the 
  <B>Content</B> property to <B>Get Product Photos</B>. 
  <LI>Move and resize <B>[Button]</B> by clicking the <B>Selection</B> tool in 
  the <B>Toolbox</B> and using the blue adorners on the artboard. Make 
  <B>[Button]</B> fit into the top-left grid cell. Then, under <B>Layout</B> in 
  the <B>Properties</B> panel, set the following properties:<BR>
  <UL>
    <LI>Set the <B>Width</B> and <B>Height</B> properties to <B>Auto</B>. 
    <LI>Set the <B>Margin</B> properties to 0. 
    <LI>Set the <B>HorizontalAlignment</B> and <B>VerticalAlignment</B> 
    properties to <B>Center</B>.</LI></UL>&nbsp;These settings ensure that the 
  button is only as large as it needs to be to fit the text in the 
  <B>Content</B> pr property, and centers the button in the grid cell. 
  <LI>Under <B>Data</B> in in the <B>Project</B> panel, drag <B>ProductPhotos 
  (Array)</B> into the lower-left grid cell on the artboard. In the drop-down 
  list which appears, click <B>ListBox</B>.<BR>The <B>Create Data Binding</B> 
  dialog is displayed. 
  <LI>In <B>Select Field</B>, choose <B>ItemsSource</B>, and then click 
  <B>OK</B>. <BR>The <B>Create Data Template</B> dialog is displayed. 
  <TABLE class="">
    <TBODY>
    <TR>
      <TD class=""><IMG alt=Tip 
        src="Expression Blend and Design  AdventureWorks Product Photos_files/Icon_tip.png" 
        border=0></TD>
      <TD class="">A <I>data template</I> is essentially a tree of UI elements 
        which can contain bindings to data. Whenever data of a particular type 
        needs to be displayed, the appropriate data template is selected and the 
        template stamps out a new copy of its tree of elements complete with 
        updated data to display to the user. Each item displayed in the 
        <B>ListBox</B> element is an object of the <B>ProductPhoto</B> type you 
        implemented in task 2.</TD></TR></TBODY></TABLE>
  <LI>Select the <B>New Data Template and Display Fields</B> radio 
  button.<BR>This option defines the structure of the data type you dragged from 
  under <B>Data</B> in the <B>Project</B> panel, for example, each element in a 
  collection of <B>ProductPhoto</B> objects. You can now bind to any parts of 
  the data structure and so define what the data template's tree of elements 
  looks like. Beside each data item is a drop-down list which determines the 
  element to be used to present the data field (StackPanel and TextBlock 
  elements). Beside that is a label indicating to which of the element's 
  properties the data item will be bound. &nbsp; 
  <LI>Deselect <B>LargePhoto</B> because you do not want to display it in the 
  <STRONG>ListBox</STRONG>. 
  <LI>The <B>ModifiedDate</B> data field is of type <B>StackPanel</B> and you 
  need to change the control to an element type more appropriate for displaying 
  that data type. In the drop-down list beside <B>ModifiedDate</B>, choose 
  <B>TextBlock</B> and notice that the chosen property of the TextBlock 
  automatically changes to <B>Text</B>. 
  <LI>The <B>ThumbNailPhoto</B> data field is of type <B>ImageSource</B> and you 
  need to change the control to an element type more appropriate for displaying 
  that data type. In the drop-down list beside <B>ThumbNailPhoto</B>, choose 
  <B>Image</B> and notice that the chosen property of the Image automatically 
  changes to <B>Source</B>. 
  <LI>Click <B>OK</B>.<BR>A new <B>ListBox</B> has been inserted into the 
  document. You will not see data in the <STRONG>ListBox</STRONG> until you have 
  clicked the <STRONG>Get Product Photos</STRONG> button at runtime. 
  <TABLE class="">
    <TBODY>
    <TR>
      <TD class=""><IMG alt=Tip 
        src="Expression Blend and Design  AdventureWorks Product Photos_files/Icon_tip.png" 
        border=0></TD>
      <TD class="">
        <P>A data template is a resource. To edit the 
        <B>ProductPhotosTemplate</B> data template after you have created it, 
        expand the <B>Window1.xaml</B> node in the <B>Resources</B> panel, 
        expand <B>Window</B>, and then click the button beside 
        <B>ProductPhotosTemplate</B>. </P></TD></TR></TBODY></TABLE>
  <LI>With the <B>[ListBox]</B> element selected under <B>Objects and 
  Timeline</B> in the <B>Interaction</B> panel, under <B>Layout</B> in the 
  <B>Properties</B> panel to set the following properties:<BR>
  <UL>
    <LI>Set the <B>Width</B> and <B>Height</B> properties to <B>Auto</B>. 
    <LI>Set the <B>Margin</B> properties to 8. 
    <LI>Set the <B>HorizontalAlignment</B> and <B>VerticalAlignment</B> 
    properties to <B>Center</B>.</LI></UL>These settings ensure that the 
  <B>ListBox</B> almost entirely fills the lower-left grid cell<B>.</B> 
  <LI>In the <B>Toolbox</B>, select <B>Image</B> <IMG class=buttonart 
  alt="Image control" 
  src="Expression Blend and Design  AdventureWorks Product Photos_files/asset_image_24x24_on.png">.<BR>
  <TABLE class="">
    <TBODY>
    <TR>
      <TD class=""><IMG alt=Tip 
        src="Expression Blend and Design  AdventureWorks Product Photos_files/Icon_tip.png" 
        border=0></TD>
      <TD class="">If you do not see the <B>Image</B> control in the 
        <B>Toolbox</B>, you can locate it by clicking the <B>Asset Library</B> 
        button <IMG class=buttonart alt="Asset Library button" 
        src="Expression Blend and Design  AdventureWorks Product Photos_files/tool_assetlib_on_24x24.png">&nbsp;and 
        selecting the <STRONG>Show All</STRONG> checkbox. After you select a 
        control from the Asset Library, its icon will appear in the 
        <B>Toolbox</B> above the <B>Asset Library</B> 
button.</TD></TR></TBODY></TABLE>
  <LI>On the artboard, draw a new <B>Image</B> in the lower-right grid cell, 
  almost filling the entire cell. 
  <LI>With <B>[Image]</B> selected under <B>Objects and Timeline</B>, look under 
  <B>Common Properties</B> in the <B>Properties</B> panel. Click the name of the 
  <B>Source</B> property, and then in the drop-down list that appears, select 
  <B>Data Binding</B>.<BR>The <B>Create Data Binding</B> dialog box is 
  displayed. 
  <LI>Select the <B>Element Property</B> tab because you are going to bind to a 
  property of the <B>[ListBox]</B> element. 
  <LI>Under <B>Scene Elements</B>, expand <B>Window</B> and <B>LayoutRoot</B> 
  and the select your <B>ListBox</B> (<B>[System.WIndows.Controls.ListBox]</B>). 

  <LI>In the <B>Show</B> drop-down list, select <B>All Properties</B>. <BR>This 
  displays all properties that are available to be bound to, not just those of 
  the same data type as the <B>Source</B> property (String). 
  <LI>Under <B>Properties</B>, select <B>SelectedItem : (Object)</B>. 
  <LI>Select the <B>Use a custom path expression</B> checkbox. The expression is 
  currently <B>SelectedItem</B>. Change it to <B>SelectedItem.LargePhoto</B> so 
  that we are binding to the <B>LargePhoto</B> member of the <B>ProductPhoto</B> 
  object that is currently selected in the ListBox. Click <B>Finish</B>. 
  <LI>On the <B>Project</B> menu click <B>Test Project</B> (or press <B>F5</B>). 
  When the application starts, test your application by clicking <B>Get Product 
  Photos</B>. When the list box loads with data, step through its items and 
  verify the large photo appears in the right-hand column.</LI></OL>
<UL 
style="LIST-STYLE-IMAGE: url(http://www.xamlshare.com/sparkle/images/rctutorials/main/up_arrow.gif); MARGIN-LEFT: 15px">
  <LI><A href="http://blogs.msdn.com/expression/articles/528008.aspx#top">Back 
  to top</A></LI></UL>
<H3><A class="" title=#next name=#next></A>Where to go from here</H3>
<UL>
  <LI>Style the elements in your project by setting the properties under 
  <B>Brushes</B> in the <B>Properties</B> panel or by defining control 
  templates. For more information, see the section "Themes and simple styles" 
  and "Styles and templates" in the Expression Blend User Guide (F1). 
  <LI>Develop the <B>AWProductPhotos</B> and <B>AWDataSource</B> projects 
  further to update and remove records from the database.</LI></UL>
<UL 
style="LIST-STYLE-IMAGE: url(http://www.xamlshare.com/sparkle/images/rctutorials/main/up_arrow.gif); MARGIN-LEFT: 15px">
  <LI><A href="http://blogs.msdn.com/expression/articles/528008.aspx#top">Back 
  to top</A></LI></UL></DIV>
<DIV><SPAN id=ctl00___ctl00___ctl01___Entry___InlineTagEditorPanel>Filed under: 
<A 
href="http://blogs.msdn.com/expression/archive/tags/Expression+Interactive+Designer/default.aspx" 
rel=tag>Expression Interactive Designer</A></SPAN><INPUT 
id=ctl00___ctl00___ctl01___Entry___InlineTagEditorPanel_State type=hidden 
value=nochange 
name=ctl00$_$ctl00$_$ctl01$_$Entry$_$InlineTagEditorPanel></DIV></DIV>
<DIV id=postToolbar>
<H2 class=CommonSubTitle>Comment Notification</H2>
<P>If you would like to receive an email when updates are made to this post, 
please register <A id=ctl00___ctl00___ctl01___DetailedSubBar___RegisterLink 
href="http://blogs.msdn.com/user/CreateUser.aspx?ReturnUrl=/expression/articles/528008.aspx">here</A> 
</P>
<P>Subscribe to this post's comments using <A 
id=ctl00___ctl00___ctl01___DetailedSubBar___CommentRssLink 
href="http://blogs.msdn.com/expression/commentrss.aspx?PostID=528008">RSS</A> 
</P></DIV>
<H3>Comments </H3>
<DIV id=comments>
<DIV class=comment>
<H4><A id=ctl00___ctl00___ctl01___Comments___Comments_ctl01_PermaLink 
title=permalink 
href="http://blogs.msdn.com/expression/pages/adventureworks-product-photos.aspx#528042">#</A> 
AdventureWorks Product Photos - a new EID tutorial<A name=528042></A> </H4>
<DIV class=commentssubhead>Wednesday, February 08, 2006 6:48 PM by <A 
id=ctl00___ctl00___ctl01___Comments___Comments_ctl01_NameLink title=TrackBack 
href="http://blogs.msdn.com/expression/archive/2006/02/08/528041.aspx" 
target=_blank rel=nofollow>The Expression Designers: Graphic, Interactive, 
Web</A> <SPAN class=commentspan></SPAN></DIV>
<DIV class=commentsbody>We have published a new Expression Interactive Designer 
tutorial targeting the January 2006 CTP. It's... </DIV></DIV>
<DIV class=comment>
<H4><A id=ctl00___ctl00___ctl01___Comments___Comments_ctl02_PermaLink 
title=permalink 
href="http://blogs.msdn.com/expression/pages/adventureworks-product-photos.aspx#528257">#</A> 
re: AdventureWorks Product Photos<A name=528257></A> </H4>
<DIV class=commentssubhead>Wednesday, February 08, 2006 11:26 PM by <A 
id=ctl00___ctl00___ctl01___Comments___Comments_ctl02_NameLink title=Sebastian 
target=_blank>Sebastian</A> <SPAN class=commentspan></SPAN></DIV>
<DIV class=commentsbody>Can this tutorial be done using Visual 2005 Express 
edition? </DIV></DIV>
<DIV class=comment>
<H4><A id=ctl00___ctl00___ctl01___Comments___Comments_ctl03_PermaLink 
title=permalink 
href="http://blogs.msdn.com/expression/pages/adventureworks-product-photos.aspx#528484">#</A> 
re: AdventureWorks Product Photos<A name=528484></A> </H4>
<DIV class=commentssubhead>Thursday, February 09, 2006 7:10 AM by <A 
id=ctl00___ctl00___ctl01___Comments___Comments_ctl03_NameLink title=cnSoftware 
target=_blank>cnSoftware</A> <SPAN class=commentspan></SPAN></DIV>
<DIV class=commentsbody>Nice tutorial. <BR>I have successfully practiced the 
tutorial and tested it use EID. But when I deploy this project as WBA, <BR>I get 
an error when I click GetData Button. </DIV></DIV>
<DIV class=comment>
<H4><A id=ctl00___ctl00___ctl01___Comments___Comments_ctl04_PermaLink 
title=permalink 
href="http://blogs.msdn.com/expression/pages/adventureworks-product-photos.aspx#528972">#</A> 
re: AdventureWorks Product Photos<A name=528972></A> </H4>
<DIV class=commentssubhead>Thursday, February 09, 2006 6:22 PM by <A 
id=ctl00___ctl00___ctl01___Comments___Comments_ctl04_NameLink 
title="Unni Ravindranathan" target=_blank>Unni Ravindranathan</A> <SPAN 
class=commentspan></SPAN></DIV>
<DIV class=commentsbody>What is the error that you are getting? You can click 
the "More information" button to see the call stack. I am guessing that querying 
the Database causes an operation that is outside the Sandbox and hence there is 
a SecurityException being thrown. <BR><BR>Thanks, <BR>Unni </DIV></DIV>
<DIV class=comment>
<H4><A id=ctl00___ctl00___ctl01___Comments___Comments_ctl05_PermaLink 
title=permalink 
href="http://blogs.msdn.com/expression/pages/adventureworks-product-photos.aspx#529163">#</A> 
re: AdventureWorks Product Photos<A name=529163></A> </H4>
<DIV class=commentssubhead>Thursday, February 09, 2006 11:26 PM by <A 
id=ctl00___ctl00___ctl01___Comments___Comments_ctl05_NameLink title=cnSoftware 
target=_blank>cnSoftware</A> <SPAN class=commentspan></SPAN></DIV>
<DIV class=commentsbody>I have not checked the call stack yet. But I think your 
assumption is reasonable. Maybe I should use the project downloaded to have a 
test instead of the one created by myself. <BR>BTW: The download package does 
not seem to include the .sql file. Have any plan to add in? </DIV></DIV>
<DIV class=comment>
<H4><A id=ctl00___ctl00___ctl01___Comments___Comments_ctl06_PermaLink 
title=permalink 
href="http://blogs.msdn.com/expression/pages/adventureworks-product-photos.aspx#531562">#</A> 
re: AdventureWorks Product Photos<A name=531562></A> </H4>
<DIV class=commentssubhead>Monday, February 13, 2006 11:54 PM by <A 
id=ctl00___ctl00___ctl01___Comments___Comments_ctl06_NameLink title=cnSoftware 
target=_blank>cnSoftware</A> <SPAN class=commentspan></SPAN></DIV>
<DIV class=commentsbody>Sorry, I read the tutorial again and find the datasource 
is shipped with SqlServer 2005 Express.:) </DIV></DIV>
<DIV class=comment>
<H4><A id=ctl00___ctl00___ctl01___Comments___Comments_ctl07_PermaLink 
title=permalink 
href="http://blogs.msdn.com/expression/pages/adventureworks-product-photos.aspx#543840">#</A> 
Samples and Tutorials Gallery - Expression Interactive Designer March 06 CTP<A 
name=543840></A> </H4>
<DIV class=commentssubhead>Saturday, March 04, 2006 10:23 PM by <A 
id=ctl00___ctl00___ctl01___Comments___Comments_ctl07_NameLink title=TrackBack 
href="http://blogs.msdn.com/expression/articles/543834.aspx" target=_blank 
rel=nofollow>The Expression Designers: Graphic, Interactive, Web</A> <SPAN 
class=commentspan></SPAN></DIV>
<DIV class=commentsbody>To view a sample or tutorial, click on one of thumbnails 
or links below. Some samples also have supporting... </DIV></DIV>
<DIV class=comment>
<H4><A id=ctl00___ctl00___ctl01___Comments___Comments_ctl08_PermaLink 
title=permalink 
href="http://blogs.msdn.com/expression/pages/adventureworks-product-photos.aspx#702296">#</A> 
HowTo databind business object(s) to Expression Interactive Designer.<A 
name=702296></A> </H4>
<DIV class=commentssubhead>Wednesday, August 16, 2006 5:57 AM by <A 
id=ctl00___ctl00___ctl01___Comments___Comments_ctl08_NameLink title=TrackBack 
href="http://blog.vittrup-graversen.dk/archive/2006/08/16/HowTo-databind-business-object_2800_s_2900_--to-Expression-Interactive-Designer_2E00_.aspx" 
target=_blank rel=nofollow>vittrup-graversen.dk</A> <SPAN 
class=commentspan></SPAN></DIV>
<DIV class=commentsbody>Unni , the Program Manager on the Expression Interactive 
Designer team, pointed me in this direction </DIV></DIV>
<DIV class=comment>
<H4><A id=ctl00___ctl00___ctl01___Comments___Comments_ctl09_PermaLink 
title=permalink 
href="http://blogs.msdn.com/expression/pages/adventureworks-product-photos.aspx#1915751">#</A> 
Microsoft Expression : AdventureWorks Product Photos<A name=1915751></A> </H4>
<DIV class=commentssubhead>Monday, March 19, 2007 8:49 PM by <A 
id=ctl00___ctl00___ctl01___Comments___Comments_ctl09_NameLink title=TrackBack 
href="http://blogs.msdn.com/expression/pages/adventureworks-product-photos.aspx" 
target=_blank rel=nofollow>Microsoft Expression : AdventureWorks Product 
Photos</A> <SPAN class=commentspan></SPAN></DIV>
<DIV class=commentsbody>
<P>PingBack from <A 
href="http://blogs.msdn.com/expression/pages/adventureworks-product-photos.aspx" 
target=_new 
rel=nofollow>http://blogs.msdn.com/expression/pages/adventureworks-product-photos.aspx</A></P></DIV></DIV></DIV>
<DIV id=commentform>
<H3>Leave a Comment</H3>
<DL>
  <DT id=ctl00___ctl00___ctl01___form___NameTitle><LABEL 
  for=ctl00___ctl00___ctl01___form___tbName>Name</LABEL> 
  <EM>(required)</EM><SPAN 
  id=ctl00___ctl00___ctl01___form___Requiredfieldvalidator2 
  style="VISIBILITY: hidden; COLOR: red">*</SPAN>
  <DD id=ctl00___ctl00___ctl01___form___NameDesc><INPUT class=smallbox 
  id=ctl00___ctl00___ctl01___form___tbName 
  name=ctl00$_$ctl00$_$ctl01$_$form$_$tbName> 
  <DT><LABEL for=ctl00___ctl00___ctl01___form___tbUrl>Your URL</LABEL> 
  <EM>(optional</EM>) 
  <DD><INPUT class=smallbox id=ctl00___ctl00___ctl01___form___tbUrl 
  name=ctl00$_$ctl00$_$ctl01$_$form$_$tbUrl> 
  <DT><LABEL for=ctl00___ctl00___ctl01___form___tbComment>Comments</LABEL> 
  <EM>(required)</EM><SPAN 
  id=ctl00___ctl00___ctl01___form___Requiredfieldvalidator3 
  style="VISIBILITY: hidden; COLOR: red">*</SPAN> 
  <DD><TEXTAREA id=ctl00___ctl00___ctl01___form___tbComment name=ctl00$_$ctl00$_$ctl01$_$form$_$tbComment rows=5 cols=25></TEXTAREA> 

  <DT><INPUT id=ctl00___ctl00___ctl01___form___chkRemember type=checkbox 
  name=ctl00$_$ctl00$_$ctl01$_$form$_$chkRemember><LABEL 
  for=ctl00___ctl00___ctl01___form___chkRemember>Remember Me?</LABEL> 
  <DT><INPUT id=ctl00___ctl00___ctl01___form___btnSubmit onclick='javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions("ctl00$_$ctl00$_$ctl01$_$form$_$btnSubmit", "", true, "", "", false, false))' type=submit value=Submit name=ctl00$_$ctl00$_$ctl01$_$form$_$btnSubmit> 
  </DT></DL></DIV></DIV></DIV>
<DIV id=contentfooter>&nbsp;</DIV></DIV>
<DIV id=footer></DIV></DIV></DIV>
<SCRIPT type=text/javascript>
<!--
var Page_Validators =  new Array(document.getElementById("ctl00___ctl00___ctl01___form___Requiredfieldvalidator2"), document.getElementById("ctl00___ctl00___ctl01___form___Requiredfieldvalidator3"));
// -->
</SCRIPT>

<SCRIPT type=text/javascript>
<!--
var ctl00___ctl00___ctl01___form___Requiredfieldvalidator2 = document.all ? document.all["ctl00___ctl00___ctl01___form___Requiredfieldvalidator2"] : document.getElementById("ctl00___ctl00___ctl01___form___Requiredfieldvalidator2");
ctl00___ctl00___ctl01___form___Requiredfieldvalidator2.controltovalidate = "ctl00___ctl00___ctl01___form___tbName";
ctl00___ctl00___ctl01___form___Requiredfieldvalidator2.errormessage = "*";
ctl00___ctl00___ctl01___form___Requiredfieldvalidator2.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00___ctl00___ctl01___form___Requiredfieldvalidator2.initialvalue = "";
var ctl00___ctl00___ctl01___form___Requiredfieldvalidator3 = document.all ? document.all["ctl00___ctl00___ctl01___form___Requiredfieldvalidator3"] : document.getElementById("ctl00___ctl00___ctl01___form___Requiredfieldvalidator3");
ctl00___ctl00___ctl01___form___Requiredfieldvalidator3.controltovalidate = "ctl00___ctl00___ctl01___form___tbComment";
ctl00___ctl00___ctl01___form___Requiredfieldvalidator3.errormessage = "*";
ctl00___ctl00___ctl01___form___Requiredfieldvalidator3.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00___ctl00___ctl01___form___Requiredfieldvalidator3.initialvalue = "";
// -->
</SCRIPT>

<SCRIPT language=javascript type=text/javascript>
<!--
function KeyDownHandlerctl00___ctl00___bt___ws___SearchButton(event)
{
	if (event.keyCode == 13)
	{
		event.returnValue = false;
		event.cancel = true;
     __doPostBack('ctl00$_$ctl00$_$bt$_$ws$_$SearchButton','')	}
}

//-->
</SCRIPT>
<!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
<rdf:Description
rdf:about="http://blogs.msdn.com/expression/pages/adventureworks-product-photos.aspx"
dc:identifier="http://blogs.msdn.com/expression/pages/adventureworks-product-photos.aspx"
dc:title="AdventureWorks Product Photos"
trackback:ping="http://blogs.msdn.com/expression/trackback.aspx?PostID=528008" />
</rdf:RDF>
-->
<SCRIPT type=text/javascript>
<!--
var Page_ValidationActive = false;
if (typeof(ValidatorOnLoad) == "function") {
    ValidatorOnLoad();
}

function ValidatorOnSubmit() {
    if (Page_ValidationActive) {
        return ValidatorCommonOnSubmit();
    }
    else {
        return true;
    }
}
// -->
</SCRIPT>
</FORM></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0034)http://www.beacosta.com/blog/?p=35 -->
<HTML xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Beatriz Costa » How should I data bind a Polygon’s Points to a data source?</TITLE>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<META content="MSHTML 6.00.2900.3199" name=GENERATOR><!-- leave this for stats --><!-- Editable Meta Tags -->
<META content="" name=description>
<META content="" name=keywords>
<META content="Sreejith - GFXedit.com" name=author>
<META content="Your Name" name=copyright>
<META content="WordPress 2.2.2" name=generator>
<META content=index,follow name=robots><!-- Meta Tags End--><!-- Style Sheet -->
<STYLE type=text/css media=screen>@import url( http://www.beacosta.com/blog/wp-content/themes/darkpad-10/style.css );
</STYLE>
<!-- Style Sheet End --><!-- Includes -->
<SCRIPT src="" type=text/javascript></SCRIPT>

<SCRIPT src="" type=text/javascript></SCRIPT>
<!-- End Includes --><!-- Feed and Ping URLS--><LINK title="RSS 2.0" 
href="http://www.beacosta.com/blog/?feed=rss2" type=application/rss+xml 
rel=alternate><LINK title="RSS .92" 
href="http://www.beacosta.com/blog/?feed=rss" type=text/xml rel=alternate><LINK 
title="Atom 0.3" href="http://www.beacosta.com/blog/?feed=atom" 
type=application/atom+xml rel=alternate><LINK 
href="http://www.beacosta.com/blog/xmlrpc.php" rel=pingback><!--?php wp_get_archives('type=monthly&format=link'); ?--><LINK 
title=RSD href="http://www.beacosta.com/blog/xmlrpc.php?rsd" 
type=application/rsd+xml rel=EditURI>
<SCRIPT language=javascript type=text/javascript>
<!--
		function collapseThread( theId ) {
			var comment = document.getElementById(theId);
			if(!comment)
			{
				alert("ERROR:\nThe document structure is different\nfrom what Threaded Comments expects.\nYou are missing the element '"+theId+"'");
				return;
			}
			var theBody = findBody(comment);
			if(comment.className.indexOf("collapsed") > -1) {
				comment.className = comment.className.replace(" collapsed", "");;
			} else {
				comment.className += " collapsed";
			}
		}

		function expandThread( theId ) {
			var comment = document.getElementById(theId);
			if(!comment)
			{
				alert("ERROR:\nThe document structure is different\nfrom what Threaded Comments expects.\nYou are missing the element '"+theId+"'");
				return;
			}
			var theBody = findBody(comment);
			if(comment.className.indexOf("collapsed") > -1) {
				comment.className = comment.className.replace(" collapsed", "");;
			} 
		}
		
		function findBody(el)
		{
			var divs = el.getElementsByTagName("div");
			var ret;
			for(var i = 0; i < divs.length; ++i) {
				if(divs.item(i).className.indexOf("body") > -1)
					return divs.item(i);
			}
			return false;
		}
	
		function onAddComment() {
			//checkDocumentIntegrity();
			var el = document.getElementById("commentform");
			// Future release: Check if form is filled correctly and mark the form fields.
			el.submit();
		}
		
		function moveAddCommentBelow(theId, threadId, collapse)
		{
			expandThread( theId );
			var addComment = document.getElementById("addcomment");
			if(!addComment)
			{
			  	alert("ERROR:\nThreaded Comments can't find the 'addcomment' div.\nThis is probably because you have changed\nthe comments.php file.\nMake sure there is a tag around the form\nthat has the id 'addcomment'"); 
				return
			}
			var comment = document.getElementById(theId);
			if(collapse)
			{
				for(var i = 0; i < comment.childNodes.length; ++i) {
					var c = comment.childNodes.item(i);
					if(typeof(c.className) == "string" && c.className.indexOf("collapsed")<0) {
						c.className += " collapsed";
					}
				}
			}
			addComment.parentNode.removeChild(addComment);

			comment.appendChild(addComment);
			if(comment.className.indexOf("alt")>-1) {
				addComment.className = addComment.className.replace(" alt", "");					
			} else {
				addComment.className += " alt";
			}
		        var replyId = document.getElementById("comment_reply_ID");
			if(replyId == null)
			{
				alert("Brians Threaded Comments Error:\nThere is no hidden form field called\n'comment_reply_ID'. This is probably because you\nchanged the comments.php file and forgot\nto include the field. Please take a look\nat the original comments.php and copy the\nform field over.");
			}
			replyId.value = threadId;
			var reRootElement = document.getElementById("reroot");
			if(reRootElement == null)
			{
				alert("Brians Threaded Comments Error:\nThere is no anchor tag called 'reroot' where\nthe comment form starts.\nPlease compare your comments.php to the original\ncomments.php and copy the reroot anchor tag over.");
			}
			reRootElement.style.display = "block";
			var aTags = comment.getElementsByTagName("A");
			var anc = aTags.item(0).id;
			//document.location.href = "#"+anc;
			document.getElementById("comment").focus();
		}

		function checkDocumentIntegrity()
		{
			str = "";
			
			str += checkElement("reroot","div tag");
			str += checkElement("addcomment", "div tag");
			str += checkElement("comment_reply_ID", "hidden form field");
			str += checkElement("content", "div tag");
			str += checkElement("comment", "textfield");
			str += checkElement("addcommentanchor", "anchor tag");
			
			if(str != "")
			{
				str = "Brian's Threaded Comments are missing some of the elements that are required for it to function correctly.\nThis is probably the because you have changed the original comments.php that was included with the plugin.\n\nThese are the errors:\n" + str;
				str += "\nYou should compare your comments.php with the original comments.php and make sure the required elements have not been removed.";

				alert(str);
			}
		}
               
		function checkElement(theId, elDesc)
		{
			var el = document.getElementById(theId);
			if(!el)
			{
				if(elDesc == null)
					elDesc = "element";
				return "- The "+elDesc+" with the ID '" +theId + "' is missing\n"; 
			}
			else 
				return "";
		}
		
		function reRoot()
		{
			var addComment = document.getElementById("addcomment");			
			var reRootElement = document.getElementById("reroot");
			reRootElement.style.display = "none";
			var content = document.getElementById("content");
			addComment.parentNode.removeChild(addComment);
			content.appendChild(addComment);
			addComment.className = addComment.className.replace(" alt", "");
			document.location.href = "#addcommentanchor";
			document.getElementById("comment").focus();				
			document.getElementById("comment_reply_ID").value = "0";
		}			
		
		function changeCommentSize(d)
		{
			var el = document.getElementById("comment");
			var height = parseInt(el.style.height);
			if(!height && el.offsetHeight)
				height = el.offsetHeight;
			height += d;
			if(height < 20) 
				height = 20;
			el.style.height = height+"px";
		}		
-->
</SCRIPT>

<STYLE type=text/css>.comment {
	PADDING-RIGHT: 4px; PADDING-LEFT: 8px; PADDING-BOTTOM: 4px; MARGIN: 6px 3px 3px; PADDING-TOP: 4px; POSITION: relative; BACKGROUND-COLOR: #fff
}
.odd {
	BACKGROUND-COLOR: #f8f8f8
}
.comment DIV {
	POSITION: relative
}
.comment .comment IMG {
	MARGIN: 0px
}
.comment .collapseicon {
	BACKGROUND-IMAGE: url(http://www.beacosta.com/blog/wp-content/plugins/briansthreadedcomments.php?image=subthread-open.png); OVERFLOW: hidden; WIDTH: 13px; HEIGHT: 13px
}
.collapsed .collapseicon {
	BACKGROUND-IMAGE: url(http://www.beacosta.com/blog/wp-content/plugins/briansthreadedcomments.php?image=subthread.png)
}
.comment .reply {
	PADDING-RIGHT: 6px; PADDING-LEFT: 0px; FONT-SIZE: 80%; PADDING-BOTTOM: 6px; PADDING-TOP: 0px; TEXT-ALIGN: right
}
.comment {
	BORDER-RIGHT: #ddd 1px solid; BORDER-TOP: #ddd 1px solid; MARGIN-TOP: 10px; BORDER-LEFT: #ddd 1px solid; BORDER-BOTTOM: #ddd 1px solid
}
INPUT#subscribe {
	WIDTH: auto
}
.comment .body .content {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; PADDING-BOTTOM: 0px; OVERFLOW: auto; WIDTH: 100%; PADDING-TOP: 0px
}
.comment .title abbr {
	BORDER-TOP-STYLE: none; BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; BORDER-BOTTOM-STYLE: none
}
.collapsed .body {
	DISPLAY: none
}
.collapsed .comment {
	DISPLAY: none
}
#commentform TEXTAREA {
	WIDTH: 97%
}
</STYLE>
<!-- End Feed and Ping URLS--></HEAD>
<BODY>
<DIV id=container>
<DIV id=banner>
<H1><A title="Beatriz Costa" accessKey=1 
href="http://www.beacosta.com/blog">Beatriz Costa</A></H1>
<H2 title="WPF Data Binding">WPF Data Binding</H2></DIV>
<DIV id=center>
<DIV class=content>
<DIV class=post>
<DIV class=date>October 5, 2006</DIV>
<H2 id=post-35><A id=postTitle 
title="How should I data bind a Polygon’s Points to a data source?" 
href="http://www.beacosta.com/blog/?p=35" rel=bookmark>How should I data bind a 
Polygon’s Points to a data source?</A></H2>
<P><SPAN id=text>Today I will talk about one solution for data binding the 
Points property of a Polygon to a source collection. </SPAN></P>
<P><SPAN id=text>The Polygon’s Points property is of type 
System.Windows.Media.PointCollection, which can be found in Avalon’s 
PresentationCore.dll. The first approach I’ve seen most people take when they 
want to bind the Points property to some data is to add a property of type 
PointCollection to their source, and bind to it. This works in the sense that 
the Polygon will display the Points it is binding to, but there are a couple of 
problems with this approach:</SPAN></P>
<P><SPAN id=text>- If we change the collection of points in the data source, the 
change will not be reflected in the UI. This can be fixed by making the 
collection of points in the source a DependencyProperty.</SPAN></P>
<P><SPAN id=text>- Adding a PointCollection to the data source introduces a 
dependence on an Avalon type that brings in several UI concepts (dependency 
properties and freezable objects). Ideally, we should strive for no coupling 
between the presentation technology and the data source. I’m sure those of you 
who are porting applications from WinForms to Avalon understand the reasons why 
this is good practice: If your data layer is independent from the presentation 
layer, it will be easier to migrate to the next UI technology, or, more 
commonly, to present the same data in multiple ways within the same 
application.</SPAN></P>
<P><SPAN id=text>With these issues in mind, the first step is to figure out how 
to store the collection of points in a way that is independent of 
presentation-related Avalon code. Every time I need to data bind to a 
collection, I think of ObservableCollection&lt;T&gt; because it provides 
collection change notifications. This would be my collection of choice if I were 
binding an ItemsControl to the points, but this scenario is a little different. 
</SPAN></P>
<P><SPAN id=text>Before I go any further, let me explain the two types of change 
notifications we support in data binding:</SPAN></P>
<P><SPAN id=text>
<DL>
  <DT><STRONG>Property change notifications</STRONG> 
  <P></SPAN><SPAN id=text></P>
  <DD>Your data source needs to implement INotifyPropertyChanged and raise the 
  PropertyChanged event, passing the appropriate property name in the event 
  arguments, whenever a property changes. If you pass null or the empty string 
  as the property name, the binding engine assumes that all properties of the 
  source have changed. If you have a property in your source that is a 
  collection, you can still benefit from property change notifications: you may 
  need to notify the binding engine when the whole collection is being replaced 
  by a different one. In other words, you may need to notify that the property 
  that holds the collection has changed. 
  <P></SPAN></P>
  <P><SPAN id=text></P>
  <DT><STRONG>Collection change notifications</STRONG> 
  <P></SPAN><SPAN id=text></SPAN><SPAN id=text></P>
  <DD>Your data source needs to implement INotifyCollectionChanged. Typically, 
  when you need collection change notifications, you can simply use an 
  ObservableCollection&lt;T&gt; which does all the hard work of implementing 
  this interface for you. I haven’t encountered a scenario where a customer 
  needed collection change notifications but couldn’t use 
  ObservableCollection&lt;T&gt; for some reason.This interface notifies the UI 
  when there is some change in the collection, such as when an item is added or 
  removed. If your data source is a business object, the binding engine is smart 
  enough to add or remove only the UI items that are needed, rather than 
  regenerating the entire collection of UI items. If your source is XML or an 
  IBindingList, we are as clever as we can be with the information that we are 
  given by those APIs.<SPAN id=text>The item generator associated with an 
  ItemsControl listens to these collection change notifications and is 
  responsible for determining the corresponding changes that will be done to 
  elements in the UI.</SPAN><SPAN id=text></SPAN><SPAN id=text>In this scenario, 
  I am binding a single DP (Polygon’s Points) to a collection. Since there is no 
  ItemsControl involved, even if I provide collection change notifications in 
  the data source, there is no item generator listening to those notifications. 
  Now that I’ve determined that I don’t need all the complexity of 
  ObservableCollection&lt;T&gt;, I can go ahead and pick a simpler collection. I 
  decided to pick List&lt;T&gt;.</SPAN>
  <P></P>
  <P></SPAN></P></DD></DL>
<P></SPAN><SPAN id=text>But now I have a problem: if there is no one listening 
to collection changes in the UI, how can I automatically update my UI when I 
make a change to the source collection? The solution to this problem is to raise 
a property change notification when the collection changes. This may seem a 
little strange at first: there is a collection in the scenario, but there is no 
item generation in the UI, which makes this scenario somewhat unusual. But if 
you think about it, raising a property changed notification invalidates the 
Points property and causes the Polygon to re-render, which is what we want. This 
is how I implemented my data source:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;public class PolygonItem : 
INotifyPropertyChanged<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public 
event PropertyChangedEventHandler 
PropertyChanged;<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private 
void OnPropertyChanged(string 
propertyName)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
(this.PropertyChanged != 
null)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.PropertyChanged(this, 
new 
PropertyChangedEventArgs(propertyName));<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private 
List&lt;Point&gt; points = new 
List&lt;Point&gt;();<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public 
ReadOnlyCollection&lt;Point&gt; 
Points<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get 
{ return new ReadOnlyCollection&lt;Point&gt;(points); 
}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points 
= new 
List&lt;Point&gt;(value);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnPropertyChanged(”Points”);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public 
void 
Subdivide()<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int 
count = 
this.points.Count;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Point&gt; 
newPoints = new List&lt;Point&gt;(count * 
2);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for 
(int i = 0; i &lt; count; 
i++)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Point 
previousPoint = 
this.points[i];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Point 
nextPoint = this.points[(i + 1) % 
count];<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newPoints.Add(previousPoint);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector 
offset = nextPoint - 
previousPoint;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector 
normal = new Vector(offset.Y, 
-offset.X);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newPoints.Add(previousPoint 
+ 0.5 * offset + 0.4 * 
normal);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.points 
= 
newPoints;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnPropertyChanged(”Points”);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public 
PolygonItem()<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points.Add(new 
Point(275, 
100));<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points.Add(new 
Point(375, 
200));<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points.Add(new 
Point(275, 
300));<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points.Add(new 
Point(175, 
200));<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></P>
<P><SPAN id=text>I decided to change the type of the public Points property to a 
ReadOnlyCollection&lt;T&gt; to prevent the user from making changes directly to 
the collection returned by the Points property, which would bypass change 
notifications.</SPAN></P>
<P><SPAN id=text>At this point I have a source collection of type 
ReadOnlyCollection&lt;T&gt; and a target collection of type PointCollection. 
Because I have incompatible types and there is no default Converter between the 
two, I need to implement my own. Here is my code:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;public class Converter : 
IValueConverter<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public 
object Convert(object value, Type targetType, object parameter, 
System.Globalization.CultureInfo 
culture)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IEnumerable&lt;Point&gt; 
enumerable = value as 
IEnumerable&lt;Point&gt;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PointCollection 
points = 
null;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
(enumerable != 
null)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points 
= new 
PointCollection(enumerable);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
points;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public 
object ConvertBack(object value, Type targetType, object parameter, 
System.Globalization.CultureInfo 
culture)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw 
new NotSupportedException(”ConvertBack should never be 
called”);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></P>
<P><SPAN id=text>The UI is pretty straightforward:</SPAN></P>
<P><SPAN 
id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:PolygonItem 
x:Key=”src”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:Converter 
x:Key=”converter”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;StackPanel&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Button 
Click=”ChangeSource” Width=”150″ Margin=”20″&gt;Change data 
source&lt;/Button&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Polygon 
Fill=”#CD5C5C” Points=”{Binding Source={StaticResource src}, Path=Points, 
Converter={StaticResource 
converter}}”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/StackPanel&gt;</SPAN></P>
<P><SPAN id=text>When the Window is loaded, a Polygon is displayed with the 
points from the source collection. I also included a Button in the UI that 
modifies the source collection and raises a property changed notification, which 
causes the UI to be updated.</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;private void ChangeSource(object 
sender, RoutedEventArgs 
e)<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PolygonItem 
polygon = this.Resources[”src”] as 
PolygonItem;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;polygon.Subdivide();<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></P>
<P><SPAN id=text>This is a good solution when you make big changes to the source 
collection of points, like the scenario I have here. If you’re simply adding or 
removing an item at a time from the existing collection, this solution may not 
scale well with very frequent changes to the source. Keep in mind that every 
time a property change notification is raised, we are creating a whole new 
PointCollection in the Converter. If you can, it’s best to batch those 
operations and provide only one property change notification for a group of 
changes. </SPAN></P>
<P><SPAN id=text>We’ve been discussing possible solutions that would make this 
scenario easier and more efficient for V2. Hopefully one of those solutions will 
make it to our final wish list. </SPAN></P>
<P><SPAN id=text>Here is a screenshot of this application:</SPAN></P>
<P><IMG style="DISPLAY: block; MARGIN: 0px auto 10px; TEXT-ALIGN: center" 
src="Beatriz Costa » How should I data bind a Polygon’s Points to a data source_files/32PolygonBinding.png" 
border=0></P>
<P><SPAN id=text><A 
href="http://www.beacosta.com/Zips/32PolygonBinding.zip">Here</A> you can find 
the VS project with this sample code. This works with Beta2 WPF bits. 
</SPAN></P>
<P class=posted>Posted by <A title="Posts by Bea" 
href="http://www.beacosta.com/blog/?author=1">Bea</A> under <A 
title="View all posts in WPF Data Binding" 
href="http://www.beacosta.com/blog/?cat=2" rel=category>WPF Data Binding</A> | 
</P></DIV><!-- <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
				xmlns:dc="http://purl.org/dc/elements/1.1/"
				xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
			<rdf:Description rdf:about="http://www.beacosta.com/blog/?p=35"
    dc:identifier="http://www.beacosta.com/blog/?p=35"
    dc:title="How should I data bind a Polygon&#8217;s Points to a data source?"
    trackback:ping="http://www.beacosta.com/blog/wp-trackback.php?p=35" />
</rdf:RDF>	--><!-- You can start editing here. -->
<P><A href="http://www.beacosta.com/blog/?feed=rss2&amp;p=35"><ABBR 
title="Really Simple Syndication">RSS</ABBR> feed</A> | <A 
href="http://www.beacosta.com/blog/wp-trackback.php?p=35">Trackback <ACRONYM 
title='\"Uniform' Identifier\? Resource>URI</ACRONYM></A> </P>
<H2 id=comments>4 Comments <A title="Leave a comment" 
href="http://www.beacosta.com/blog/?p=35#postcomment">»</A> </H2>
<DIV class=commentlist>
<DIV class=comment id=div-comment-79 style="BACKGROUND: #404040"><A 
id=comment-79 name=comment-79></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-79")' 
src="Beatriz Costa » How should I data bind a Polygon’s Points to a data source_files/briansthreadedcomments.png"> 
<CITE>Comment by Anonymous<A 
href="http://www.beacosta.com/blog/?p=35#comment-79"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-10-06 03:34:56 </DIV>
<DIV class=content>
<P>Hi Beatriz. Looks like the link to your sample isn’t working.</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-79", 79, true); return false;' 
href="http://www.beacosta.com/blog/?p=35#">Reply to this comment</A> 
</DIV></DIV>
<DIV class="comment odd" id=div-comment-80 style="BACKGROUND: #404040"><A 
id=comment-80 name=comment-80></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-80")' 
src="Beatriz Costa » How should I data bind a Polygon’s Points to a data source_files/briansthreadedcomments.png"> 
<CITE>Comment by Bea<A 
href="http://www.beacosta.com/blog/?p=35#comment-80"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-10-06 09:50:38 </DIV>
<DIV class=content>
<P>Hi,<BR>Thanks for letting me know. I fixed the problem, so it should be 
working now.<BR>Thanks a lot!<BR>Bea</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-80", 80, true); return false;' 
href="http://www.beacosta.com/blog/?p=35#">Reply to this comment</A> 
</DIV></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV>
<DIV class=comment id=div-comment-81 style="BACKGROUND: #404040"><A 
id=comment-81 name=comment-81></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-81")' 
src="Beatriz Costa » How should I data bind a Polygon’s Points to a data source_files/briansthreadedcomments.png"> 
<CITE>Comment by dr5274<A 
href="http://www.beacosta.com/blog/?p=35#comment-81"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2007-06-19 14:45:25 </DIV>
<DIV class=content>
<P>Hello Bea. My company is building some business objects that represent data 
and collections of data. Currently these objects all implement 
INotifyPropertyChanged, as well as a strongly typed event handler. The 
INotifyPropertyChanged seems to be keeping a WPF client happy, and the strongly 
typed event allow CLR clients to not go back to the object for data. There’s 
questions amongst the developers as to whether or not we should implement thest 
as DependencyObjects with DependencyProperties. Some feel these aren’t 
appropriate for business objects, and would unnecessarily tie the classes to 
WPF. Others think DP’s would support WPF, and not impart too much class 
complexity. I found a comment from Rob Relyea that seemed to question the use of 
DP’s for business objects, but we’d like your opinion, too. Thanks!</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-81", 81, true); return false;' 
href="http://www.beacosta.com/blog/?p=35#">Reply to this comment</A> 
</DIV></DIV>
<DIV class="comment odd" id=div-comment-378 style="BACKGROUND: #404040"><A 
id=comment-378 name=comment-378></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-378")' 
src="Beatriz Costa » How should I data bind a Polygon’s Points to a data source_files/briansthreadedcomments.png"> 
<CITE>Comment by Bea<A 
href="http://www.beacosta.com/blog/?p=35#comment-378"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2007-09-18 23:51:15 </DIV>
<DIV class=content>
<P>Hello,</P>
<P>That is a great question. I share the same opinion as Rob Relyea - I don’t 
think you should be using DPs and DOs in your data source. If there is a 
possibility that you will be using those business objects with UI technologies 
other than WPF, you should strive for the best possible separation between UI 
and data, as it will save you a lot of time in the future. I have talked to 
several customers that ported their apps from WinForms to WPF, and the 
importance of keeping a clean separation of data and UI always comes up in our 
conversations.</P>
<P>If you feel that having elements specific to WPF would greatly simplify your 
UI layer, you may consider introducing an intermediate layer between your UI and 
your data. This layer collects all the information needed from the data source, 
and presents it to the UI layer in whatever form is most appropriate. You’ve 
probably heard of the <A 
href="http://blogs.msdn.com/johngossman/archive/2006/04/13/576163.aspx" 
rel=nofollow>Model-View-ViewModel pattern</A> that John Gossman discusses on his 
blog. This is a very common technique that is used by the Blend team and other 
customers that are writing big WPF apps.</P>
<P>I hope this helps.</P>
<P>Bea</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-378", 378, true); return false;' 
href="http://www.beacosta.com/blog/?p=35#">Reply to this comment</A> 
</DIV></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV></DIV>
<DIV class=comment id=addcomment style="BACKGROUND: #404040"><A 
id=addcommentanchor name=addcommentanchor></A>
<FORM id=commentform action=http://www.beacosta.com/blog/wp-comments-post.php 
method=post>
<DIV class=add>
<DIV id=reroot style="DISPLAY: none"><SMALL><A onclick="reRoot(); return false;" 
href="http://www.beacosta.com/blog/?p=35#">Click here to cancel "reply". 
</A></SMALL></DIV><SMALL>Name (required) </SMALL>
<DIV><INPUT class=textarea id=author tabIndex=1 size=28 name=author> 
</DIV><SMALL>E-mail (required - never shown publicly) </SMALL>
<DIV><INPUT id=email tabIndex=2 size=28 name=email> </DIV><SMALL><ACRONYM 
title="Uniform Resource Identifier">URI</ACRONYM> </SMALL>
<DIV><INPUT id=url tabIndex=3 size=28 name=url> </DIV><SMALL>Your Comment (<A 
onclick="changeCommentSize(-80); return false;" 
href="http://www.beacosta.com/blog/?p=35#">smaller size</A> | <A 
onclick="changeCommentSize(80); return false;" 
href="http://www.beacosta.com/blog/?p=35#">larger size</A>) </SMALL>
<DIV style="WIDTH: 100%"><TEXTAREA id=comment tabIndex=4 name=comment rows=14 cols=60></TEXTAREA> 
</DIV><SMALL>You may use &lt;a href="" title=""&gt; &lt;abbr title=""&gt; 
&lt;acronym title=""&gt; &lt;b&gt; &lt;blockquote cite=""&gt; &lt;code&gt; 
&lt;em&gt; &lt;i&gt; &lt;strike&gt; &lt;strong&gt; in your comment. </SMALL>
<DIV><INPUT type=hidden value=35 name=comment_post_ID> <INPUT type=hidden 
value=/blog/?p=35 name=redirect_to> <INPUT id=addcommentbutton onclick="if(typeof(onAddComment) == 'function') { onAddComment(); } else { alert('ERROR:\nIt looks like the website administrator hasn\'t activated the Brians Threaded Comments plugin from the plugin page'); };" tabIndex=5 type=button value="Add comment" name=addcommentbutton> 
</DIV></DIV><INPUT id=comment_reply_ID type=hidden value=0 
name=comment_reply_ID></FORM></DIV>
<P>
<DIV align=center></DIV>
<P></P></DIV></DIV>
<DIV id=right>
<DIV class=sidebar><!-- Meta -->
<H2>Meta:</H2>
<UL class=noli>
  <LI><A title="Syndicate this site using RSS" 
  href="http://feeds.feedburner.com/BeatrizCosta"><ABBR 
  title="Really Simple Syndication">RSS</ABBR></A> 
  <LI><A title="The latest comments to all posts in RSS" 
  href="http://feeds.feedburner.com/CommentsForBeatrizCosta">Comments <ABBR 
  title="Really Simple Syndication">RSS</ABBR></A> </LI></UL><!-- Search -->
<H2>Search</H2><BR>
<FORM id=searchform action="" method=get><INPUT id=s size=15 name=s> <INPUT type=submit value=Search name=submit> </FORM><!-- Categories -->
<H2>Categories</H2>
<UL class=menu>
  <LI><A title="View all posts filed under General" 
  href="http://www.beacosta.com/blog/?cat=3">General</A> 
  <LI><A title="View all posts filed under WPF Data Binding" 
  href="http://www.beacosta.com/blog/?cat=2">WPF Data Binding</A> 
  <UL class=children>
    <LI><A title="View all posts filed under Binding to ADO.NET" 
    href="http://www.beacosta.com/blog/?cat=12">Binding to ADO.NET</A> 
    <LI><A title="View all posts filed under ListBox" 
    href="http://www.beacosta.com/blog/?cat=14">ListBox</A> 
    <LI><A title="View all posts filed under ListView" 
    href="http://www.beacosta.com/blog/?cat=9">ListView</A> 
    <LI><A title="View all posts filed under Master-detail" 
    href="http://www.beacosta.com/blog/?cat=10">Master-detail</A> 
    <LI><A title="View all posts filed under Sorting, filtering, grouping" 
    href="http://www.beacosta.com/blog/?cat=13">Sorting, filtering, grouping</A> 

    <LI><A title="View all posts filed under Styles and Templates" 
    href="http://www.beacosta.com/blog/?cat=11">Styles and Templates</A> 
    <LI><A title="View all posts filed under TreeView" 
    href="http://www.beacosta.com/blog/?cat=7">TreeView</A> </LI></UL></LI></UL><!-- Archives -->
<H2>Archives</H2>
<UL>
  <LI><A title="September 2007" 
  href="http://www.beacosta.com/blog/?m=200709">September 2007</A> 
  <LI><A title="August 2007" 
  href="http://www.beacosta.com/blog/?m=200708">August 2007</A> 
  <LI><A title="May 2007" href="http://www.beacosta.com/blog/?m=200705">May 
  2007</A> 
  <LI><A title="April 2007" href="http://www.beacosta.com/blog/?m=200704">April 
  2007</A> 
  <LI><A title="January 2007" 
  href="http://www.beacosta.com/blog/?m=200701">January 2007</A> 
  <LI><A title="November 2006" 
  href="http://www.beacosta.com/blog/?m=200611">November 2006</A> 
  <LI><A title="October 2006" 
  href="http://www.beacosta.com/blog/?m=200610">October 2006</A> 
  <LI><A title="September 2006" 
  href="http://www.beacosta.com/blog/?m=200609">September 2006</A> 
  <LI><A title="August 2006" 
  href="http://www.beacosta.com/blog/?m=200608">August 2006</A> 
  <LI><A title="July 2006" href="http://www.beacosta.com/blog/?m=200607">July 
  2006</A> 
  <LI><A title="June 2006" href="http://www.beacosta.com/blog/?m=200606">June 
  2006</A> 
  <LI><A title="May 2006" href="http://www.beacosta.com/blog/?m=200605">May 
  2006</A> 
  <LI><A title="April 2006" href="http://www.beacosta.com/blog/?m=200604">April 
  2006</A> 
  <LI><A title="March 2006" href="http://www.beacosta.com/blog/?m=200603">March 
  2006</A> 
  <LI><A title="February 2006" 
  href="http://www.beacosta.com/blog/?m=200602">February 2006</A> 
  <LI><A title="January 2006" 
  href="http://www.beacosta.com/blog/?m=200601">January 2006</A> 
  <LI><A title="December 2005" 
  href="http://www.beacosta.com/blog/?m=200512">December 2005</A> 
  <LI><A title="November 2005" 
  href="http://www.beacosta.com/blog/?m=200511">November 2005</A> 
  <LI><A title="October 2005" 
  href="http://www.beacosta.com/blog/?m=200510">October 2005</A> 
  <LI><A title="September 2005" 
  href="http://www.beacosta.com/blog/?m=200509">September 2005</A> 
  <LI><A title="August 2005" 
  href="http://www.beacosta.com/blog/?m=200508">August 2005</A> </LI></UL></DIV>
<DIV id=footer>
<DIV class=copyright><SMALL><SPAN class=copy>Copyright © 2007 <STRONG><A 
title="Beatriz Costa" href="http://www.beacosta.com/blog">Beatriz Costa</A> 
</STRONG></SPAN><BR><BR></SMALL></DIV></DIV></DIV></DIV></BODY></HTML>

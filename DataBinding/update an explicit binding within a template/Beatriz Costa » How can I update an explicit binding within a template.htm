<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>Beatriz Costa » How can I update an explicit binding within a template?</title>



<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="generator" content="WordPress 2.2.2"><!-- leave this for stats --><!-- Editable Meta Tags --> 

<meta name="description" content="">
<meta name="keywords" content="">
<meta name="author" content="Sreejith - GFXedit.com">
<meta name="copyright" content="Your Name">
<meta name="generator" content="WordPress 2.2.2">
<meta name="robots" content="index,follow"><!-- Meta Tags End--><!-- Style Sheet -->



<style type="text/css" media="screen">
@import url( http://www.beacosta.com/blog/wp-content/themes/darkpad-10/style.css );
</style><!-- Style Sheet End --><!-- Includes -->



 <script type="text/javascript" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/addEvent.htm"></script>
 <script type="text/javascript" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/titles.htm"></script><!-- End Includes --><!-- Feed and Ping URLS-->



<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://www.beacosta.com/blog/?feed=rss2">
<link rel="alternate" type="text/xml" title="RSS .92" href="http://www.beacosta.com/blog/?feed=rss">
<link rel="alternate" type="application/atom+xml" title="Atom 0.3" href="http://www.beacosta.com/blog/?feed=atom">
<link rel="pingback" href="http://www.beacosta.com/blog/xmlrpc.php"><!--?php wp_get_archives('type=monthly&format=link'); ?-->

	<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.beacosta.com/blog/xmlrpc.php?rsd">
<script language="javascript" type="text/javascript">
<!--
		function collapseThread( theId ) {
			var comment = document.getElementById(theId);
			if(!comment)
			{
				alert("ERROR:\nThe document structure is different\nfrom what Threaded Comments expects.\nYou are missing the element '"+theId+"'");
				return;
			}
			var theBody = findBody(comment);
			if(comment.className.indexOf("collapsed") > -1) {
				comment.className = comment.className.replace(" collapsed", "");;
			} else {
				comment.className += " collapsed";
			}
		}

		function expandThread( theId ) {
			var comment = document.getElementById(theId);
			if(!comment)
			{
				alert("ERROR:\nThe document structure is different\nfrom what Threaded Comments expects.\nYou are missing the element '"+theId+"'");
				return;
			}
			var theBody = findBody(comment);
			if(comment.className.indexOf("collapsed") > -1) {
				comment.className = comment.className.replace(" collapsed", "");;
			} 
		}
		
		function findBody(el)
		{
			var divs = el.getElementsByTagName("div");
			var ret;
			for(var i = 0; i < divs.length; ++i) {
				if(divs.item(i).className.indexOf("body") > -1)
					return divs.item(i);
			}
			return false;
		}
	
		function onAddComment() {
			//checkDocumentIntegrity();
			var el = document.getElementById("commentform");
			// Future release: Check if form is filled correctly and mark the form fields.
			el.submit();
		}
		
		function moveAddCommentBelow(theId, threadId, collapse)
		{
			expandThread( theId );
			var addComment = document.getElementById("addcomment");
			if(!addComment)
			{
			  	alert("ERROR:\nThreaded Comments can't find the 'addcomment' div.\nThis is probably because you have changed\nthe comments.php file.\nMake sure there is a tag around the form\nthat has the id 'addcomment'"); 
				return
			}
			var comment = document.getElementById(theId);
			if(collapse)
			{
				for(var i = 0; i < comment.childNodes.length; ++i) {
					var c = comment.childNodes.item(i);
					if(typeof(c.className) == "string" && c.className.indexOf("collapsed")<0) {
						c.className += " collapsed";
					}
				}
			}
			addComment.parentNode.removeChild(addComment);

			comment.appendChild(addComment);
			if(comment.className.indexOf("alt")>-1) {
				addComment.className = addComment.className.replace(" alt", "");					
			} else {
				addComment.className += " alt";
			}
		        var replyId = document.getElementById("comment_reply_ID");
			if(replyId == null)
			{
				alert("Brians Threaded Comments Error:\nThere is no hidden form field called\n'comment_reply_ID'. This is probably because you\nchanged the comments.php file and forgot\nto include the field. Please take a look\nat the original comments.php and copy the\nform field over.");
			}
			replyId.value = threadId;
			var reRootElement = document.getElementById("reroot");
			if(reRootElement == null)
			{
				alert("Brians Threaded Comments Error:\nThere is no anchor tag called 'reroot' where\nthe comment form starts.\nPlease compare your comments.php to the original\ncomments.php and copy the reroot anchor tag over.");
			}
			reRootElement.style.display = "block";
			var aTags = comment.getElementsByTagName("A");
			var anc = aTags.item(0).id;
			//document.location.href = "#"+anc;
			document.getElementById("comment").focus();
		}

		function checkDocumentIntegrity()
		{
			str = "";
			
			str += checkElement("reroot","div tag");
			str += checkElement("addcomment", "div tag");
			str += checkElement("comment_reply_ID", "hidden form field");
			str += checkElement("content", "div tag");
			str += checkElement("comment", "textfield");
			str += checkElement("addcommentanchor", "anchor tag");
			
			if(str != "")
			{
				str = "Brian's Threaded Comments are missing some of the elements that are required for it to function correctly.\nThis is probably the because you have changed the original comments.php that was included with the plugin.\n\nThese are the errors:\n" + str;
				str += "\nYou should compare your comments.php with the original comments.php and make sure the required elements have not been removed.";

				alert(str);
			}
		}
               
		function checkElement(theId, elDesc)
		{
			var el = document.getElementById(theId);
			if(!el)
			{
				if(elDesc == null)
					elDesc = "element";
				return "- The "+elDesc+" with the ID '" +theId + "' is missing\n"; 
			}
			else 
				return "";
		}
		
		function reRoot()
		{
			var addComment = document.getElementById("addcomment");			
			var reRootElement = document.getElementById("reroot");
			reRootElement.style.display = "none";
			var content = document.getElementById("content");
			addComment.parentNode.removeChild(addComment);
			content.appendChild(addComment);
			addComment.className = addComment.className.replace(" alt", "");
			document.location.href = "#addcommentanchor";
			document.getElementById("comment").focus();				
			document.getElementById("comment_reply_ID").value = "0";
		}			
		
		function changeCommentSize(d)
		{
			var el = document.getElementById("comment");
			var height = parseInt(el.style.height);
			if(!height && el.offsetHeight)
				height = el.offsetHeight;
			height += d;
			if(height < 20) 
				height = 20;
			el.style.height = height+"px";
		}		
-->
</script>
<style type="text/css">
.comment 
{
	position: 				relative;
	margin:					3px;
	margin-top:				6px;
/*	border: 				1px solid #666; */
	padding:				4px 4px 4px 8px;
	background-color:		#fff;
}

.odd
{
	background-color: #f8f8f8;
}

.comment div {
	position: 				relative;
}

.comment .comment img
{
	margin: 				0px;
}

.comment .collapseicon 
{
	width: 					13px;
	height: 				13px;
	overflow:				hidden;
	background-image: 		url(http://www.beacosta.com/blog/wp-content/plugins/briansthreadedcomments.php?image=subthread-open.png);
}

.collapsed .collapseicon 
{
	background-image: 		url(http://www.beacosta.com/blog/wp-content/plugins/briansthreadedcomments.php?image=subthread.png);
}


.comment .reply {
	text-align: 			right;
	font-size: 				80%;
	padding: 				0px 6px 6px 0px;
}

.comment
{
	border: 	1px solid #ddd;
	margin-top: 			10px;
}

input#subscribe
{
	width: auto;
}

.comment .body .content
{
	padding:				0px 3px 0px 3px;
	width: 					100%;	
	overflow: 				auto; 
}

.comment .title abbr
{
	border: none;
}

.collapsed .body, .collapsed .comment
{
	display:				none;
}
/*
#addcomment small, #addcomment div
{
	padding:				3px;
}
*/
#commentform textarea {
	width: 97%;
}
</style><!-- End Feed and Ping URLS--></head><body>
	<div id="container">
		<div id="banner">
			<h1><a accesskey="1" href="http://www.beacosta.com/blog" title="Beatriz Costa">Beatriz Costa</a></h1>
			<h2 title="WPF Data Binding">WPF Data Binding</h2>
		</div>
		
		<div id="center">
			<div class="content">
								<div class="post">
					<div class="date">May 8, 2007</div>
					<h2 id="post-41"><a id="postTitle" href="http://www.beacosta.com/blog/?p=41" rel="bookmark" title="How can I update an explicit binding within a template?">How can I update an explicit binding within a template?</a></h2>
					<p><img src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/38mix.bmp" style="margin: 0px auto 10px; display: block; text-align: center;" border="0"></p>
<p><span id="text">Mix07 in Vegas was awesome! I always get pumped up
when I meet new customers that are using WPF and loving it! It gives me
fuel to come back to rainy Seattle with a smile and extra energized to
do my absolute best for WPF!</span></p>
<p><span id="text">In today’s sample, I have a ListBox with editable
data. When I change the data of one of the items, I want that to be
reflected in the source, as usual. However, this time I set my
Binding’s UpdateSourceTrigger to Explicit, which means I need to make
that update by calling the UpdateSource() method on BindingExpression
through code. Unfortunately, getting a handle to the BindingExpression
in a ListBox scenario is a little tricky with the current bits of WPF,
which is why I decided to write this post.</span></p>
<p><span id="text">I will start with a quick explanation of two basic
concepts, which are core to the understanding of this problem: Binding
Mode and UpdateSourceTrigger. If this is too basic for you, you can
skip the next couple of sections and safely jump to “<a href="#UpdatingExplicitBindings">Updating Explicit Bindings</a>.”</span></p>
<p><span id="text"><strong>Binding Mode</strong></span></p>
<p><span id="text">WPF Data Binding supports five binding modes (which you can set by using the Mode property of Binding):</span></p>
<p><span id="text">- One way - The data flows from the source to the
target only. If you add a Binding to a TextBlock’s Text property and
don’t specify the Mode, it will be one way by default.</span></p>
<p><span id="text">- Two way - The data flows from the source data to
the target UI, and the other way around. A Binding on a TextBox’s Text
property without the Mode specified is two way by default: changes in
the source are reflected in the TextBox, and changes typed into the
TextBox are also propagated back to the source.</span></p>
<p><span id="text">- One time - Like one way, but the UI doesn’t listen
to change notifications in the source. You may want to consider using
this mode if your source doesn’t support property change notifications.
If you don’t care about changes in the source, setting your binding to
one time will make it a little more performant.</span></p>
<p><span id="text">- One way to source - The opposite of one way: the
data flows only from the target UI to the source. I have yet to see a
good use of this binding mode - the scenarios that require it are quite
rare.</span></p>
<p><span id="text">- Default - This is the same as not setting the Mode
property at all. The Binding engine will look at the default mode
specified at the time the DependencyProperty was registered, and will
use that. Therefore, setting the Mode to Default will not mean the same
thing for all DependencyProperties. For example, as I mentioned before,
TextBlock’s Text has a default mode of one way, while the TextBox’s
Text has a default of two way.</span></p>
<p><span id="text">But how do we know the default Binding Mode of a
DependencyProperty? How can we set a default Binding Mode when we
define a new DependencyProperty?</span></p>
<p><span id="text"><a href="http://www.aisto.com/roeder/dotnet/">.NET Reflector</a>
is your friend. With reflector, search for TextBox and look at the
source for the static constructor (.cctor()). Here, you will be able to
find the code used for registering the TextProperty DP:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;TextProperty =
DependencyProperty.Register(”Text”, typeof(string), typeof(TextBox),
new FrameworkPropertyMetadata(string.Empty,
FrameworkPropertyMetadataOptions.Journal |
FrameworkPropertyMetadataOptions.BindsTwoWayByDefault, new
PropertyChangedCallback(TextBox.OnTextPropertyChanged), new
CoerceValueCallback(TextBox.CoerceText), true,
UpdateSourceTrigger.LostFocus));</span></p>
<p><span id="text">Notice that a parameter is passed to the Register
method indicating the default Binding Mode:
FrameworkPropertyMetadataOptions.BindsTwoWayByDefault. If you use
reflector to look at the registration for TextBlock’s Text DP, you will
see that no such value is passed, in which case we assume the binding
is one way by default.</span></p>
<p><span id="text">It is not possible to make the binding one way to
source or one time by default (we couldn’t think of any compelling user
scenarios that would justify increasing the complixity of the API).
However, it is possible to say that you don’t want the DP to support
data binding at all - to do this, simply pass
FrameworkPropertyMetadataOptions.NotDataBindable as a parameter.</span></p>
<p><span id="text"><strong>Binding UpdateSourceTrigger</strong></span></p>
<p><span id="text">In the case of a binding that propagates values from
the target to the source (Mode = TwoWay or OneWayToSource), we allow
you to specify how you want that update to be triggered. There are
three ways to cause the changes to propagate to the source (which you
can set by using the UpdateSourceTrigger property of Binding):</span></p>
<p><span id="text">- LostFocus - The value will be updated when the
element loses focus. This is the default behavior for TextBox (notice
that UpdateSourceTrigger.LostFocus is specified when the Text
dependency property was registered). When you type something in a
TextBox, that value will be updated to the source when you change focus
to some other element.</span></p>
<p><span id="text">- PropertyChanged - The value is updated every time
it changes. In the TextBox scenario, the value will be updated every
time you type a new character.</span></p>
<p><span id="text">- Explicit - The target value if not updated until you explicitly call “UpdateSource()” on the BindingExpression.</span></p>
<p><span id="text"><strong>Updating Explicit Bindings</strong></span></p>
<p><span id="text">In today’s sample, I started by defining a source
object (MySource) with a property Employees of type
ObservableCollection&lt;Employee&gt;. Employee is a class that contains
two properties: Name and Title, both of type string. The code for
defining this source is straight forward, so I won’t show it here.</span></p>
<p><span id="text">Then I added a ListBox to my XAML file that is bound to the Employees collection, and I added a Style for its items:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;&lt;Window.Resources&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DataTemplate x:Key=”nonEditableEmployee”&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;StackPanel Margin=”2″&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock
FontWeight=”Bold” Text=”{Binding Path=Name}”/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock
Text=”{Binding Path=Title}” /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/StackPanel&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/DataTemplate&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DataTemplate x:Key=”editableEmployee”&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;StackPanel Margin=”2″ &gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock
FontWeight=”Bold” Text=”{Binding Path=Name}” /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBox
Text=”{Binding Path=Title, UpdateSourceTrigger=Explicit}” Width=”130″
x:Name=”tb”/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/StackPanel&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/DataTemplate&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Style TargetType=”ListBoxItem” x:Key=”lbiStyle”&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Setter Property=”Height” Value=”40″ /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Setter
Property=”ContentTemplate” Value=”{StaticResource nonEditableEmployee}”
/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Style.Triggers&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Trigger
Property=”IsSelected” Value=”True”&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Setter
Property=”ContentTemplate” Value=”{StaticResource editableEmployee}”
/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Trigger&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Style.Triggers&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Style&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Window.Resources&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox ItemsSource=”{Binding
Path=Employees}” ItemContainerStyle=”{StaticResource lbiStyle}”
IsSynchronizedWithCurrentItem=”True” (…) Name=”lb”/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;Button Content=”Submit” Click=”Submit” (…) /&gt;</span></p>
<p><span id="text">In the Style for ListBoxItems, I am specifying that
I want the DataTemplate applied to each of the items to be
“nonEditableEmployee” except when the item is selected, in which case I
want to use “editableEmployee”. Both DataTemplates display the Name and
Title of the Employee, the only difference is that “editableEmployee”
displays the Title using a TextBox instead of a TextBlock. So, when the
user selects an employee in the ListBox, that employee’s Title becomes
editable. </span></p>
<p><span id="text">Below the ListBox I have a Submit Button. If I click
on this Button after editing some data in the ListBox, I want that data
to be submitted to the source. However, if I change the data in the
ListBox and don’t click on the Button, I don’t want the source to be
modified. Notice that I set the UpdateSourceTrigger of editable Title’s
Binding to Explicit.</span></p>
<p><span id="text">To achieve this behavior, I need to call the
UpdateSource() on the BindingExpression’s instance. Getting this
instance is a little tricky, so let’s think about it for a minute. The
best way to think about this is by starting from the end, and walking
backwards. Utimately, this is the code I want to write (assuming “be”
is the BindingExpression instance, and “tb” is the TextBox’s instance):</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;BindingExpression be = tb.GetBindingExpression(TextBox.TextProperty);<br>
&nbsp;&nbsp;&nbsp;&nbsp;be.UpdateSource();</span></p>
<p><span id="text">As you can see, in order to get the
BindingExpression for the Binding in the TextBox’s Text property, I
need to have a handle to that TextBox. Traversing the DataTemplate to
get to the TextBox won’t give me the actual instance, it will only give
me the FrameworkElementFactory used to create the TextBox instance.
Fortunately, DataTemplate has a FindName method that, given the
instance of the object the template is applied to, will give you a
particular named part within its visual tree. So, assuming “cp” is the
object the DataTemplate is applied to, this is the code I would like to
write to get the actual TextBox:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;DataTemplate dt = (DataTemplate)(this.Resources[”editableEmployee”]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;TextBox tb = (TextBox)(dt.FindName(”tb”, cp));</span></p>
<p><span id="text">We’re getting close. The next step is to figure out
how to get to the element the DataTemplate is applied to. A
DataTemplate is always applied to a ContentPresenter, which is an
element present in the visual tree of every ContentControl. Since every
item in the ListBox is wrapped with a ListBoxItem (which is a
ContentControl), I simply have to get to the ContentPresenter instance
in the ControlTemplate for the currently selected ListBoxItem. Here is
what I did:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;Employee currentEmployee = (Employee)(lb.Items.CurrentItem);<br>
&nbsp;&nbsp;&nbsp;&nbsp;ListBoxItem lbi = (ListBoxItem)(lb.ItemContainerGenerator.ContainerFromItem(currentEmployee));<br>
&nbsp;&nbsp;&nbsp;&nbsp;ContentPresenter cp = GetObjectOfTypeInVisualTree&lt;ContentPresenter&gt;(lbi);</span></p>
<p><span id="text">“GetObjectOfTypeInVisualTree” is a simple recursive
method that walks the visual tree of an object (in this case, the
current ListBoxItem) and returns the first element matching the type
specified by the generic parameter (in this case ContentPresenter).
Here is the complete code:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;private void Submit(object sender, RoutedEventArgs e)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Employee currentEmployee = (Employee)(lb.Items.CurrentItem);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListBoxItem lbi =
(ListBoxItem)(lb.ItemContainerGenerator.ContainerFromItem(currentEmployee));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ContentPresenter cp = GetObjectOfTypeInVisualTree&lt;ContentPresenter&gt;(lbi);<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataTemplate dt = (DataTemplate)(this.Resources[”editableEmployee”]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextBox tb = (TextBox)(dt.FindName(”tb”, cp));<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BindingExpression be = tb.GetBindingExpression(TextBox.TextProperty);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;be.UpdateSource();<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;private T GetObjectOfTypeInVisualTree&lt;T&gt;(DependencyObject dpob) where T : DependencyObject<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int count = VisualTreeHelper.GetChildrenCount(dpob);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i &lt; count; i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DependencyObject
child = VisualTreeHelper.GetChild(dpob, i);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T childAsT = child as T;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (childAsT != null)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return childAsT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;childAsT&nbsp;=
&nbsp;GetObjectOfTypeInVisualTree&lt;T&gt;(child);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; if(childAsT != null)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return childAsT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}</span></p>
<p><span id="text">This code is not only useful for submitting explicit
bindings; it is useful for any scenario where you need to get to the
instance of some element in your DataTemplate. It should be pretty easy
to tweak this sample to suit your needs.</span></p>
<p><span id="text">We do realize that this scenario is quite hard to
implement, and we know it’s not that uncommon. We would like to make it
easier, but unfortunately we will not be able to make that happen in
the next release. At least for now you have a sample solution that
should help you solve most scenarios. Hopefully we will have a chance
to fix this in the platform in the near future.</span></p>
<p><span id="text">Below is a screenshot of the final application. The
ListBox on the right is bound to the same source. I added it to this
sample so you can see when the source changes.</span></p>
<p><img src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/38UpdateExplicit.png" style="margin: 0px auto 10px; display: block; text-align: center;" border="0"></p>
<p><span id="text"><a href="http://www.beacosta.com/Zips/38UpdateExplicit.zip">Here</a> you can find the VS project with this sample code. This works with RTM WPF bits. </span></p>
<p><span id="text">Update September 18, 2007: <a href="http://www.beacosta.com/Zips/38UpdateExplicitOrcasBeta2.zip">Here</a> you can find this project working with Orcast Beta 2 bits</span></p>
										<p class="posted">Posted by <a href="http://www.beacosta.com/blog/?author=1" title="Posts by Bea">Bea</a> under <a href="http://www.beacosta.com/blog/?cat=11" title="View all posts in Styles and Templates" rel="category">Styles and Templates</a>, <a href="http://www.beacosta.com/blog/?cat=2" title="View all posts in WPF Data Binding" rel="category">WPF Data Binding</a> |   </p>
				</div>				
				<!-- <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
				xmlns:dc="http://purl.org/dc/elements/1.1/"
				xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
			<rdf:Description rdf:about="http://www.beacosta.com/blog/?p=41"
    dc:identifier="http://www.beacosta.com/blog/?p=41"
    dc:title="How can I update an explicit binding within a template?"
    trackback:ping="http://www.beacosta.com/blog/wp-trackback.php?p=41" />
</rdf:RDF>	-->
				
<!-- You can start editing here. -->

<p><a href="http://www.beacosta.com/blog/?feed=rss2&amp;p=41"><abbr title="Really Simple Syndication">RSS</abbr> feed</a> 
| <a href="http://www.beacosta.com/blog/wp-trackback.php?p=41">Trackback <acronym title="\&quot;Uniform" resource="" identifier\="">URI</acronym></a>
</p>

<h2 id="comments">23 Comments 
<a href="#postcomment" title="Leave a comment">»</a>
</h2>
<div class="commentlist">
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-11" class="comment">
				<a name="comment-11" id="comment-11"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-11")'>
					<cite>Comment by /sid<a href="#comment-11"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-05-09 19:45:59 						
					</div>					
					<div class="content">
						<p>Regarding I have yet to see a good use of this binding mode, to me it seems that Josh Smith found good use for it in <a href="http://www.codeproject.com/useritems/AttachingVirtualBranches" rel="nofollow">http://www.codeproject.com/useritems/AttachingVirtualBranches</a></p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-11", 11, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-394" class="comment odd">
				<a name="comment-394" id="comment-394"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-394")'>
					<cite>Comment by Bea<a href="#comment-394"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-09-20 17:33:09 						
					</div>					
					<div class="content">
						<p>It’s a cool trick. Thanks for pointing it out.<br>
I’m glad that OneWayToSource is useful after all.</p>
<p>Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-394", 394, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-12" class="comment">
				<a name="comment-12" id="comment-12"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-12")'>
					<cite>Comment by RN<a href="#comment-12"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-05-09 22:22:01 						
					</div>					
					<div class="content">
						<p>Regarding
accessing elements within your datatemplate from code-behind, you can
do it in various ways. 3 different ways are shown below. Could you
explain which is the best way and why?</p>
<p>___________________________________<br>
1st method:</p>
<p>ContentPresenter cp = (ContentPresenter)(VisualTreeHelper.GetChild(TenantDetails, 0));</p>
<p>GroupBox gb = (GroupBox) VisualTreeHelper.GetChild(cp, 0);</p>
<p>TextBox tb = (TextBox) gb.FindName(”TenantNameTextBox”);</p>
<p>//this works fine<br>
___________________________________<br>
2nd method: </p>
<p>ContentPresenter cp = (ContentPresenter)(VisualTreeHelper.GetChild(TenantDetails, 0));</p>
<p>DataTemplate dt = (DataTemplate)(Application.Current.Resources[”detailsTenantTemplate”]);</p>
<p>TextBox tb = (TextBox)(dt.FindName(”TenantNameTextBox”, cp));</p>
<p>// this works fine<br>
___________________________________<br>
3rd method:</p>
<p>TextBox tb = (TextBox)this.TenantDetails.Template.FindName(”TenantNameTextBox”, TenantDetails);</p>
<p>// does not work in this case, but<br>
// have seen it work in some other<br>
// cases<br>
___________________________________</p>
<p>Info on the elements I have used:</p>
<p>TenantDetails: ContentControl on my page</p>
<p>detailsTenantTemplate: DataTemplate used by TenantDetails and this resides in a ResourceDictionary</p>
<p>TenantNameTextBox: Name of the textBox element that I’m trying to access. This resides inside my datatemplate.</p>
<p>- RN</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-12", 12, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-375" class="comment odd">
				<a name="comment-375" id="comment-375"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-375")'>
					<cite>Comment by Bea<a href="#comment-375"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-09-18 23:25:14 						
					</div>					
					<div class="content">
						<p>Hi RN,</p>
<p>At first sight, both the first and second methods seem to be equally
good. The first method has the slight advantage that you don’t need to
know the name of the DataTemplate. The third method won’t work anytime
you’re looking for an element within the DataTemplate, like in this
sample. If you’re looking for something within the ControlTemplate, the
third method is the best, quickest way to get a handle to the element.</p>
<p>Thanks,<br>
Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-375", 375, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-13" class="comment">
				<a name="comment-13" id="comment-13"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-13")'>
					<cite>Comment by Buzz<a href="#comment-13"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-05-10 13:31:44 						
					</div>					
					<div class="content">
						<p>I want to FindName of a TextBox that is in a DataTemplate in my ListView. (Not ListBox)</p>
<p>As is typical, my ListView’s View is a GridView, containing a
GridViewColumn whose CellTemplate is assigned the DataTemplate resource
I want. (sorry… trouble putting XAML in comments)</p>
<p>My DataTemplate simply contains a TextBox.</p>
<p>I’m having trouble acquiring the ContentPresenter for a ListViewItem
(like you do with ListBoxItem). (Actually, it looks like a ListViewItem
subclasses a ListBoxItem… but that didn’t work either)<br>
I’m using your GetObjectOfTypeInVisualTree method, starting from the
selected ListViewItem. But I never get the ContentPresenter.<br>
ListViewItem is a ContentControl, and you said “A DataTemplate is
always applied to a ContentPresenter, which is an element present in
the visual tree of every ContentControl.” Is this really true?<br>
Can you help me find the ContentPresenter for a ListViewItem?</p>
<p>Thanks for any help.<br>
Buzz</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-13", 13, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-15" class="comment odd">
				<a name="comment-15" id="comment-15"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-15")'>
					<cite>Comment by Buzz<a href="#comment-15"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-05-10 17:54:26 						
					</div>					
					<div class="content">
						<p>After poking around some more, I found your own example:<br>
<a href="http://www.beacosta.com/Forum/ListViewVisualTree.zip" rel="nofollow">http://www.beacosta.com/Forum/ListViewVisualTree.zip</a></p>
<p>I was doing the equivalent of this, but this gave me the confidence to find my real problem…<br>
In my GridViewColumn I was setting BOTH my DisplayMemberBinding AND my
CellTemplate… whose DataTemplate bound its TextBox’s Text to the same
binding.<br>
My mistake.</p>
<p>By the way, thanks for taking the time to blog this kind of stuff.
Some of the stuff you talk about is very hard to find anywhere else.</p>
<p>Buzz</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-15", 15, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-16" class="comment">
				<a name="comment-16" id="comment-16"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-16")'>
					<cite>Comment by Bea<a href="#comment-16"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-05-11 14:34:34 						
					</div>					
					<div class="content">
						<p>Hi Buzz,</p>
<p>I’m glad your figured it out. Thanks for your kind words.</p>
<p>Bea</p>
					</div>
				<small>(Comments wont nest below this level)</small>
				</div>

					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-16", 16, false); return false;'>Reply here</a>
											</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-17" class="comment">
				<a name="comment-17" id="comment-17"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-17")'>
					<cite>Comment by Anonymous<a href="#comment-17"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-05-11 18:20:36 						
					</div>					
					<div class="content">
						<p>The
method GetObjectOfTypeInVisualTree has a small recursion issue. If the
first child is not a T, it returns the recursive call of the first
child. It will never look at any other children of besides the first.</p>
<p>Here is my change:<br>
private T GetObjectOfTypeInVisualTree<t>(DependencyObject dpob) where T : DependencyObject<br>
{<br>
int count = VisualTreeHelper.GetChildrenCount(dpob);<br>
for (int i = 0; i &lt; count; i++)<br>
{<br>
DependencyObject child = VisualTreeHelper.GetChild(dpob, i);<br>
T childAsT = child as T;<br>
if (childAsT != null)<br>
{<br>
return childAsT;<br>
}<br>
childAsT = GetObjectOfTypeInVisualTree<t>(child);<br>
if (childAsT != null)<br>
{<br>
return childAsT;<br>
}<br>
}<br>
return null;<br>
}</t></t></p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-17", 17, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-373" class="comment odd">
				<a name="comment-373" id="comment-373"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-373")'>
					<cite>Comment by Bea<a href="#comment-373"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-09-18 23:08:50 						
					</div>					
					<div class="content">
						<p>Yes, you’re completely right. I changed the code in the sample attached and in the blog post.<br>
Great catch, and thanks a lot for letting me know!</p>
<p>Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-373", 373, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-19" class="comment">
				<a name="comment-19" id="comment-19"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-19")'>
					<cite>Comment by John<a href="#comment-19"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-05-12 20:39:58 						
					</div>					
					<div class="content">
						<p>In
regard to this example, is it possible to have changes on multiple
bindings be held until an explicit update is called that then pushes
all changes to the source? If so, do you have any pointers on how to do
this?</p>
<p>Thanks,</p>
<p>John</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-19", 19, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-360" class="comment odd">
				<a name="comment-360" id="comment-360"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-360")'>
					<cite>Comment by Bea<a href="#comment-360"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-09-18 10:20:23 						
					</div>					
					<div class="content">
						<p>Hi John,</p>
<p>Please see my reply to Tony B, below. I modified this sample to behave the way you guys want - you can find my code <a href="http://www.beacosta.com/BlogComments/31UpdateExplicit.zip" rel="nofollow">here</a>.</p>
<p>Thanks,<br>
Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-360", 360, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-24" class="comment">
				<a name="comment-24" id="comment-24"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-24")'>
					<cite>Comment by Florian (fkruesch)<a href="#comment-24"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-05-14 18:01:16 						
					</div>					
					<div class="content">
						<p>Loving your stuff, Beatrice.<br>
So, the reason there’s no datagrid in WPF is you don’t need it, right? <img src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/icon_smile.gif" alt=":)" class="wp-smiley"><br>
I’m curious why you’re not planning to make it easier in the next
version and when the next version is gonna come. Is there a new version
of WPF shipping with Orcas?</p>
<p>cheers<br>
Florian</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-24", 24, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-25" class="comment odd">
				<a name="comment-25" id="comment-25"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-25")'>
					<cite>Comment by Bea<a href="#comment-25"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-09-06 22:35:27 						
					</div>					
					<div class="content">
						<p>Hi Florian,</p>
<p>We are definitely aware of the fact that people want a DataGrid in
WPF, and I agree with you that we should have already shipped one.<br>
Yes, there is a new WPF version comming out with Orcas, but don’t count
on DataGrid being out by then. My team has been looking into it though,
so hopefully you will see one coming from Microsoft in a future release.</p>
<p>If need a DataGrid today, you have a few options:</p>
<p>- You can use <a href="http://xceed.com/Grid_WPF_Features.html" rel="nofollow">Xceed’s</a> DataGrid.</p>
<p>- You can use <a href="http://www.infragistics.com/dotnet/netadvantage/wpf.aspx#Overview" rel="nofollow">Infragistics</a> DataGrid.</p>
<p>- You can use interop to take advantage of WinForm’s DataGrid.</p>
<p>- You can write your own. This may sound unrealistic, but I’ve
noticed that most customers only need about 10% of the features of a
typical DataGrid. If that’s your case, you can take the time to build
the 10% you need for your specific scenario.</p>
<p>Thanks,<br>
Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-25", 25, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-18" class="comment">
				<a name="comment-18" id="comment-18"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-18")'>
					<cite>Comment by Ryan Cromwell<a href="#comment-18"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-06-08 17:55:39 						
					</div>					
					<div class="content">
						<p>Beatriz,<br>
Great blog. Love all the samples. I have a question regarding binding
to a method. I have applied a RotateTransform to an Image in a
DataTemplate. I’ve also created a an ObjectDataProvider which allows me
to successfully bind to a method which simply returns Random.Next( -40,
40 ). I was doing this in the hopes of generating a random transform
Angle. Unfortunately, regardless of how many items are in the
ItemsSource for the ItemsControl, the RandomAngleHelper.GetAngle()
method is only called once by the DataTemplate binding. It seems that
once the Angle property of the RotateTransform is bound, it’s not
rebound (for lack of a better term) with each DataTemplate applied.</p>
<p>Hopefully this makes sense.</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-18", 18, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-364" class="comment odd">
				<a name="comment-364" id="comment-364"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-364")'>
					<cite>Comment by Bea<a href="#comment-364"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-09-18 11:48:38 						
					</div>					
					<div class="content">
						<p>Hi Ryan,</p>
<p>Yes, it does make sense. Unfortunately that is the current behavior
of ObjectDataProvider and I can’t think of a simple workaround to call
the method for each item. A <a href="http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=2075847&amp;SiteID=1" rel="nofollow">similar question</a> has been answered in the WPF forum recently. </p>
<p>Thanks,<br>
Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-364", 364, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-20" class="comment">
				<a name="comment-20" id="comment-20"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-20")'>
					<cite>Comment by Rob<a href="#comment-20"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-07-09 16:58:50 						
					</div>					
					<div class="content">
						<p>I have an unrelated question and I’m asking it here because I was unaware of any other way to contact you:</p>
<p>I am trying to figure out how some WPF internals work and I was
wondering if you could shed some light. Let’s say that you have a
UserControl with a RelativeBinding on one of its child controls. When
the UserControl is instantiated its InitializeComponent method is
called. If the relative binding is pointing to something up the tree,
but the UserControl has not yet been added to the tree, how does
InitializeComponent keep from throwing and exception? Furthermore, how
does it bind properly when one of its relatives is changed? I would
appreciate any info you can give in this area.</p>
<p>Thanks!</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-20", 20, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-386" class="comment odd">
				<a name="comment-386" id="comment-386"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-386")'>
					<cite>Comment by Bea<a href="#comment-386"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-09-19 16:48:11 						
					</div>					
					<div class="content">
						<p>Hi Rob,</p>
<p>RelativeSource bindings will be re-evaluated every time there is a
change in layout. More specifically, RelativeSource bindings are
evaluated 1) when SetBinding is called, 2) by a method that is queued
in the dispatcher at a priority lower than layout, and 3) every time we
get a layout changed event. The relative binding source may not exist
while layout is still happening, but once layout settles, the source
will be there. We will retry evaluating the binding until that happens.
You can find the code for this in the AttachToContext method of
BindingExpression.</p>
<p>Let me know if this helps.</p>
<p>Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-386", 386, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-21" class="comment">
				<a name="comment-21" id="comment-21"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-21")'>
					<cite>Comment by PeterG<a href="#comment-21"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-07-24 13:44:40 						
					</div>					
					<div class="content">
						<p>I am finding problems in using Explicit source updates in a master detail scenario. </p>
<p>If a detail user control is bound on a form by its datacontext (a
custom class implementing INotifyPropertyChanged) and standard controls
inside the user control are bound to sub-properties of this data
context, is there no way to set the explicit binding at the user
control binding? I am trying to find a solution where I do not need to
know/update the individual bindings within the user control or at least
keep the behavior in XAML.</p>
<p>In addition the master form has a listbox to select the current
detail and should discard any changes when the selection is changed.</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-21", 21, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-370" class="comment odd">
				<a name="comment-370" id="comment-370"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-370")'>
					<cite>Comment by Bea<a href="#comment-370"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-09-18 18:12:50 						
					</div>					
					<div class="content">
						<p>Hi PeterG,</p>
<p>If I understand correctly, you are asking for a way to call
UpdateSource on all bindings below a certain element in the tree. We’ve
talked about that on the data binding team, but never got around to
doing it. Our idea was to add a Bindings collection to certain
elements, which would contain all the Bindings associated with child
elements in the same namescope. To update all bindings of a particular
user control, you would simply have to get the Bindings collection for
that control, enumerate through all BindingExpressions and call
UpdateSource() on them.</p>
<p>Unfortunately I very much doubt that this feature will be included
in our next release, given our current planning - unless of course,
there is a lot of customer demand. So scream if you would like to see
us implement that <img src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/icon_smile.gif" alt=":)" class="wp-smiley"> </p>
<p>Until then, we need to continue doing that manually… <img src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/icon_sad.gif" alt=":(" class="wp-smiley"> </p>
<p>Thanks a lot for your feedback!!</p>
<p>Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-370", 370, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-23" class="comment">
				<a name="comment-23" id="comment-23"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-23")'>
					<cite>Comment by Tony B<a href="#comment-23"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-07-25 12:58:30 						
					</div>					
					<div class="content">
						<p>I
don’t think this works as one would expect. I’d expect to be able to
edit a FEW peopl in the listbox and THEN hit the submit button. Unless
I’m missing something, you would have to hit submit after each edit and
if you select someone else in the listbox, your changes will be lost.
Is this true? Can you fix that? </p>
<p>It seems you’d need to get to a binding on a textbox that no longer
exists since the template was switched out when IsSelected became
false, right?</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-23", 23, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-359" class="comment odd">
				<a name="comment-359" id="comment-359"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-359")'>
					<cite>Comment by Bea<a href="#comment-359"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-09-18 10:15:53 						
					</div>					
					<div class="content">
						<p>Hi Tony B,</p>
<p>I changed this sample to behave the way you describe.<br>
I first factored the code that updates an employee into a method called
“UpdateOneEmployeeToSource”. This method is able to update the binding
associated with the data item that you pass as a parameter.</p>
<p>        private void UpdateOneEmployeeToSource(Employee employee)<br>
        {<br>
            ListBoxItem lbi = (ListBoxItem)(lb.ItemContainerGenerator.ContainerFromItem(employee));<br>
            ContentPresenter cp = GetObjectOfTypeInVisualTree<contentpresenter>(lbi);<br>
            DataTemplate dt = (DataTemplate)(this.Resources[”editableEmployee”]);<br>
            TextBox tb = (TextBox)(dt.FindName(”tb”, cp));<br>
            BindingExpression be = tb.GetBindingExpression(TextBox.TextProperty);<br>
            be.UpdateSource();<br>
        }</contentpresenter></p>
<p>Then I wrote code in the handler for the “Submit All” button that calls the previous method for each employee displayed.</p>
<p>        private void Submit_All(object sender, RoutedEventArgs e)<br>
        {<br>
            MySource source = root.DataContext as MySource;<br>
            foreach (Employee employee in source.Employees)<br>
            {<br>
                UpdateOneEmployeeToSource(employee);<br>
            }<br>
        }</p>
<p>I also had to make some slight changes to the styles - I needed to
make sure that the editable style is always used, even when the
employee is not selected.<br>
You can find the project with this code <a href="http://www.beacosta.com/BlogComments/31UpdateExplicit.zip" rel="nofollow">here</a>.</p>
<p>One problem with this solution is that it attempts to update all
employees, even if only a couple have been changed in the UI.
Unfortunately there is no public way to know whether the binding needs
updating (the binding knows that internally, but we don’t expose that
publicly). </p>
<p>I hope this helps.</p>
<p>Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-359", 359, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-22" class="comment">
				<a name="comment-22" id="comment-22"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-22")'>
					<cite>Comment by Alex (geekcoder)<a href="#comment-22"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-07-25 22:27:31 						
					</div>					
					<div class="content">
						<p>Hi Beatriz, I have a WPF question related to a previous post of yours - asychronous display of data in WPF.</p>
<p>I have a list box that displays search results. </p>
<p>I want to spawn a worker thread to do the search, and say its going
to return 120,000 results, over 10 seconds, is there a good way to fill
the listview?</p>
<p>I’ve tried using Dispatcher.CheckAccess and BeginInvoke, but this reall slows things down.</p>
<p>I’ve tried putting the results in a thread safe queue and having the
UI thread pull them off the queue, but I am having trouble getting WPF
to update the listview - it doesn’t redraw it ever?</p>
<p>Thanks,</p>
<p>- Alex</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-22", 22, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-372" class="comment odd">
				<a name="comment-372" id="comment-372"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-372")'>
					<cite>Comment by Bea<a href="#comment-372"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-09-18 22:47:08 						
					</div>					
					<div class="content">
						<p>Hi Alex,</p>
<p>It should be possible to do what you’re asking by using BeginInvoke. There are a few things that you will want to keep in mind:</p>
<p>1. Don’t do a BeginInvoke with a priority higher than what is necessary. This may cause your app to slow down.<br>
2. Don’t forget to lock your data.<br>
3. Don’t call BeginInvoke before the previous BeginInvoke call has been
process from the queue - this can also cause delays. You can write some
code like the following:</p>
<p>// this code should be called by the worker thread<br>
lock(this)<br>
{<br>
  …store data items for later use by the UI thread<br>
  if(this.dispatcherOperation == null)<br>
  {<br>
    this.dispatcherOperation = Application.Current.Dispatcher.BeginInvoke(DispatcherPriority.Normal, …this.MyFunction…);<br>
  }<br>
} </p>
<p>// this will be called in the UI thread<br>
private void MyFunction(…)<br>
{<br>
  lock(this)<br>
  {<br>
    …add items to the ListView<br>
    this.dispatcherOperation = null;<br>
  }<br>
}</p>
<p>Thanks,<br>
Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-372", 372, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
</div>
<div id="addcomment" class="comment" style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;">
<a id="addcommentanchor" name="addcommentanchor"></a>
<form action="http://www.beacosta.com/blog/wp-comments-post.php" method="post" id="commentform">
<div class="add">
	<div id="reroot" style="display: none;">
		<small><a href="#" onclick="reRoot(); return false;">
			Click here to cancel "reply".
		</a></small>
	</div>
	<small>
		Name (required)	</small>
	<div>
		<input name="author" id="author" class="textarea" value="" size="28" tabindex="1" type="text">
	</div>
	<small>
		E-mail (required - never shown publicly)	</small>
	<div>
		<input name="email" id="email" value="" size="28" tabindex="2" type="text">
	</div>
	<small>
		<acronym title="Uniform Resource Identifier">URI</acronym>	</small>
	<div>
		<input name="url" id="url" value="" size="28" tabindex="3" type="text">	
	<div style="display: block;" id="secureimgdiv">
				<p><label for="securitycode">Anti-spam word: (Required)</label><span style="color: rgb(255, 0, 0);">*</span><br>
				<small>To
prove you're a person (not a spam script), type the security word shown
in the picture. Click on the picture to hear an audio file of the word.</small><br>
				<input name="securitycode" id="securitycode" size="30" tabindex="4" type="text">
				<input name="matchthis" value="1447" type="hidden">
				<a href="http://www.beacosta.com/blog?audioselect=1447" title="Hear an audio file of the anti-spam image"><img src="Beatriz%20Costa%20%BB%20How%20can%20I%20update%20an%20explicit%20binding%20within%20a%20template_files/blog.jpg" alt="Click to hear an audio file of the anti-spam word" style="border: 1px solid black; vertical-align: top; height: 50px; width: 160px;"></a></p>
			</div></div>

	<small>
		Your Comment (<a href="#" onclick="changeCommentSize(-80); return false;">smaller size</a> | <a href="#" onclick="changeCommentSize(80); return false;">larger size</a>)
	</small>
	<div style="width: 100%;">
		<textarea name="comment" id="comment" cols="60" rows="14" tabindex="4"></textarea>
	</div>
	<small>
You may use &lt;a href="" title=""&gt; &lt;abbr title=""&gt;
&lt;acronym title=""&gt; &lt;b&gt; &lt;blockquote cite=""&gt;
&lt;code&gt; &lt;em&gt; &lt;i&gt; &lt;strike&gt; &lt;strong&gt; in your
comment. </small>
	<div>
		<input name="comment_post_ID" value="41" type="hidden">
		<input name="redirect_to" value="/blog/?p=41" type="hidden">
		<input onclick="if(typeof(onAddComment) == 'function') { onAddComment(); } else { alert('ERROR:\nIt looks like the website administrator hasn\'t activated the Brians Threaded Comments plugin from the plugin page'); };" name="addcommentbutton" id="addcommentbutton" value="Add comment" tabindex="5" type="button">
	</div>
</div>
<input id="comment_reply_ID" name="comment_reply_ID" value="0" type="hidden"><div style="display: none;" id="jsspamblock_hideable">
	<input name="jsspamblock_hidden" value="4c05ce2ba39ce67fc0a127d40d2124aa" type="hidden">
	<p>For spam filtering purposes, please copy the number <strong>6936</strong> to the field below:</p>
	<input name="jsspamblock_input" id="jsspamblock_input" tabindex="5" value="">
</div>
<script type="text/javascript">
	document.getElementById("jsspamblock_input").value = 6936;
	document.getElementById("jsspamblock_hideable").style.display = "none";
</script>
			
			<script language="JavaScript" type="text/javascript">
			<!--
				var urlinput = document.getElementById("url");
				var submitp = urlinput.parentNode;
				var substitution2 = document.getElementById("secureimgdiv");
				submitp.appendChild(substitution2, urlinput);
			// -->
			</script>
</form>
</div>
						
								
				<p></p><div align="center"></div>						
			</div>
		</div>
		<div id="right">
		<div class="sidebar">  
    <!-- Meta -->
	<h2>Meta:</h2>
 	<ul class="noli">
	<li><a href="http://feeds.feedburner.com/BeatrizCosta" title="Syndicate this site using RSS"><abbr title="Really Simple Syndication">RSS</abbr></a></li>
	<li><a href="http://feeds.feedburner.com/CommentsForBeatrizCosta" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
	</ul>				

  <!-- Search -->
  <h2>Search</h2>
	<br>
	<form id="searchform" method="get" action="">
	<input name="s" id="s" size="15" type="text">
	<input name="submit" value="Search" type="submit">
	</form>

  <!-- Categories -->
  <h2>Categories</h2>
	<ul class="menu">
		<li><a href="http://www.beacosta.com/blog/?cat=3" title="View all posts filed under General">General</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=2" title="View all posts filed under WPF Data Binding">WPF Data Binding</a>
	<ul class="children">
	<li><a href="http://www.beacosta.com/blog/?cat=12" title="View all posts filed under Binding to ADO.NET">Binding to ADO.NET</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=14" title="View all posts filed under ListBox">ListBox</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=9" title="View all posts filed under ListView">ListView</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=10" title="View all posts filed under Master-detail">Master-detail</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=13" title="View all posts filed under Sorting, filtering, grouping">Sorting, filtering, grouping</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=11" title="View all posts filed under Styles and Templates">Styles and Templates</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=7" title="View all posts filed under TreeView">TreeView</a>
</li>
	</ul>
</li>
	</ul>					
	
  <!-- Archives -->
	<h2>Archives</h2>
	<ul>
		<li><a href="http://www.beacosta.com/blog/?m=200709" title="September 2007">September 2007</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200708" title="August 2007">August 2007</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200705" title="May 2007">May 2007</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200704" title="April 2007">April 2007</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200701" title="January 2007">January 2007</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200611" title="November 2006">November 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200610" title="October 2006">October 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200609" title="September 2006">September 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200608" title="August 2006">August 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200607" title="July 2006">July 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200606" title="June 2006">June 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200605" title="May 2006">May 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200604" title="April 2006">April 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200603" title="March 2006">March 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200602" title="February 2006">February 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200601" title="January 2006">January 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200512" title="December 2005">December 2005</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200511" title="November 2005">November 2005</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200510" title="October 2005">October 2005</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200509" title="September 2005">September 2005</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200508" title="August 2005">August 2005</a></li>
	</ul>

</div>			<div id="footer">
				<div class="copyright">
				<small>
				<span class="copy">Copyright © 2007 				<strong><a title="Beatriz Costa" href="http://www.beacosta.com/blog">Beatriz Costa</a>
				</strong>
				</span>
				<br><br>
				</small>
				</div>
			</div>	
		</div>
	</div>
</body></html>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0071)http://www.paulstovell.net/blog/index.php/binding-oriented-programming/ -->
<HTML xmlns="http://www.w3.org/1999/xhtml"><HEAD 
profile=http://gmpg.org/xfn/11><TITLE>PaulStovell.NET » Binding Oriented Programming</TITLE>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<META content="MSHTML 6.00.2900.3199" name=GENERATOR><!-- leave this for stats please --><LINK media=screen 
href="PaulStovell_NET » Binding Oriented Programming_files/style.css" 
type=text/css rel=stylesheet><LINK title="RSS 2.0" 
href="http://feeds.feedburner.com/PaulStovell" type=application/rss+xml 
rel=alternate><LINK title="RSS .92" 
href="http://feeds.feedburner.com/PaulStovell" type=text/xml rel=alternate><LINK 
title="Atom 0.3" href="http://feeds.feedburner.com/PaulStovell" 
type=application/atom+xml rel=alternate><LINK 
href="http://www.paulstovell.net/blog/xmlrpc.php" rel=pingback><LINK 
title="October 2007" href="http://www.paulstovell.net/blog/index.php/2007/10/" 
rel=archives><LINK title="September 2007" 
href="http://www.paulstovell.net/blog/index.php/2007/09/" rel=archives><LINK 
title="August 2007" href="http://www.paulstovell.net/blog/index.php/2007/08/" 
rel=archives><LINK title="July 2007" 
href="http://www.paulstovell.net/blog/index.php/2007/07/" rel=archives><LINK 
title="June 2007" href="http://www.paulstovell.net/blog/index.php/2007/06/" 
rel=archives><LINK title="May 2007" 
href="http://www.paulstovell.net/blog/index.php/2007/05/" rel=archives><LINK 
title="April 2007" href="http://www.paulstovell.net/blog/index.php/2007/04/" 
rel=archives><LINK title="March 2007" 
href="http://www.paulstovell.net/blog/index.php/2007/03/" rel=archives><LINK 
title="February 2007" href="http://www.paulstovell.net/blog/index.php/2007/02/" 
rel=archives><LINK title="January 2007" 
href="http://www.paulstovell.net/blog/index.php/2007/01/" rel=archives><LINK 
title="December 2006" href="http://www.paulstovell.net/blog/index.php/2006/12/" 
rel=archives><LINK title="November 2006" 
href="http://www.paulstovell.net/blog/index.php/2006/11/" rel=archives><LINK 
title="October 2006" href="http://www.paulstovell.net/blog/index.php/2006/10/" 
rel=archives><LINK title="September 2006" 
href="http://www.paulstovell.net/blog/index.php/2006/09/" rel=archives><LINK 
title="August 2006" href="http://www.paulstovell.net/blog/index.php/2006/08/" 
rel=archives><LINK title="July 2006" 
href="http://www.paulstovell.net/blog/index.php/2006/07/" rel=archives><LINK 
title="June 2006" href="http://www.paulstovell.net/blog/index.php/2006/06/" 
rel=archives><LINK title="May 2006" 
href="http://www.paulstovell.net/blog/index.php/2006/05/" rel=archives><LINK 
title="March 2006" href="http://www.paulstovell.net/blog/index.php/2006/03/" 
rel=archives><LINK title="February 2006" 
href="http://www.paulstovell.net/blog/index.php/2006/02/" rel=archives><LINK 
title="January 2006" href="http://www.paulstovell.net/blog/index.php/2006/01/" 
rel=archives><LINK title="December 2005" 
href="http://www.paulstovell.net/blog/index.php/2005/12/" rel=archives><LINK 
title="November 2005" href="http://www.paulstovell.net/blog/index.php/2005/11/" 
rel=archives><LINK title="October 2005" 
href="http://www.paulstovell.net/blog/index.php/2005/10/" rel=archives><LINK 
title="September 2005" href="http://www.paulstovell.net/blog/index.php/2005/09/" 
rel=archives><LINK title=RSD 
href="http://www.paulstovell.net/blog/xmlrpc.php?rsd" type=application/rsd+xml 
rel=EditURI>
<META content=0.6.9 name=FAlbum><LINK 
href="PaulStovell_NET » Binding Oriented Programming_files/falbum.css" 
type=text/css rel=stylesheet></HEAD>
<BODY>
<DIV id=container>
<DIV id=header>
<DIV id=menu>
<UL>
  <LI><A title=PaulStovell.NET href="http://www.paulstovell.net/blog/">Home</A> 
  </LI>
  <LI><A title=About 
  href="http://www.paulstovell.net/blog/index.php/about/">About</A> </LI>
  <LI><A title=Presentations 
  href="http://www.paulstovell.net/blog/index.php/presentations/">Presentations</A> 
  </LI>
  <LI><A title="XAML and WPF Coding Guidelines" 
  href="http://www.paulstovell.net/blog/index.php/xaml-and-wpf-coding-guidelines/">XAML 
  and WPF Coding Guidelines</A> </LI></UL></DIV>
<DIV id=pagetitle>
<H1><A title=PaulStovell.NET 
href="http://www.paulstovell.net/blog/">PaulStovell.NET</A></H1></DIV>
<DIV id=syndication><A class=feed title="Syndicate this site using RSS" 
href="http://feeds.feedburner.com/PaulStovell">Entries <ABBR 
title="Really Simple Syndication">RSS</ABBR></A> | <A 
title="Syndicate comments using RSS" 
href="http://www.paulstovell.net/blog/index.php/comments/feed/">Comments RSS</A> 
</DIV>
<DIV id=searchbox>
<FORM id=searchform action=http://www.paulstovell.net/blog/ method=get>
<DIV><INPUT id=s name=s> <INPUT id=searchsubmit type=submit value=Search> 
</DIV></FORM></DIV></DIV>
<DIV class=pagewrapper>
<DIV class=page>
<DIV class=wrapper><!-- This wrapper class appears only on Page and Single Post pages. -->
<DIV class=narrowcolumnwrapper>
<DIV class=narrowcolumn>
<DIV class=content>
<DIV class=post id=post-530>
<H2><A title="Binding Oriented Programming" 
href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/" 
rel=bookmark>Binding Oriented Programming</A></H2>
<DIV class=postinfo>Posted on <SPAN class=postdate>March 17th, 2007</SPAN> by 
Paul Stovell </DIV>
<DIV class=entry>
<P>Recently&nbsp;I’ve been thinking about the way I’ve started to code 
applications, especially user interfaces, and I realised that I use a hell of a 
lot of data binding (”Really? You don’t say! Go on…”).&nbsp;In fact, a lot of 
the way I design components and applications is based on the&nbsp;assumption 
that data binding will be there, and if data binding weren’t available I’d 
probably take very different approaches.</P>
<P>Yesterday a friend asked me what I’d do if I had to use a UI framework that 
didn’t have good data binding support. I thought about this for a while, and I 
came to the conclusion that the time savings and productivity increases that I 
personally get from using data binding would outweigh the time it would probably 
take to build a (relatively simple) data binding framework of my own. </P>
<P>Here’s my philosophy:</P>
<P><STRONG>In most projects, 80% of the code found in the code-behind of a 
typical page, window or user control (ASP.NET, Windows Forms or Windows 
Presentation Foundation) could be replaced with data binding. There is no excuse 
whatsoever for a code-behind file comprising of more than 200 lines of code. 
</STRONG></P>
<P>When I open the code-behind for a piece of UI and I see it has more than, 
say,&nbsp;200 lines of code, or a ton of event handlers for every little 
interaction that might take place, and lots of references to controls from the 
code-behind, I see the code as being “brute forced”. </P>
<P>Brute force programming goes something like this:</P>
<OL>
  <LI>The developer needed to solve a problem with code 
  <LI>He wrote the code 
  <LI>It didn’t quite do everything he needed 
  <LI>He wrote some more code 
  <LI>A special circumstance came up where if XYZ is HKLM, then ABC should 
  behave differently 
  <LI>He added some more code 
  <LI>Repeat forever </LI></OL>
<P>The idea is you throw as much code at a problem as you can, until eventually 
you kill it. </P>
<P>When you begin to think about how components interact in terms of how they 
are bound, that is, when you practice Binding Oriented Programming (BOP), your 
code becomes much, much smaller, is much less coupled, and can handle many more 
circumstances than you might originally plan for. Allow me to explain why.</P>
<H3><STRONG>Synchronization</STRONG></H3>
<P>Without binding:</P>
<P><A 
href="http://www.paulstovell.net/blog/wp-content/uploads/2007/03/windowslivewriterbindingorientedprogramming-47bbimage023.png" 
atomicselection="true"><IMG height=204 
src="PaulStovell_NET » Binding Oriented Programming_files/windowslivewriterbindingorientedprogramming-47bbimage0-thumb6.png" 
width=240></A> </P>
<P>With binding:</P>
<P><A 
href="http://www.paulstovell.net/blog/wp-content/uploads/2007/03/windowslivewriterbindingorientedprogramming-47bbimage053.png" 
atomicselection="true"><IMG height=201 
src="PaulStovell_NET » Binding Oriented Programming_files/windowslivewriterbindingorientedprogramming-47bbimage0-thumb13.png" 
width=240></A> </P>
<P>The key reason why data binding provides all of these benefits is the 
automatic synchronization between the source and the targets. This 
synchronization might happen in both directions, or it might happen only in one 
direction, but the point is it’s there. When we don’t use data binding, it’s up 
to us to keep data in sync, and the more things that can possibly effect that 
data the more code we have to write to glue them together. </P>
<P>When you stop thinking in terms of what data is <EM>set on</EM> a component, 
and instead think in terms of what data is <EM>synchronized between</EM> 
components, you begin to think in a binding oriented way.</P>
<P><A 
href="http://www.paulstovell.net/blog/wp-content/uploads/2007/03/windowslivewriterbindingorientedprogramming-47bbimage083.png" 
atomicselection="true"><IMG height=37 
src="PaulStovell_NET » Binding Oriented Programming_files/windowslivewriterbindingorientedprogramming-47bbimage0-thumb23.png" 
width=240></A> </P>
<P>If a Slider is a representation of the zoom level of a document, then the 
Slider and the zoom level are <EM>synchronized</EM>. By setting the Slider’s 
value in code by yourself, you have to work very hard to keep the two in sync. 
If something else affects that zoom level, such as a Zoom menu later, you have 
to write the code to go and set that value. You’re handling that synchronization 
yourself. </P>
<H3><STRONG>Pull, don’t push</STRONG></H3>
<P>When you look at a system that doesn’t use binding, the primary interaction 
between the code-behind and the markup/designer code is that of a push model - 
the code-behind pushes data into the controls. The code-behind knows what every 
control needs, and it has the job of setting it.</P>
<P><A 
href="http://www.paulstovell.net/blog/wp-content/uploads/2007/03/windowslivewriterbindingorientedprogramming-47bbimage0113.png" 
atomicselection="true"><IMG height=182 
src="PaulStovell_NET » Binding Oriented Programming_files/windowslivewriterbindingorientedprogramming-47bbimage0-thumb33.png" 
width=240></A> </P>
<P>You can spot this push model very easily - the methods and properties in the 
code-behind will have references to the names of controls in the UI, for 
example:</P><PRE>nameLabel.Text = someData.Name;</PRE>
<P>Even when you use data binding, or you think you’re using data binding, you 
can run into this trap:</P><PRE>dropDown.DataSource&nbsp;= myListOfCustomers;</PRE>
<P>The fact that there exists a reference to a UI control from the code-behind 
suggests the existence a push model. It implies that the code-behind has 
<EM>authority</EM> over the controls. Since the markup is already dependent upon 
the code-behind (as it inherits from it, and because it uses things such as 
event handlers on the code-behind), when you start referencing UI components 
from code-behind you make that dependency two-way, and the two become very 
tightly coupled. </P>
<P>When you practice Binding Oriented Programming, you develop your code-behind 
using a “pull” model. Your code behind becomes a <EM>provider</EM> of data, 
rather than the <EM>pusher </EM>of data. Your UI controls become pullers of 
data, and the dependency exists only one way - your UI components depend on the 
code-behind, but the code behind doesn’t depend on the UI.</P>
<P>Let me give you an example of changing something from being a pull model to a 
push model. While my example will use Windows Presentation Foundation, the 
approach can work just as well in Windows Forms and ASP.NET:</P>
<P>Let’s say I have an Address class that represents the postal address of a 
person, and on a Window I want to display the various bits of the selected 
Address as a single string.</P>
<P>The markup for the Window might be:</P><PRE>&lt;Window
  x:Class="Example.Window1"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  Title="Window1"
  &gt;
  &lt;StackPanel&gt;
    &lt;TextBlock
      x:Name="_addressLine1TextBlock"
      /&gt;
    &lt;TextBlock
      x:Name="_addressLine2TextBlock"
      /&gt;
    &lt;TextBlock
      x:Name="_addressSuburbTextBlock"
      /&gt;
    &lt;TextBlock
      x:Name="_addressPostcodeTextBlock"
      /&gt;
  &lt;/StackPanel&gt;
&lt;/Window&gt;</PRE>
<P>And the code-behind could be:</P><PRE>class Window1 {
    private Address _selectedAddress;

    public Window1() {
        InitializeComponent();
    }

    public Address SelectedAddress {
        get { return _selectedAddress; }
        set {
            _selectedAddress = value;
            _addressLine1TextBlock.Text = _SelectedAddress.Line1;
            _addressLine2TextBlock.Text = _SelectedAddress.Line1;
            _addressSuburbTextBlock.Text = _SelectedAddress.Suburb;
            _addressPostcodeTextBlock.Text = _SelectedAddress.Postcode;
        }
    }
}</PRE>
<P>You can see the Push model: The code-behind has a reference to the TextBlock, 
and so the code-behind is dependent upon that TextBlock. If something else on 
the&nbsp;Window were to display the same address, or if the address changed, 
we’d have to add more code to keep the data in sync.&nbsp;</P>
<P>Let’s change it to a Pull model. The code-behind for our Window can 
become:</P><PRE>class Window1 {
    public Window1() {
        InitializeComponent();
    }

    public DependencyProperty SelectedAddressProperty =
        DependencyProperty.Register("SelectedAddress", typeof(Address),
            typeof(Window1), new UIPropertyMetadata());

    public Address SelectedAddress {
        get { return (Address)GetValue(SelectedAddressProperty); }
        set { SetValue(SelectedAddressProperty, value); }
    }
}</PRE>
<P>Note that while I’ve used a DependencyProperty in WPF, you could easily 
implement INotifyPropertyChanged on your form in Windows Forms to achieve the 
same functionality. Now the markup simply becomes:</P><PRE>&lt;Window
  x:Class="Example.Window1"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  Title="Window1"
  x:Name="_this"
  &gt;
  &lt;StackPanel&gt;
    &lt;TextBlock
      Text="{Binding ElementName=_this, Path=SelectedAddress.Line1}"
      /&gt;
    &lt;TextBlock
      Text="{Binding ElementName=_this, Path=SelectedAddress.Line2}"
      /&gt;
    &lt;TextBlock
      Text="{Binding ElementName=_this, Path=SelectedAddress.Suburb}"
      /&gt;
    &lt;TextBlock
      Text="{Binding ElementName=_this, Path=SelectedAddress.Postcode}"
      /&gt;
  &lt;/StackPanel&gt;
&lt;/Window&gt;</PRE>
<P>While this is a pretty simple example, the concepts can be extended to just 
about every UI related scenario you can imagine. When you learn to spot the 
signs of a push model, and you invert it to become a pull model, you’ll find 
that the code becomes much easier to maintain, much more flexible (as other UI 
elements can reuse that data), and much more modular.</P>
<P>Incidentally, the practice of having the UI bind to it’s own code-behind, a 
trick I’ve dubbed “code-<STRONG>b</STRONG>eh<STRONG>inding</STRONG>“, is the 
feature that probably has me <EM>most</EM> excited about Windows Presentation 
Foundation right now. You can do the same thing in Windows Forms and ASP.NET, 
but the designer/markup support really isn’t there for it. In XAML, you can 
achieve it all using markup.</P>
<P>These are just two of the core traits of Binding Oriented Programming: the 
implicit synchronization between data and components, and the inversion of your 
code-behind from a traditional Push model to a much more sophisticated Pull 
model. I think there are more of these traits, but I’m still trying to organise 
my mind around them - this blog entry is just a “thought-in-progress”. </P>
<P>I’ll end this entry with a challenge: open up a project you’ve worked on over 
the last few months, and try to find a page or form with more than, say, 300 
lines of code-behind. Try to identify how much of that code is simply spent 
keeping data in sync between UI elements and objects, and how much of it, and 
how much of it involves the code-behind having authority over the UI controls. 
Think about the ways you could make that synchronization more implicit using 
binding, and how you could invert at least some of that Push model into a Pull 
model. I’d love to know the challenges that people face when attempting to make 
this shift. </P>
<P class=postinfo>Filed under: <A title="View all posts in .NET" 
href="http://www.paulstovell.net/blog/index.php/category/net/" 
rel="category tag">.NET</A>, <A title="View all posts in C#" 
href="http://www.paulstovell.net/blog/index.php/category/csharp/" 
rel="category tag">C#</A>, <A title="View all posts in Readify" 
href="http://www.paulstovell.net/blog/index.php/category/readify/" 
rel="category tag">Readify</A>, <A title="View all posts in Architecture" 
href="http://www.paulstovell.net/blog/index.php/category/architecture/" 
rel="category tag">Architecture</A>, <A 
title="View all posts in Personal Development" 
href="http://www.paulstovell.net/blog/index.php/category/personal-development/" 
rel="category tag">Personal Development</A>, <A 
title="View all posts in Software" 
href="http://www.paulstovell.net/blog/index.php/category/software/" 
rel="category tag">Software</A>, <A 
title="View all posts in Windows Presentation Foundation" 
href="http://www.paulstovell.net/blog/index.php/category/windows-presentation-foundation/" 
rel="category tag">Windows Presentation Foundation</A>, <A 
title="View all posts in Data Binding" 
href="http://www.paulstovell.net/blog/index.php/category/data-binding/" 
rel="category tag">Data Binding</A> </P><!-- 
					<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
		<rdf:Description rdf:about="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/"
    dc:identifier="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/"
    dc:title="Binding Oriented Programming"
    trackback:ping="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/trackback/" />
</rdf:RDF>					 --></DIV></DIV>
<DIV class=browse>« <A 
href="http://www.paulstovell.net/blog/index.php/roundup-20070307/">Roundup 
20070307</A> <A 
href="http://www.paulstovell.net/blog/index.php/team-build-monitor-gadget/">Team 
Build Monitor Gadget</A> »</DIV></DIV><!-- End content --></DIV></DIV><!-- End narrowcolumnwrapper and narrowcolumn classes --><!-- Start Comments Template -->
<DIV class=narrowcolumnwrapper>
<DIV class=narrowcolumn>
<DIV class=content>
<DIV class=post><!-- You can start editing here. -->
<H3 id=comments>17 Responses to “Binding Oriented Programming”</H3>
<OL class=commentlist>
  <LI class=alt id=comment-970>
  <DIV class=commentmetadata><STRONG>Thomas Eyde</STRONG>, on <A title="" 
  href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/#comment-970">March 
  17th, 2007 at 9:58 pm</A> Said: </DIV>
  <P>I have searched for an easier way to do databind like things in ASP.NET. 
  I’d like to see how your ideas can be implemented on that platform.</P>
  <P>My problem with declarative databinding has been maintainability. Granted, 
  it’s easy to get the databinding correct the first time, but then there are at 
  least two problems:</P>
  <P>1. Names can change. Or the abstractions. Newer tools will perhaps detect 
  mismatches at compile time, but that wasn’t the case in ASP.NET 1.1</P>
  <P>2. How do I reuse declarative databinding? If I write the same binding code 
  all over the place, which is kind of what VS 2005 invites us to do, and there 
  are no refactoring tool support, then any change can morph into a maintenance 
  nightmare.</P>
  <P>BTW, a codebehind and its ui is tightly coupled. As you say, one inherit 
  the other, a tighter coupling than that is hard to get. That doesn’t mean I 
  disagree that a push model is bad. I do. I just think you use the wrong 
  arguments.</P>
  <LI class="" id=comment-971>
  <DIV class=commentmetadata><STRONG>Rt. Greg</STRONG>, on <A title="" 
  href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/#comment-971">March 
  18th, 2007 at 10:28 am</A> Said: </DIV>
  <P>Great article. I just try it with Windows Forms and it works. It’s pretty 
  easy: Just add a new Data Source to your project selecting the form and drag 
  the property from the Data Sources window.</P>
  <P>So I have one property working. </P>
  <P>How about data sources that return multiple objects?<BR>How about a Master 
  / Detail relationship?</P>
  <P>Looking forward to rewrite most of my code. Je je.</P>
  <P>Thanks.</P>
  <LI class=alt id=comment-972>
  <DIV class=commentmetadata><STRONG><A href="http://www.paulstovell.net/" 
  rel="external nofollow">Paul Stovell</A></STRONG>, on <A title="" 
  href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/#comment-972">March 
  18th, 2007 at 12:01 pm</A> Said: </DIV>
  <P>Hi Thomas,</P>
  <P>I agree with your observation that you can’t get more tightly coupled than 
  inheritance. I guess what I meant to say was that the nature of communication 
  between a base class and its decendants can be complex, and when you make that 
  communication flow two ways explicitly you introduce even more complexity and 
  less flexibility.</P>
  <P>Rt. Greg,</P>
  <P>Glad you got it to work. I’ll try to put together a few examples of how to 
  invert the code-behind of different frameworks into a pull-model.</P>
  <LI class="" id=comment-974>
  <DIV class=commentmetadata><STRONG><A 
  href="http://notgartner.wordpress.com/2007/03/18/paul-stovell-on-binding-orientated-programming/" 
  rel="external nofollow">Paul Stovell on Binding Orientated Programming « 
  notgartner</A></STRONG>, on <A title="" 
  href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/#comment-974">March 
  19th, 2007 at 7:49 am</A> Said: </DIV>
  <P>[…] Stovell on Binding Orientated&nbsp;Programming 18 03 2007 Paul might be 
  onto something here. I’ve seen first hand how productive Paul can be with WPF 
  and I wonder how much of it is due […]</P>
  <LI class=alt id=comment-976>
  <DIV class=commentmetadata><STRONG>Glenn</STRONG>, on <A title="" 
  href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/#comment-976">March 
  20th, 2007 at 11:31 am</A> Said: </DIV>
  <P>Paul,</P>
  <P>I would love to see a couple of examples on how this can be implemented in 
  ASP.NET.</P>
  <P>Thanks</P>
  <LI class="" id=comment-977>
  <DIV class=commentmetadata><STRONG>Xaxie</STRONG>, on <A title="" 
  href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/#comment-977">March 
  20th, 2007 at 12:39 pm</A> Said: </DIV>
  <P>Paul,</P>
  <P>I’m very glad to read this article. But if the data in datasource need to 
  be processed before it is shown in UI elements. The normal case is that the 
  nil should be displayed as zero.</P>
  <P>Thanks</P>
  <LI class=alt id=comment-979>
  <DIV class=commentmetadata><STRONG>Andrew</STRONG>, on <A title="" 
  href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/#comment-979">March 
  20th, 2007 at 2:20 pm</A> Said: </DIV>
  <P>Paul - Interesting points - and has helped gel some of my own thinking. 
  Thanks. </P>
  <P>One thing I’m not 100% clear on (and I might be missing something here) is 
  how could you achieve the same Pull-model using INotifyPropertyChanged (ie. in 
  the non-WPF scenario)?</P>
  <P>Cheers.</P>
  <LI class="" id=comment-982>
  <DIV class=commentmetadata><STRONG>Markus</STRONG>, on <A title="" 
  href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/#comment-982">March 
  20th, 2007 at 7:00 pm</A> Said: </DIV>
  <P>@Xaxie, I found this kind of data processing to be one of the strongest 
  arguments for using data bindings and custom business objects. E. g. if I have 
  a DateTime property that display just the time if it is today’s date, the date 
  if it is a recent day or an empty string if it is DateTime.Min, I just 
  implement another string property called e.g. MyDateFormatted or DisplayMyDate 
  which handles all this kind of logic in its getters and setters and use this 
  property for data binding.</P>
  <P>This way I can even test this logic using unit tests and use the same logic 
  e.g. for a windows forms, asp.net and data export scenario.</P>
  <LI class=alt id=comment-1059>
  <DIV class=commentmetadata><STRONG><A 
  href="http://www.paulstovell.net/blog/index.php/securitymanager-declarative-security-using-data-binding/" 
  rel="external nofollow">PaulStovell.NET » SecurityManager - Declarative 
  security using Data Binding</A></STRONG>, on <A title="" 
  href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/#comment-1059">April 
  18th, 2007 at 1:55 am</A> Said: </DIV>
  <P>[…] fits very nicely into the Binding Oriented Programming idea I discussed 
  a while back. If you use a solution like this, you’re recognizing that every 
  […]</P>
  <LI class="" id=comment-1080>
  <DIV class=commentmetadata><STRONG><A 
  href="http://isdepartment.wordpress.com/2007/04/30/mvp-wpf-c-on-the-mac-and-more/" 
  rel="external nofollow">MVP, WPF, C# on the Mac, and more... « IS 
  Department</A></STRONG>, on <A title="" 
  href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/#comment-1080">May 
  1st, 2007 at 3:46 am</A> Said: </DIV>
  <P>[…] Binding Oriented Programming - interesting post to read, but I wonder 
  how all this fits into the MVP pattern (my guess is not much). […]</P>
  <LI class=alt id=comment-1101>
  <DIV class=commentmetadata><STRONG><A 
  href="http://www.paulstovell.net/blog/index.php/xaml-and-wpf-coding-guidelines/" 
  rel="external nofollow">PaulStovell.NET » XAML and WPF Coding 
  Guidelines</A></STRONG>, on <A title="" 
  href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/#comment-1101">May 
  4th, 2007 at 8:19 pm</A> Said: </DIV>
  <P>[…] I explained in my Binding Oriented Programming post, I give the root 
  element of all of my XAML files an “x:Name” of […]</P>
  <LI class="" id=comment-1194>
  <DIV class=commentmetadata><STRONG><A 
  href="http://www.paulstovell.net/blog/index.php/searchquery-windows-forms-binding-oriented-programming-example/" 
  rel="external nofollow">PaulStovell.NET » SearchQuery - Windows Forms Binding 
  Oriented Programming Example</A></STRONG>, on <A title="" 
  href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/#comment-1194">May 
  21st, 2007 at 11:43 pm</A> Said: </DIV>
  <P>[…] Binding Oriented Programming (BOP) is something that I’ve been 
  championing to a number of Readify colleagues. In my original post, I gave an 
  example of how the BOP approach could be applied in a Windows Presentation 
  Foundation application. Then in a post about the SecurityManager, I showed an 
  example that used Windows Forms and followed it up with another one using 
  ASP.NET. Tonight I’d like to show another example using Windows Forms. […]</P>
  <LI class=alt id=comment-1275>
  <DIV class=commentmetadata><STRONG>Simon Cross</STRONG>, on <A title="" 
  href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/#comment-1275">May 
  30th, 2007 at 11:35 am</A> Said: </DIV>
  <P>Good article, I seem to spend alot of my time synching controls &amp; data 
  in the misguided belief that they weren’t appropriate for binding. Guess I’ll 
  take a step back and rethink this now. Would love to see some examples for 
  winforms &amp; asp.net Paul.</P>
  <LI class="" id=comment-1479>
  <DIV class=commentmetadata><STRONG><A 
  href="http://www.paulstovell.net/blog/index.php/upcoming-presentations-and-news/" 
  rel="external nofollow">PaulStovell.NET » Upcoming Presentations and 
  News</A></STRONG>, on <A title="" 
  href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/#comment-1479">June 
  15th, 2007 at 2:14 pm</A> Said: </DIV>
  <P>[…] presentation is adapted from my articles on Binding Oriented 
  Programming. I will not be using any slides, instead I will just be talking 
  and running through code […]</P>
  <LI class=alt id=comment-1642>
  <DIV class=commentmetadata><STRONG><A 
  href="http://otechnology.wordpress.com/2007/06/22/placing-the-pillars-part-1-entitybase/" 
  rel="external nofollow">Placing the Pillars (Part 1 - EntityBase) « Omar 
  Besiso</A></STRONG>, on <A title="" 
  href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/#comment-1642">June 
  22nd, 2007 at 11:18 pm</A> Said: </DIV>
  <P>[…] with this engagement me and my fellow Readifarian Ducas Francis decided 
  to give Paul Stovell’s binding oriented programming a go. Paul is a big 
  advocate of Domain Modeling and using binding whenever possible and how that 
  […]</P>
  <LI class="" id=comment-1716>
  <DIV class=commentmetadata><STRONG>Gavin</STRONG>, on <A title="" 
  href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/#comment-1716">July 
  3rd, 2007 at 4:56 pm</A> Said: </DIV>
  <P>Hi,</P>
  <P>Interesting article…</P>
  <P>Speaking purely from an ASP.Net point of view I always avoid the “Pull” 
  model you describe. There are a number of reasons for this:</P>
  <P>1. The designer support for web forms is very poor. </P>
  <P>Visual Studio will NOT throw a compiler error if there are issues with some 
  databound controls. Instead, you will be left with ambiguous run-time errors 
  when you execute the application. This is one major drawback for me in an 
  enterprise application that involves multiple developers at different levels 
  working on the same code.</P>
  <P>- Intellisense is poor when working in the aspx. I’m much more productive 
  in the codebehind.</P>
  <P>2. Codebehind model is more Object Oriented</P>
  <P>3. With the codebehind model I can easily manipulate data, handle 
  exceptions or place in data in state before I bind to any controls. I find 
  this approach works much better than responding to a controls databound 
  events.</P>
  <P>4. I disagree that BOP creates more maintainable code. I have had to fix 
  bugs in BOP type code before and have found that it is a nightmare to 
  maintain. For example, if we have a FormView control bound to a SQLDataSource, 
  then all the controls (textboxes,<BR>dropdownlists, etc..) are populated all 
  at once when we bind to the SQLDataSource. Now what happens if we want to 
  create a cascading drop-down. In other words, we only want to populate one 
  dropdownlist (and not the whole form) when the value in one drop down list 
  changes? The answer is that we have to write some horrible hacks as a 
  workaround.</P>
  <P>This last point is probably the main reason why I prefer a “Push” approach 
  for web applications and avoid BOP. </P>
  <P>Web 2.0 has really brought Javascript and partial rendering into the spot 
  light. The idea is that we only want to update specific data on the screen at 
  a time. I’ve heard one guy make this analogous Lego. The old approach was to 
  bring the whole page down to the client as one block of lego all at once. 
  However, the new approach should be to only bring down the most essential 
  building blocks to the client at the start and construct the rest of the 
  screen with new lego blocks (using AJAX) when we need them. Hope that makes 
  sense!</P>
  <P>I guess it boils down to individual preference and I am definitely sticking 
  with the “Push” model for the moment.</P>
  <LI class=alt id=comment-2501>
  <DIV class=commentmetadata><STRONG>Trevor Westerdahl</STRONG>, on <A title="" 
  href="http://www.paulstovell.net/blog/index.php/binding-oriented-programming/#comment-2501">September 
  27th, 2007 at 12:20 pm</A> Said: </DIV>
  <P>Great posts on DataBinding (I really enjoyed the videos).</P>
  <P>I would LOVE to see an example with more complex (realistic) DataBinding. 
  For example, most forms need to display a list of existing records, a user 
  then selects a record to edit, but the record needs lookup data (like choosing 
  an existing customer for a Sales order, or a product for a Line Item).</P>
  <P>Implementing more realistic forms introduces more challenges that I would 
  like to see how you tackle. For instance, do you have a button with three dots 
  to open another form to choose a customer? Do you let a user enter an an ID 
  directly? Do you use a drop down list or grid?</P>
  <P>What about child collections? Let’s say a customer is allowed to have 
  multiple addreses (a child collection). Do you use a grid? Do you have a 
  separate tab with a read ony list and have the user open a separate view for 
  editing/ adding new?</P>
  <P>Is there anything you can share regarding these more complex issues?</P>
  <P>TIA</P></LI></OL>
<H3 id=respond>Leave a Reply</H3>
<FORM id=commentform action=http://www.paulstovell.net/blog/wp-comments-post.php 
method=post>
<P><INPUT id=author tabIndex=1 size=40 name=author> <LABEL 
for=author><SMALL>Name (required)</SMALL></LABEL></P>
<P><INPUT id=email tabIndex=2 size=40 name=email> <LABEL for=email><SMALL>Mail 
(will not be published) (required)</SMALL></LABEL></P>
<P><INPUT id=url tabIndex=3 size=40 name=url> <LABEL 
for=url><SMALL>Website</SMALL></LABEL></P><!--<p><small><strong>XHTML:</strong> You can use these tags&#58; &lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;code&gt; &lt;em&gt; &lt;i&gt; &lt;strike&gt; &lt;strong&gt; </small></p>-->
<P><TEXTAREA id=comment tabIndex=4 name=comment rows=10 cols=60></TEXTAREA></P>
<P><INPUT id=submit tabIndex=5 type=submit value="Submit Comment" name=submit> 
<INPUT type=hidden value=530 name=comment_post_ID> </P></FORM></DIV></DIV><!-- End content for comments template --></DIV></DIV><!-- End narrowcolumnwrapper and narrowcolumn classes for comments template --></DIV><!-- End wrapper class --><!-- Start Sidebar -->
<DIV class=sidebar>
<UL>
  <LI>
  <H2>Welcome</H2><IMG style="MARGIN: 5px; align: center" alt="Me in 2006" 
  src="PaulStovell_NET » Binding Oriented Programming_files/me.jpg" 
  border=0><BR>My name is Paul Stovell, and I'm an <STRONG>Adelaide</STRONG> 
  (Australia) based software developer for a company called <A 
  href="http://www.readify.net/">Readify</A>. I was recently awarded a <A 
  href="https://mvp.support.microsoft.com/profile=9A811A54-F2C9-41AE-9E27-00EB0A1EA921">Microsoft 
  MVP award for Client Application Development</A>, and I spend the best part of 
  my time working on smart-client Windows applications, Windows Presentation 
  Foundation and going deep into data binding and solution architecture. 
  <P align=center><IMG style="MARGIN: 5px" 
  src="PaulStovell_NET » Binding Oriented Programming_files/mvp.jpg" 
  align=center border=0> </P>
  <P align=center><A 
  href="http://jcooney.net/archive/2007/02/01/42999.aspx"><IMG 
  style="MARGIN: 5px" 
  src="PaulStovell_NET » Binding Oriented Programming_files/worksonmymachine_logo_small.png" 
  align=center border=0></A> </P></LI></UL>
<UL>
  <LI>
  <H2>Calendar</H2>
  <UL>
    <LI>
    <TABLE id=wp-calendar>
      <CAPTION>October 2007</CAPTION>
      <THEAD>
      <TR>
        <TH title=Sunday scope=col abbr=Sunday>S</TH>
        <TH title=Monday scope=col abbr=Monday>M</TH>
        <TH title=Tuesday scope=col abbr=Tuesday>T</TH>
        <TH title=Wednesday scope=col abbr=Wednesday>W</TH>
        <TH title=Thursday scope=col abbr=Thursday>T</TH>
        <TH title=Friday scope=col abbr=Friday>F</TH>
        <TH title=Saturday scope=col abbr=Saturday>S</TH></TR></THEAD>
      <TFOOT>
      <TR>
        <TD id=prev abbr=September colSpan=3><A 
          title="View posts for September 2007" 
          href="http://www.paulstovell.net/blog/index.php/2007/09/">« Sep</A></TD>
        <TD class=pad>&nbsp;</TD>
        <TD class=pad id=next colSpan=3>&nbsp;</TD></TR></TFOOT>
      <TBODY>
      <TR>
        <TD class=pad>&nbsp;</TD>
        <TD>1</TD>
        <TD>2</TD>
        <TD>3</TD>
        <TD><A 
          title="Object Initializers - the end of convenience constructors?" 
          href="http://www.paulstovell.net/blog/index.php/2007/10/04/">4</A></TD>
        <TD>5</TD>
        <TD>6</TD></TR>
      <TR>
        <TD>7</TD>
        <TD>8</TD>
        <TD>9</TD>
        <TD>10</TD>
        <TD>11</TD>
        <TD><A title="WPF Binding Bug leads to possible Memory Issues" 
          href="http://www.paulstovell.net/blog/index.php/2007/10/12/">12</A></TD>
        <TD>13</TD></TR>
      <TR>
        <TD><A title="Daniel Bartholomew on CardSpace" 
          href="http://www.paulstovell.net/blog/index.php/2007/10/14/">14</A></TD>
        <TD><A title="Reporting Services Automation with PowerShell" 
          href="http://www.paulstovell.net/blog/index.php/2007/10/15/">15</A></TD>
        <TD><A title="Introducing SyncLINQ" 
          href="http://www.paulstovell.net/blog/index.php/2007/10/16/">16</A></TD>
        <TD>17</TD>
        <TD>18</TD>
        <TD>19</TD>
        <TD>20</TD></TR>
      <TR>
        <TD>21</TD>
        <TD>22</TD>
        <TD>23</TD>
        <TD><A title="SyncLINQ Source Available" 
          href="http://www.paulstovell.net/blog/index.php/2007/10/24/">24</A></TD>
        <TD>25</TD>
        <TD><A title="Half-baked Ideas" 
          href="http://www.paulstovell.net/blog/index.php/2007/10/26/">26</A></TD>
        <TD><A title="Visual Studio: Sort Usings" 
          href="http://www.paulstovell.net/blog/index.php/2007/10/27/">27</A></TD></TR>
      <TR>
        <TD>28</TD>
        <TD>29</TD>
        <TD id=today>30</TD>
        <TD>31</TD>
        <TD class=pad colSpan=3>&nbsp;</TD></TR></TBODY></TABLE></LI></UL>
  <LI>
  <H2>Meta</H2>
  <UL>
    <LI><A href="http://www.paulstovell.net/blog/wp-login.php">Login</A> 
    <LI><A title="Theme by WPDesigner" 
    href="http://www.wpdesigner.com/">WPDesigner</A> </LI></UL></LI></UL>
<UL>
  <LI class=pagenav>
  <H2>Pages</H2>
  <UL>
    <LI class=page_item><A title=Presentations 
    href="http://www.paulstovell.net/blog/index.php/presentations/">Presentations</A> 
    </LI></UL>
  <LI>
  <H2>Categories</H2>
  <UL>
    <LI><A title="View all posts filed under .NET" 
    href="http://www.paulstovell.net/blog/index.php/category/net/">.NET</A> 
    (149) 
    <LI><A title="View all posts filed under Adventures in Java" 
    href="http://www.paulstovell.net/blog/index.php/category/adventures-in-java/">Adventures 
    in Java</A> (3) 
    <LI><A title="View all posts filed under Architecture" 
    href="http://www.paulstovell.net/blog/index.php/category/architecture/">Architecture</A> 
    (44) 
    <LI><A title="View all posts filed under Binding Patterns" 
    href="http://www.paulstovell.net/blog/index.php/category/binding-patterns/">Binding 
    Patterns</A> (2) 
    <LI><A title="View all posts filed under Blogroll" 
    href="http://www.paulstovell.net/blog/index.php/category/blogroll/">Blogroll</A> 
    (1) 
    <LI><A title="View all posts filed under C#" 
    href="http://www.paulstovell.net/blog/index.php/category/csharp/">C#</A> 
    (23) 
    <LI><A title="View all posts filed under C++" 
    href="http://www.paulstovell.net/blog/index.php/category/c/">C++</A> (5) 
    <LI><A title="View all posts filed under Code snippets" 
    href="http://www.paulstovell.net/blog/index.php/category/code-snippets/">Code 
    snippets</A> (5) 
    <LI><A title="View all posts filed under Coding" 
    href="http://www.paulstovell.net/blog/index.php/category/coding/">Coding</A> 
    (25) 
    <LI><A title="View all posts filed under Data Binding" 
    href="http://www.paulstovell.net/blog/index.php/category/data-binding/">Data 
    Binding</A> (27) 
    <LI><A title="View all posts filed under Fun" 
    href="http://www.paulstovell.net/blog/index.php/category/fun/">Fun</A> (42) 
    <LI><A title="View all posts filed under Hosting" 
    href="http://www.paulstovell.net/blog/index.php/category/hosting/">Hosting</A> 
    (3) 
    <LI><A title="View all posts filed under Ideas" 
    href="http://www.paulstovell.net/blog/index.php/category/ideas/">Ideas</A> 
    (53) 
    <LI><A title="View all posts filed under Industry" 
    href="http://www.paulstovell.net/blog/index.php/category/industry/">Industry</A> 
    (21) 
    <LI><A title="View all posts filed under Misc" 
    href="http://www.paulstovell.net/blog/index.php/category/misc/">Misc</A> 
    (82) 
    <LI><A title="View all posts filed under Personal Development" 
    href="http://www.paulstovell.net/blog/index.php/category/personal-development/">Personal 
    Development</A> (59) 
    <LI><A title="View all posts filed under Readify" 
    href="http://www.paulstovell.net/blog/index.php/category/readify/">Readify</A> 
    (108) 
    <LI><A title="View all posts filed under REST" 
    href="http://www.paulstovell.net/blog/index.php/category/rest/">REST</A> (2) 

    <LI><A title="View all posts filed under Ruby" 
    href="http://www.paulstovell.net/blog/index.php/category/ruby/">Ruby</A> (5) 

    <LI><A title="View all posts filed under SingleUserBlog" 
    href="http://www.paulstovell.net/blog/index.php/category/singleuserblog/">SingleUserBlog</A> 
    (2) 
    <LI><A title="View all posts filed under SOAP" 
    href="http://www.paulstovell.net/blog/index.php/category/soap/">SOAP</A> (2) 

    <LI><A title="View all posts filed under Software" 
    href="http://www.paulstovell.net/blog/index.php/category/software/">Software</A> 
    (126) 
    <LI><A title="View all posts filed under TFS" 
    href="http://www.paulstovell.net/blog/index.php/category/tfs/">TFS</A> (10) 
    <LI><A title="View all posts filed under Trial Balance" 
    href="http://www.paulstovell.net/blog/index.php/category/trial-balance/">Trial 
    Balance</A> (39) 
    <LI><A title="View all posts filed under Uncategorized" 
    href="http://www.paulstovell.net/blog/index.php/category/uncategorized/">Uncategorized</A> 
    (44) 
    <LI><A title="View all posts filed under Vista" 
    href="http://www.paulstovell.net/blog/index.php/category/vista/">Vista</A> 
    (20) 
    <LI><A title="View all posts filed under Web Services" 
    href="http://www.paulstovell.net/blog/index.php/category/web-services/">Web 
    Services</A> (3) 
    <LI><A title="View all posts filed under Windows Presentation Foundation" 
    href="http://www.paulstovell.net/blog/index.php/category/windows-presentation-foundation/">Windows 
    Presentation Foundation</A> (43) </LI></UL>
  <LI>
  <H2>Archives</H2>
  <UL>
    <LI><A title="October 2007" 
    href="http://www.paulstovell.net/blog/index.php/2007/10/">October 2007</A> 
    <LI><A title="September 2007" 
    href="http://www.paulstovell.net/blog/index.php/2007/09/">September 2007</A> 

    <LI><A title="August 2007" 
    href="http://www.paulstovell.net/blog/index.php/2007/08/">August 2007</A> 
    <LI><A title="July 2007" 
    href="http://www.paulstovell.net/blog/index.php/2007/07/">July 2007</A> 
    <LI><A title="June 2007" 
    href="http://www.paulstovell.net/blog/index.php/2007/06/">June 2007</A> 
    <LI><A title="May 2007" 
    href="http://www.paulstovell.net/blog/index.php/2007/05/">May 2007</A> 
    <LI><A title="April 2007" 
    href="http://www.paulstovell.net/blog/index.php/2007/04/">April 2007</A> 
    <LI><A title="March 2007" 
    href="http://www.paulstovell.net/blog/index.php/2007/03/">March 2007</A> 
    <LI><A title="February 2007" 
    href="http://www.paulstovell.net/blog/index.php/2007/02/">February 2007</A> 
    <LI><A title="January 2007" 
    href="http://www.paulstovell.net/blog/index.php/2007/01/">January 2007</A> 
    <LI><A title="December 2006" 
    href="http://www.paulstovell.net/blog/index.php/2006/12/">December 2006</A> 
    <LI><A title="November 2006" 
    href="http://www.paulstovell.net/blog/index.php/2006/11/">November 2006</A> 
    <LI><A title="October 2006" 
    href="http://www.paulstovell.net/blog/index.php/2006/10/">October 2006</A> 
    <LI><A title="September 2006" 
    href="http://www.paulstovell.net/blog/index.php/2006/09/">September 2006</A> 

    <LI><A title="August 2006" 
    href="http://www.paulstovell.net/blog/index.php/2006/08/">August 2006</A> 
    <LI><A title="July 2006" 
    href="http://www.paulstovell.net/blog/index.php/2006/07/">July 2006</A> 
    <LI><A title="June 2006" 
    href="http://www.paulstovell.net/blog/index.php/2006/06/">June 2006</A> 
    <LI><A title="May 2006" 
    href="http://www.paulstovell.net/blog/index.php/2006/05/">May 2006</A> 
    <LI><A title="March 2006" 
    href="http://www.paulstovell.net/blog/index.php/2006/03/">March 2006</A> 
    <LI><A title="February 2006" 
    href="http://www.paulstovell.net/blog/index.php/2006/02/">February 2006</A> 
    <LI><A title="January 2006" 
    href="http://www.paulstovell.net/blog/index.php/2006/01/">January 2006</A> 
    <LI><A title="December 2005" 
    href="http://www.paulstovell.net/blog/index.php/2005/12/">December 2005</A> 
    <LI><A title="November 2005" 
    href="http://www.paulstovell.net/blog/index.php/2005/11/">November 2005</A> 
    <LI><A title="October 2005" 
    href="http://www.paulstovell.net/blog/index.php/2005/10/">October 2005</A> 
    <LI><A title="September 2005" 
    href="http://www.paulstovell.net/blog/index.php/2005/09/">September 2005</A> 
    </LI></UL></LI></UL>
<SCRIPT 
src="PaulStovell_NET » Binding Oriented Programming_files/publisher-en.js" 
type=text/javascript></SCRIPT>

<SCRIPT src="PaulStovell_NET » Binding Oriented Programming_files/broadcast" 
type=text/javascript></SCRIPT>
</DIV><!-- End Sidebar --></DIV></DIV><!-- End pagewrapper and page classes --></DIV><!-- End container id --></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0034)http://www.beacosta.com/blog/?p=22 -->
<HTML xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Beatriz Costa » Why should I use ObjectDataProvider?</TITLE>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<META content="MSHTML 6.00.2900.3199" name=GENERATOR><!-- leave this for stats --><!-- Editable Meta Tags -->
<META content="" name=description>
<META content="" name=keywords>
<META content="Sreejith - GFXedit.com" name=author>
<META content="Your Name" name=copyright>
<META content="WordPress 2.2.2" name=generator>
<META content=index,follow name=robots><!-- Meta Tags End--><!-- Style Sheet -->
<STYLE type=text/css media=screen>@import url( http://www.beacosta.com/blog/wp-content/themes/darkpad-10/style.css );
</STYLE>
<!-- Style Sheet End --><!-- Includes -->
<SCRIPT src="" type=text/javascript></SCRIPT>

<SCRIPT src="" type=text/javascript></SCRIPT>
<!-- End Includes --><!-- Feed and Ping URLS--><LINK title="RSS 2.0" 
href="http://www.beacosta.com/blog/?feed=rss2" type=application/rss+xml 
rel=alternate><LINK title="RSS .92" 
href="http://www.beacosta.com/blog/?feed=rss" type=text/xml rel=alternate><LINK 
title="Atom 0.3" href="http://www.beacosta.com/blog/?feed=atom" 
type=application/atom+xml rel=alternate><LINK 
href="http://www.beacosta.com/blog/xmlrpc.php" rel=pingback><!--?php wp_get_archives('type=monthly&format=link'); ?--><LINK 
title=RSD href="http://www.beacosta.com/blog/xmlrpc.php?rsd" 
type=application/rsd+xml rel=EditURI>
<SCRIPT language=javascript type=text/javascript>
<!--
		function collapseThread( theId ) {
			var comment = document.getElementById(theId);
			if(!comment)
			{
				alert("ERROR:\nThe document structure is different\nfrom what Threaded Comments expects.\nYou are missing the element '"+theId+"'");
				return;
			}
			var theBody = findBody(comment);
			if(comment.className.indexOf("collapsed") > -1) {
				comment.className = comment.className.replace(" collapsed", "");;
			} else {
				comment.className += " collapsed";
			}
		}

		function expandThread( theId ) {
			var comment = document.getElementById(theId);
			if(!comment)
			{
				alert("ERROR:\nThe document structure is different\nfrom what Threaded Comments expects.\nYou are missing the element '"+theId+"'");
				return;
			}
			var theBody = findBody(comment);
			if(comment.className.indexOf("collapsed") > -1) {
				comment.className = comment.className.replace(" collapsed", "");;
			} 
		}
		
		function findBody(el)
		{
			var divs = el.getElementsByTagName("div");
			var ret;
			for(var i = 0; i < divs.length; ++i) {
				if(divs.item(i).className.indexOf("body") > -1)
					return divs.item(i);
			}
			return false;
		}
	
		function onAddComment() {
			//checkDocumentIntegrity();
			var el = document.getElementById("commentform");
			// Future release: Check if form is filled correctly and mark the form fields.
			el.submit();
		}
		
		function moveAddCommentBelow(theId, threadId, collapse)
		{
			expandThread( theId );
			var addComment = document.getElementById("addcomment");
			if(!addComment)
			{
			  	alert("ERROR:\nThreaded Comments can't find the 'addcomment' div.\nThis is probably because you have changed\nthe comments.php file.\nMake sure there is a tag around the form\nthat has the id 'addcomment'"); 
				return
			}
			var comment = document.getElementById(theId);
			if(collapse)
			{
				for(var i = 0; i < comment.childNodes.length; ++i) {
					var c = comment.childNodes.item(i);
					if(typeof(c.className) == "string" && c.className.indexOf("collapsed")<0) {
						c.className += " collapsed";
					}
				}
			}
			addComment.parentNode.removeChild(addComment);

			comment.appendChild(addComment);
			if(comment.className.indexOf("alt")>-1) {
				addComment.className = addComment.className.replace(" alt", "");					
			} else {
				addComment.className += " alt";
			}
		        var replyId = document.getElementById("comment_reply_ID");
			if(replyId == null)
			{
				alert("Brians Threaded Comments Error:\nThere is no hidden form field called\n'comment_reply_ID'. This is probably because you\nchanged the comments.php file and forgot\nto include the field. Please take a look\nat the original comments.php and copy the\nform field over.");
			}
			replyId.value = threadId;
			var reRootElement = document.getElementById("reroot");
			if(reRootElement == null)
			{
				alert("Brians Threaded Comments Error:\nThere is no anchor tag called 'reroot' where\nthe comment form starts.\nPlease compare your comments.php to the original\ncomments.php and copy the reroot anchor tag over.");
			}
			reRootElement.style.display = "block";
			var aTags = comment.getElementsByTagName("A");
			var anc = aTags.item(0).id;
			//document.location.href = "#"+anc;
			document.getElementById("comment").focus();
		}

		function checkDocumentIntegrity()
		{
			str = "";
			
			str += checkElement("reroot","div tag");
			str += checkElement("addcomment", "div tag");
			str += checkElement("comment_reply_ID", "hidden form field");
			str += checkElement("content", "div tag");
			str += checkElement("comment", "textfield");
			str += checkElement("addcommentanchor", "anchor tag");
			
			if(str != "")
			{
				str = "Brian's Threaded Comments are missing some of the elements that are required for it to function correctly.\nThis is probably the because you have changed the original comments.php that was included with the plugin.\n\nThese are the errors:\n" + str;
				str += "\nYou should compare your comments.php with the original comments.php and make sure the required elements have not been removed.";

				alert(str);
			}
		}
               
		function checkElement(theId, elDesc)
		{
			var el = document.getElementById(theId);
			if(!el)
			{
				if(elDesc == null)
					elDesc = "element";
				return "- The "+elDesc+" with the ID '" +theId + "' is missing\n"; 
			}
			else 
				return "";
		}
		
		function reRoot()
		{
			var addComment = document.getElementById("addcomment");			
			var reRootElement = document.getElementById("reroot");
			reRootElement.style.display = "none";
			var content = document.getElementById("content");
			addComment.parentNode.removeChild(addComment);
			content.appendChild(addComment);
			addComment.className = addComment.className.replace(" alt", "");
			document.location.href = "#addcommentanchor";
			document.getElementById("comment").focus();				
			document.getElementById("comment_reply_ID").value = "0";
		}			
		
		function changeCommentSize(d)
		{
			var el = document.getElementById("comment");
			var height = parseInt(el.style.height);
			if(!height && el.offsetHeight)
				height = el.offsetHeight;
			height += d;
			if(height < 20) 
				height = 20;
			el.style.height = height+"px";
		}		
-->
</SCRIPT>

<STYLE type=text/css>.comment {
	PADDING-RIGHT: 4px; PADDING-LEFT: 8px; PADDING-BOTTOM: 4px; MARGIN: 6px 3px 3px; PADDING-TOP: 4px; POSITION: relative; BACKGROUND-COLOR: #fff
}
.odd {
	BACKGROUND-COLOR: #f8f8f8
}
.comment DIV {
	POSITION: relative
}
.comment .comment IMG {
	MARGIN: 0px
}
.comment .collapseicon {
	BACKGROUND-IMAGE: url(http://www.beacosta.com/blog/wp-content/plugins/briansthreadedcomments.php?image=subthread-open.png); OVERFLOW: hidden; WIDTH: 13px; HEIGHT: 13px
}
.collapsed .collapseicon {
	BACKGROUND-IMAGE: url(http://www.beacosta.com/blog/wp-content/plugins/briansthreadedcomments.php?image=subthread.png)
}
.comment .reply {
	PADDING-RIGHT: 6px; PADDING-LEFT: 0px; FONT-SIZE: 80%; PADDING-BOTTOM: 6px; PADDING-TOP: 0px; TEXT-ALIGN: right
}
.comment {
	BORDER-RIGHT: #ddd 1px solid; BORDER-TOP: #ddd 1px solid; MARGIN-TOP: 10px; BORDER-LEFT: #ddd 1px solid; BORDER-BOTTOM: #ddd 1px solid
}
INPUT#subscribe {
	WIDTH: auto
}
.comment .body .content {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; PADDING-BOTTOM: 0px; OVERFLOW: auto; WIDTH: 100%; PADDING-TOP: 0px
}
.comment .title abbr {
	BORDER-TOP-STYLE: none; BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; BORDER-BOTTOM-STYLE: none
}
.collapsed .body {
	DISPLAY: none
}
.collapsed .comment {
	DISPLAY: none
}
#commentform TEXTAREA {
	WIDTH: 97%
}
</STYLE>
<!-- End Feed and Ping URLS--></HEAD>
<BODY>
<DIV id=container>
<DIV id=banner>
<H1><A title="Beatriz Costa" accessKey=1 
href="http://www.beacosta.com/blog">Beatriz Costa</A></H1>
<H2 title="WPF Data Binding">WPF Data Binding</H2></DIV>
<DIV id=center>
<DIV class=content>
<DIV class=post>
<DIV class=date>March 19, 2006</DIV>
<H2 id=post-22><A id=postTitle title="Why should I use ObjectDataProvider?" 
href="http://www.beacosta.com/blog/?p=22" rel=bookmark>Why should I use 
ObjectDataProvider?</A></H2>
<P><SPAN id=text>There are many ways to instantiate an object that will be used 
as the data source for bindings. I have seen many people create the object in 
code and set the DataContext of the Window to that instance, which is a good way 
to do this. You may have noticed that I have been adding the source object to 
the Window’s Resource Dictionary in most of my previous posts, which works well 
too. We have an ObjectDataProvider class in data binding that can also be used 
to instantiate your source object in XAML. I will explain in this post the 
differences between adding the source object directly to the resources and using 
ObjectDataProvider. This will hopefully give you guidance on how to evaluate 
your scenario and decide on the best solution.</SPAN></P>
<P><SPAN id=text>As I describe these features, I will walk you through building 
a little application that allows people to type their weight on Earth and 
calculates their weight on Jupiter.</SPAN></P>
<P><SPAN id=text>When adding the source object directly to the resources, the 
Avalon data binding engine calls the default constructor for that type. The 
instance is then added to a dictionary of resources, using the key specified by 
x:Key. Here is an example of the markup for this solution:</SPAN></P>
<P><SPAN 
id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:MySource 
x:Key="source" 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Window.Resources&gt;</SPAN></P>
<P><SPAN id=text>As an alternative, you can add an ObjectDataProvider to the 
resources and use that as the source of your bindings. ObjectDataProvider is a 
class that wraps your source object to provide some extra functionality. I will 
discuss here the following distinguishing capabilities of 
ObjectDataProvider:</SPAN></P>
<P><SPAN id=text>- Passing parameters to the constructor<BR>- Binding to a 
method (which may take parameters)<BR>- Replacing the source object<BR>- 
Creating the source object asynchronously</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN></P>
<P><SPAN id=text><B>Passing parameters to the constructor</B></SPAN></P>
<P><SPAN id=text>When adding the source object to the resources directly, Avalon 
always calls the default constructor for that type. It may happen that you have 
no control over the source data, and the class you’re given has no default 
constructor. In that case, you can still create an instance in XAML by using 
ObjectDataProvider in the following way:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ObjectDataProvider 
ObjectType="{x:Type local:MySource}" 
x:Key="odp1"&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ObjectDataProvider.ConstructorParameters&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;system:String&gt;Jupiter&lt;/system:String&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ObjectDataProvider.ConstructorParameters&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ObjectDataProvider&gt;</SPAN></P>
<P><SPAN id=text>This markup creates a new instance of MySource by calling its 
constructor and passing the string “Jupiter”. It also creates an instance of 
ObjectDataProvider, which will wrap the MySource object.</SPAN></P>
<P><SPAN id=text>MySource has a public property called “Planet” that exposes an 
actual Planet object — the one whose name matches the string passed in the 
constructor parameter (in this case, “Jupiter”). I want to have a title Label in 
my application that binds to the Planet’s Name property. Binding to 
subproperties can be done in Avalon by using “dot notation”. The syntax for this 
is Path=Property.SubProperty, as you can see in the following markup:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Label Content="{Binding 
Source={StaticResource odp1}, Path=Planet.Name}" Grid.ColumnSpan="2" 
HorizontalAlignment="Center" FontWeight="Bold" Foreground="IndianRed" 
FontSize="13" Margin="5,5,5,15"/&gt;</SPAN></P>
<P><SPAN id=text>You may be looking at this binding statement and thinking that 
it makes no sense. It seems like we are binding to the Name subproperty of the 
Planet property of ObjectDataProvider. But I just mentioned that MySource is the 
one that has a Planet property, not ObjectDataProvider. The reason this markup 
works is that the binding engine treats ObjectDataProvider specially, by 
applying the Path to the source object that is being wrapped. Note that this 
special treatment is also used when binding to XmlDataProvider and 
CollectionViewSource.</SPAN></P>
<P><SPAN id=text><B>Binding to a method</B></SPAN></P>
<P><SPAN id=text>There is a method in MySource that takes as a parameter a 
person’s weight on Earth and calculates that person’s weight on the planet 
passed to the constructor. I want to pass some weight to this method in XAML and 
bind to its result. This can also be done with ObjectDataProvider:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ObjectDataProvider 
ObjectInstance="{StaticResource odp1}" MethodName="WeightOnPlanet" 
x:Key="odp2"&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ObjectDataProvider.MethodParameters&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;system:Double&gt;95&lt;/system:Double&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ObjectDataProvider.MethodParameters&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ObjectDataProvider&gt;</SPAN></P>
<P><SPAN id=text>Notice that instead of setting the ObjectType property, I set 
the ObjectInstance property this time. This allows us to reuse the instance of 
MySource that we created in the earlier ObjectDataProvider. I also set the 
MethodName property and pass a parameter to this method with the help of the 
MethodParameters property. Displaying the result returned from this method is as 
simple as binding to this second ObjectDataProvider:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Label Content="{Binding 
Source={StaticResource odp2}}" Grid.Row="2" Grid.Column="1" 
Grid.ColumnSpan="2"/&gt;</SPAN></P>
<P><SPAN id=text>This is a good start, but I would like to allow users to enter 
their own weight in a TextBox, and have the Label update to show the new result. 
The problem here is that I can’t place a Binding statement in the 
MethodParameters because this property is not a DependencyProperty; in fact, 
ObjectDataProvider is not even a DependencyObject. Remember that the target of a 
Binding has to be a DependencyProperty, although the source can be anything. 
Luckily, there is a way out when you want to bind a CLR property to a DP: you 
can switch the source with the target, placing your binding in the DP and 
setting the binding Mode to TwoWay (or OneWayToSource). Here is how to make a 
TextBox that modifies the parameter being passed to the WeightOnPlanet 
method:</SPAN></P>
<P><SPAN 
id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:DoubleToString 
x:Key="doubleToString" 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;(…)<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBox 
Grid.Row="1" Grid.Column="1" Name="tb" Style="{StaticResource 
tbStyle}"&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBox.Text&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Binding 
Source="{StaticResource odp2}" Path="MethodParameters[0]" 
BindsDirectlyToSource="true" UpdateSourceTrigger="PropertyChanged" 
Converter="{StaticResource 
doubleToString}"&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Binding&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/TextBox.Text&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/TextBox&gt;</SPAN></P>
<P><SPAN id=text>In this particular situation, because I am binding a TextBox’s 
Text, I don’t have to do anything for it to be Two-Way; it is already Two-Way by 
default. Bindings are One-Way by default for most DPs, and Two-Way in DPs that 
we expect will be changed by the user. This default behavior can be overriden by 
setting the Mode property of Binding.</SPAN></P>
<P><SPAN id=text>I explained earlier that when binding to an ObjectDataProvider, 
the binding engine automatically looks at the source object being wrapped 
instead of the data provider. That is a problem for us in this situation, 
because we want to bind to the MethodParameters property of ObjectDataProvider. 
To get around the default behavior, we have to set the BindsDirectlyToSource 
property to true.</SPAN></P>
<P><SPAN id=text>MethodParameters is an IList, and in this particular scenario 
we want to bind to the first element of the list, since the WeightOnPlanet 
method only takes one parameter. We can do this by using an indexer in the Path, 
just like we would in C# code. </SPAN></P>
<P><SPAN id=text>I set the UpdateSourceTrigger to PropertyChanged so that the 
method is called and we get a new result every time the user types something in 
the TextBox. Other values for UpdateSourceTrigger are “Explicit” (which I used 
in my <A 
href="http://www.beacosta.com/Archive/2005_12_01_bcosta_archive.html">December 
11 post</A>) and “LostFocus” (the source gets updated when focus moves to 
another element), which is the default behavior.</SPAN></P>
<P><SPAN id=text>If we were binding to a property of type double, the binding 
engine would automatically convert between the TextBox’s Text string and the 
double property. Because we are binding to a method, however, we need to write a 
converter ourselves. Without a converter, the binding would look for a method 
called WeightOnPlanet that takes a string as a parameter, and fail because no 
such method exists. If you looked at VS’s Output window, you would see a debug 
message saying that we were not able to find a method that takes the parameters 
we are passing. This is the code for the converter:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;public class DoubleToString : 
IValueConverter<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public 
object Convert(object value, Type targetType, object parameter, 
System.Globalization.CultureInfo 
culture)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
(value != 
null)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
value.ToString();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
null;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public 
object ConvertBack(object value, Type targetType, object parameter, 
System.Globalization.CultureInfo 
culture)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string 
strValue = value as 
string;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
(strValue != 
null)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double 
result;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool 
converted = Double.TryParse(strValue, out 
result);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
(converted)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
result;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
null;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></P>
<P><SPAN id=text>Some of you may be a little confused about this converter: 
should it be StringToDouble or DoubleToString? The Convert method is called when 
transfering the data from the source (double) to the target (string), and the 
ConvertBack method is called in the opposite direction. So we need a 
DoubleToString converter, and not the other way around.</SPAN></P>
<P><SPAN id=text>What if the user types an invalid weight? They could type a 
negative number, or a non-numeric string, or they could even type nothing at 
all. If that is the case, I don’t even want to allow the binding to initiate the 
transfer of the value to the source. I want to build my own custom logic that 
will not only prevent data binding from transfering the value, but also alert 
the user the value is bad. This can be done with the Validation feature of data 
binding. I wrote a ValidationRule that checks for bad values and added it to the 
ValidationRules property in the following way:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Binding Source="{StaticResource 
odp2}" Path="MethodParameters[0]" BindsDirectlyToSource="true" 
UpdateSourceTrigger="PropertyChanged" Converter="{StaticResource 
doubleToString}"&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Binding.ValidationRules&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:WeightValidationRule 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Binding.ValidationRules&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Binding&gt;</SPAN></P>
<P><SPAN id=text>WeightValidationRule derives from ValidationRule and overrides 
the Validate method, where I added my custom logic:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;public class WeightValidationRule : 
ValidationRule<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public 
override ValidationResult Validate(object value, 
System.Globalization.CultureInfo 
cultureInfo)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 
Value is not a 
string<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string 
strValue = value as 
string;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
(strValue == 
null)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 
not going to 
happen<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
new ValidationResult(false, "Invalid Weight - Value is not a 
string");<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 
Value can not be converted to 
double<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double 
result;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool 
converted = Double.TryParse(strValue, out 
result);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
(!converted)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
new ValidationResult(false, "Invalid Weight - Please type a valid 
number");<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 
Value is not between 0 and 
1000<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
((result &lt; 0) || (result &gt; 
1000))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
new ValidationResult(false, "Invalid Weight - You’re either too light or too 
heavy");<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
ValidationResult.ValidResult;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN></P>
<P><SPAN id=text>Typing an invalid value will now cause a red outline to appear 
around the TextBox. I would like the user to be notified of the error message I 
returned in the ValidationResult, though. More specifically, I would like a 
ToolTip to come up with the error message when the user types something wrong. 
This can be done all in XAML, with the help of a Style and a Trigger:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Style x:Key="tbStyle" 
TargetType="{x:Type 
TextBox}"&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Style.Triggers&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Trigger 
Property="Validation.HasError" 
Value="true"&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Setter 
Property="ToolTip"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Value="{Binding RelativeSource={RelativeSource Self}, 
Path=(Validation.Errors)[0].ErrorContent}"/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Trigger&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Style.Triggers&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Style&gt;</SPAN></P>
<P><SPAN id=text>Validation.HasError is an attached DependencyProperty that is 
true whenever at least one ValidationRule is in error. Validation.Errors is also 
an attached DependencyProperty that contains a list of all errors for a 
particular element. In this particular scenario we know that the TextBox can 
only have one error (since it only has one rule), so it’s OK to bind the ToolTip 
to the first error in this collection. “{RelativeSource Self}” simply means the 
source of the binding is the TextBox element itself. Notice the parenthesis 
notation in the Path - parenthesis should be used every time we are binding to 
an attached DependencyProperty. In English, 
“Path=(Validation.Errors)[0].ErrorContent” means we find the attached property 
Validation.Errors on the source element (TextBox), get the first error object 
(of type ValidationError) in this list and drill into the ErrorContent 
subproperty of that ValidationError.</SPAN></P>
<P><SPAN id=text>You should see a ToolTip come up with an error message when you 
type anything other than a number between 0 and 1000 into the 
TextBox.</SPAN></P>
<P><SPAN id=text>I wrote a sample (which is in the Avalon SDK), that shows a few 
other aspects of Validation. There is a lot more to this feature, but a more 
detailed explanation will have to wait until a future post. </SPAN></P>
<P><SPAN id=text><B>Replacing the source object</B></SPAN></P>
<P><SPAN id=text>You may have a scenario where you want to swap the current 
source of all your bindings with another object. If you have an object in the 
resource dictionary that all your bindings use as source, there is no way to 
swap that object with something else and have all binding update. Removing that 
object from the resource dictionary and adding a new one with the same x:Key 
will not cause your bindings to be notified.</SPAN></P>
<P><SPAN id=text>If this is your scenario, you may consider using an 
ObjectDataProvider. If you swap the ObjectType, all bindings to that 
ObjectDataProvider will be notified that the source object changed and will be 
updated.</SPAN></P>
<P><SPAN id=text>Note that if you are setting the DataContext of an element up 
in the tree to your source data programatically, setting it to a different 
object will cause all bindings to update, too.</SPAN></P>
<P><SPAN id=text><B>Creating the source object asynchronously</B></SPAN></P>
<P><SPAN id=text>In a nutshell, ObjectDataProvider has a property called 
IsAsynchronous that allows you to control whether the loading of the data 
happens in the same thread as your application or in a different thread. By 
default, ObjectDataProvider is synchronous and XmlDataProvider is 
asynchronous.</SPAN></P>
<P><SPAN id=text>I am planning to talk about this in detail in one of my future 
posts, so stay tuned.</SPAN></P>
<P><SPAN id=text>You could use the data source in this sample to write an Avalon 
application that allows the user to pick a planet and enter his or her weight, 
and shows the weight on that planet. It is actually very simple. I started out 
by writing that application, but I realized I wouldn’t get to show some of the 
concepts I wanted to talk about, so I tweaked it until I had all the features I 
wanted.</SPAN></P>
<P><IMG style="DISPLAY: block; MARGIN: 0px auto 10px; TEXT-ALIGN: center" alt="" 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/19ObjectDataProviderSample.png" 
border=0></P>
<P><SPAN id=text><A 
href="http://www.beacosta.com/Zips/19ObjectDataProviderSample.zip">Here</A> you 
can find the VS project with this sample code. This works with February CTP WPF 
bits. </SPAN></P>
<P class=posted>Posted by <A title="Posts by Bea" 
href="http://www.beacosta.com/blog/?author=1">Bea</A> under <A 
title="View all posts in WPF Data Binding" 
href="http://www.beacosta.com/blog/?cat=2" rel=category>WPF Data Binding</A> | 
</P></DIV><!-- <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
				xmlns:dc="http://purl.org/dc/elements/1.1/"
				xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
			<rdf:Description rdf:about="http://www.beacosta.com/blog/?p=22"
    dc:identifier="http://www.beacosta.com/blog/?p=22"
    dc:title="Why should I use ObjectDataProvider?"
    trackback:ping="http://www.beacosta.com/blog/wp-trackback.php?p=22" />
</rdf:RDF>	--><!-- You can start editing here. -->
<P><A href="http://www.beacosta.com/blog/?feed=rss2&amp;p=22"><ABBR 
title="Really Simple Syndication">RSS</ABBR> feed</A> | <A 
href="http://www.beacosta.com/blog/wp-trackback.php?p=22">Trackback <ACRONYM 
title='\"Uniform' Identifier\? Resource>URI</ACRONYM></A> </P>
<H2 id=comments>21 Comments <A title="Leave a comment" 
href="http://www.beacosta.com/blog/?p=22#postcomment">»</A> </H2>
<DIV class=commentlist>
<DIV class=comment id=div-comment-154 style="BACKGROUND: #404040"><A 
id=comment-154 name=comment-154></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-154")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Anonymous<A 
href="http://www.beacosta.com/blog/?p=22#comment-154"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-03-20 13:16:41 </DIV>
<DIV class=content>
<P>This is really neat, Thanks. </P>
<P>One question I have is, if I have a section in my UI that needs to repeat 
(say, a label and a textfield) and that repetition is not fixed (it could be 
zero to X), how does one use an ObjectDataProvider for this?</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-154", 154, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV>
<DIV class="comment odd" id=div-comment-155 style="BACKGROUND: #404040"><A 
id=comment-155 name=comment-155></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-155")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Bea<A 
href="http://www.beacosta.com/blog/?p=22#comment-155"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-03-21 13:03:28 </DIV>
<DIV class=content>
<P>If I understand your question correctly, you have a data source collection 
that can be of any size (0 to X) and you want to display a Label and a TextBox 
for each item. Is this right? </P>
<P>If so, you can add your collection to the Window’s resources section (with or 
without using ObjectDataProvider) and bind an ItemsControl’s ItemsSource to that 
collection. You can then set the ItemTemplate property to a DataTemplate 
containing the Label and TextBox.</P>
<P>See <A 
href="http://www.beacosta.com/2005/09/how-can-i-get-listboxitem-from-data.html" 
rel=nofollow>this blog post</A> for an example.</P>
<P>Did this answer your question?</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-155", 155, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV>
<DIV class=comment id=div-comment-156 style="BACKGROUND: #404040"><A 
id=comment-156 name=comment-156></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-156")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Anonymous<A 
href="http://www.beacosta.com/blog/?p=22#comment-156"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-03-22 06:10:31 </DIV>
<DIV class=content>
<P>It sure did, thank you very much!</P></DIV><SMALL>(Comments wont nest below 
this level)</SMALL> </DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-156", 156, false); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply here</A> </DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV>
<DIV class=comment id=div-comment-157 style="BACKGROUND: #404040"><A 
id=comment-157 name=comment-157></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-157")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Laurent<A 
href="http://www.beacosta.com/blog/?p=22#comment-157"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-03-23 07:38:16 </DIV>
<DIV class=content>
<P>Hi Beatriz,</P>
<P>I am testing Binding in XAML, and especially conversion of one type to the 
other. I thus implemented a IValueConverter, bound a TextBox.Text to a 
Slider.Value through the converter, and it works fine (I know it is not 
necessary to go through the converter for that, but I am just testing).</P>
<P>However, the XAML parser delivers errors, which I think are due to the first 
error:<BR>- Assembly ” could not be found, are you missing an assembly reference 
(this appears where I define xmlns:local=”clr-namespace:WPFWin1″)</P>
<P>I downloaded your ObjectDataProviderSample, and it executes fine, but opening 
the XAML file in the XAML editor delivers the exact same errors. Any idea where 
this comes from?</P>
<P>Thanks a lot for any tip about that,<BR>Laurent</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-157", 157, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV>
<DIV class="comment odd" id=div-comment-158 style="BACKGROUND: #404040"><A 
id=comment-158 name=comment-158></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-158")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Bea<A 
href="http://www.beacosta.com/blog/?p=22#comment-158"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-03-24 16:06:03 </DIV>
<DIV class=content>
<P>Hi Laurent,</P>
<P>Yeah, I typically see that error at start time, but it goes away when I 
rebuild the project. I don’t know why that happens, that is not something my 
teams owns. If you are really curious, you may want to post that question in the 
Forums.</P>
<P>Bea</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-158", 158, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV>
<DIV class=comment id=div-comment-159 style="BACKGROUND: #404040"><A 
id=comment-159 name=comment-159></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-159")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Fernando<A 
href="http://www.beacosta.com/blog/?p=22#comment-159"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-03-25 15:55:45 </DIV>
<DIV class=content>
<P>Hello Beatriz,</P>
<P>This comment arrives two months after your original post, so I’m not sure if 
you’re going to read it anyway.</P>
<P>I’ve got a question.<BR>In the context of your example, how do I pass to the 
method WeightOnPlanet a parameter from an XMLDataProvider ?</P>
<P>Let’s suppose the weight on Earth is not entered on a TextBox by the users. 
Instead, it comes from an XML file.<BR>For example:</P>
<P>(Persons)<BR>(…)</P>
<P>(John)<BR>(Age)30(/Age)<BR>(Height)1.79(/Height)<BR>(Weight)95(/Weight)<BR>(/John)</P>
<P>(…)<BR>(/Persons)</P>
<P>I want to pass “95″ as a parameter to the method WeightOnPlanet.<BR>How is it 
done in XAML ?</P>
<P>Thank you.</P>
<P>Fernando<BR>PS: I replaced the XML angle brackets for parenthesis so as the 
tags don’t get parsed by Blogger’s engine. Wrapping the block with the XML 
comment tag didn’t do the trick.</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-159", 159, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV>
<DIV class="comment odd" id=div-comment-160 style="BACKGROUND: #404040"><A 
id=comment-160 name=comment-160></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-160")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Bea<A 
href="http://www.beacosta.com/blog/?p=22#comment-160"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-03-26 00:09:38 </DIV>
<DIV class=content>
<P>Hi Fernando,</P>
<P>What you are asking would be easy to do if we could data bind the Method 
Parameter, which we can’t for various reasons. In my sample, I can work around 
it by having a TextBox with a two-way binding. This way, I can place the binding 
in the TextBox’s Text (target), so that when the user types a new value, it gets 
updated to the MethodParameter (source).</P>
<P>You can use the same technique to get the value from an XmlDataProvider, but 
you will need a middle man control. </P>
<P>So, what do you need in your scenario? You need a property that receives the 
XML value and that passes it along to the method parameter. If you could have 
two bindings in the same DP of the intermediate control, this could be done 
really easily: the first Binding would have the XML as the source and would be 
“one way to target”. The second Binding would have the Method Parameter as the 
source and would be “one way to source”. But we don’t support having more than 
one Binding in the same DP. You can get around it though, by having two DPs in 
the control and making sure that when one of them changes, that change is 
propagated to the second one. </P>
<P>In <A 
href="http://www.beacosta.com/BlogComments/7ObjectDataProviderSample2.zip" 
rel=nofollow>this</A> sample, you can see I implemented a control called 
“Intermediate” with two DependencyProperties. The “Input” property is 
responsible for hooking up to the XmlDataSource (one way to target). The 
“Output” property is responsible for pushing that value to the method parameter 
(one way to source). The only extra thing I had to do was to propagate the value 
from the Input to the Output when the Input changes, which was done in the 
OnInputChanged handler. </P>
<P>Do I recommend this approach? Not sure, I guess it depends on the goal of 
your particular app. It seems like a lot of work for something you can easily do 
in code. And you have to write code too, to define the class for the 
Intermediate control. </P>
<P>If this becomes a very common request, we may consider adding an Intermediate 
control to the platform for this purpose. But personally I’m not yet convinced 
we should do it. It would take a lot of explaining and it would only be useful 
it very specific (uncommon) scenarios. </P>
<P>Thanks,<BR>Bea</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-160", 160, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV>
<DIV class=comment id=div-comment-161 style="BACKGROUND: #404040"><A 
id=comment-161 name=comment-161></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-161")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Anonymous<A 
href="http://www.beacosta.com/blog/?p=22#comment-161"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-03-27 16:17:49 </DIV>
<DIV class=content>
<P>Great stuff!!<BR>question thu, what if I want to pass the culture argument to 
the converter? how would I do that from XAML?<BR>Do you recommend using the 
converter for localisation?</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-161", 161, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV>
<DIV class="comment odd" id=div-comment-166 style="BACKGROUND: #404040"><A 
id=comment-166 name=comment-166></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-166")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Bea<A 
href="http://www.beacosta.com/blog/?p=22#comment-166"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-04-05 18:47:43 </DIV>
<DIV class=content>
<P>Regarding the localization question:</P>
<P>There is a “ConverterCulture” property on Binding that you can set to the 
desired culture. This is really easy to do from XAML - I uploaded a simple 
app<BR><A 
href="http://www.beacosta.com/BlogComments/10LocalizationDataBinding.zip" 
rel=nofollow>here</A> that shows how to do this.</P>
<P>Do I recommend this approach? No, not really. I know that the localization 
team has been working pretty hard on a document with guidelines and best 
practices on localization. I don’t think this document is public yet, but make 
sure you check the SDK on our next release.</P>
<P>Hope this helps.<BR>Bea</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-166", 166, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV>
<DIV class=comment id=div-comment-162 style="BACKGROUND: #404040"><A 
id=comment-162 name=comment-162></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-162")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Anonymous<A 
href="http://www.beacosta.com/blog/?p=22#comment-162"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-04-02 22:35:37 </DIV>
<DIV class=content>
<P>How would you go about updating the dataset if you are using that technique? 
If i call the data access layer directly, the data will be persisted, but the ui 
wont update unless i reload the data. Is there any way to call a method on the 
datasource and pass in the value of a textbox?</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-162", 162, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV>
<DIV class="comment odd" id=div-comment-165 style="BACKGROUND: #404040"><A 
id=comment-165 name=comment-165></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-165")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Bea<A 
href="http://www.beacosta.com/blog/?p=22#comment-165"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-04-03 00:16:56 </DIV>
<DIV class=content>
<P>Regarding your question on updating the DataSet:</P>
<P>You asked ” Is there any way to call a method on the datasource and pass in 
the value of a textbox? “. This is exactly what I am showing in this post. I 
call the method WeightOnPlanet and pass the value in the TextBox as a parameter. 
When the value in the TextBox changes, the method is called and we get a new 
result.</P>
<P>You ask how we can update the DataSet with this technique. Do you mean 
updating the DataSet to the database or update the in-memory DataSet?</P>
<P>If you are talking about the in-memory DataSet, are you assuming we’re 
storing the weight on Jupiter in our source (which I’m not in this sample, but 
let’s assume we are)? We are already binding the weight on Jupiter to the result 
of the method (one way to target), and we can’t add another binding directly 
that causes the source to be updated (one way to source). We can, however, use 
the workaround that I explained on my reply to Fernando on this blog post, with 
the help of an “Intermediate” custom control.</P>
<P>If you are talking about updating the data to the database, you should use 
whatever technique you use with WinForms (or the technology you use today). The 
data should be persisted when you are done with the changes in the UI.</P>
<P>Let me know if I didn’t reply to your question. And if that’s the case, could 
you please include more details?</P>
<P>Thanks,<BR>Bea</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-165", 165, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV>
<DIV class=comment id=div-comment-163 style="BACKGROUND: #404040"><A 
id=comment-163 name=comment-163></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-163")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Gonzalo<A 
href="http://www.beacosta.com/blog/?p=22#comment-163"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-04-04 08:25:15 </DIV>
<DIV class=content>
<P>Hi Beatriz, I wondering what can I pass another value to the method in Xaml? 
I saw your blog and you had write this (with tags):</P>
<P>ObjectDataProvider ObjectInstance=”{StaticResource odp1}” 
MethodName=”WeightOnPlanet” 
x:Key=”odp2″<BR>ObjectDataProvider.MethodParameters<BR>system:Double 95 
system:Double<BR>/ObjectDataProvider.MethodParameters<BR>/ObjectDataProvider</P>
<P>If I want to pass the parameter data (95) from a DataContent and use it in a 
DataTemplate, How can I do that?</P>
<P>Thanks a lot, Gonzalo.</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-163", 163, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV>
<DIV class="comment odd" id=div-comment-164 style="BACKGROUND: #404040"><A 
id=comment-164 name=comment-164></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-164")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Bea<A 
href="http://www.beacosta.com/blog/?p=22#comment-164"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-04-05 11:30:06 </DIV>
<DIV class=content>
<P>Hi Gonzalo,</P>
<P>You mentioned your data (95) comes from a DataContent, but I’m not aware of a 
property with that name in Avalon. Do you mean DataContext, or maybe 
Content?</P>
<P>The technique I show in this blog post is used to pass data as a parameter to 
a method in your data source. You ask how to pass data into a DataTemplate. 
These two scenarios are quite different. </P>
<P>When you set the Content property of a ContentControl (for example, Button), 
and define a DataTemplate for that control, the data in the Content property is 
passed to the DataTemplate automatically. To be more precise, we set the 
DataContext of one of the generated elements to the data in the Content 
property. This element is higher in the tree than the elements in the 
DataTemplate. This is why we don’t usually set the Source property of a Binding 
inside a DataTemplate: the Binding inherits its source from DataContext set up 
in the tree.</P>
<P>Did this reply to your question? Let me know!</P>
<P>Bea</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-164", 164, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV>
<DIV class=comment id=div-comment-167 style="BACKGROUND: #404040"><A 
id=comment-167 name=comment-167></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-167")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Christian<A 
href="http://www.beacosta.com/blog/?p=22#comment-167"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-04-11 07:02:35 </DIV>
<DIV class=content>
<P>Hi Beatriz,</P>
<P>Been reading your informative pages trying to find an answer for my 
problem.</P>
<P>I have a multilingual application in which a TextBlock displays it’s text 
based on its key and a Translator.</P>
<P>The translator class contains a Translate method with one parameter, 
something like:</P>
<P>Static string Translate(string key)<BR>…do something<BR>return 
TranlatedString;</P>
<P>I tried binding the TextBlock:</P>
<P>[TextBlock Text=”"{Binding Source={StaticResource Translator}}…</P>
<P>and searched for a way to pass the key of my TextBlock. </P>
<P>I could do so by defining an ObjectDataProvider containing the key of the 
TextBlock for every TextBlock in my Application using the technique you’ve 
shown, but that seems the wrong way to go.</P>
<P>So, is there another option I’ve overlooked?</P>
<P>Thanks for you’re help</P>
<P>Christian</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-167", 167, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV>
<DIV class="comment odd" id=div-comment-168 style="BACKGROUND: #404040"><A 
id=comment-168 name=comment-168></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-168")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Bea<A 
href="http://www.beacosta.com/blog/?p=22#comment-168"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-04-12 18:25:22 </DIV>
<DIV class=content>
<P>Hi Christian,</P>
<P>I can’t think of a way to do this all in XAML. The only way to call a method 
of a binding source in XAML is using ObjectDataProvider the way I show in this 
post and you can not bind the ConverterParameter of ObjectDataProvider.</P>
<P>I think that the only way to do this is to compromise and write a little code 
(other than having one ODP per TextBlock, which is overkill in my opinion.) I 
wrote a little app that contains a Converter which returns the correct 
translated string based on the parameter it receives (which is the key.) Here is 
the only line inside the Convert method of my Converter:</P>
<P>return Translator.Translate(parameter as string);</P>
<P>And here is how you could consume this Converter in the TextBlock’s Text:</P>
<P>Text=”{Binding Source={x:Null}, Converter={StaticResource conv}, 
ConverterParameter=en-US}”</P>
<P>This way, you can have several TextBlocks with different string parameters 
and only one Converter, so it scales pretty well.</P>
<P>Notice that the source of my binding is null. If your method was not static, 
you could set the source of the binding to an instance of Translator (simply add 
it to the resources.) But because the Translate method is static, you don’t 
really need a source, you just need a way to execute some code. </P>
<P>This is a little hacky. Binding to null just so that a Converter is called is 
kinda weird, and there are probably more elegant solutions. But it works <IMG 
class=wp-smiley alt=:) 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/icon_smile.gif"> 
</P>
<P><A href="http://www.beacosta.com/BlogComments/14BindToTranslator.zip" 
rel=nofollow>Here</A> is the solution where I implemented what I explained. If 
you find a better solution I would like to hear about it.</P>
<P>Bea</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-168", 168, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV>
<DIV class=comment id=div-comment-169 style="BACKGROUND: #404040"><A 
id=comment-169 name=comment-169></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-169")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Hugo Soares<A 
href="http://www.beacosta.com/blog/?p=22#comment-169"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-04-15 06:05:57 </DIV>
<DIV class=content>
<P>Hi Beatriz!<BR>I would like to know if in the future there will be some kind 
of error provider (like the one we used in winForms) that will allow to validate 
user input. Using Validation Rule is not very useful…<BR>Thank’s!</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-169", 169, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV>
<DIV class="comment odd" id=div-comment-170 style="BACKGROUND: #404040"><A 
id=comment-170 name=comment-170></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-170")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Bea<A 
href="http://www.beacosta.com/blog/?p=22#comment-170"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-04-15 10:33:39 </DIV>
<DIV class=content>
<P>Hi Hugo,<BR>I can never promise a feature since so many unpredictable events 
affect what we ship. However, I can tell you that we are currently planning the 
features for out next version, and it’s on our list to make improvements to 
Validation. We get that feedback a lot. We are completely aware of the fact that 
we have some limitations in our current Validation design, and we are very 
commited to improving on those for the next version.</P>
<P>Thanks,<BR>Bea</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-170", 170, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV>
<DIV class=comment id=div-comment-171 style="BACKGROUND: #404040"><A 
id=comment-171 name=comment-171></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-171")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Laurent<A 
href="http://www.beacosta.com/blog/?p=22#comment-171"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-08-11 11:04:20 </DIV>
<DIV class=content>
<P>Hi Bea,</P>
<P>I know this article is quite old, but it helped me again. Maybe you’ll read 
this.</P>
<P>Any idea why the bjectDataProvider.ConstructorParameters&gt; doesn’t appear 
in Intellisense when I try to use the ObjectDataProvider tag in XAML? The 
functionality works, but Intellisense doesn’t recognize the tag.</P>
<P>Thanks,<BR>Laurent</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-171", 171, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV>
<DIV class="comment odd" id=div-comment-172 style="BACKGROUND: #404040"><A 
id=comment-172 name=comment-172></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-172")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Bea<A 
href="http://www.beacosta.com/blog/?p=22#comment-172"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2006-08-12 11:54:03 </DIV>
<DIV class=content>
<P>Hi Laurent,</P>
<P>VS support for WPF is owned by a different team, and they haven’t shipped 
yet, they’re still in beta. So it is likely that you will find a few issues with 
that until they release their final version.</P>
<P>Thanks!<BR>Bea</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-172", 172, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV>
<DIV class=comment id=div-comment-173 style="BACKGROUND: #404040"><A 
id=comment-173 name=comment-173></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-173")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Anonymous<A 
href="http://www.beacosta.com/blog/?p=22#comment-173"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2007-06-18 08:19:41 </DIV>
<DIV class=content>
<P>We are using a ListCollectionView that contains a list of objects that have 
derived from ObjectDataProvider. We are taking advantage of the fact that 
setting the DataContext (on another ascociated panel ) to the ListCollectionView 
implicitly sets the DataContext of that panel to the ‘current’ selected item 
displayed in the list. Also we are setting the DisplayMemberPath of a ListBox to 
one of the properties that is exposed by the ObjectInstance property of the 
ObjectDataProvider. Notice we do not have to mention the fully qualified root to 
the property as it is infered as part of the ObjectDataProvider mechanism. This 
results in the desired text being displayed in the listbox.</P>
<P>However, and this is the source of our problem to which I would welcome any 
assistance, we can not bind directly to the properties we require to display in 
the panel without fully qualifying the property name (for instance 
ObjectInstance.PropertyName)</P>
<P>Unfortunately this defeats any benefits of using ObjectDataProvider as a 
wrapper for our own DataObjects.</P>
<P>Is there sometjing we should be doing?</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-173", 173, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV>
<DIV class="comment odd" id=div-comment-391 style="BACKGROUND: #404040"><A 
id=comment-391 name=comment-391></A>
<DIV class=title><IMG class=collapseicon 
onclick='collapseThread("div-comment-391")' 
src="Beatriz Costa » Why should I use ObjectDataProvider_files/briansthreadedcomments.png"> 
<CITE>Comment by Bea<A 
href="http://www.beacosta.com/blog/?p=22#comment-391"></A></CITE> </DIV>
<DIV class=body>
<DIV class=meta>2007-09-20 13:50:22 </DIV>
<DIV class=content>
<P>Hi,</P>
<P>Unfortunately I was not able to repro what you described. I set my panel’s 
DataContext to an ObjectDataProvider instance, and tried to data bing a ListBox 
and a TextBlock within the panel to the data wrapped by the ODP. I am not 
required to fully qualify the property path in the TextBlock, I can simply use 
the property name of my source. You can find my attempt to repro your scenario 
<A href="http://www.beacosta.com/BlogComments/35DataContextODP.zip" 
rel=nofollow>here</A>.</P>
<P>Maybe I didn’t fully understand your scenario, or maybe I am missing some 
detail. If that’s the case, it would be great if you could tell me how your app 
differs from mine, or send me a code sample. </P>
<P>Thanks,<BR>Bea</P></DIV>
<DIV class=reply><A 
onclick='moveAddCommentBelow("div-comment-391", 391, true); return false;' 
href="http://www.beacosta.com/blog/?p=22#">Reply to this comment</A> 
</DIV></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV></DIV><!-- This has to be here because of Internet Explorers plethora of layout bugs -->
<DIV style="OVERFLOW: hidden; HEIGHT: 1px"></DIV></DIV>
<DIV class=comment id=addcomment style="BACKGROUND: #404040"><A 
id=addcommentanchor name=addcommentanchor></A>
<FORM id=commentform action=http://www.beacosta.com/blog/wp-comments-post.php 
method=post>
<DIV class=add>
<DIV id=reroot style="DISPLAY: none"><SMALL><A onclick="reRoot(); return false;" 
href="http://www.beacosta.com/blog/?p=22#">Click here to cancel "reply". 
</A></SMALL></DIV><SMALL>Name (required) </SMALL>
<DIV><INPUT class=textarea id=author tabIndex=1 size=28 name=author> 
</DIV><SMALL>E-mail (required - never shown publicly) </SMALL>
<DIV><INPUT id=email tabIndex=2 size=28 name=email> </DIV><SMALL><ACRONYM 
title="Uniform Resource Identifier">URI</ACRONYM> </SMALL>
<DIV><INPUT id=url tabIndex=3 size=28 name=url> </DIV><SMALL>Your Comment (<A 
onclick="changeCommentSize(-80); return false;" 
href="http://www.beacosta.com/blog/?p=22#">smaller size</A> | <A 
onclick="changeCommentSize(80); return false;" 
href="http://www.beacosta.com/blog/?p=22#">larger size</A>) </SMALL>
<DIV style="WIDTH: 100%"><TEXTAREA id=comment tabIndex=4 name=comment rows=14 cols=60></TEXTAREA> 
</DIV><SMALL>You may use &lt;a href="" title=""&gt; &lt;abbr title=""&gt; 
&lt;acronym title=""&gt; &lt;b&gt; &lt;blockquote cite=""&gt; &lt;code&gt; 
&lt;em&gt; &lt;i&gt; &lt;strike&gt; &lt;strong&gt; in your comment. </SMALL>
<DIV><INPUT type=hidden value=22 name=comment_post_ID> <INPUT type=hidden 
value=/blog/?p=22 name=redirect_to> <INPUT id=addcommentbutton onclick="if(typeof(onAddComment) == 'function') { onAddComment(); } else { alert('ERROR:\nIt looks like the website administrator hasn\'t activated the Brians Threaded Comments plugin from the plugin page'); };" tabIndex=5 type=button value="Add comment" name=addcommentbutton> 
</DIV></DIV><INPUT id=comment_reply_ID type=hidden value=0 
name=comment_reply_ID></FORM></DIV>
<P>
<DIV align=center></DIV>
<P></P></DIV></DIV>
<DIV id=right>
<DIV class=sidebar><!-- Meta -->
<H2>Meta:</H2>
<UL class=noli>
  <LI><A title="Syndicate this site using RSS" 
  href="http://feeds.feedburner.com/BeatrizCosta"><ABBR 
  title="Really Simple Syndication">RSS</ABBR></A> 
  <LI><A title="The latest comments to all posts in RSS" 
  href="http://feeds.feedburner.com/CommentsForBeatrizCosta">Comments <ABBR 
  title="Really Simple Syndication">RSS</ABBR></A> </LI></UL><!-- Search -->
<H2>Search</H2><BR>
<FORM id=searchform action="" method=get><INPUT id=s size=15 name=s> <INPUT type=submit value=Search name=submit> </FORM><!-- Categories -->
<H2>Categories</H2>
<UL class=menu>
  <LI><A title="View all posts filed under General" 
  href="http://www.beacosta.com/blog/?cat=3">General</A> 
  <LI><A title="View all posts filed under WPF Data Binding" 
  href="http://www.beacosta.com/blog/?cat=2">WPF Data Binding</A> 
  <UL class=children>
    <LI><A title="View all posts filed under Binding to ADO.NET" 
    href="http://www.beacosta.com/blog/?cat=12">Binding to ADO.NET</A> 
    <LI><A title="View all posts filed under ListBox" 
    href="http://www.beacosta.com/blog/?cat=14">ListBox</A> 
    <LI><A title="View all posts filed under ListView" 
    href="http://www.beacosta.com/blog/?cat=9">ListView</A> 
    <LI><A title="View all posts filed under Master-detail" 
    href="http://www.beacosta.com/blog/?cat=10">Master-detail</A> 
    <LI><A title="View all posts filed under Sorting, filtering, grouping" 
    href="http://www.beacosta.com/blog/?cat=13">Sorting, filtering, grouping</A> 

    <LI><A title="View all posts filed under Styles and Templates" 
    href="http://www.beacosta.com/blog/?cat=11">Styles and Templates</A> 
    <LI><A title="View all posts filed under TreeView" 
    href="http://www.beacosta.com/blog/?cat=7">TreeView</A> </LI></UL></LI></UL><!-- Archives -->
<H2>Archives</H2>
<UL>
  <LI><A title="September 2007" 
  href="http://www.beacosta.com/blog/?m=200709">September 2007</A> 
  <LI><A title="August 2007" 
  href="http://www.beacosta.com/blog/?m=200708">August 2007</A> 
  <LI><A title="May 2007" href="http://www.beacosta.com/blog/?m=200705">May 
  2007</A> 
  <LI><A title="April 2007" href="http://www.beacosta.com/blog/?m=200704">April 
  2007</A> 
  <LI><A title="January 2007" 
  href="http://www.beacosta.com/blog/?m=200701">January 2007</A> 
  <LI><A title="November 2006" 
  href="http://www.beacosta.com/blog/?m=200611">November 2006</A> 
  <LI><A title="October 2006" 
  href="http://www.beacosta.com/blog/?m=200610">October 2006</A> 
  <LI><A title="September 2006" 
  href="http://www.beacosta.com/blog/?m=200609">September 2006</A> 
  <LI><A title="August 2006" 
  href="http://www.beacosta.com/blog/?m=200608">August 2006</A> 
  <LI><A title="July 2006" href="http://www.beacosta.com/blog/?m=200607">July 
  2006</A> 
  <LI><A title="June 2006" href="http://www.beacosta.com/blog/?m=200606">June 
  2006</A> 
  <LI><A title="May 2006" href="http://www.beacosta.com/blog/?m=200605">May 
  2006</A> 
  <LI><A title="April 2006" href="http://www.beacosta.com/blog/?m=200604">April 
  2006</A> 
  <LI><A title="March 2006" href="http://www.beacosta.com/blog/?m=200603">March 
  2006</A> 
  <LI><A title="February 2006" 
  href="http://www.beacosta.com/blog/?m=200602">February 2006</A> 
  <LI><A title="January 2006" 
  href="http://www.beacosta.com/blog/?m=200601">January 2006</A> 
  <LI><A title="December 2005" 
  href="http://www.beacosta.com/blog/?m=200512">December 2005</A> 
  <LI><A title="November 2005" 
  href="http://www.beacosta.com/blog/?m=200511">November 2005</A> 
  <LI><A title="October 2005" 
  href="http://www.beacosta.com/blog/?m=200510">October 2005</A> 
  <LI><A title="September 2005" 
  href="http://www.beacosta.com/blog/?m=200509">September 2005</A> 
  <LI><A title="August 2005" 
  href="http://www.beacosta.com/blog/?m=200508">August 2005</A> </LI></UL></DIV>
<DIV id=footer>
<DIV class=copyright><SMALL><SPAN class=copy>Copyright © 2007 <STRONG><A 
title="Beatriz Costa" href="http://www.beacosta.com/blog">Beatriz Costa</A> 
</STRONG></SPAN><BR><BR></SMALL></DIV></DIV></DIV></DIV></BODY></HTML>

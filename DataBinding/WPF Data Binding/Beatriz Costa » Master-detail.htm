<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0036)http://www.beacosta.com/blog/?cat=10 -->
<HTML xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Beatriz Costa » Master-detail</TITLE>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<META content="MSHTML 6.00.2900.3199" name=GENERATOR><!-- leave this for stats --><!-- Editable Meta Tags -->
<META content="" name=description>
<META content="" name=keywords>
<META content="Sreejith - GFXedit.com" name=author>
<META content="Your Name" name=copyright>
<META content="WordPress 2.2.2" name=generator>
<META content=index,follow name=robots><!-- Meta Tags End--><!-- Style Sheet -->
<STYLE type=text/css media=screen>@import url( http://www.beacosta.com/blog/wp-content/themes/darkpad-10/style.css );
</STYLE>
<!-- Style Sheet End --><!-- Includes -->
<SCRIPT src="" type=text/javascript></SCRIPT>

<SCRIPT src="" type=text/javascript></SCRIPT>
<!-- End Includes --><!-- Feed and Ping URLS--><LINK title="RSS 2.0" 
href="http://www.beacosta.com/blog/?feed=rss2" type=application/rss+xml 
rel=alternate><LINK title="RSS .92" 
href="http://www.beacosta.com/blog/?feed=rss" type=text/xml rel=alternate><LINK 
title="Atom 0.3" href="http://www.beacosta.com/blog/?feed=atom" 
type=application/atom+xml rel=alternate><LINK 
href="http://www.beacosta.com/blog/xmlrpc.php" rel=pingback><!--?php wp_get_archives('type=monthly&format=link'); ?--><LINK 
title=RSD href="http://www.beacosta.com/blog/xmlrpc.php?rsd" 
type=application/rsd+xml rel=EditURI>
<SCRIPT language=javascript type=text/javascript>
<!--
		function collapseThread( theId ) {
			var comment = document.getElementById(theId);
			if(!comment)
			{
				alert("ERROR:\nThe document structure is different\nfrom what Threaded Comments expects.\nYou are missing the element '"+theId+"'");
				return;
			}
			var theBody = findBody(comment);
			if(comment.className.indexOf("collapsed") > -1) {
				comment.className = comment.className.replace(" collapsed", "");;
			} else {
				comment.className += " collapsed";
			}
		}

		function expandThread( theId ) {
			var comment = document.getElementById(theId);
			if(!comment)
			{
				alert("ERROR:\nThe document structure is different\nfrom what Threaded Comments expects.\nYou are missing the element '"+theId+"'");
				return;
			}
			var theBody = findBody(comment);
			if(comment.className.indexOf("collapsed") > -1) {
				comment.className = comment.className.replace(" collapsed", "");;
			} 
		}
		
		function findBody(el)
		{
			var divs = el.getElementsByTagName("div");
			var ret;
			for(var i = 0; i < divs.length; ++i) {
				if(divs.item(i).className.indexOf("body") > -1)
					return divs.item(i);
			}
			return false;
		}
	
		function onAddComment() {
			//checkDocumentIntegrity();
			var el = document.getElementById("commentform");
			// Future release: Check if form is filled correctly and mark the form fields.
			el.submit();
		}
		
		function moveAddCommentBelow(theId, threadId, collapse)
		{
			expandThread( theId );
			var addComment = document.getElementById("addcomment");
			if(!addComment)
			{
			  	alert("ERROR:\nThreaded Comments can't find the 'addcomment' div.\nThis is probably because you have changed\nthe comments.php file.\nMake sure there is a tag around the form\nthat has the id 'addcomment'"); 
				return
			}
			var comment = document.getElementById(theId);
			if(collapse)
			{
				for(var i = 0; i < comment.childNodes.length; ++i) {
					var c = comment.childNodes.item(i);
					if(typeof(c.className) == "string" && c.className.indexOf("collapsed")<0) {
						c.className += " collapsed";
					}
				}
			}
			addComment.parentNode.removeChild(addComment);

			comment.appendChild(addComment);
			if(comment.className.indexOf("alt")>-1) {
				addComment.className = addComment.className.replace(" alt", "");					
			} else {
				addComment.className += " alt";
			}
		        var replyId = document.getElementById("comment_reply_ID");
			if(replyId == null)
			{
				alert("Brians Threaded Comments Error:\nThere is no hidden form field called\n'comment_reply_ID'. This is probably because you\nchanged the comments.php file and forgot\nto include the field. Please take a look\nat the original comments.php and copy the\nform field over.");
			}
			replyId.value = threadId;
			var reRootElement = document.getElementById("reroot");
			if(reRootElement == null)
			{
				alert("Brians Threaded Comments Error:\nThere is no anchor tag called 'reroot' where\nthe comment form starts.\nPlease compare your comments.php to the original\ncomments.php and copy the reroot anchor tag over.");
			}
			reRootElement.style.display = "block";
			var aTags = comment.getElementsByTagName("A");
			var anc = aTags.item(0).id;
			//document.location.href = "#"+anc;
			document.getElementById("comment").focus();
		}

		function checkDocumentIntegrity()
		{
			str = "";
			
			str += checkElement("reroot","div tag");
			str += checkElement("addcomment", "div tag");
			str += checkElement("comment_reply_ID", "hidden form field");
			str += checkElement("content", "div tag");
			str += checkElement("comment", "textfield");
			str += checkElement("addcommentanchor", "anchor tag");
			
			if(str != "")
			{
				str = "Brian's Threaded Comments are missing some of the elements that are required for it to function correctly.\nThis is probably the because you have changed the original comments.php that was included with the plugin.\n\nThese are the errors:\n" + str;
				str += "\nYou should compare your comments.php with the original comments.php and make sure the required elements have not been removed.";

				alert(str);
			}
		}
               
		function checkElement(theId, elDesc)
		{
			var el = document.getElementById(theId);
			if(!el)
			{
				if(elDesc == null)
					elDesc = "element";
				return "- The "+elDesc+" with the ID '" +theId + "' is missing\n"; 
			}
			else 
				return "";
		}
		
		function reRoot()
		{
			var addComment = document.getElementById("addcomment");			
			var reRootElement = document.getElementById("reroot");
			reRootElement.style.display = "none";
			var content = document.getElementById("content");
			addComment.parentNode.removeChild(addComment);
			content.appendChild(addComment);
			addComment.className = addComment.className.replace(" alt", "");
			document.location.href = "#addcommentanchor";
			document.getElementById("comment").focus();				
			document.getElementById("comment_reply_ID").value = "0";
		}			
		
		function changeCommentSize(d)
		{
			var el = document.getElementById("comment");
			var height = parseInt(el.style.height);
			if(!height && el.offsetHeight)
				height = el.offsetHeight;
			height += d;
			if(height < 20) 
				height = 20;
			el.style.height = height+"px";
		}		
-->
</SCRIPT>

<STYLE type=text/css>.comment {
	PADDING-RIGHT: 4px; PADDING-LEFT: 8px; PADDING-BOTTOM: 4px; MARGIN: 6px 3px 3px; PADDING-TOP: 4px; POSITION: relative; BACKGROUND-COLOR: #fff
}
.odd {
	BACKGROUND-COLOR: #f8f8f8
}
.comment DIV {
	POSITION: relative
}
.comment .comment IMG {
	MARGIN: 0px
}
.comment .collapseicon {
	BACKGROUND-IMAGE: url(http://www.beacosta.com/blog/wp-content/plugins/briansthreadedcomments.php?image=subthread-open.png); OVERFLOW: hidden; WIDTH: 13px; HEIGHT: 13px
}
.collapsed .collapseicon {
	BACKGROUND-IMAGE: url(http://www.beacosta.com/blog/wp-content/plugins/briansthreadedcomments.php?image=subthread.png)
}
.comment .reply {
	PADDING-RIGHT: 6px; PADDING-LEFT: 0px; FONT-SIZE: 80%; PADDING-BOTTOM: 6px; PADDING-TOP: 0px; TEXT-ALIGN: right
}
.comment {
	BORDER-RIGHT: #ddd 1px solid; BORDER-TOP: #ddd 1px solid; MARGIN-TOP: 10px; BORDER-LEFT: #ddd 1px solid; BORDER-BOTTOM: #ddd 1px solid
}
INPUT#subscribe {
	WIDTH: auto
}
.comment .body .content {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; PADDING-BOTTOM: 0px; OVERFLOW: auto; WIDTH: 100%; PADDING-TOP: 0px
}
.comment .title abbr {
	BORDER-TOP-STYLE: none; BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; BORDER-BOTTOM-STYLE: none
}
.collapsed .body {
	DISPLAY: none
}
.collapsed .comment {
	DISPLAY: none
}
#commentform TEXTAREA {
	WIDTH: 97%
}
</STYLE>
<!-- End Feed and Ping URLS--></HEAD>
<BODY>
<DIV id=container>
<DIV id=banner>
<H1><A title="Beatriz Costa" accessKey=1 
href="http://www.beacosta.com/blog">Beatriz Costa</A></H1>
<H2 title="WPF Data Binding">WPF Data Binding</H2></DIV>
<DIV id=center>
<DIV class=content>
<DIV class=post>
<DIV class=date>June 27, 2006</DIV>
<H2 id=post-29><A id=postTitle 
title="How do I display some items differently based on one of their properties?" 
href="http://www.beacosta.com/blog/?p=29" rel=bookmark>How do I display some 
items differently based on one of their properties?</A></H2>
<P><SPAN id=text>I had a blast at TechEd. It was great to connect with our 
customers face to face, hear what everyone had to say about Avalon, and bring 
the praise and feedback to the team. I am very proud of the technology we are 
building and I get really thrilled when I hear success stories from our 
customers. </SPAN></P>
<P><SPAN id=text>Our PMs are all amazing speakers and their talks were very well 
received by the audience. <A href="http://blogs.msdn.com/okoboji/">Kevin</A> in 
particular did a great job at explaining the ins and outs of data binding, with 
a little humor between the lines (soooo like Kevin…). I was really pleased to 
see the audience clapping after he showed off certain features, such as binding 
to sub-properties and indexers.</SPAN></P>
<P><SPAN id=text>The sample for this post displays a few pictures from TechEd 
with the help of the master-detail data binding feature, which I already talked 
about in a <A 
href="http://www.beacosta.com/2005/11/master-detail-scenario.html">previous 
post</A>. I will explain in this post how you can use a DataTrigger to change 
the way data items are displayed based on their properties. In particular, I am 
going to display a special visual tag with Kevin’s name for all pictures of him, 
as you can see in the screenshot at the end of this post. </SPAN></P>
<P><SPAN id=text>My first step was to tag all the pictures I wanted to display. 
In order to do this, I right clicked on each of them, went to Properties - 
Summary and filled out the Title and Keywords fields. I added different keywords 
to the pictures, but the one I care about for this sample is “Kevin”, which I 
added to all pictures of Kevin. </SPAN></P>
<P><SPAN id=text>Since I added all the information to the picture’s metadata, my 
data source is really simple:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;public class TechEdPictures : 
ObservableCollection&lt;Uri&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public 
TechEdPictures()<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.Add(new 
Uri(@”Pictures\TechEd 004.jpg”, 
UriKind.Relative));<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.Add(new 
Uri(@”Pictures\TechEd 022.jpg”, 
UriKind.Relative));<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></P>
<P><SPAN id=text>I’m not going to explain master-detail again, but here is the 
markup I used to get the ContentControl’s Content to change when the ListBox’s 
selection (and current item) changes:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;StackPanel Orientation=”Horizontal” 
DataContext=”{StaticResource 
source}”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox 
ItemsSource=”{Binding}” ItemTemplate=”{StaticResource picSmall}” Height=”400″ 
IsSynchronizedWithCurrentItem=”True” 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ContentControl 
Content=”{Binding Path=/}” ContentTemplate=”{StaticResource 
picBig}”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/StackPanel&gt;</SPAN></P>
<P><SPAN id=text>The template for the small images in the ListBox is also pretty 
simple:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;DataTemplate 
x:Key=”picSmall”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Image 
Source=”{Binding}” Width=”100″ 
Margin=”2″/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/DataTemplate&gt;</SPAN></P>
<P><SPAN id=text>Next I want to display Kevin’s name everytime I bind to an 
image that contains “Kevin” in the keywords. I started by creating a TextBlock 
with the text “Kevin”, added a white background with an opacity, rotated it and 
aligned it to the right of the image. Notice that both elements are inside a 
Grid. Because I didn’t specify a row and column for the Image and the TextBlock, 
they will by default appear in the first row and column, and overlap.</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;DataTemplate 
x:Key=”picBig”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;StackPanel 
Margin=”10, 0, 0, 0″ Width=”300″ 
&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Grid&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Image 
Source=”{Binding}” 
x:Name=”img”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock 
Background=”White” Opacity=”0.7″ Text=”** Kevin **” Margin=”5″ FontWeight=”Bold” 
FontSize=”30″ TextAlignment=”Center” HorizontalAlignment=”Right” 
Visibility=”Hidden” 
x:Name=”tb”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock.LayoutTransform&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;RotateTransform 
Angle=”90″ 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/TextBlock.LayoutTransform&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/TextBlock&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Grid&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock 
Text=”{Binding ElementName=img, Path=Source.Metadata.Title}” TextWrapping=”Wrap” 
Margin=”10″ 
Height=”100″/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/StackPanel&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/DataTemplate&gt;</SPAN></P>
<P><SPAN id=text>And now comes the interesting part. Notice that I set the 
Visibility of the TextBlock to Hidden. I need some logic that will set it to 
Visible when the image contains “Kevin” in the keywords - some sort of trigger. 
Avalon contains three types of triggers:</SPAN></P>
<P><SPAN id=text>- EventTriggers - Used to control animations when a certain 
event occurs.<BR>- Triggers - Used to set properties when a property of a UI 
element has a certain value.<BR>- DataTriggers - Used to set properties when the 
result of a binding has a particular value.</SPAN></P>
<P><SPAN id=text>In this case, we want to trigger based on the Metadata of the 
Image’s Source, which can be easily expressed with an ElementName binding, so we 
should use a DataTrigger.</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;DataTemplate 
x:Key=”picBig”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;StackPanel 
Margin=”10, 0, 0, 0″ Width=”300″ 
&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/StackPanel&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DataTemplate.Triggers&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DataTrigger 
Binding=”{Binding ElementName=img, Path=Source.Metadata.Keywords, 
Converter={StaticResource isInKeywords}, ConverterParameter=Kevin}” 
Value=”True”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Setter 
Property=”Visibility” Value=”Visible” TargetName=”tb” 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/DataTrigger&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/DataTemplate.Triggers&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/DataTemplate&gt;</SPAN></P>
<P><SPAN id=text>Keep in mind that Metadata.Keywords returns a 
ReadOnlyCollection&lt;string&gt; and the keyword could be in any position in the 
collection. This makes things a little more complicated, because DataTriggers 
can only trigger when the result of the binding is exactly equal to the value 
you specify. The trick to make DataTriggers support any logic you want is to add 
a Converter containing that logic. In this case, my Converter returns True if 
the string “Kevin” is part of the metadata keywords, and False otherwise. When 
the result of this conversion equals the trigger’s Value (True), the trigger 
will set the Visibility property of the TextBlock - which has the name “tb” - to 
Visible.</SPAN></P>
<P><SPAN id=text>I did not want to hardcode the string “Kevin” in the Converter 
though; I wanted it to be generic enough to handle any string. I accomplished 
this by setting the ConverterParameter property in the binding to “Kevin”, as 
you can see in the markup above.</SPAN></P>
<P><SPAN id=text>Here is the code for the Converter:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;public class IsInKeywords : 
IValueConverter<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public 
object Convert(object value, Type targetType, object parameter, CultureInfo 
culture)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadOnlyCollection&lt;string&gt; 
keywords = value as 
ReadOnlyCollection&lt;string&gt;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
keywords.Contains(parameter.ToString());<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></P>
<P><SPAN id=text>Customers frequently ask, “How can I trigger when the Binding 
and Value are *not* equal?” Or, in case the binding is an integer, “How can I 
trigger when the result of the binding is bigger than 10?” The trick I show here 
with the Converter can be used for any of these scenarios.</SPAN></P>
<P><SPAN id=text>Here is a screenshot of the complete application. And if you 
don’t care about the technology, you should still download it to look at the 
pictures. <IMG class=wp-smiley alt=:) 
src="Beatriz Costa » Master-detail_files/icon_smile.gif"> </SPAN></P>
<P><IMG style="DISPLAY: block; MARGIN: 0px auto 10px; TEXT-ALIGN: center" 
src="Beatriz Costa » Master-detail_files/26DataTriggerSample.png" border=0></P>
<P><SPAN id=text><A 
href="http://www.beacosta.com/Zips/26DataTriggerSample.zip">Here</A> you can 
find the VS project with this sample code. This works with Beta2 WPF bits. 
</SPAN></P>
<P class=posted>Posted by <A title="Posts by Bea" 
href="http://www.beacosta.com/blog/?author=1">Bea</A> under <A 
title="View all posts in ListBox" href="http://www.beacosta.com/blog/?cat=14" 
rel=category>ListBox</A>, <A title="View all posts in Styles and Templates" 
href="http://www.beacosta.com/blog/?cat=11" rel=category>Styles and 
Templates</A>, <A title="View all posts in Master-detail" 
href="http://www.beacosta.com/blog/?cat=10" rel=category>Master-detail</A>, <A 
title="View all posts in WPF Data Binding" 
href="http://www.beacosta.com/blog/?cat=2" rel=category>WPF Data Binding</A> | 
<A 
title="Comment on How do I display some items differently based on one of their properties?" 
href="http://www.beacosta.com/blog/?p=29#comments">Comments (4)</A> </P></DIV><!-- <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
				xmlns:dc="http://purl.org/dc/elements/1.1/"
				xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
			<rdf:Description rdf:about="http://www.beacosta.com/blog/?p=29"
    dc:identifier="http://www.beacosta.com/blog/?p=29"
    dc:title="How do I display some items differently based on one of their properties?"
    trackback:ping="http://www.beacosta.com/blog/wp-trackback.php?p=29" />
</rdf:RDF>	-->
<DIV class=post>
<DIV class=date>November 29, 2005</DIV>
<H2 id=post-14><A id=postTitle 
title="How do I synchronize three ListBoxes displaying three levels of hierarchical data?" 
href="http://www.beacosta.com/blog/?p=14" rel=bookmark>How do I synchronize 
three ListBoxes displaying three levels of hierarchical data?</A></H2>
<P><SPAN id=text>The master-detail scenario with more than 2 levels is very 
common, and we made sure we have good support for it in WPF. I will show in this 
post three ways to sync selection of three ListBoxes, each displaying a 
different level of a hierarchy of data. In this sample, the first ListBox 
displays a list of mountain ski resorts. When the user selects a ski resort, the 
second ListBox gets updated with several lifts from that mountain. By selecting 
a particular lift, the third ListBox gets updated with ski runs that can be 
taken down from the top of that lift.</SPAN></P>
<P><SPAN id=text>Here is the approach most people take when trying to get this 
scenario to work:</SPAN></P>
<P><SPAN 
id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:Mountains 
x:Key=”mountains” 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;CollectionViewSource 
Source=”{StaticResource mountains}” x:Key=”cvs” 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox 
ItemsSource=”{Binding Source={StaticResource cvs}}” DisplayMemberPath=”Name” 
Name=”lb1″ /&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox ItemsSource=”{Binding 
Source={StaticResource cvs}, Path=Lifts}” DisplayMemberPath=”Name” Name=”lb2″ 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox ItemsSource=”{Binding 
Source={StaticResource cvs}, Path=Lifts/Runs}” Name=”lb3″ 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN></P>
<P><SPAN id=text>Unfortunately this does not work as expected: lb1 and lb2 are 
in sync but lb3 is not. When creating a custom view on top of a collection by 
using CollectionViewSource, selection and currency are in sync by default (more 
details can be found in my November 10 post). This is why lb1 and lb2 are in 
sync in this scenario. This markup does not use a custom view for the Lifts 
collection though — a default view is created internally instead. Default views 
do not have currency and selection in sync by default, which is the reason why 
lb2 and lb3 don’t sync.</SPAN></P>
<P><SPAN id=text>There are at least three ways to have the three ListBoxes in 
sync.</SPAN></P>
<P><SPAN id=text>The most obvious solution is to create a second 
CollectionViewSource for the Lifts collection and bind lb2 and lb3 to 
it:</SPAN></P>
<P><SPAN 
id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;CollectionViewSource 
Source=”{Binding Source={StaticResource cvs}, Path=Lifts}” 
x:Key=”cvs2″/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox 
ItemsSource=”{Binding Source={StaticResource cvs}}” DisplayMemberPath=”Name” 
Name=”lb1″ /&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox ItemsSource=”{Binding 
Source={StaticResource cvs2}}” DisplayMemberPath=”Name” Name=”lb2″ 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox ItemsSource=”{Binding 
Source={StaticResource cvs2}, Path=Runs}” Name=”lb3″ 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN></P>
<P><SPAN id=text>The second solution is to ignore CollectionViewSource, and let 
WPF create default views internally for us. Because default views don’t sync 
selection and currency by default, we have to override the default behavior by 
setting IsSynchronizedWithCurrentItem to true:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox 
ItemsSource=”{Binding Source={StaticResource mountains}}” 
DisplayMemberPath=”Name” IsSynchronizedWithCurrentItem=”True” Name=”lb1″ 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox ItemsSource=”{Binding 
Source={StaticResource mountains}, Path=Lifts}” DisplayMemberPath=”Name” 
IsSynchronizedWithCurrentItem=”True” Name=”lb2″ 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox ItemsSource=”{Binding 
Source={StaticResource mountains}, Path=Lifts/Runs}” 
IsSynchronizedWithCurrentItem=”True” Name=”lb3″ 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN></P>
<P><SPAN id=text>The third solution is to rely simply on the items displayed in 
the previous ListBox. Binding allows us to link not only to XML and objects, but 
also to other elements in the logical tree. To accomplish this scenario, we set 
the ElementName property of Binding to the Name of the source element (instead 
of setting Binding’s Source property), and the Path to the property of the 
element we’re interested in.</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox 
ItemsSource=”{Binding Source={StaticResource mountains}}” 
DisplayMemberPath=”Name” Name=”lb1″ 
IsSynchronizedWithCurrentItem=”True”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox 
DataContext=”{Binding ElementName=lb1, Path=Items}” ItemsSource=”{Binding 
Path=Lifts}” DisplayMemberPath=”Name” Name=”lb2″ 
IsSynchronizedWithCurrentItem=”True”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox 
DataContext=”{Binding ElementName=lb2, Path=Items}” ItemsSource=”{Binding 
Path=Runs}” Name=”lb3″ 
IsSynchronizedWithCurrentItem=”True”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN></P>
<P><SPAN id=text>In the markup above, we set the DataContext of the second 
ListBox to the first ListBox’s Items property. Because DataContext is not 
expecting a collection, internally the binding engine returns the current item 
of that collection (more details in my previous post). We can then bind the 
ItemsSource to the Lifts property of the current Mountain, which returns the 
list we want.</SPAN></P>
<P><SPAN id=text>This sample uses CLR objects as the data source. When using an 
XML data source, note that only the third solution above will work (for reasons 
I won’t go into here).</SPAN></P>
<P><SPAN id=text>Here is a screen shot of the completed sample:</SPAN></P>
<P><IMG style="DISPLAY: block; MARGIN: 0px auto 10px; TEXT-ALIGN: center" 
src="Beatriz Costa » Master-detail_files/11MasterDetailThreeLevels.png" 
border=0></P>
<P><SPAN id=text><A 
href="http://www.beacosta.com/Zips/11MasterDetailThreeLevels.zip">Here</A> you 
can find the VS project with this sample code. This works with November CTP WPF 
bits. </SPAN></P>
<P class=posted>Posted by <A title="Posts by Bea" 
href="http://www.beacosta.com/blog/?author=1">Bea</A> under <A 
title="View all posts in ListBox" href="http://www.beacosta.com/blog/?cat=14" 
rel=category>ListBox</A>, <A title="View all posts in Master-detail" 
href="http://www.beacosta.com/blog/?cat=10" rel=category>Master-detail</A>, <A 
title="View all posts in WPF Data Binding" 
href="http://www.beacosta.com/blog/?cat=2" rel=category>WPF Data Binding</A> | 
<A 
title="Comment on How do I synchronize three ListBoxes displaying three levels of hierarchical data?" 
href="http://www.beacosta.com/blog/?p=14#respond">Comments (0)</A> </P></DIV><!-- <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
				xmlns:dc="http://purl.org/dc/elements/1.1/"
				xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
			<rdf:Description rdf:about="http://www.beacosta.com/blog/?p=14"
    dc:identifier="http://www.beacosta.com/blog/?p=14"
    dc:title="How do I synchronize three ListBoxes displaying three levels of hierarchical data?"
    trackback:ping="http://www.beacosta.com/blog/wp-trackback.php?p=14" />
</rdf:RDF>	-->
<DIV class=post>
<DIV class=date>November 18, 2005</DIV>
<H2 id=post-13><A id=postTitle title="Master-detail scenario" 
href="http://www.beacosta.com/blog/?p=13" rel=bookmark>Master-detail 
scenario</A></H2>
<P><SPAN id=text>In the simplest master-detail scenario, clicking a particular 
item of an ItemsControl causes the details about that item to be displayed in 
another control. For example, an application may display a list of customer 
names in a ListBox, and clicking a particular customer causes TextBlocks to be 
updated with the address, phone number and date of birth of that customer. 
</SPAN></P>
<P><SPAN id=text>In this post I will use a data source with the planets of the 
solar system: clicking on the name of a planet in the ListBox causes its picture 
and information to be displayed in a templated ContentControl. The ListBox plays 
the role of the master and the ContentControl presents the detail.</SPAN></P>
<P><SPAN id=text>In the resources section of the Window, I have an 
XmlDataProvider with the planet data and a CollectionViewSource with the Source 
property bound to the provider (for more information about CollectionViewSource 
see my previous post). Here is the markup for the ListBox bound to the 
CollectionViewSource:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!– master 
–&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox ItemsSource=”{Binding 
Source={StaticResource cvs}}” DisplayMemberPath=”@Name” Padding=”5″ 
Margin=”0,0,5,0″/&gt;</SPAN></P>
<P><SPAN id=text>I also need a ContentControl, which is used to display the 
details of the selected item. The markup below may seem a little strange at 
first: we are binding a ContentControl (which displays a single item) to a 
collection of items? (Notice that its Content’s Binding is the same as the 
Binding in the ListBox’s ItemsSource.) This markup works fine because the data 
binding engine is smart enough to distinguish between the two targets. When 
binding an ItemsControl to a collection we get the collection; when binding a 
ContentControl to a collection we get the current item of that collection. This 
is what makes the master-detail scenario so simple in WPF.</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!– detail 
–&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ContentControl 
ContentTemplate=”{StaticResource detailTemplate}” Content=”{Binding 
Source={StaticResource cvs}}”/&gt;</SPAN></P>
<P><SPAN id=text>To specify how the details of the planet data should be 
displayed in the ContentControl, we use a DataTemplate. The following markup 
shows the data-binding specific parts of the DataTemplate. Notice that because I 
am binding to XML, the Binding is using XPath instead of Path.</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;DataTemplate 
x:Key=”detailTemplate”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Image 
Source=”{Binding XPath=Image, Converter={StaticResource stringToImageSource}}” 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;StackPanel 
Orientation=”Horizontal” 
Margin=”5,5,5,0″&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock 
Text=”Orbit: ” FontWeight=”Bold” 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock 
Text=”{Binding XPath=Orbit}” 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/StackPanel&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;StackPanel 
Orientation=”Horizontal” 
Margin=”5,0,5,0″&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock 
Text=”Diameter: ” 
FontWeight=”Bold”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock 
Text=”{Binding XPath=Diameter}” 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/StackPanel&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;StackPanel 
Orientation=”Horizontal” 
Margin=”5,0,5,5″&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock 
Text=”Mass: ” 
FontWeight=”Bold”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock 
Text=”{Binding XPath=Mass}” 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/StackPanel&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/DataTemplate&gt;</SPAN></P>
<P><SPAN id=text>Here is a screen shot of the completed sample:</SPAN></P>
<P><IMG style="DISPLAY: block; MARGIN: 0px auto 10px; TEXT-ALIGN: center" 
src="Beatriz Costa » Master-detail_files/10MasterDetail.png" border=0></P>
<P><SPAN id=text><A 
href="http://www.beacosta.com/Zips/10MasterDetail.zip">Here</A> you can find the 
VS project with this sample code. This works with September CTP WPF bits. 
</SPAN></P>
<P class=posted>Posted by <A title="Posts by Bea" 
href="http://www.beacosta.com/blog/?author=1">Bea</A> under <A 
title="View all posts in ListBox" href="http://www.beacosta.com/blog/?cat=14" 
rel=category>ListBox</A>, <A title="View all posts in Master-detail" 
href="http://www.beacosta.com/blog/?cat=10" rel=category>Master-detail</A>, <A 
title="View all posts in WPF Data Binding" 
href="http://www.beacosta.com/blog/?cat=2" rel=category>WPF Data Binding</A> | 
<A title="Comment on Master-detail scenario" 
href="http://www.beacosta.com/blog/?p=13#comments">Comments (6)</A> </P></DIV><!-- <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
				xmlns:dc="http://purl.org/dc/elements/1.1/"
				xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
			<rdf:Description rdf:about="http://www.beacosta.com/blog/?p=13"
    dc:identifier="http://www.beacosta.com/blog/?p=13"
    dc:title="Master-detail scenario"
    trackback:ping="http://www.beacosta.com/blog/wp-trackback.php?p=13" />
</rdf:RDF>	-->
<DIV class=post>
<DIV class=date>November 10, 2005</DIV>
<H2 id=post-12><A id=postTitle 
title="How can I sync selection of two data bound ListBoxes?" 
href="http://www.beacosta.com/blog/?p=12" rel=bookmark>How can I sync selection 
of two data bound ListBoxes?</A></H2>
<P><SPAN id=text>I will show you two ways of syncing the selection of two data 
bound ListBoxes.</SPAN></P>
<P><SPAN id=text>In the first solution, I will create a custom view over the 
collection and bind both ListBoxes to it. Views track the current item of their 
underlying collection, and allow us to sort, group and filter their items. 
CollectionViewSource is a new class introduced in September CTP that makes it 
possible to create a custom view in markup. Because the custom view created 
tracks the current item of the collection, and currency and selection are in 
sync in this scenario, binding both ListBoxes to the same view causes their 
selected items to be in sync.</SPAN></P>
<P><SPAN 
id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:GreekGods 
x:Key=”source” 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;CollectionViewSource 
Source=”{StaticResource source}” 
x:Key=”cvs”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Window.Resources&gt;</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox ItemsSource=”{Binding 
Source={StaticResource cvs}}” 
DisplayMemberPath=”Name”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox 
ItemsSource=”{Binding Source={StaticResource cvs}}” 
DisplayMemberPath=”Name”/&gt;</SPAN></P>
<P><SPAN id=text>I will write about how to use CollectionViewSource to sort, 
group and filter items in a future post.</SPAN></P>
<P><SPAN id=text>An alternative way to achieve the same behavior is to set both 
ItemsSource properties to the data source and set the 
IsSynchronizedWithCurrentItem properties to true:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox 
ItemsSource=”{StaticResource source}” IsSynchronizedWithCurrentItem=”True” 
DisplayMemberPath=”Name”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox 
ItemsSource=”{StaticResource source}” IsSynchronizedWithCurrentItem=”True” 
DisplayMemberPath=”Name”/&gt;</SPAN></P>
<P><SPAN id=text>This markup works because when binding to a collection, a view 
is always created. If you don’t specify one, a default view is created for you 
internally. Although this view tracks current item the same way the custom one 
did, when you have a default view currency and selection do not sync by default. 
The way to override this behavior is by setting the 
IsSynchronizedWithCurrentItem property to true. </SPAN></P>
<P><SPAN id=text>The data team made the default synchronization behavior be 
different for custom views and default views based on customer feedback. This 
way, users that are aware of the concept of view and are explicit about it get 
the synchronization they expect, and the rest of the users don’t.</SPAN></P>
<P><SPAN id=text>In the image below, the first and second ListBoxes are bound to 
the CollectionViewSource and the third and fourth ones have 
InSynchronizedWithCurrentItem set to true.</SPAN></P>
<P><IMG style="DISPLAY: block; MARGIN: 0px auto 10px; TEXT-ALIGN: center" 
src="Beatriz Costa » Master-detail_files/9CollectionViewSourceSample.png" 
border=0></P>
<P><SPAN id=text><A 
href="http://www.beacosta.com/Zips/9CollectionViewSourceSample.zip">Here</A> you 
can find the VS project with this sample code. This works with September CTP WPF 
bits. </SPAN></P>
<P class=posted>Posted by <A title="Posts by Bea" 
href="http://www.beacosta.com/blog/?author=1">Bea</A> under <A 
title="View all posts in ListBox" href="http://www.beacosta.com/blog/?cat=14" 
rel=category>ListBox</A>, <A title="View all posts in Master-detail" 
href="http://www.beacosta.com/blog/?cat=10" rel=category>Master-detail</A>, <A 
title="View all posts in WPF Data Binding" 
href="http://www.beacosta.com/blog/?cat=2" rel=category>WPF Data Binding</A> | 
<A title="Comment on How can I sync selection of two data bound ListBoxes?" 
href="http://www.beacosta.com/blog/?p=12#comments">Comments (2)</A> </P></DIV><!-- <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
				xmlns:dc="http://purl.org/dc/elements/1.1/"
				xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
			<rdf:Description rdf:about="http://www.beacosta.com/blog/?p=12"
    dc:identifier="http://www.beacosta.com/blog/?p=12"
    dc:title="How can I sync selection of two data bound ListBoxes?"
    trackback:ping="http://www.beacosta.com/blog/wp-trackback.php?p=12" />
</rdf:RDF>	-->
<P>
<DIV align=center></DIV>
<P></P></DIV></DIV>
<DIV id=right>
<DIV class=sidebar><!-- Meta -->
<H2>Meta:</H2>
<UL class=noli>
  <LI><A title="Syndicate this site using RSS" 
  href="http://feeds.feedburner.com/BeatrizCosta"><ABBR 
  title="Really Simple Syndication">RSS</ABBR></A> 
  <LI><A title="The latest comments to all posts in RSS" 
  href="http://feeds.feedburner.com/CommentsForBeatrizCosta">Comments <ABBR 
  title="Really Simple Syndication">RSS</ABBR></A> </LI></UL><!-- Search -->
<H2>Search</H2><BR>
<FORM id=searchform action="" method=get><INPUT id=s size=15 name=s> <INPUT type=submit value=Search name=submit> </FORM><!-- Categories -->
<H2>Categories</H2>
<UL class=menu>
  <LI><A title="View all posts filed under General" 
  href="http://www.beacosta.com/blog/?cat=3">General</A> 
  <LI class=current-cat-parent><A 
  title="View all posts filed under WPF Data Binding" 
  href="http://www.beacosta.com/blog/?cat=2">WPF Data Binding</A> 
  <UL class=children>
    <LI><A title="View all posts filed under Binding to ADO.NET" 
    href="http://www.beacosta.com/blog/?cat=12">Binding to ADO.NET</A> 
    <LI><A title="View all posts filed under ListBox" 
    href="http://www.beacosta.com/blog/?cat=14">ListBox</A> 
    <LI><A title="View all posts filed under ListView" 
    href="http://www.beacosta.com/blog/?cat=9">ListView</A> 
    <LI class=current-cat><A title="View all posts filed under Master-detail" 
    href="http://www.beacosta.com/blog/?cat=10">Master-detail</A> 
    <LI><A title="View all posts filed under Sorting, filtering, grouping" 
    href="http://www.beacosta.com/blog/?cat=13">Sorting, filtering, grouping</A> 

    <LI><A title="View all posts filed under Styles and Templates" 
    href="http://www.beacosta.com/blog/?cat=11">Styles and Templates</A> 
    <LI><A title="View all posts filed under TreeView" 
    href="http://www.beacosta.com/blog/?cat=7">TreeView</A> </LI></UL></LI></UL><!-- Archives -->
<H2>Archives</H2>
<UL>
  <LI><A title="September 2007" 
  href="http://www.beacosta.com/blog/?m=200709">September 2007</A> 
  <LI><A title="August 2007" 
  href="http://www.beacosta.com/blog/?m=200708">August 2007</A> 
  <LI><A title="May 2007" href="http://www.beacosta.com/blog/?m=200705">May 
  2007</A> 
  <LI><A title="April 2007" href="http://www.beacosta.com/blog/?m=200704">April 
  2007</A> 
  <LI><A title="January 2007" 
  href="http://www.beacosta.com/blog/?m=200701">January 2007</A> 
  <LI><A title="November 2006" 
  href="http://www.beacosta.com/blog/?m=200611">November 2006</A> 
  <LI><A title="October 2006" 
  href="http://www.beacosta.com/blog/?m=200610">October 2006</A> 
  <LI><A title="September 2006" 
  href="http://www.beacosta.com/blog/?m=200609">September 2006</A> 
  <LI><A title="August 2006" 
  href="http://www.beacosta.com/blog/?m=200608">August 2006</A> 
  <LI><A title="July 2006" href="http://www.beacosta.com/blog/?m=200607">July 
  2006</A> 
  <LI><A title="June 2006" href="http://www.beacosta.com/blog/?m=200606">June 
  2006</A> 
  <LI><A title="May 2006" href="http://www.beacosta.com/blog/?m=200605">May 
  2006</A> 
  <LI><A title="April 2006" href="http://www.beacosta.com/blog/?m=200604">April 
  2006</A> 
  <LI><A title="March 2006" href="http://www.beacosta.com/blog/?m=200603">March 
  2006</A> 
  <LI><A title="February 2006" 
  href="http://www.beacosta.com/blog/?m=200602">February 2006</A> 
  <LI><A title="January 2006" 
  href="http://www.beacosta.com/blog/?m=200601">January 2006</A> 
  <LI><A title="December 2005" 
  href="http://www.beacosta.com/blog/?m=200512">December 2005</A> 
  <LI><A title="November 2005" 
  href="http://www.beacosta.com/blog/?m=200511">November 2005</A> 
  <LI><A title="October 2005" 
  href="http://www.beacosta.com/blog/?m=200510">October 2005</A> 
  <LI><A title="September 2005" 
  href="http://www.beacosta.com/blog/?m=200509">September 2005</A> 
  <LI><A title="August 2005" 
  href="http://www.beacosta.com/blog/?m=200508">August 2005</A> </LI></UL></DIV>
<DIV id=footer>
<DIV class=copyright><SMALL><SPAN class=copy>Copyright © 2007 <STRONG><A 
title="Beatriz Costa" href="http://www.beacosta.com/blog">Beatriz Costa</A> 
</STRONG></SPAN><BR><BR></SMALL></DIV></DIV></DIV></DIV></BODY></HTML>

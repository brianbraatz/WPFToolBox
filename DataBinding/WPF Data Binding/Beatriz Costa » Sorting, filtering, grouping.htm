<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0036)http://www.beacosta.com/blog/?cat=13 -->
<HTML xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Beatriz Costa » Sorting, filtering, grouping</TITLE>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<META content="MSHTML 6.00.2900.3199" name=GENERATOR><!-- leave this for stats --><!-- Editable Meta Tags -->
<META content="" name=description>
<META content="" name=keywords>
<META content="Sreejith - GFXedit.com" name=author>
<META content="Your Name" name=copyright>
<META content="WordPress 2.2.2" name=generator>
<META content=index,follow name=robots><!-- Meta Tags End--><!-- Style Sheet -->
<STYLE type=text/css media=screen>@import url( http://www.beacosta.com/blog/wp-content/themes/darkpad-10/style.css );
</STYLE>
<!-- Style Sheet End --><!-- Includes -->
<SCRIPT src="" type=text/javascript></SCRIPT>

<SCRIPT src="" type=text/javascript></SCRIPT>
<!-- End Includes --><!-- Feed and Ping URLS--><LINK title="RSS 2.0" 
href="http://www.beacosta.com/blog/?feed=rss2" type=application/rss+xml 
rel=alternate><LINK title="RSS .92" 
href="http://www.beacosta.com/blog/?feed=rss" type=text/xml rel=alternate><LINK 
title="Atom 0.3" href="http://www.beacosta.com/blog/?feed=atom" 
type=application/atom+xml rel=alternate><LINK 
href="http://www.beacosta.com/blog/xmlrpc.php" rel=pingback><!--?php wp_get_archives('type=monthly&format=link'); ?--><LINK 
title=RSD href="http://www.beacosta.com/blog/xmlrpc.php?rsd" 
type=application/rsd+xml rel=EditURI>
<SCRIPT language=javascript type=text/javascript>
<!--
		function collapseThread( theId ) {
			var comment = document.getElementById(theId);
			if(!comment)
			{
				alert("ERROR:\nThe document structure is different\nfrom what Threaded Comments expects.\nYou are missing the element '"+theId+"'");
				return;
			}
			var theBody = findBody(comment);
			if(comment.className.indexOf("collapsed") > -1) {
				comment.className = comment.className.replace(" collapsed", "");;
			} else {
				comment.className += " collapsed";
			}
		}

		function expandThread( theId ) {
			var comment = document.getElementById(theId);
			if(!comment)
			{
				alert("ERROR:\nThe document structure is different\nfrom what Threaded Comments expects.\nYou are missing the element '"+theId+"'");
				return;
			}
			var theBody = findBody(comment);
			if(comment.className.indexOf("collapsed") > -1) {
				comment.className = comment.className.replace(" collapsed", "");;
			} 
		}
		
		function findBody(el)
		{
			var divs = el.getElementsByTagName("div");
			var ret;
			for(var i = 0; i < divs.length; ++i) {
				if(divs.item(i).className.indexOf("body") > -1)
					return divs.item(i);
			}
			return false;
		}
	
		function onAddComment() {
			//checkDocumentIntegrity();
			var el = document.getElementById("commentform");
			// Future release: Check if form is filled correctly and mark the form fields.
			el.submit();
		}
		
		function moveAddCommentBelow(theId, threadId, collapse)
		{
			expandThread( theId );
			var addComment = document.getElementById("addcomment");
			if(!addComment)
			{
			  	alert("ERROR:\nThreaded Comments can't find the 'addcomment' div.\nThis is probably because you have changed\nthe comments.php file.\nMake sure there is a tag around the form\nthat has the id 'addcomment'"); 
				return
			}
			var comment = document.getElementById(theId);
			if(collapse)
			{
				for(var i = 0; i < comment.childNodes.length; ++i) {
					var c = comment.childNodes.item(i);
					if(typeof(c.className) == "string" && c.className.indexOf("collapsed")<0) {
						c.className += " collapsed";
					}
				}
			}
			addComment.parentNode.removeChild(addComment);

			comment.appendChild(addComment);
			if(comment.className.indexOf("alt")>-1) {
				addComment.className = addComment.className.replace(" alt", "");					
			} else {
				addComment.className += " alt";
			}
		        var replyId = document.getElementById("comment_reply_ID");
			if(replyId == null)
			{
				alert("Brians Threaded Comments Error:\nThere is no hidden form field called\n'comment_reply_ID'. This is probably because you\nchanged the comments.php file and forgot\nto include the field. Please take a look\nat the original comments.php and copy the\nform field over.");
			}
			replyId.value = threadId;
			var reRootElement = document.getElementById("reroot");
			if(reRootElement == null)
			{
				alert("Brians Threaded Comments Error:\nThere is no anchor tag called 'reroot' where\nthe comment form starts.\nPlease compare your comments.php to the original\ncomments.php and copy the reroot anchor tag over.");
			}
			reRootElement.style.display = "block";
			var aTags = comment.getElementsByTagName("A");
			var anc = aTags.item(0).id;
			//document.location.href = "#"+anc;
			document.getElementById("comment").focus();
		}

		function checkDocumentIntegrity()
		{
			str = "";
			
			str += checkElement("reroot","div tag");
			str += checkElement("addcomment", "div tag");
			str += checkElement("comment_reply_ID", "hidden form field");
			str += checkElement("content", "div tag");
			str += checkElement("comment", "textfield");
			str += checkElement("addcommentanchor", "anchor tag");
			
			if(str != "")
			{
				str = "Brian's Threaded Comments are missing some of the elements that are required for it to function correctly.\nThis is probably the because you have changed the original comments.php that was included with the plugin.\n\nThese are the errors:\n" + str;
				str += "\nYou should compare your comments.php with the original comments.php and make sure the required elements have not been removed.";

				alert(str);
			}
		}
               
		function checkElement(theId, elDesc)
		{
			var el = document.getElementById(theId);
			if(!el)
			{
				if(elDesc == null)
					elDesc = "element";
				return "- The "+elDesc+" with the ID '" +theId + "' is missing\n"; 
			}
			else 
				return "";
		}
		
		function reRoot()
		{
			var addComment = document.getElementById("addcomment");			
			var reRootElement = document.getElementById("reroot");
			reRootElement.style.display = "none";
			var content = document.getElementById("content");
			addComment.parentNode.removeChild(addComment);
			content.appendChild(addComment);
			addComment.className = addComment.className.replace(" alt", "");
			document.location.href = "#addcommentanchor";
			document.getElementById("comment").focus();				
			document.getElementById("comment_reply_ID").value = "0";
		}			
		
		function changeCommentSize(d)
		{
			var el = document.getElementById("comment");
			var height = parseInt(el.style.height);
			if(!height && el.offsetHeight)
				height = el.offsetHeight;
			height += d;
			if(height < 20) 
				height = 20;
			el.style.height = height+"px";
		}		
-->
</SCRIPT>

<STYLE type=text/css>.comment {
	PADDING-RIGHT: 4px; PADDING-LEFT: 8px; PADDING-BOTTOM: 4px; MARGIN: 6px 3px 3px; PADDING-TOP: 4px; POSITION: relative; BACKGROUND-COLOR: #fff
}
.odd {
	BACKGROUND-COLOR: #f8f8f8
}
.comment DIV {
	POSITION: relative
}
.comment .comment IMG {
	MARGIN: 0px
}
.comment .collapseicon {
	BACKGROUND-IMAGE: url(http://www.beacosta.com/blog/wp-content/plugins/briansthreadedcomments.php?image=subthread-open.png); OVERFLOW: hidden; WIDTH: 13px; HEIGHT: 13px
}
.collapsed .collapseicon {
	BACKGROUND-IMAGE: url(http://www.beacosta.com/blog/wp-content/plugins/briansthreadedcomments.php?image=subthread.png)
}
.comment .reply {
	PADDING-RIGHT: 6px; PADDING-LEFT: 0px; FONT-SIZE: 80%; PADDING-BOTTOM: 6px; PADDING-TOP: 0px; TEXT-ALIGN: right
}
.comment {
	BORDER-RIGHT: #ddd 1px solid; BORDER-TOP: #ddd 1px solid; MARGIN-TOP: 10px; BORDER-LEFT: #ddd 1px solid; BORDER-BOTTOM: #ddd 1px solid
}
INPUT#subscribe {
	WIDTH: auto
}
.comment .body .content {
	PADDING-RIGHT: 3px; PADDING-LEFT: 3px; PADDING-BOTTOM: 0px; OVERFLOW: auto; WIDTH: 100%; PADDING-TOP: 0px
}
.comment .title abbr {
	BORDER-TOP-STYLE: none; BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; BORDER-BOTTOM-STYLE: none
}
.collapsed .body {
	DISPLAY: none
}
.collapsed .comment {
	DISPLAY: none
}
#commentform TEXTAREA {
	WIDTH: 97%
}
</STYLE>
<!-- End Feed and Ping URLS--></HEAD>
<BODY>
<DIV id=container>
<DIV id=banner>
<H1><A title="Beatriz Costa" accessKey=1 
href="http://www.beacosta.com/blog">Beatriz Costa</A></H1>
<H2 title="WPF Data Binding">WPF Data Binding</H2></DIV>
<DIV id=center>
<DIV class=content>
<DIV class=post>
<DIV class=date>September 4, 2006</DIV>
<H2 id=post-32><A id=postTitle title="How do I apply more than one filter?" 
href="http://www.beacosta.com/blog/?p=32" rel=bookmark>How do I apply more than 
one filter?</A></H2>
<P><SPAN id=text>Today I will explain how you can apply more than one filter to 
a data bound view of a collection.</SPAN></P>
<P><SPAN id=text>I showed in my last post the two ways of filtering. 
CollectionViewSource allows us to filter by attaching an event handler to the 
Filter event (of type FilterEventHandler). You may be wondering what happens if 
we attach more than one filter event handler to the same CollectionViewSource’s 
Filter event. It turns out that each of the event handlers is called in the 
sequence they were attached, once for each item. This allows each handler to 
override whatever filtering decision was made in the previous ones.</SPAN></P>
<P><SPAN id=text>The good news is that within any event handler, you have access 
to the filtering decision made by the previous handlers. You can use this 
information to decide whether to filter the current item. I will show you how to 
do this next.</SPAN></P>
<P><SPAN id=text>In my XAML file, I created an instance of an 
ObservableCollection with items of type AsterixCharacter, which contains two 
properties: one with the name of the character, and another one with its hair 
color. I then created a CollectionViewSource whose Source property points to 
this collection and bound the ListBox to it.</SPAN></P>
<P><SPAN 
id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:AsterixCharacters 
x:Key=”asterix”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;CollectionViewSource 
Source=”{StaticResource asterix}” 
x:Key=”cvs”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DataTemplate 
x:Key=”characterTemplate”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;StackPanel 
Orientation=”Horizontal”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock 
Width=”150″ Text=”{Binding Path=Name}” 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock 
Text=”{Binding Path=Hair}” 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/StackPanel&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/DataTemplate&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;StackPanel 
Margin=”10″ Width=”200″ 
&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;CheckBox 
Content=”Filter out A” Checked=”AddAFilter” Unchecked=”RemoveAFilter” 
Margin=”5″/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;CheckBox 
Content=”Filter out white hair” Checked=”AddWhiteHairFilter” 
Unchecked=”RemoveWhiteHairFilter” 
Margin=”5″/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox 
ItemsSource=”{Binding Source={StaticResource cvs}}” 
ItemTemplate=”{StaticResource characterTemplate}” 
Margin=”5″/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/StackPanel&gt;</SPAN></P>
<P><SPAN id=text>When the first check box is checked, I want to filter out all 
Asterix characters whose names start with A. Likewise, when the second check box 
is checked, I want to filter out all characters with white hair. It is important 
to me that these two filter conditions are in different handlers (I could be 
reusing one of the handlers in another scenario, for example). Here is the code 
where I add and remove the filter event handler associated with the first check 
box:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;CollectionViewSource 
cvs;<BR>&nbsp;&nbsp;&nbsp;&nbsp;public 
Window1()<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InitializeComponent();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cvs 
= 
(CollectionViewSource)(this.Resources[”cvs”]);<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;private 
void AddAFilter(object sender, RoutedEventArgs 
e)<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cvs.Filter 
+= new 
FilterEventHandler(FilterOutA);<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;private 
void RemoveAFilter(object sender, RoutedEventArgs 
e)<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cvs.Filter 
-= new FilterEventHandler(FilterOutA);<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></P>
<P><SPAN id=text>In order for the filter event handlers to work properly without 
interfering with each other, I made sure they only set the Accepted property of 
the FilterEventArgs to false when necessary to filter an item out. I never set 
the Accepted property to true, since that might override another filter’s 
decision to keep an item out of the view. Here is my implementation:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;private void FilterOutA(object sender, 
FilterEventArgs 
e)<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AsterixCharacter 
character = e.Item as 
AsterixCharacter;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
((character == null) || 
character.Name.StartsWith(”A”))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.Accepted 
= 
false;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;private 
void FilterOutWhiteHair(object sender, FilterEventArgs 
e)<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AsterixCharacter 
character = e.Item as 
AsterixCharacter;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
((character == null) || (character.Hair == 
HairColor.White))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.Accepted 
= 
false;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></P>
<P><SPAN id=text>Here is a screenshot of the completed sample:</SPAN></P>
<P><IMG style="DISPLAY: block; MARGIN: 0px auto 10px; TEXT-ALIGN: center" 
src="Beatriz Costa » Sorting, filtering, grouping_files/29MultipleFilters.png" 
border=0></P>
<P><SPAN id=text><A 
href="http://www.beacosta.com/Zips/29MultipleFilters.zip">Here</A> you can find 
the VS project with this sample code. This works with July CTP WPF bits. 
</SPAN></P>
<P class=posted>Posted by <A title="Posts by Bea" 
href="http://www.beacosta.com/blog/?author=1">Bea</A> under <A 
title="View all posts in Sorting, filtering, grouping" 
href="http://www.beacosta.com/blog/?cat=13" rel=category>Sorting, filtering, 
grouping</A>, <A title="View all posts in WPF Data Binding" 
href="http://www.beacosta.com/blog/?cat=2" rel=category>WPF Data Binding</A> | 
<A title="Comment on How do I apply more than one filter?" 
href="http://www.beacosta.com/blog/?p=32#comments">Comments (2)</A> </P></DIV><!-- <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
				xmlns:dc="http://purl.org/dc/elements/1.1/"
				xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
			<rdf:Description rdf:about="http://www.beacosta.com/blog/?p=32"
    dc:identifier="http://www.beacosta.com/blog/?p=32"
    dc:title="How do I apply more than one filter?"
    trackback:ping="http://www.beacosta.com/blog/wp-trackback.php?p=32" />
</rdf:RDF>	-->
<DIV class=post>
<DIV class=date>August 6, 2006</DIV>
<H2 id=post-31><A id=postTitle title="How do I filter items from a collection?" 
href="http://www.beacosta.com/blog/?p=31" rel=bookmark>How do I filter items 
from a collection?</A></H2>
<P><SPAN id=text>Today I will show you two ways of using the filter feature of 
data binding.</SPAN></P>
<P><SPAN id=text>There are two ObservableCollections of items in this sample. 
The first one contains a list of GreekGods, and the ListBox that displays it 
shows their Roman names. The second one contains a list of GreekHeroes. I will 
use these two collections to show two different ways of filtering items. 
</SPAN></P>
<P><SPAN id=text>I decided to filter out all items that start with “A” from the 
first collection. I started out by adding a new instance of the GreekGods 
collection to the resources and bound a ListBox’s ItemsSource to that 
collection:</SPAN></P>
<P><SPAN 
id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:GreekGods 
x:Key=”src1″/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Label&gt;Items 
that start with “A” are filtered 
out:&lt;/Label&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox ItemsSource=”{Binding 
Source={StaticResource src1}}” 
DisplayMemberPath=”RomanName”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;</SPAN></P>
<P><SPAN id=text>In the constructor for the Window, I added code after 
initialization to get the default view for this collection. Remember that we 
never bind directly to the collection; there is always a view on top of that 
collection that we bind to. In this case I am not creating that view explicitly 
with the help of a CollectionViewSource, so a default view is created behind the 
scenes. I can get to that default view by using the GetDefaultView static method 
of CollectionViewSource:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;public 
Window1()<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InitializeComponent();<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;object 
src1 = 
this.Resources[”src1″];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ICollectionView 
collectionView = 
CollectionViewSource.GetDefaultView(src1);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;collectionView.Filter 
= new 
Predicate&lt;object&gt;(FilterOutA);<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></P>
<P><SPAN id=text>Once I have a handle to the view, I am able to set its Filter 
property to the Predicate&lt;object&gt; callback function below:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;public bool FilterOutA(object 
item)<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GreekGod 
gg = item as GreekGod;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
((gg == null) || 
gg.RomanName.StartsWith(”A”))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
false;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
true;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></P>
<P><SPAN id=text>This method is called once for each item. If the item is a 
GreekGod whose Roman name begins with “A”, it will return false, and that item 
will be filtered out. Otherwise, it will return true and the item will be 
displayed.</SPAN></P>
<P><SPAN id=text>Similarly, I decided to filter out all items that start with B 
from the second collection. However, this time I am using CollectionViewSource 
explicitly. I set the Source property of the CollectionViewSource to the 
collection and bind the ListBox’s ItemsSource to the 
CollectionViewSource:</SPAN></P>
<P><SPAN 
id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:GreekHeroes 
x:Key=”src2″/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;CollectionViewSource 
Source=”{StaticResource src2}” x:Key=”cvs” 
Filter=”FilterOutB”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Label&gt;Items 
that start with “B” are filtered 
out:&lt;/Label&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox ItemsSource=”{Binding 
Source={StaticResource cvs}}” DisplayMemberPath=”HeroName”/&gt;</SPAN></P>
<P><SPAN id=text>We came up with the CollectionViewSource class to serve two 
purposes: 1) To allow us to do view related operations in XAML, such as 
grouping, sorting, filtering or creating a custom view of a certain type and 2) 
To serve as a container for all the view methods, such as GetDefaultView or 
IsDefaultView. Before we came up with this class these methods were in the 
Binding class, which cluttered it with unrelated methods and made it hard for 
users to find them.</SPAN></P>
<P><SPAN id=text>I’ve been asked several times about the difference between 
CollectionView and CollectionViewSource. The difference is simple: 
CollectionViewSource is not a view, but a class that contains handles to the 
source and the corresponding view and is used for the purposes I described 
above. CollectionView is an actual view on top of a collection, which contains 
information about the current item, filtering, sorting and grouping.</SPAN></P>
<P><SPAN id=text>Unfortunately you still need code to specify which items are 
filtered in or out:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;private void FilterOutB(object sender, 
FilterEventArgs 
e)<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GreekHero 
gh = e.Item as GreekHero;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
((gh == null) || 
gh.HeroName.StartsWith(”B”))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.Accepted 
= 
false;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.Accepted 
= 
true;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></P>
<P><SPAN id=text>Note that the Filter property in CollectionViewSource is not a 
delegate like the one in CollectionView, but an event handler. We made this 
decision so that you could specify the name of the filter method in XAML. At 
this point, there is no support to add the name of the callback method of a 
delegate in XAML, but this support exists for events. We realize that the two 
ways of filtering are a little inconsistent, but this design brings us closer to 
our goal of allowing the user to do as much as possible in XAML with 
CollectionViewSource.</SPAN></P>
<P><SPAN id=text>The filter event handler has a FilterEventArgs argument, which 
has two interesting properties: the Item property that provides the item on 
which we need to make the filter decision, and the Accepted property where we 
set the result of that decision. If we set Accepted to false, the item will be 
filtered out, and if we set it to true, the item will be displayed.</SPAN></P>
<P><SPAN id=text>Here is a screenshot of the completed sample:</SPAN></P>
<P><IMG style="DISPLAY: block; MARGIN: 0px auto 10px; TEXT-ALIGN: center" 
src="Beatriz Costa » Sorting, filtering, grouping_files/28FilterSample.png" 
border=0></P>
<P><SPAN id=text><A 
href="http://www.beacosta.com/Zips/28FilterSample.zip">Here</A> you can find the 
VS project with this sample code. This works with July CTP WPF bits. </SPAN></P>
<P class=posted>Posted by <A title="Posts by Bea" 
href="http://www.beacosta.com/blog/?author=1">Bea</A> under <A 
title="View all posts in Sorting, filtering, grouping" 
href="http://www.beacosta.com/blog/?cat=13" rel=category>Sorting, filtering, 
grouping</A>, <A title="View all posts in WPF Data Binding" 
href="http://www.beacosta.com/blog/?cat=2" rel=category>WPF Data Binding</A> | 
<A title="Comment on How do I filter items from a collection?" 
href="http://www.beacosta.com/blog/?p=31#comments">Comments (7)</A> </P></DIV><!-- <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
				xmlns:dc="http://purl.org/dc/elements/1.1/"
				xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
			<rdf:Description rdf:about="http://www.beacosta.com/blog/?p=31"
    dc:identifier="http://www.beacosta.com/blog/?p=31"
    dc:title="How do I filter items from a collection?"
    trackback:ping="http://www.beacosta.com/blog/wp-trackback.php?p=31" />
</rdf:RDF>	-->
<DIV class=post>
<DIV class=date>April 9, 2006</DIV>
<H2 id=post-24><A id=postTitle title="How can I add my own sorting logic?" 
href="http://www.beacosta.com/blog/?p=24" rel=bookmark>How can I add my own 
sorting logic?</A></H2>
<P><SPAN id=text>I showed in <A 
href="http://www.beacosta.com/2006/01/how-do-i-sort-groups-of-data-items.html">an 
earlier post</A> how we can use CollectionViewSource to sort items in markup. 
This way of sorting allows us to pick Ascending or Descending sorting, but it 
doesn’t provide any flexibility beyond that. Today I will show you how you can 
write your own sorting logic that enables full control over the order of items 
in a view.</SPAN></P>
<P><SPAN id=text>When I write a new blog sample, I create a directory named with 
a number followed by a short description of the scenario. For example, for 
today’s post, the name of the directory is 21CustomSorting. Windows Explorer 
knows how to do the right thing to order all those directories: the first one is 
1DataContext, and all the others are displayed in increasing numeric order until 
21CustomSorting. This is not a simple ascending string sort, though. A 
traditional string sort would display 10MasterDetail - 
19ObjectDataProviderSample, 1DataContext, 20InsertingSeparators, 
21CustomSorting, 2EmptyBinding - 9CollectionViewSourceSample, which is obviously 
not what I want. I will show you today how you can order strings that start with 
numbers the same way as Explorer. I will also give you a quick overview of 
Avalon’s view classes.</SPAN></P>
<P><SPAN id=text>A view is a layer on top of a collection that allows us to 
sort, filter and group the collection. Views also remember the current item of a 
collection, which is useful for the master-detail scenario. The base class for 
all views is CollectionView, which is where we keep the API for sorting, 
filtering, grouping and current item. There are currently two classes that 
derive from CollectionView: BindingListCollectionView and ListCollectionView. 
The view type we create internally depends on the type of your source 
collection:</SPAN></P>
<P><SPAN id=text>- A CollectionView is created if your source implements 
IEnumerable. If the source implements IEnumerable *only*, you will not be able 
to sort or group the collection (you can only filter it). Also, perf will not be 
the best if the source has a large number of items or if you perform dynamic 
operations such as insertions and deletions. If this is your scenario, you 
should consider having your source implement a stronger interface. ICollection 
is slightly better because it provides a Count property. </SPAN></P>
<P><SPAN id=text>- ListCollectionView is the view type created when the source 
implements IList. Compared to IEnumerable and ICollection, IList performs much 
better for large or dynamic lists because it provides an indexer, allowing us 
quick random access. In addition, IList allows sorting, grouping and filtering. 
But ideally your source collection derives from ObservableCollection&lt;T&gt;, 
the mother of all collections in the eyes of data binding, since it provides 
several extra goodies such as property and collection change 
notifications.</SPAN></P>
<P><SPAN id=text>- BindingListCollectionView is the type of view created by 
Avalon when the source collection implements IBindingList. This is the view we 
deal with in the ADO.NET scenario. It supports sorting and grouping, but not 
traditional filtering. Instead, it has an additional CustomFilter property that 
delegates filtering to the DataView (see <A 
href="http://www.beacosta.com/2006/03/how-do-i-bind-to-adonet.html">my post on 
ADO.NET</A> for more details).</SPAN></P>
<P><SPAN id=text>Note that if your source collection implements both 
IBindingList and IList, IBindingList has priority, and a 
BindingListCollectionView is created.</SPAN></P>
<P><SPAN id=text>ListCollectionView has an extra CustomSort property that allows 
us to provide our own sorting logic, which is what I will show you next. The 
source collection for this sample is an ObservableCollection&lt;string&gt; of 
the directory names that I use for my blog posts. The UI of this sample contains 
a ListBox of blog post directory names, initially in random order, and a “Sort” 
Button:</SPAN></P>
<P><SPAN 
id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:BlogPosts 
x:Key=”posts”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ListBox 
ItemsSource=”{StaticResource posts}” (…) 
Name=”lb”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Button Click=”Sort” Content=”Sort” 
Margin=”0,10,0,0″/&gt;</SPAN></P>
<P><SPAN id=text>When the user clicks the “Sort” button, we get the default view 
for the source collection, cast it to ListCollectionView, and give it some 
custom sort logic. The GetDefaultView method returns a CollectionView, but we 
can cast it to ListCollectionView because we know that the BlogPosts source 
collection implements IList.</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;private void Sort(object sender, 
RoutedEventArgs 
args)<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BlogPosts 
posts = 
(BlogPosts)(this.Resources[”posts”]);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListCollectionView 
lcv = 
(ListCollectionView)(CollectionViewSource.GetDefaultView(posts));<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lcv.CustomSort 
= new SortPosts();<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></P>
<P><SPAN id=text>The CustomSort property is of type IComparer. We need to create 
a new class that implements IComparer, and add our sorting logic to its Compare 
method. This method should return a negative number if x comes before y, a 
positive number if x comes after y, and zero if they are equivalent.</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;public class SortPosts : 
IComparer<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public 
int Compare(object x, object 
y)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></P>
<P><SPAN id=text>Here is a screenshot of the completed sample:</SPAN></P>
<P><IMG style="DISPLAY: block; MARGIN: 0px auto 10px; TEXT-ALIGN: center" 
src="Beatriz Costa » Sorting, filtering, grouping_files/21CustomSorting.png" 
border=0></P>
<P><SPAN id=text><A 
href="http://www.beacosta.com/Zips/21CustomSorting.zip">Here</A> you can find 
the VS project with this sample code. This works with February CTP WPF bits. 
</SPAN></P>
<P class=posted>Posted by <A title="Posts by Bea" 
href="http://www.beacosta.com/blog/?author=1">Bea</A> under <A 
title="View all posts in Sorting, filtering, grouping" 
href="http://www.beacosta.com/blog/?cat=13" rel=category>Sorting, filtering, 
grouping</A>, <A title="View all posts in WPF Data Binding" 
href="http://www.beacosta.com/blog/?cat=2" rel=category>WPF Data Binding</A> | 
<A title="Comment on How can I add my own sorting logic?" 
href="http://www.beacosta.com/blog/?p=24#comments">Comments (6)</A> </P></DIV><!-- <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
				xmlns:dc="http://purl.org/dc/elements/1.1/"
				xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
			<rdf:Description rdf:about="http://www.beacosta.com/blog/?p=24"
    dc:identifier="http://www.beacosta.com/blog/?p=24"
    dc:title="How can I add my own sorting logic?"
    trackback:ping="http://www.beacosta.com/blog/wp-trackback.php?p=24" />
</rdf:RDF>	-->
<DIV class=post>
<DIV class=date>February 12, 2006</DIV>
<H2 id=post-19><A id=postTitle title="How can I do custom Grouping?" 
href="http://www.beacosta.com/blog/?p=19" rel=bookmark>How can I do custom 
Grouping?</A></H2>
<P><SPAN id=text>My previous post shows how to group items based on the value of 
a certain property. In a real-world scenario you may want to group your items 
based on some other logic. With this in mind, Avalon Data Binding provides a way 
for you to write custom code and specify how you want to group your items. This 
allows maximum flexibility; you can group your items pretty much any way you can 
think of.</SPAN></P>
<P><SPAN id=text>Brett made a comment to my last blog post asking how to group 
items based on their type. I will use this scenario to show you how to do custom 
Grouping. </SPAN></P>
<P><SPAN id=text>My data source in this sample is of type 
ObservableCollection&lt;object&gt;, and contains some objects of type GreekGod 
and others of type GreekHero. My goal is to group all the items of type GreekGod 
in a group called “Greek Gods” and group all GreekHero items under the group 
“Greek Heroes”. This is what the markup looks like:</SPAN></P>
<P><SPAN 
id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:GreekGodsAndHeroes 
x:Key=”GodsAndHeroes” 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:GroupByTypeConverter 
x:Key=”GroupByTypeConverter”/&gt;</SPAN></P>
<P><SPAN 
id=code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;CollectionViewSource 
x:Key=”cvs” Source=”{Binding Source={StaticResource 
GodsAndHeroes}}”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;CollectionViewSource.GroupDescriptions&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;PropertyGroupDescription 
Converter=”{StaticResource 
GroupByTypeConverter}”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/CollectionViewSource.GroupDescriptions&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/CollectionViewSource&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Window.Resources&gt;</SPAN></P>
<P><SPAN id=text>Notice that this time, instead of setting PropertyName in 
PropertyGroupDescription, I set the Converter property. This Converter is 
defined in the code behind and contains the logic to divide the data items in 
groups.</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;public class GroupByTypeConverter : 
IValueConverter<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public 
object Convert(object value, Type targetType, object parameter, CultureInfo 
culture)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if 
(value is 
GreekGod)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
“Greek 
Gods”;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
if (value is 
GreekHero)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
“Greek 
Heroes”;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
null;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;}</SPAN></P>
<P><SPAN id=text>All the items that return the same value in the Converter will 
be grouped together. In this scenario I am grouping the items based on their 
type and my groups are of type string. Remember that you can use a Converter to 
group your items some other way. Notice also that the groups don’t have to be a 
string, they can be any object you want.</SPAN></P>
<P><SPAN id=text>Just like in the previous post, I want to display the groups 
and items in a TreeView.</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TreeView ItemsSource=”{Binding 
Source={StaticResource cvs}, 
Path=Groups}”<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Width=”200″&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/TreeView&gt;</SPAN></P>
<P><SPAN id=text>In this case, however, templating the items is not as obvious. 
When the items are all of the same type this is really easy to achieve with a 
chain of HierarchicalDataTemplates and a DataTemplate for the leaf nodes. In 
this scenario we need a HierarchicalDataTemplate for the groups and one of two 
DataTemplates for the leaf nodes, depending on their type. </SPAN></P>
<P><SPAN id=text>My first approach to this was to have those 3 templates in the 
resources and set their DataType property instead of giving them a key (with 
x:Key). This does not work because when you use a HierarchicalDataTemplate to 
template a group and do not set its ItemTemplate property, that same template is 
used for the lower levels of the hierarchy. This behavior is useful when all the 
levels have items of the same type (for example, when using a TreeView to 
display a hierarchy of directories in a computer).</SPAN></P>
<P><SPAN id=text>My second approach was to set the ItemTemplateSelector property 
of the HierarchicalDataTemplate to a template selector that decides the correct 
template to use based on the type of the leaf item. Unfortunately there is a bug 
in the ItemTemplateSelector property of HierarchicalDataTemplate that prevents 
this from working. Once the bug is fixed, this will be the correct way to 
specify the templates.</SPAN></P>
<P><SPAN id=text>My third and final approach was to move the template selector 
to the TreeView and add one more “if” branch to deal with deciding what type to 
return for the groups (which are of type CollectionViewGroup).</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;public override DataTemplate 
SelectTemplate(object item, DependencyObject 
container)<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string 
templateKey;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (item is 
CollectionViewGroup)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;templateKey 
= 
“GroupTemplate”;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
if (item is 
GreekGod)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;templateKey 
= 
“GreekGodTemplate”;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
if (item is 
GreekHero)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;templateKey 
= 
“GreekHeroTemplate”;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
null;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
(DataTemplate)((FrameworkElement)container).FindResource(templateKey);<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:GodHeroTemplateSelector 
x:Key=”GodHeroTemplateSelector” 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(..)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Window.Resources&gt;</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TreeView ItemsSource=”{Binding 
Source={StaticResource cvs}, 
Path=Groups}”<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ItemTemplateSelector=”{StaticResource 
GodHeroTemplateSelector}”<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Width=”200″&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/TreeView&gt;</SPAN></P>
<P><SPAN id=text>For each of the items displayed in the TreeView, this template 
selector looks up the appropriate (Hierarchical)DataTemplate in the 
resources.</SPAN></P>
<P><SPAN id=text>Here is a screenshot of the completed sample:</SPAN></P>
<P><IMG style="DISPLAY: block; MARGIN: 0px auto 10px; TEXT-ALIGN: center" 
src="Beatriz Costa » Sorting, filtering, grouping_files/16GroupByType.png" 
border=0></P>
<P><SPAN id=text><A 
href="http://www.beacosta.com/Zips/16GroupByType.zip">Here</A> you can find the 
VS project with this sample code. This works with January CTP WPF bits. 
</SPAN></P>
<P class=posted>Posted by <A title="Posts by Bea" 
href="http://www.beacosta.com/blog/?author=1">Bea</A> under <A 
title="View all posts in Sorting, filtering, grouping" 
href="http://www.beacosta.com/blog/?cat=13" rel=category>Sorting, filtering, 
grouping</A>, <A title="View all posts in TreeView" 
href="http://www.beacosta.com/blog/?cat=7" rel=category>TreeView</A>, <A 
title="View all posts in WPF Data Binding" 
href="http://www.beacosta.com/blog/?cat=2" rel=category>WPF Data Binding</A> | 
<A title="Comment on How can I do custom Grouping?" 
href="http://www.beacosta.com/blog/?p=19#comments">Comments (16)</A> </P></DIV><!-- <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
				xmlns:dc="http://purl.org/dc/elements/1.1/"
				xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
			<rdf:Description rdf:about="http://www.beacosta.com/blog/?p=19"
    dc:identifier="http://www.beacosta.com/blog/?p=19"
    dc:title="How can I do custom Grouping?"
    trackback:ping="http://www.beacosta.com/blog/wp-trackback.php?p=19" />
</rdf:RDF>	-->
<DIV class=post>
<DIV class=date>February 4, 2006</DIV>
<H2 id=post-18><A id=postTitle 
title="How do I display grouped data in a TreeView?" 
href="http://www.beacosta.com/blog/?p=18" rel=bookmark>How do I display grouped 
data in a TreeView?</A></H2>
<P><SPAN id=text>The TreeView control is great at displaying structured data 
using the HierarchicalDataTemplate (see <A 
href="http://blogs.msdn.com/karstenj/archive/2005/11/02/488420.aspx">Karsten’s 
blog post</A> on this topic). But what do you do if the data you’re given is not 
structured hierarchically? In this post, I will show you how to create that 
hierarachy from a flat list of data items, using the grouping feature of data 
binding.</SPAN></P>
<P><SPAN id=text>I am using the same Animal data source I used in my last post. 
Grouping the Animals by Category is done the same way as in my last 
sample:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:Animals 
x:Key=”animals”/&gt;</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;CollectionViewSource x:Key=”cvs” 
Source=”{Binding Source={StaticResource animals}, 
Path=AnimalList}”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;CollectionViewSource.GroupDescriptions&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;PropertyGroupDescription 
PropertyName=”Category”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/CollectionViewSource.GroupDescriptions&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/CollectionViewSource&gt;</SPAN></P>
<P><SPAN id=text>We now have the data in a hierarchical form. In this particular 
case it has only one level of groups, and another level with the animals. You 
can easily imagine that by adding more GroupDescriptions you would end up with a 
deeper hierarchy.</SPAN></P>
<P><SPAN id=text>When binding to a CollectionViewSource, the Binding object 
knows to grab the CollectionViewSource’s View property. This property returns 
the custom view (of type ICollectionView) that CollectionViewSource creates on 
top of the data collection (where the grouping is applied). In our scenario, we 
want to bind to the hierarchy we created with grouping, or in other words, we 
want to bind to the groups. We can get to this data by binding to the Groups 
property in ICollectionView:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TreeView ItemsSource=”{Binding 
Source={StaticResource cvs}, 
Path=Groups}”<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ItemTemplate=”{StaticResource 
categoryTemplate}” 
Width=”200″&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/TreeView&gt;</SPAN></P>
<P><SPAN id=text>When using data binding’s grouping feature, each group of items 
is wrapped in a CollectionViewGroup object. We can access the name of the group 
(the property we’re grouping by) by using CollectionViewGroup’s Name property, 
and we can get to the items that belong to the group through the Items property. 
This is all the information we need in order to make a HierarchicalDataTemplate 
that will display the Category of each animal and specify the animals that 
belong to it:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;HierarchicalDataTemplate 
x:Key=”categoryTemplate”<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ItemsSource=”{Binding 
Path=Items}”<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ItemTemplate=”{StaticResource 
animalTemplate}”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock 
Text=”{Binding Path=Name}” 
FontWeight=”Bold”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/HierarchicalDataTemplate&gt;</SPAN></P>
<P><SPAN id=text>Finally we need a DataTemplate for the leaf nodes, which 
specifies how we want the Animal data to be displayed. In this case, we are 
interested in displaying the Name property of each Animal. Notice that the 
HierarchicalDataTemplate’s ItemTemplate property points to this 
template.</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;DataTemplate 
x:Key=”animalTemplate”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock 
Text=”{Binding 
Path=Name}”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/DataTemplate&gt;</SPAN></P>
<P><SPAN id=text>Here is the result of the completed sample:</SPAN></P>
<P><IMG style="DISPLAY: block; MARGIN: 0px auto 10px; TEXT-ALIGN: center" 
src="Beatriz Costa » Sorting, filtering, grouping_files/15GroupingTreeView.png" 
border=0></P>
<P><SPAN id=text><A 
href="http://www.beacosta.com/Zips/15GroupingTreeView.zip">Here</A> you can find 
the VS project with this sample code. This works with January CTP WPF bits. 
</SPAN></P>
<P><SPAN id=text>Update September 18, 2007: <A 
href="http://www.beacosta.com/Zips/15GroupingTreeViewOrcasBeta2.zip">Here you 
can find this sample working with Orcas Beta 2 bits.</SPAN></P>
<P class=posted>Posted by <A title="Posts by Bea" 
href="http://www.beacosta.com/blog/?author=1">Bea</A> under <A 
title="View all posts in Sorting, filtering, grouping" 
href="http://www.beacosta.com/blog/?cat=13" rel=category>Sorting, filtering, 
grouping</A>, <A title="View all posts in TreeView" 
href="http://www.beacosta.com/blog/?cat=7" rel=category>TreeView</A>, <A 
title="View all posts in WPF Data Binding" 
href="http://www.beacosta.com/blog/?cat=2" rel=category>WPF Data Binding</A> | 
<A title="Comment on How do I display grouped data in a TreeView?" 
href="http://www.beacosta.com/blog/?p=18#comments">Comments (22)</A> </P></DIV><!-- <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
				xmlns:dc="http://purl.org/dc/elements/1.1/"
				xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
			<rdf:Description rdf:about="http://www.beacosta.com/blog/?p=18"
    dc:identifier="http://www.beacosta.com/blog/?p=18"
    dc:title="How do I display grouped data in a TreeView?"
    trackback:ping="http://www.beacosta.com/blog/wp-trackback.php?p=18" />
</rdf:RDF>	-->
<DIV class=post>
<DIV class=date>January 28, 2006</DIV>
<H2 id=post-17><A id=postTitle title="How do I sort groups of data items?" 
href="http://www.beacosta.com/blog/?p=17" rel=bookmark>How do I sort groups of 
data items?</A></H2>
<P><SPAN id=text>With the introduction of CollectionViewSource, we are now able 
to do basic grouping of data items in an ItemsControl without using code. In 
this post I will show you how to group items and sort those groups.</SPAN></P>
<P><SPAN id=text>The data source of this sample consists of a list of objects of 
type Animal. Animal has a Name and a Category (which is an enumeration). I want 
to group the items depending on their Category. This is easily done in markup by 
using CollectionViewSource:</SPAN></P>
<P><SPAN 
id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Window.Resources&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:Animals 
x:Key=”animals”/&gt;</SPAN></P>
<P><SPAN 
id=code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;CollectionViewSource 
x:Key=”cvs” Source=”{Binding Source={StaticResource animals}, 
Path=AnimalList}”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;CollectionViewSource.GroupDescriptions&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;PropertyGroupDescription 
PropertyName=”Category”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/CollectionViewSource.GroupDescriptions&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/CollectionViewSource&gt;</SPAN></P>
<P><SPAN 
id=code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DataTemplate 
x:Key=”animalTemplate”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock 
Text=”{Binding Path=Name}” 
Foreground=”MediumSeaGreen”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/DataTemplate&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Window.Resources&gt;</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ItemsControl ItemsSource=”{Binding 
Source={StaticResource cvs}}” ItemTemplate=”{StaticResource 
animalTemplate}”/&gt;</SPAN></P>
<P><SPAN id=text>As I explained in a previous post, CollectionViewSource creates 
a custom View over the source list through markup. A view is a layer on top of a 
source data list that allows us to group, sort, and filter items, as well as 
keep track of the currently selected item. </SPAN></P>
<P><SPAN id=text>If you try the sample markup above, you will see the names of 
the animals, but no information about the groups. The next step is to provide a 
template to display the group titles. CollectionViewSource wraps each group of 
items in an object of type CollectionViewGroup, and we are interested in its 
“Name” property, which we can display using the following template:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;DataTemplate 
x:Key=”categoryTemplate”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock 
Text=”{Binding Path=Name}” FontWeight=”Bold” Foreground=”ForestGreen” 
Margin=”0,5,0,0″/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/DataTemplate&gt;</SPAN></P>
<P><SPAN id=text>In order to use this template for the group titles, we have to 
add it to the GroupStyle property of ItemsControl (which takes a collection of 
GroupStyle objects):</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ItemsControl ItemsSource=”{Binding 
Source={StaticResource 
cvs}}”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ItemsControl.GroupStyle&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;GroupStyle 
HeaderTemplate=”{StaticResource categoryTemplate}” 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ItemsControl.GroupStyle&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ItemsControl&gt;</SPAN></P>
<P><SPAN id=text>We could add more GroupStyles to the collection, in which case 
they would be applied to different levels of groups. (For simplicity, we just 
have one level of grouping in this sample.)</SPAN></P>
<P><SPAN id=text>At this point, the groups and items display correctly, but we 
would like to sort the groups and the items within the groups. I’ve seen a few 
people approach this by looking for a specific “SortGroups” method or something 
similar. We didn’t design a special API to sort groups because you can 
accomplish that simply by sorting the items by the same property by which you 
are grouping:</SPAN></P>
<P><SPAN id=code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;CollectionViewSource x:Key=”cvs” 
Source=”{Binding Source={StaticResource animals}, 
Path=AnimalList}”&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;CollectionViewSource.GroupDescriptions&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;PropertyGroupDescription 
PropertyName=”Category”/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/CollectionViewSource.GroupDescriptions&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;CollectionViewSource.SortDescriptions&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;scm:SortDescription 
PropertyName=”Category” 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;scm:SortDescription 
PropertyName=”Name” 
/&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/CollectionViewSource.SortDescriptions&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/CollectionViewSource&gt;</SPAN></P>
<P><SPAN id=text>Adding two sort descriptions allows us to sort the groups first 
and then the items within the groups. Notice that because Category is an 
enumeration, sorting by that property will display the groups in the order they 
are defined in the enumeration (which may or may not be alphabetically). Name is 
of type string, so the leaf items will be displayed alphabetically.</SPAN></P>
<P><SPAN id=text>This is a screenshot of the completed sample:</SPAN></P>
<P><IMG style="DISPLAY: block; MARGIN: 0px auto 10px; TEXT-ALIGN: center" 
src="Beatriz Costa » Sorting, filtering, grouping_files/14SortingGroups.png" 
border=0></P>
<P><SPAN id=text><A 
href="http://www.beacosta.com/Zips/14SortingGroups.zip">Here</A> you can find 
the VS project with this sample code. This works with January CTP WPF bits. 
</SPAN></P>
<P><SPAN id=text>Update September 17, 2007: <A 
href="http://www.beacosta.com/Zips/14SortingGroupsOrcasBeta2.zip">Here</A> you 
can find this sample with Orcas Beta 2 bits.</SPAN></P>
<P class=posted>Posted by <A title="Posts by Bea" 
href="http://www.beacosta.com/blog/?author=1">Bea</A> under <A 
title="View all posts in Sorting, filtering, grouping" 
href="http://www.beacosta.com/blog/?cat=13" rel=category>Sorting, filtering, 
grouping</A>, <A title="View all posts in WPF Data Binding" 
href="http://www.beacosta.com/blog/?cat=2" rel=category>WPF Data Binding</A> | 
<A title="Comment on How do I sort groups of data items?" 
href="http://www.beacosta.com/blog/?p=17#comments">Comments (17)</A> </P></DIV><!-- <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
				xmlns:dc="http://purl.org/dc/elements/1.1/"
				xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
			<rdf:Description rdf:about="http://www.beacosta.com/blog/?p=17"
    dc:identifier="http://www.beacosta.com/blog/?p=17"
    dc:title="How do I sort groups of data items?"
    trackback:ping="http://www.beacosta.com/blog/wp-trackback.php?p=17" />
</rdf:RDF>	-->
<P>
<DIV align=center></DIV>
<P></P></DIV></DIV>
<DIV id=right>
<DIV class=sidebar><!-- Meta -->
<H2>Meta:</H2>
<UL class=noli>
  <LI><A title="Syndicate this site using RSS" 
  href="http://feeds.feedburner.com/BeatrizCosta"><ABBR 
  title="Really Simple Syndication">RSS</ABBR></A> 
  <LI><A title="The latest comments to all posts in RSS" 
  href="http://feeds.feedburner.com/CommentsForBeatrizCosta">Comments <ABBR 
  title="Really Simple Syndication">RSS</ABBR></A> </LI></UL><!-- Search -->
<H2>Search</H2><BR>
<FORM id=searchform action="" method=get><INPUT id=s size=15 name=s> <INPUT type=submit value=Search name=submit> </FORM><!-- Categories -->
<H2>Categories</H2>
<UL class=menu>
  <LI><A title="View all posts filed under General" 
  href="http://www.beacosta.com/blog/?cat=3">General</A> 
  <LI class=current-cat-parent><A 
  title="View all posts filed under WPF Data Binding" 
  href="http://www.beacosta.com/blog/?cat=2">WPF Data Binding</A> 
  <UL class=children>
    <LI><A title="View all posts filed under Binding to ADO.NET" 
    href="http://www.beacosta.com/blog/?cat=12">Binding to ADO.NET</A> 
    <LI><A title="View all posts filed under ListBox" 
    href="http://www.beacosta.com/blog/?cat=14">ListBox</A> 
    <LI><A title="View all posts filed under ListView" 
    href="http://www.beacosta.com/blog/?cat=9">ListView</A> 
    <LI><A title="View all posts filed under Master-detail" 
    href="http://www.beacosta.com/blog/?cat=10">Master-detail</A> 
    <LI class=current-cat><A 
    title="View all posts filed under Sorting, filtering, grouping" 
    href="http://www.beacosta.com/blog/?cat=13">Sorting, filtering, grouping</A> 

    <LI><A title="View all posts filed under Styles and Templates" 
    href="http://www.beacosta.com/blog/?cat=11">Styles and Templates</A> 
    <LI><A title="View all posts filed under TreeView" 
    href="http://www.beacosta.com/blog/?cat=7">TreeView</A> </LI></UL></LI></UL><!-- Archives -->
<H2>Archives</H2>
<UL>
  <LI><A title="September 2007" 
  href="http://www.beacosta.com/blog/?m=200709">September 2007</A> 
  <LI><A title="August 2007" 
  href="http://www.beacosta.com/blog/?m=200708">August 2007</A> 
  <LI><A title="May 2007" href="http://www.beacosta.com/blog/?m=200705">May 
  2007</A> 
  <LI><A title="April 2007" href="http://www.beacosta.com/blog/?m=200704">April 
  2007</A> 
  <LI><A title="January 2007" 
  href="http://www.beacosta.com/blog/?m=200701">January 2007</A> 
  <LI><A title="November 2006" 
  href="http://www.beacosta.com/blog/?m=200611">November 2006</A> 
  <LI><A title="October 2006" 
  href="http://www.beacosta.com/blog/?m=200610">October 2006</A> 
  <LI><A title="September 2006" 
  href="http://www.beacosta.com/blog/?m=200609">September 2006</A> 
  <LI><A title="August 2006" 
  href="http://www.beacosta.com/blog/?m=200608">August 2006</A> 
  <LI><A title="July 2006" href="http://www.beacosta.com/blog/?m=200607">July 
  2006</A> 
  <LI><A title="June 2006" href="http://www.beacosta.com/blog/?m=200606">June 
  2006</A> 
  <LI><A title="May 2006" href="http://www.beacosta.com/blog/?m=200605">May 
  2006</A> 
  <LI><A title="April 2006" href="http://www.beacosta.com/blog/?m=200604">April 
  2006</A> 
  <LI><A title="March 2006" href="http://www.beacosta.com/blog/?m=200603">March 
  2006</A> 
  <LI><A title="February 2006" 
  href="http://www.beacosta.com/blog/?m=200602">February 2006</A> 
  <LI><A title="January 2006" 
  href="http://www.beacosta.com/blog/?m=200601">January 2006</A> 
  <LI><A title="December 2005" 
  href="http://www.beacosta.com/blog/?m=200512">December 2005</A> 
  <LI><A title="November 2005" 
  href="http://www.beacosta.com/blog/?m=200511">November 2005</A> 
  <LI><A title="October 2005" 
  href="http://www.beacosta.com/blog/?m=200510">October 2005</A> 
  <LI><A title="September 2005" 
  href="http://www.beacosta.com/blog/?m=200509">September 2005</A> 
  <LI><A title="August 2005" 
  href="http://www.beacosta.com/blog/?m=200508">August 2005</A> </LI></UL></DIV>
<DIV id=footer>
<DIV class=copyright><SMALL><SPAN class=copy>Copyright © 2007 <STRONG><A 
title="Beatriz Costa" href="http://www.beacosta.com/blog">Beatriz Costa</A> 
</STRONG></SPAN><BR><BR></SMALL></DIV></DIV></DIV></DIV></BODY></HTML>

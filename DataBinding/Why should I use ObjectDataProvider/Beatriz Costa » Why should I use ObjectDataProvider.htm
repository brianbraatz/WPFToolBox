<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>Beatriz Costa » Why should I use ObjectDataProvider?</title>



<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="generator" content="WordPress 2.2.2"><!-- leave this for stats --><!-- Editable Meta Tags --> 

<meta name="description" content="">
<meta name="keywords" content="">
<meta name="author" content="Sreejith - GFXedit.com">
<meta name="copyright" content="Your Name">
<meta name="generator" content="WordPress 2.2.2">
<meta name="robots" content="index,follow"><!-- Meta Tags End--><!-- Style Sheet -->



<style type="text/css" media="screen">
@import url( http://www.beacosta.com/blog/wp-content/themes/darkpad-10/style.css );
</style><!-- Style Sheet End --><!-- Includes -->



 <script type="text/javascript" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/addEvent.htm"></script>
 <script type="text/javascript" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/titles.htm"></script><!-- End Includes --><!-- Feed and Ping URLS-->



<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://www.beacosta.com/blog/?feed=rss2">
<link rel="alternate" type="text/xml" title="RSS .92" href="http://www.beacosta.com/blog/?feed=rss">
<link rel="alternate" type="application/atom+xml" title="Atom 0.3" href="http://www.beacosta.com/blog/?feed=atom">
<link rel="pingback" href="http://www.beacosta.com/blog/xmlrpc.php"><!--?php wp_get_archives('type=monthly&format=link'); ?-->

	<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.beacosta.com/blog/xmlrpc.php?rsd">
<script language="javascript" type="text/javascript">
<!--
		function collapseThread( theId ) {
			var comment = document.getElementById(theId);
			if(!comment)
			{
				alert("ERROR:\nThe document structure is different\nfrom what Threaded Comments expects.\nYou are missing the element '"+theId+"'");
				return;
			}
			var theBody = findBody(comment);
			if(comment.className.indexOf("collapsed") > -1) {
				comment.className = comment.className.replace(" collapsed", "");;
			} else {
				comment.className += " collapsed";
			}
		}

		function expandThread( theId ) {
			var comment = document.getElementById(theId);
			if(!comment)
			{
				alert("ERROR:\nThe document structure is different\nfrom what Threaded Comments expects.\nYou are missing the element '"+theId+"'");
				return;
			}
			var theBody = findBody(comment);
			if(comment.className.indexOf("collapsed") > -1) {
				comment.className = comment.className.replace(" collapsed", "");;
			} 
		}
		
		function findBody(el)
		{
			var divs = el.getElementsByTagName("div");
			var ret;
			for(var i = 0; i < divs.length; ++i) {
				if(divs.item(i).className.indexOf("body") > -1)
					return divs.item(i);
			}
			return false;
		}
	
		function onAddComment() {
			//checkDocumentIntegrity();
			var el = document.getElementById("commentform");
			// Future release: Check if form is filled correctly and mark the form fields.
			el.submit();
		}
		
		function moveAddCommentBelow(theId, threadId, collapse)
		{
			expandThread( theId );
			var addComment = document.getElementById("addcomment");
			if(!addComment)
			{
			  	alert("ERROR:\nThreaded Comments can't find the 'addcomment' div.\nThis is probably because you have changed\nthe comments.php file.\nMake sure there is a tag around the form\nthat has the id 'addcomment'"); 
				return
			}
			var comment = document.getElementById(theId);
			if(collapse)
			{
				for(var i = 0; i < comment.childNodes.length; ++i) {
					var c = comment.childNodes.item(i);
					if(typeof(c.className) == "string" && c.className.indexOf("collapsed")<0) {
						c.className += " collapsed";
					}
				}
			}
			addComment.parentNode.removeChild(addComment);

			comment.appendChild(addComment);
			if(comment.className.indexOf("alt")>-1) {
				addComment.className = addComment.className.replace(" alt", "");					
			} else {
				addComment.className += " alt";
			}
		        var replyId = document.getElementById("comment_reply_ID");
			if(replyId == null)
			{
				alert("Brians Threaded Comments Error:\nThere is no hidden form field called\n'comment_reply_ID'. This is probably because you\nchanged the comments.php file and forgot\nto include the field. Please take a look\nat the original comments.php and copy the\nform field over.");
			}
			replyId.value = threadId;
			var reRootElement = document.getElementById("reroot");
			if(reRootElement == null)
			{
				alert("Brians Threaded Comments Error:\nThere is no anchor tag called 'reroot' where\nthe comment form starts.\nPlease compare your comments.php to the original\ncomments.php and copy the reroot anchor tag over.");
			}
			reRootElement.style.display = "block";
			var aTags = comment.getElementsByTagName("A");
			var anc = aTags.item(0).id;
			//document.location.href = "#"+anc;
			document.getElementById("comment").focus();
		}

		function checkDocumentIntegrity()
		{
			str = "";
			
			str += checkElement("reroot","div tag");
			str += checkElement("addcomment", "div tag");
			str += checkElement("comment_reply_ID", "hidden form field");
			str += checkElement("content", "div tag");
			str += checkElement("comment", "textfield");
			str += checkElement("addcommentanchor", "anchor tag");
			
			if(str != "")
			{
				str = "Brian's Threaded Comments are missing some of the elements that are required for it to function correctly.\nThis is probably the because you have changed the original comments.php that was included with the plugin.\n\nThese are the errors:\n" + str;
				str += "\nYou should compare your comments.php with the original comments.php and make sure the required elements have not been removed.";

				alert(str);
			}
		}
               
		function checkElement(theId, elDesc)
		{
			var el = document.getElementById(theId);
			if(!el)
			{
				if(elDesc == null)
					elDesc = "element";
				return "- The "+elDesc+" with the ID '" +theId + "' is missing\n"; 
			}
			else 
				return "";
		}
		
		function reRoot()
		{
			var addComment = document.getElementById("addcomment");			
			var reRootElement = document.getElementById("reroot");
			reRootElement.style.display = "none";
			var content = document.getElementById("content");
			addComment.parentNode.removeChild(addComment);
			content.appendChild(addComment);
			addComment.className = addComment.className.replace(" alt", "");
			document.location.href = "#addcommentanchor";
			document.getElementById("comment").focus();				
			document.getElementById("comment_reply_ID").value = "0";
		}			
		
		function changeCommentSize(d)
		{
			var el = document.getElementById("comment");
			var height = parseInt(el.style.height);
			if(!height && el.offsetHeight)
				height = el.offsetHeight;
			height += d;
			if(height < 20) 
				height = 20;
			el.style.height = height+"px";
		}		
-->
</script>
<style type="text/css">
.comment 
{
	position: 				relative;
	margin:					3px;
	margin-top:				6px;
/*	border: 				1px solid #666; */
	padding:				4px 4px 4px 8px;
	background-color:		#fff;
}

.odd
{
	background-color: #f8f8f8;
}

.comment div {
	position: 				relative;
}

.comment .comment img
{
	margin: 				0px;
}

.comment .collapseicon 
{
	width: 					13px;
	height: 				13px;
	overflow:				hidden;
	background-image: 		url(http://www.beacosta.com/blog/wp-content/plugins/briansthreadedcomments.php?image=subthread-open.png);
}

.collapsed .collapseicon 
{
	background-image: 		url(http://www.beacosta.com/blog/wp-content/plugins/briansthreadedcomments.php?image=subthread.png);
}


.comment .reply {
	text-align: 			right;
	font-size: 				80%;
	padding: 				0px 6px 6px 0px;
}

.comment
{
	border: 	1px solid #ddd;
	margin-top: 			10px;
}

input#subscribe
{
	width: auto;
}

.comment .body .content
{
	padding:				0px 3px 0px 3px;
	width: 					100%;	
	overflow: 				auto; 
}

.comment .title abbr
{
	border: none;
}

.collapsed .body, .collapsed .comment
{
	display:				none;
}
/*
#addcomment small, #addcomment div
{
	padding:				3px;
}
*/
#commentform textarea {
	width: 97%;
}
</style><!-- End Feed and Ping URLS--></head><body>
	<div id="container">
		<div id="banner">
			<h1><a accesskey="1" href="http://www.beacosta.com/blog" title="Beatriz Costa">Beatriz Costa</a></h1>
			<h2 title="WPF Data Binding">WPF Data Binding</h2>
		</div>
		
		<div id="center">
			<div class="content">
								<div class="post">
					<div class="date">March 19, 2006</div>
					<h2 id="post-22"><a id="postTitle" href="http://www.beacosta.com/blog/?p=22" rel="bookmark" title="Why should I use ObjectDataProvider?">Why should I use ObjectDataProvider?</a></h2>
					<p><span id="text">There
are many ways to instantiate an object that will be used as the data
source for bindings. I have seen many people create the object in code
and set the DataContext of the Window to that instance, which is a good
way to do this. You may have noticed that I have been adding the source
object to the Window’s Resource Dictionary in most of my previous
posts, which works well too. We have an ObjectDataProvider class in
data binding that can also be used to instantiate your source object in
XAML. I will explain in this post the differences between adding the
source object directly to the resources and using ObjectDataProvider.
This will hopefully give you guidance on how to evaluate your scenario
and decide on the best solution.</span></p>
<p><span id="text">As I describe these features, I will walk you
through building a little application that allows people to type their
weight on Earth and calculates their weight on Jupiter.</span></p>
<p><span id="text">When adding the source object directly to the
resources, the Avalon data binding engine calls the default constructor
for that type. The instance is then added to a dictionary of resources,
using the key specified by x:Key. Here is an example of the markup for
this solution:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;&lt;Window.Resources&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:MySource x:Key="source" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Window.Resources&gt;</span></p>
<p><span id="text">As an alternative, you can add an ObjectDataProvider
to the resources and use that as the source of your bindings.
ObjectDataProvider is a class that wraps your source object to provide
some extra functionality. I will discuss here the following
distinguishing capabilities of ObjectDataProvider:</span></p>
<p><span id="text">   - Passing parameters to the constructor<br>
   - Binding to a method (which may take parameters)<br>
   - Replacing the source object<br>
   - Creating the source object asynchronously</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
<p><span id="text"><b>Passing parameters to the constructor</b></span></p>
<p><span id="text">When adding the source object to the resources
directly, Avalon always calls the default constructor for that type. It
may happen that you have no control over the source data, and the class
you’re given has no default constructor. In that case, you can still
create an instance in XAML by using ObjectDataProvider in the following
way:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;&lt;ObjectDataProvider ObjectType="{x:Type local:MySource}" x:Key="odp1"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ObjectDataProvider.ConstructorParameters&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;system:String&gt;Jupiter&lt;/system:String&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ObjectDataProvider.ConstructorParameters&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ObjectDataProvider&gt;</span></p>
<p><span id="text">This markup creates a new instance of MySource by
calling its constructor and passing the string “Jupiter”. It also
creates an instance of ObjectDataProvider, which will wrap the MySource
object.</span></p>
<p><span id="text">MySource has a public property called “Planet” that
exposes an actual Planet object — the one whose name matches the string
passed in the constructor parameter (in this case, “Jupiter”). I want
to have a title Label in my application that binds to the Planet’s Name
property. Binding to subproperties can be done in Avalon by using “dot
notation”. The syntax for this is Path=Property.SubProperty, as you can
see in the following markup:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;&lt;Label Content="{Binding
Source={StaticResource odp1}, Path=Planet.Name}" Grid.ColumnSpan="2"
HorizontalAlignment="Center" FontWeight="Bold" Foreground="IndianRed"
FontSize="13" Margin="5,5,5,15"/&gt;</span></p>
<p><span id="text">You may be looking at this binding statement and
thinking that it makes no sense. It seems like we are binding to the
Name subproperty of the Planet property of ObjectDataProvider. But I
just mentioned that MySource is the one that has a Planet property, not
ObjectDataProvider. The reason this markup works is that the binding
engine treats ObjectDataProvider specially, by applying the Path to the
source object that is being wrapped. Note that this special treatment
is also used when binding to XmlDataProvider and CollectionViewSource.</span></p>
<p><span id="text"><b>Binding to a method</b></span></p>
<p><span id="text">There is a method in MySource that takes as a
parameter a person’s weight on Earth and calculates that person’s
weight on the planet passed to the constructor. I want to pass some
weight to this method in XAML and bind to its result. This can also be
done with ObjectDataProvider:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;&lt;ObjectDataProvider
ObjectInstance="{StaticResource odp1}" MethodName="WeightOnPlanet"
x:Key="odp2"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ObjectDataProvider.MethodParameters&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;system:Double&gt;95&lt;/system:Double&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ObjectDataProvider.MethodParameters&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ObjectDataProvider&gt;</span></p>
<p><span id="text">Notice that instead of setting the ObjectType
property, I set the ObjectInstance property this time. This allows us
to reuse the instance of MySource that we created in the earlier
ObjectDataProvider. I also set the MethodName property and pass a
parameter to this method with the help of the MethodParameters
property. Displaying the result returned from this method is as simple
as binding to this second ObjectDataProvider:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;&lt;Label Content="{Binding
Source={StaticResource odp2}}" Grid.Row="2" Grid.Column="1"
Grid.ColumnSpan="2"/&gt;</span></p>
<p><span id="text">This is a good start, but I would like to allow
users to enter their own weight in a TextBox, and have the Label update
to show the new result. The problem here is that I can’t place a
Binding statement in the MethodParameters because this property is not
a DependencyProperty; in fact, ObjectDataProvider is not even a
DependencyObject. Remember that the target of a Binding has to be a
DependencyProperty, although the source can be anything. Luckily, there
is a way out when you want to bind a CLR property to a DP: you can
switch the source with the target, placing your binding in the DP and
setting the binding Mode to TwoWay (or OneWayToSource). Here is how to
make a TextBox that modifies the parameter being passed to the
WeightOnPlanet method:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;&lt;Window.Resources&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:DoubleToString x:Key="doubleToString" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Window.Resources&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;(…)<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBox Grid.Row="1" Grid.Column="1" Name="tb" Style="{StaticResource tbStyle}"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBox.Text&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Binding
Source="{StaticResource odp2}" Path="MethodParameters[0]"
BindsDirectlyToSource="true" UpdateSourceTrigger="PropertyChanged"
Converter="{StaticResource doubleToString}"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(…)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Binding&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/TextBox.Text&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/TextBox&gt;</span></p>
<p><span id="text">In this particular situation, because I am binding a
TextBox’s Text, I don’t have to do anything for it to be Two-Way; it is
already Two-Way by default. Bindings are One-Way by default for most
DPs, and Two-Way in DPs that we expect will be changed by the user.
This default behavior can be overriden by setting the Mode property of
Binding.</span></p>
<p><span id="text">I explained earlier that when binding to an
ObjectDataProvider, the binding engine automatically looks at the
source object being wrapped instead of the data provider. That is a
problem for us in this situation, because we want to bind to the
MethodParameters property of ObjectDataProvider. To get around the
default behavior, we have to set the BindsDirectlyToSource property to
true.</span></p>
<p><span id="text">MethodParameters is an IList, and in this particular
scenario we want to bind to the first element of the list, since the
WeightOnPlanet method only takes one parameter. We can do this by using
an indexer in the Path, just like we would in C# code. </span></p>
<p><span id="text">I set the UpdateSourceTrigger to PropertyChanged so
that the method is called and we get a new result every time the user
types something in the TextBox. Other values for UpdateSourceTrigger
are “Explicit” (which I used in my <a href="http://www.beacosta.com/Archive/2005_12_01_bcosta_archive.html">December 11 post</a>) and “LostFocus” (the source gets updated when focus moves to another element), which is the default behavior.</span></p>
<p><span id="text">If we were binding to a property of type double, the
binding engine would automatically convert between the TextBox’s Text
string and the double property. Because we are binding to a method,
however, we need to write a converter ourselves. Without a converter,
the binding would look for a method called WeightOnPlanet that takes a
string as a parameter, and fail because no such method exists. If you
looked at VS’s Output window, you would see a debug message saying that
we were not able to find a method that takes the parameters we are
passing. This is the code for the converter:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;public class DoubleToString : IValueConverter<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public object
Convert(object value, Type targetType, object parameter,
System.Globalization.CultureInfo culture)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (value != null)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return value.ToString();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public object
ConvertBack(object value, Type targetType, object parameter,
System.Globalization.CultureInfo culture)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string strValue = value as string;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (strValue != null)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double result;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool
converted = Double.TryParse(strValue, out result);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (converted)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
result;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;}</span></p>
<p><span id="text">Some of you may be a little confused about this
converter: should it be StringToDouble or DoubleToString? The Convert
method is called when transfering the data from the source (double) to
the target (string), and the ConvertBack method is called in the
opposite direction. So we need a DoubleToString converter, and not the
other way around.</span></p>
<p><span id="text">What if the user types an invalid weight? They could
type a negative number, or a non-numeric string, or they could even
type nothing at all. If that is the case, I don’t even want to allow
the binding to initiate the transfer of the value to the source. I want
to build my own custom logic that will not only prevent data binding
from transfering the value, but also alert the user the value is bad.
This can be done with the Validation feature of data binding. I wrote a
ValidationRule that checks for bad values and added it to the
ValidationRules property in the following way:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;&lt;Binding
Source="{StaticResource odp2}" Path="MethodParameters[0]"
BindsDirectlyToSource="true" UpdateSourceTrigger="PropertyChanged"
Converter="{StaticResource doubleToString}"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Binding.ValidationRules&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;local:WeightValidationRule /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Binding.ValidationRules&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Binding&gt;</span></p>
<p><span id="text">WeightValidationRule derives from ValidationRule and overrides the Validate method, where I added my custom logic:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;public class WeightValidationRule : ValidationRule<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public override
ValidationResult Validate(object value,
System.Globalization.CultureInfo cultureInfo)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Value is not a string<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string strValue = value as string;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (strValue == null)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// not going to happen<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
new ValidationResult(false, "Invalid Weight - Value is not a string");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Value can not be converted to double<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double result;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool converted = Double.TryParse(strValue, out result);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!converted)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
new ValidationResult(false, "Invalid Weight - Please type a valid
number");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Value is not between 0 and 1000<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((result &lt; 0) || (result &gt; 1000))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
new ValidationResult(false, "Invalid Weight - You’re either too light
or too heavy");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ValidationResult.ValidResult;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
<p><span id="text">Typing an invalid value will now cause a red outline
to appear around the TextBox. I would like the user to be notified of
the error message I returned in the ValidationResult, though. More
specifically, I would like a ToolTip to come up with the error message
when the user types something wrong. This can be done all in XAML, with
the help of a Style and a Trigger:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;&lt;Style x:Key="tbStyle" TargetType="{x:Type TextBox}"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Style.Triggers&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Trigger
Property="Validation.HasError" Value="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Setter Property="ToolTip"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Value="{Binding RelativeSource={RelativeSource Self},
Path=(Validation.Errors)[0].ErrorContent}"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Trigger&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Style.Triggers&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Style&gt;</span></p>
<p><span id="text">Validation.HasError is an attached
DependencyProperty that is true whenever at least one ValidationRule is
in error. Validation.Errors is also an attached DependencyProperty that
contains a list of all errors for a particular element. In this
particular scenario we know that the TextBox can only have one error
(since it only has one rule), so it’s OK to bind the ToolTip to the
first error in this collection. “{RelativeSource Self}” simply means
the source of the binding is the TextBox element itself. Notice the
parenthesis notation in the Path - parenthesis should be used every
time we are binding to an attached DependencyProperty. In English,
“Path=(Validation.Errors)[0].ErrorContent” means we find the attached
property Validation.Errors on the source element (TextBox), get the
first error object (of type ValidationError) in this list and drill
into the ErrorContent subproperty of that ValidationError.</span></p>
<p><span id="text">You should see a ToolTip come up with an error
message when you type anything other than a number between 0 and 1000
into the TextBox.</span></p>
<p><span id="text">I wrote a sample (which is in the Avalon SDK), that
shows a few other aspects of Validation. There is a lot more to this
feature, but a more detailed explanation will have to wait until a
future post. </span></p>
<p><span id="text"><b>Replacing the source object</b></span></p>
<p><span id="text">You may have a scenario where you want to swap the
current source of all your bindings with another object. If you have an
object in the resource dictionary that all your bindings use as source,
there is no way to swap that object with something else and have all
binding update. Removing that object from the resource dictionary and
adding a new one with the same x:Key will not cause your bindings to be
notified.</span></p>
<p><span id="text">If this is your scenario, you may consider using an
ObjectDataProvider. If you swap the ObjectType, all bindings to that
ObjectDataProvider will be notified that the source object changed and
will be updated.</span></p>
<p><span id="text">Note that if you are setting the DataContext of an
element up in the tree to your source data programatically, setting it
to a different object will cause all bindings to update, too.</span></p>
<p><span id="text"><b>Creating the source object asynchronously</b></span></p>
<p><span id="text">In a nutshell, ObjectDataProvider has a property
called IsAsynchronous that allows you to control whether the loading of
the data happens in the same thread as your application or in a
different thread. By default, ObjectDataProvider is synchronous and
XmlDataProvider is asynchronous.</span></p>
<p><span id="text">I am planning to talk about this in detail in one of my future posts, so stay tuned.</span></p>
<p><span id="text">You could use the data source in this sample to
write an Avalon application that allows the user to pick a planet and
enter his or her weight, and shows the weight on that planet. It is
actually very simple. I started out by writing that application, but I
realized I wouldn’t get to show some of the concepts I wanted to talk
about, so I tweaked it until I had all the features I wanted.</span></p>
<p><img style="margin: 0px auto 10px; display: block; text-align: center;" alt="" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/19ObjectDataProviderSample.png" border="0"></p>
<p><span id="text"><a href="http://www.beacosta.com/Zips/19ObjectDataProviderSample.zip">Here</a> you can find the VS project with this sample code. This works with February CTP WPF bits. </span></p>
										<p class="posted">Posted by <a href="http://www.beacosta.com/blog/?author=1" title="Posts by Bea">Bea</a> under <a href="http://www.beacosta.com/blog/?cat=2" title="View all posts in WPF Data Binding" rel="category">WPF Data Binding</a> |   </p>
				</div>				
				<!-- <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
				xmlns:dc="http://purl.org/dc/elements/1.1/"
				xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
			<rdf:Description rdf:about="http://www.beacosta.com/blog/?p=22"
    dc:identifier="http://www.beacosta.com/blog/?p=22"
    dc:title="Why should I use ObjectDataProvider?"
    trackback:ping="http://www.beacosta.com/blog/wp-trackback.php?p=22" />
</rdf:RDF>	-->
				
<!-- You can start editing here. -->

<p><a href="http://www.beacosta.com/blog/?feed=rss2&amp;p=22"><abbr title="Really Simple Syndication">RSS</abbr> feed</a> 
| <a href="http://www.beacosta.com/blog/wp-trackback.php?p=22">Trackback <acronym title="\&quot;Uniform" resource="" identifier\="">URI</acronym></a>
</p>

<h2 id="comments">21 Comments 
<a href="#postcomment" title="Leave a comment">»</a>
</h2>
<div class="commentlist">
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-154" class="comment">
				<a name="comment-154" id="comment-154"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-154")'>
					<cite>Comment by Anonymous<a href="#comment-154"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-03-20 13:16:41 						
					</div>					
					<div class="content">
						<p>This is really neat, Thanks. </p>
<p>One question I have is, if I have a section in my UI that needs to
repeat (say, a label and a textfield) and that repetition is not fixed
(it could be zero to X), how does one use an ObjectDataProvider for
this?</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-154", 154, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-155" class="comment odd">
				<a name="comment-155" id="comment-155"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-155")'>
					<cite>Comment by Bea<a href="#comment-155"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-03-21 13:03:28 						
					</div>					
					<div class="content">
						<p>If
I understand your question correctly, you have a data source collection
that can be of any size (0 to X) and you want to display a Label and a
TextBox for each item. Is this right? </p>
<p>If so, you can add your collection to the Window’s resources section
(with or without using ObjectDataProvider) and bind an ItemsControl’s
ItemsSource to that collection. You can then set the ItemTemplate
property to a DataTemplate containing the Label and TextBox.</p>
<p>See <a href="http://www.beacosta.com/2005/09/how-can-i-get-listboxitem-from-data.html" rel="nofollow">this blog post</a> for an example.</p>
<p>Did this answer your question?</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-155", 155, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-156" class="comment">
				<a name="comment-156" id="comment-156"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-156")'>
					<cite>Comment by Anonymous<a href="#comment-156"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-03-22 06:10:31 						
					</div>					
					<div class="content">
						<p>It sure did, thank you very much!</p>
					</div>
				<small>(Comments wont nest below this level)</small>
				</div>

					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-156", 156, false); return false;'>Reply here</a>
											</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-157" class="comment">
				<a name="comment-157" id="comment-157"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-157")'>
					<cite>Comment by Laurent<a href="#comment-157"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-03-23 07:38:16 						
					</div>					
					<div class="content">
						<p>Hi Beatriz,</p>
<p>I am testing Binding in XAML, and especially conversion of one type
to the other. I thus implemented a IValueConverter, bound a
TextBox.Text to a Slider.Value through the converter, and it works fine
(I know it is not necessary to go through the converter for that, but I
am just testing).</p>
<p>However, the XAML parser delivers errors, which I think are due to the first error:<br>
- Assembly ” could not be found, are you missing an assembly reference
(this appears where I define xmlns:local=”clr-namespace:WPFWin1″)</p>
<p>I downloaded your ObjectDataProviderSample, and it executes fine,
but opening the XAML file in the XAML editor delivers the exact same
errors. Any idea where this comes from?</p>
<p>Thanks a lot for any tip about that,<br>
Laurent</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-157", 157, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-158" class="comment odd">
				<a name="comment-158" id="comment-158"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-158")'>
					<cite>Comment by Bea<a href="#comment-158"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-03-24 16:06:03 						
					</div>					
					<div class="content">
						<p>Hi Laurent,</p>
<p>Yeah, I typically see that error at start time, but it goes away
when I rebuild the project. I don’t know why that happens, that is not
something my teams owns. If you are really curious, you may want to
post that question in the Forums.</p>
<p>Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-158", 158, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-159" class="comment">
				<a name="comment-159" id="comment-159"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-159")'>
					<cite>Comment by Fernando<a href="#comment-159"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-03-25 15:55:45 						
					</div>					
					<div class="content">
						<p>Hello Beatriz,</p>
<p>This comment arrives two months after your original post, so I’m not sure if you’re going to read it anyway.</p>
<p>I’ve got a question.<br>
In the context of your example, how do I pass to the method WeightOnPlanet a parameter from an XMLDataProvider ?</p>
<p>Let’s suppose the weight on Earth is not entered on a TextBox by the users. Instead, it comes from an XML file.<br>
For example:</p>
<p>(Persons)<br>
(…)</p>
<p>(John)<br>
(Age)30(/Age)<br>
(Height)1.79(/Height)<br>
(Weight)95(/Weight)<br>
(/John)</p>
<p>(…)<br>
(/Persons)</p>
<p>I want to pass “95″ as a parameter to the method WeightOnPlanet.<br>
How is it done in XAML ?</p>
<p>Thank you.</p>
<p>Fernando<br>
PS: I replaced the XML angle brackets for parenthesis so as the tags
don’t get parsed by Blogger’s engine. Wrapping the block with the XML
comment tag didn’t do the trick.</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-159", 159, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-160" class="comment odd">
				<a name="comment-160" id="comment-160"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-160")'>
					<cite>Comment by Bea<a href="#comment-160"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-03-26 00:09:38 						
					</div>					
					<div class="content">
						<p>Hi Fernando,</p>
<p>What you are asking would be easy to do if we could data bind the
Method Parameter, which we can’t for various reasons. In my sample, I
can work around it by having a TextBox with a two-way binding. This
way, I can place the binding in the TextBox’s Text (target), so that
when the user types a new value, it gets updated to the MethodParameter
(source).</p>
<p>You can use the same technique to get the value from an XmlDataProvider, but you will need a middle man control. </p>
<p>So, what do you need in your scenario? You need a property that
receives the XML value and that passes it along to the method
parameter. If you could have two bindings in the same DP of the
intermediate control, this could be done really easily: the first
Binding would have the XML as the source and would be “one way to
target”. The second Binding would have the Method Parameter as the
source and would be “one way to source”. But we don’t support having
more than one Binding in the same DP. You can get around it though, by
having two DPs in the control and making sure that when one of them
changes, that change is propagated to the second one. </p>
<p>In <a href="http://www.beacosta.com/BlogComments/7ObjectDataProviderSample2.zip" rel="nofollow">this</a>
sample, you can see I implemented a control called “Intermediate” with
two DependencyProperties. The “Input” property is responsible for
hooking up to the XmlDataSource (one way to target). The “Output”
property is responsible for pushing that value to the method parameter
(one way to source). The only extra thing I had to do was to propagate
the value from the Input to the Output when the Input changes, which
was done in the OnInputChanged handler. </p>
<p>Do I recommend this approach? Not sure, I guess it depends on the
goal of your particular app. It seems like a lot of work for something
you can easily do in code. And you have to write code too, to define
the class for the Intermediate control. </p>
<p>If this becomes a very common request, we may consider adding an
Intermediate control to the platform for this purpose. But personally
I’m not yet convinced we should do it. It would take a lot of
explaining and it would only be useful it very specific (uncommon)
scenarios. </p>
<p>Thanks,<br>
Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-160", 160, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-161" class="comment">
				<a name="comment-161" id="comment-161"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-161")'>
					<cite>Comment by Anonymous<a href="#comment-161"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-03-27 16:17:49 						
					</div>					
					<div class="content">
						<p>Great stuff!!<br>
question thu, what if I want to pass the culture argument to the converter? how would I do that from XAML?<br>
Do you recommend using the converter for localisation?</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-161", 161, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-166" class="comment odd">
				<a name="comment-166" id="comment-166"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-166")'>
					<cite>Comment by Bea<a href="#comment-166"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-04-05 18:47:43 						
					</div>					
					<div class="content">
						<p>Regarding the localization question:</p>
<p>There is a “ConverterCulture” property on Binding that you can set
to the desired culture. This is really easy to do from XAML - I
uploaded a simple app<br>
<a href="http://www.beacosta.com/BlogComments/10LocalizationDataBinding.zip" rel="nofollow">here</a> that shows how to do this.</p>
<p>Do I recommend this approach? No, not really. I know that the
localization team has been working pretty hard on a document with
guidelines and best practices on localization. I don’t think this
document is public yet, but make sure you check the SDK on our next
release.</p>
<p>Hope this helps.<br>
Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-166", 166, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-162" class="comment">
				<a name="comment-162" id="comment-162"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-162")'>
					<cite>Comment by Anonymous<a href="#comment-162"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-04-02 22:35:37 						
					</div>					
					<div class="content">
						<p>How
would you go about updating the dataset if you are using that
technique? If i call the data access layer directly, the data will be
persisted, but the ui wont update unless i reload the data. Is there
any way to call a method on the datasource and pass in the value of a
textbox?</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-162", 162, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-165" class="comment odd">
				<a name="comment-165" id="comment-165"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-165")'>
					<cite>Comment by Bea<a href="#comment-165"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-04-03 00:16:56 						
					</div>					
					<div class="content">
						<p>Regarding your question on updating the DataSet:</p>
<p>You asked ” Is there any way to call a method on the datasource and
pass in the value of a textbox? “. This is exactly what I am showing in
this post. I call the method WeightOnPlanet and pass the value in the
TextBox as a parameter. When the value in the TextBox changes, the
method is called and we get a new result.</p>
<p>You ask how we can update the DataSet with this technique. Do you
mean updating the DataSet to the database or update the in-memory
DataSet?</p>
<p>If you are talking about the in-memory DataSet, are you assuming
we’re storing the weight on Jupiter in our source (which I’m not in
this sample, but let’s assume we are)? We are already binding the
weight on Jupiter to the result of the method (one way to target), and
we can’t add another binding directly that causes the source to be
updated (one way to source). We can, however, use the workaround that I
explained on my reply to Fernando on this blog post, with the help of
an “Intermediate” custom control.</p>
<p>If you are talking about updating the data to the database, you
should use whatever technique you use with WinForms (or the technology
you use today). The data should be persisted when you are done with the
changes in the UI.</p>
<p>Let me know if I didn’t reply to your question. And if that’s the case, could you please include more details?</p>
<p>Thanks,<br>
Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-165", 165, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-163" class="comment">
				<a name="comment-163" id="comment-163"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-163")'>
					<cite>Comment by Gonzalo<a href="#comment-163"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-04-04 08:25:15 						
					</div>					
					<div class="content">
						<p>Hi Beatriz, I wondering what can I pass another value to the method in Xaml? I saw your blog and you had write this (with tags):</p>
<p>ObjectDataProvider ObjectInstance=”{StaticResource odp1}” MethodName=”WeightOnPlanet” x:Key=”odp2″<br>
ObjectDataProvider.MethodParameters<br>
system:Double 95 system:Double<br>
/ObjectDataProvider.MethodParameters<br>
/ObjectDataProvider</p>
<p>If I want to pass the parameter data (95) from a DataContent and use it in a DataTemplate, How can I do that?</p>
<p>Thanks a lot, Gonzalo.</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-163", 163, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-164" class="comment odd">
				<a name="comment-164" id="comment-164"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-164")'>
					<cite>Comment by Bea<a href="#comment-164"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-04-05 11:30:06 						
					</div>					
					<div class="content">
						<p>Hi Gonzalo,</p>
<p>You mentioned your data (95) comes from a DataContent, but I’m not
aware of a property with that name in Avalon. Do you mean DataContext,
or maybe Content?</p>
<p>The technique I show in this blog post is used to pass data as a
parameter to a method in your data source. You ask how to pass data
into a DataTemplate. These two scenarios are quite different. </p>
<p>When you set the Content property of a ContentControl (for example,
Button), and define a DataTemplate for that control, the data in the
Content property is passed to the DataTemplate automatically. To be
more precise, we set the DataContext of one of the generated elements
to the data in the Content property. This element is higher in the tree
than the elements in the DataTemplate. This is why we don’t usually set
the Source property of a Binding inside a DataTemplate: the Binding
inherits its source from DataContext set up in the tree.</p>
<p>Did this reply to your question? Let me know!</p>
<p>Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-164", 164, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-167" class="comment">
				<a name="comment-167" id="comment-167"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-167")'>
					<cite>Comment by Christian<a href="#comment-167"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-04-11 07:02:35 						
					</div>					
					<div class="content">
						<p>Hi Beatriz,</p>
<p>Been reading your informative pages trying to find an answer for my problem.</p>
<p>I have a multilingual application in which a TextBlock displays it’s text based on its key and a Translator.</p>
<p>The translator class contains a Translate method with one parameter, something like:</p>
<p>Static string Translate(string key)<br>
…do something<br>
return TranlatedString;</p>
<p>I tried binding the TextBlock:</p>
<p>[TextBlock Text=”"{Binding Source={StaticResource Translator}}…</p>
<p>and searched for a way to pass the key of my TextBlock. </p>
<p>I could do so by defining an ObjectDataProvider containing the key
of the TextBlock for every TextBlock in my Application using the
technique you’ve shown, but that seems the wrong way to go.</p>
<p>So, is there another option I’ve overlooked?</p>
<p>Thanks for you’re help</p>
<p>Christian</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-167", 167, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-168" class="comment odd">
				<a name="comment-168" id="comment-168"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-168")'>
					<cite>Comment by Bea<a href="#comment-168"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-04-12 18:25:22 						
					</div>					
					<div class="content">
						<p>Hi Christian,</p>
<p>I can’t think of a way to do this all in XAML. The only way to call
a method of a binding source in XAML is using ObjectDataProvider the
way I show in this post and you can not bind the ConverterParameter of
ObjectDataProvider.</p>
<p>I think that the only way to do this is to compromise and write a
little code (other than having one ODP per TextBlock, which is overkill
in my opinion.) I wrote a little app that contains a Converter which
returns the correct translated string based on the parameter it
receives (which is the key.) Here is the only line inside the Convert
method of my Converter:</p>
<p>return Translator.Translate(parameter as string);</p>
<p>And here is how you could consume this Converter in the TextBlock’s Text:</p>
<p>Text=”{Binding Source={x:Null}, Converter={StaticResource conv}, ConverterParameter=en-US}”</p>
<p>This way, you can have several TextBlocks with different string parameters and only one Converter, so it scales pretty well.</p>
<p>Notice that the source of my binding is null. If your method was not
static, you could set the source of the binding to an instance of
Translator (simply add it to the resources.) But because the Translate
method is static, you don’t really need a source, you just need a way
to execute some code. </p>
<p>This is a little hacky. Binding to null just so that a Converter is
called is kinda weird, and there are probably more elegant solutions.
But it works <img src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/icon_smile.gif" alt=":)" class="wp-smiley"> </p>
<p><a href="http://www.beacosta.com/BlogComments/14BindToTranslator.zip" rel="nofollow">Here</a> is the solution where I implemented what I explained. If you find a better solution I would like to hear about it.</p>
<p>Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-168", 168, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-169" class="comment">
				<a name="comment-169" id="comment-169"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-169")'>
					<cite>Comment by Hugo Soares<a href="#comment-169"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-04-15 06:05:57 						
					</div>					
					<div class="content">
						<p>Hi Beatriz!<br>
I would like to know if in the future there will be some kind of error
provider (like the one we used in winForms) that will allow to validate
user input. Using Validation Rule is not very useful…<br>
Thank’s!</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-169", 169, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-170" class="comment odd">
				<a name="comment-170" id="comment-170"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-170")'>
					<cite>Comment by Bea<a href="#comment-170"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-04-15 10:33:39 						
					</div>					
					<div class="content">
						<p>Hi Hugo,<br>
I can never promise a feature since so many unpredictable events affect
what we ship. However, I can tell you that we are currently planning
the features for out next version, and it’s on our list to make
improvements to Validation. We get that feedback a lot. We are
completely aware of the fact that we have some limitations in our
current Validation design, and we are very commited to improving on
those for the next version.</p>
<p>Thanks,<br>
Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-170", 170, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-171" class="comment">
				<a name="comment-171" id="comment-171"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-171")'>
					<cite>Comment by Laurent<a href="#comment-171"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-08-11 11:04:20 						
					</div>					
					<div class="content">
						<p>Hi Bea,</p>
<p>I know this article is quite old, but it helped me again. Maybe you’ll read this.</p>
<p>Any idea why the bjectDataProvider.ConstructorParameters&gt; doesn’t
appear in Intellisense when I try to use the ObjectDataProvider tag in
XAML? The functionality works, but Intellisense doesn’t recognize the
tag.</p>
<p>Thanks,<br>
Laurent</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-171", 171, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-172" class="comment odd">
				<a name="comment-172" id="comment-172"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-172")'>
					<cite>Comment by Bea<a href="#comment-172"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2006-08-12 11:54:03 						
					</div>					
					<div class="content">
						<p>Hi Laurent,</p>
<p>VS support for WPF is owned by a different team, and they haven’t
shipped yet, they’re still in beta. So it is likely that you will find
a few issues with that until they release their final version.</p>
<p>Thanks!<br>
Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-172", 172, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-173" class="comment">
				<a name="comment-173" id="comment-173"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-173")'>
					<cite>Comment by Anonymous<a href="#comment-173"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-06-18 08:19:41 						
					</div>					
					<div class="content">
						<p>We
are using a ListCollectionView that contains a list of objects that
have derived from ObjectDataProvider. We are taking advantage of the
fact that setting the DataContext (on another ascociated panel ) to the
ListCollectionView implicitly sets the DataContext of that panel to the
‘current’ selected item displayed in the list. Also we are setting the
DisplayMemberPath of a ListBox to one of the properties that is exposed
by the ObjectInstance property of the ObjectDataProvider. Notice we do
not have to mention the fully qualified root to the property as it is
infered as part of the ObjectDataProvider mechanism. This results in
the desired text being displayed in the listbox.</p>
<p>However, and this is the source of our problem to which I would
welcome any assistance, we can not bind directly to the properties we
require to display in the panel without fully qualifying the property
name (for instance ObjectInstance.PropertyName)</p>
<p>Unfortunately this defeats any benefits of using ObjectDataProvider as a wrapper for our own DataObjects.</p>
<p>Is there sometjing we should be doing?</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-173", 173, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-391" class="comment odd">
				<a name="comment-391" id="comment-391"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-391")'>
					<cite>Comment by Bea<a href="#comment-391"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-09-20 13:50:22 						
					</div>					
					<div class="content">
						<p>Hi,</p>
<p>Unfortunately I was not able to repro what you described. I set my
panel’s DataContext to an ObjectDataProvider instance, and tried to
data bing a ListBox and a TextBlock within the panel to the data
wrapped by the ODP. I am not required to fully qualify the property
path in the TextBlock, I can simply use the property name of my source.
You can find my attempt to repro your scenario <a href="http://www.beacosta.com/BlogComments/35DataContextODP.zip" rel="nofollow">here</a>.</p>
<p>Maybe I didn’t fully understand your scenario, or maybe I am missing
some detail. If that’s the case, it would be great if you could tell me
how your app differs from mine, or send me a code sample. </p>
<p>Thanks,<br>
Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-391", 391, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
</div>
<div id="addcomment" class="comment" style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;">
<a id="addcommentanchor" name="addcommentanchor"></a>
<form action="http://www.beacosta.com/blog/wp-comments-post.php" method="post" id="commentform">
<div class="add">
	<div id="reroot" style="display: none;">
		<small><a href="#" onclick="reRoot(); return false;">
			Click here to cancel "reply".
		</a></small>
	</div>
	<small>
		Name (required)	</small>
	<div>
		<input name="author" id="author" class="textarea" value="" size="28" tabindex="1" type="text">
	</div>
	<small>
		E-mail (required - never shown publicly)	</small>
	<div>
		<input name="email" id="email" value="" size="28" tabindex="2" type="text">
	</div>
	<small>
		<acronym title="Uniform Resource Identifier">URI</acronym>	</small>
	<div>
		<input name="url" id="url" value="" size="28" tabindex="3" type="text">	
	<div style="display: block;" id="secureimgdiv">
				<p><label for="securitycode">Anti-spam word: (Required)</label><span style="color: rgb(255, 0, 0);">*</span><br>
				<small>To
prove you're a person (not a spam script), type the security word shown
in the picture. Click on the picture to hear an audio file of the word.</small><br>
				<input name="securitycode" id="securitycode" size="30" tabindex="4" type="text">
				<input name="matchthis" value="1463" type="hidden">
				<a href="http://www.beacosta.com/blog?audioselect=1463" title="Hear an audio file of the anti-spam image"><img src="Beatriz%20Costa%20%BB%20Why%20should%20I%20use%20ObjectDataProvider_files/blog.jpg" alt="Click to hear an audio file of the anti-spam word" style="border: 1px solid black; vertical-align: top; height: 50px; width: 160px;"></a></p>
			</div></div>

	<small>
		Your Comment (<a href="#" onclick="changeCommentSize(-80); return false;">smaller size</a> | <a href="#" onclick="changeCommentSize(80); return false;">larger size</a>)
	</small>
	<div style="width: 100%;">
		<textarea name="comment" id="comment" cols="60" rows="14" tabindex="4"></textarea>
	</div>
	<small>
You may use &lt;a href="" title=""&gt; &lt;abbr title=""&gt;
&lt;acronym title=""&gt; &lt;b&gt; &lt;blockquote cite=""&gt;
&lt;code&gt; &lt;em&gt; &lt;i&gt; &lt;strike&gt; &lt;strong&gt; in your
comment. </small>
	<div>
		<input name="comment_post_ID" value="22" type="hidden">
		<input name="redirect_to" value="/blog/?p=22" type="hidden">
		<input onclick="if(typeof(onAddComment) == 'function') { onAddComment(); } else { alert('ERROR:\nIt looks like the website administrator hasn\'t activated the Brians Threaded Comments plugin from the plugin page'); };" name="addcommentbutton" id="addcommentbutton" value="Add comment" tabindex="5" type="button">
	</div>
</div>
<input id="comment_reply_ID" name="comment_reply_ID" value="0" type="hidden"><div style="display: none;" id="jsspamblock_hideable">
	<input name="jsspamblock_hidden" value="4cf742a6963878e82ffa69438379c438" type="hidden">
	<p>For spam filtering purposes, please copy the number <strong>7839</strong> to the field below:</p>
	<input name="jsspamblock_input" id="jsspamblock_input" tabindex="5" value="">
</div>
<script type="text/javascript">
	document.getElementById("jsspamblock_input").value = 7839;
	document.getElementById("jsspamblock_hideable").style.display = "none";
</script>
			
			<script language="JavaScript" type="text/javascript">
			<!--
				var urlinput = document.getElementById("url");
				var submitp = urlinput.parentNode;
				var substitution2 = document.getElementById("secureimgdiv");
				submitp.appendChild(substitution2, urlinput);
			// -->
			</script>
</form>
</div>
						
								
				<p></p><div align="center"></div>						
			</div>
		</div>
		<div id="right">
		<div class="sidebar">  
    <!-- Meta -->
	<h2>Meta:</h2>
 	<ul class="noli">
	<li><a href="http://feeds.feedburner.com/BeatrizCosta" title="Syndicate this site using RSS"><abbr title="Really Simple Syndication">RSS</abbr></a></li>
	<li><a href="http://feeds.feedburner.com/CommentsForBeatrizCosta" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
	</ul>				

  <!-- Search -->
  <h2>Search</h2>
	<br>
	<form id="searchform" method="get" action="">
	<input name="s" id="s" size="15" type="text">
	<input name="submit" value="Search" type="submit">
	</form>

  <!-- Categories -->
  <h2>Categories</h2>
	<ul class="menu">
		<li><a href="http://www.beacosta.com/blog/?cat=3" title="View all posts filed under General">General</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=2" title="View all posts filed under WPF Data Binding">WPF Data Binding</a>
	<ul class="children">
	<li><a href="http://www.beacosta.com/blog/?cat=12" title="View all posts filed under Binding to ADO.NET">Binding to ADO.NET</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=14" title="View all posts filed under ListBox">ListBox</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=9" title="View all posts filed under ListView">ListView</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=10" title="View all posts filed under Master-detail">Master-detail</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=13" title="View all posts filed under Sorting, filtering, grouping">Sorting, filtering, grouping</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=11" title="View all posts filed under Styles and Templates">Styles and Templates</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=7" title="View all posts filed under TreeView">TreeView</a>
</li>
	</ul>
</li>
	</ul>					
	
  <!-- Archives -->
	<h2>Archives</h2>
	<ul>
		<li><a href="http://www.beacosta.com/blog/?m=200709" title="September 2007">September 2007</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200708" title="August 2007">August 2007</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200705" title="May 2007">May 2007</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200704" title="April 2007">April 2007</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200701" title="January 2007">January 2007</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200611" title="November 2006">November 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200610" title="October 2006">October 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200609" title="September 2006">September 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200608" title="August 2006">August 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200607" title="July 2006">July 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200606" title="June 2006">June 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200605" title="May 2006">May 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200604" title="April 2006">April 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200603" title="March 2006">March 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200602" title="February 2006">February 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200601" title="January 2006">January 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200512" title="December 2005">December 2005</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200511" title="November 2005">November 2005</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200510" title="October 2005">October 2005</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200509" title="September 2005">September 2005</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200508" title="August 2005">August 2005</a></li>
	</ul>

</div>			<div id="footer">
				<div class="copyright">
				<small>
				<span class="copy">Copyright © 2007 				<strong><a title="Beatriz Costa" href="http://www.beacosta.com/blog">Beatriz Costa</a>
				</strong>
				</span>
				<br><br>
				</small>
				</div>
			</div>	
		</div>
	</div>
</body></html>
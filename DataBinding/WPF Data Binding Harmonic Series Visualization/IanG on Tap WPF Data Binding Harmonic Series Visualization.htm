<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0060)http://www.interact-sw.co.uk/iangblog/2006/11/19/wpfwavedata -->
<HTML xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>IanG on Tap: WPF Data Binding: Harmonic Series Visualization</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<META content="Ian Griffiths' Weblog" name=description><LINK id=ctl00_rssLink 
title=RSS href="../../../../rss2.0" type=application/rss+xml rel=alternate><LINK 
href="IanG on Tap WPF Data Binding Harmonic Series Visualization_files/blog.css" 
type=text/css rel=stylesheet>
<META content="MSHTML 6.00.2900.3199" name=GENERATOR></HEAD>
<BODY>
<DIV class=blogTitle>
<H1>IanG on Tap</H1>
<P id=ctl00_subtitle><A href="http://www.interact-sw.co.uk/iangblog/">Ian 
Griffiths in Weblog Form</A> (<A 
href="http://www.interact-sw.co.uk/iangblog/rss2.0">RSS 2.0</A>)</P></DIV>
<DIV class=blogRightColumn>
<SCRIPT type=text/javascript><!--
google_ad_client = "pub-5895148714260970";
google_ad_width = 234;
google_ad_height = 60;
google_ad_format = "234x60_as";
google_ad_type = "text_image";
//2007-05-08: IanG Blog
google_ad_channel = "1140968575";
google_color_border = "336699";
google_color_bg = "FFFFFF";
google_color_link = "0000FF";
google_color_text = "000000";
google_color_url = "008000";
//-->
</SCRIPT>

<SCRIPT 
src="IanG on Tap WPF Data Binding Harmonic Series Visualization_files/show_ads.js" 
type=text/javascript>
</SCRIPT>

<DIV class=blogNav>
<H3>Blog Navigation</H3>
<TABLE>
  <TBODY>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/10/">October 
      (2007)</A></P></TD>
    <TD>
      <P>(1 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/09/">September 
      (2007)</A></P></TD>
    <TD>
      <P>(3 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/08/">August 
      (2007)</A></P></TD>
    <TD>
      <P>(1 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/07/">July 
      (2007)</A></P></TD>
    <TD>
      <P>(1 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/06/">June 
      (2007)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/05/">May 
      (2007)</A></P></TD>
    <TD>
      <P>(8 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/04/">April 
      (2007)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/03/">March 
      (2007)</A></P></TD>
    <TD>
      <P>(7 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/02/">February 
      (2007)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/01/">January 
      (2007)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2006/11/">November 
      (2006)</A></P></TD>
    <TD>
      <P>(1 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2006/10/">October 
      (2006)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2006/09/">September 
      (2006)</A></P></TD>
    <TD>
      <P>(1 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2006/06/">June 
      (2006)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2006/05/">May 
      (2006)</A></P></TD>
    <TD>
      <P>(4 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2006/04/">April 
      (2006)</A></P></TD>
    <TD>
      <P>(1 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2006/03/">March 
      (2006)</A></P></TD>
    <TD>
      <P>(5 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2006/01/">January 
      (2006)</A></P></TD>
    <TD>
      <P>(1 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/12/">December 
      (2005)</A></P></TD>
    <TD>
      <P>(3 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/11/">November 
      (2005)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/10/">October 
      (2005)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/09/">September 
      (2005)</A></P></TD>
    <TD>
      <P>(8 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/08/">August 
      (2005)</A></P></TD>
    <TD>
      <P>(7 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/06/">June 
      (2005)</A></P></TD>
    <TD>
      <P>(3 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/05/">May 
      (2005)</A></P></TD>
    <TD>
      <P>(7 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/04/">April 
      (2005)</A></P></TD>
    <TD>
      <P>(6 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/03/">March 
      (2005)</A></P></TD>
    <TD>
      <P>(1 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/02/">February 
      (2005)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/01/">January 
      (2005)</A></P></TD>
    <TD>
      <P>(5 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/12/">December 
      (2004)</A></P></TD>
    <TD>
      <P>(5 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/11/">November 
      (2004)</A></P></TD>
    <TD>
      <P>(7 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/10/">October 
      (2004)</A></P></TD>
    <TD>
      <P>(3 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/09/">September 
      (2004)</A></P></TD>
    <TD>
      <P>(7 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/08/">August 
      (2004)</A></P></TD>
    <TD>
      <P>(16 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/07/">July 
      (2004)</A></P></TD>
    <TD>
      <P>(10 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/06/">June 
      (2004)</A></P></TD>
    <TD>
      <P>(27 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/05/">May 
      (2004)</A></P></TD>
    <TD>
      <P>(15 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/04/">April 
      (2004)</A></P></TD>
    <TD>
      <P>(15 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/03/">March 
      (2004)</A></P></TD>
    <TD>
      <P>(13 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/02/">February 
      (2004)</A></P></TD>
    <TD>
      <P>(16 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/01/">January 
      (2004)</A></P></TD>
    <TD>
      <P>(15 items)</P></TD></TR></TBODY></TABLE>
<P id=ctl00_ctl01_pBlogHome><A 
href="http://www.interact-sw.co.uk/iangblog/">Blog Home</A></P>
<P id=ctl00_ctl01_pBlogRss><A 
href="http://www.interact-sw.co.uk/iangblog/rss2.0">RSS 2.0</A></P>
<H3>Writing</H3>
<P><A href="http://www.oreilly.com/catalog/9780596510374/">Programming 
WPF</A></P>
<P><A href="http://www.oreilly.com/catalog/netwinformian/">.NET Windows Forms in 
a Nutshell</A></P>
<P><A href="http://www.oreilly.com/catalog/mastvsnet/">Mastering Visual Studio 
.NET</A></P>
<H3>Other Sites</H3>
<P><A href="http://www.interact-sw.co.uk/">Interact Software</A></P></DIV></DIV>
<DIV class=blogBody>
<HR>

<H2>WPF Data Binding: Harmonic Series Visualization - <SPAN 
class=blogDate>Sunday 19 November, 2006, 10:27 AM </SPAN></H2>
<DIV class=blogitem>
<P>Recently I was speaking at TechEd Europe. One of my talks was on WPF data 
binding, and I wanted to show some of the things that make WPF data binding 
different from Windows Forms. So I wrote a little demo that shows a couple of 
interesting data binding techniques: user interface generation, and graphical 
data visualization. </P>
<P>The demo looks like this: </P>
<P><IMG alt="WPF application showing a waveform and 10 slider controls" 
src="IanG on Tap WPF Data Binding Harmonic Series Visualization_files/HarmonicSeries.png"></P>
<P>The application lets you build a waveform from a harmonic series. The sliders 
on the right control the amplitudes of the harmonics, and the screen area on the 
left displays the result. The wave is updated continuously: you can see the wave 
shape change as you drag the sliders around. This screen shot shows the 
fundamental at maximum amplitude, with the 8th harmonic added in at a lower 
amplitude. This results in the overall shape roughly following a single cycle of 
a sine wave, but with higher frequency wiggles superposed. Given enough 
harmonics you can recreate any repeating wave form if you get the right set of 
amplitudes. </P>
<P>The application uses data binding in three different ways. The most striking 
is the waveform output. Here's the XAML I used: </P><PRE><SPAN style="COLOR: blue">&lt;</SPAN><SPAN style="COLOR: maroon">Polyline</SPAN> <SPAN style="COLOR: red">Stroke</SPAN>="<SPAN style="COLOR: blue">#48F</SPAN>" <SPAN style="COLOR: red">StrokeThickness</SPAN>="<SPAN style="COLOR: blue">1.5</SPAN>"
    <SPAN style="COLOR: red">Points</SPAN>="<SPAN style="COLOR: blue">{Binding Output,
            Converter={StaticResource pointConverter}}</SPAN>"
    <SPAN style="COLOR: red">Canvas.Top</SPAN>="<SPAN style="COLOR: blue">50</SPAN>" <SPAN style="COLOR: blue">/&gt;</SPAN></PRE>
<P><CODE>Polyline</CODE> is a graphical element that renders a line that passes 
through many points. This is bound to the <CODE>Output</CODE> propery of the 
UI's <CODE>DataContext</CODE>, which holds an instance of a class I wrote called 
<CODE>HarmonicSeries</CODE>. Here's the <CODE>Output</CODE> property: </P><PRE><SPAN style="COLOR: blue">public double</SPAN>[] Output
{
    <SPAN style="COLOR: blue">get</SPAN> { <SPAN style="COLOR: blue">return</SPAN> outputValues; }
}</PRE>
<P>Pretty straightforward really. The <CODE>HarmonicSeries</CODE> class 
implements the <CODE>INotifyPropertyChanged</CODE> interface, raising the 
<CODE>PropertyChanged</CODE> event every time it recalculates the output wave. 
Besides that, it does nothing to help the UI. <CODE>HarmonicSeries</CODE> 
contains no WPF-specific features. </P>
<P>But how does binding this property to <CODE>Polyline.Points</CODE> work? That 
property expects a <CODE>PointCollection</CODE>, not a <CODE><SPAN 
style="COLOR: blue">double</SPAN></CODE> array. The answer is that I'm using a 
value converter. My project contains a class that converts from a <CODE><SPAN 
style="COLOR: blue">double</SPAN></CODE> array to a 
<CODE>PointCollection</CODE>, and I told the <CODE>Binding</CODE> to use that. 
So it simply calls that code every time it reads a new set of points from the 
<CODE>Output</CODE> property.</P>
<P>You might want to check out a couple of other blogs that show various takes 
on binding to a <CODE>Polyline</CODE>. Beatriz Costa is a PM on the WPF data 
binding team, and she wrote a series of blog entries on this: <A 
href="http://www.beacosta.com/2006/10/how-should-i-data-bind-polygons-points.html">part 
1</A>, <A 
href="http://www.beacosta.com/2006/10/how-should-i-data-bind-polygons-points_17.html">part 
2</A>, and <A 
href="http://www.beacosta.com/2006/10/how-should-i-data-bind-polygons-points_29.html">part 
3</A>. <A href="http://shevaspace.spaces.live.com/">Zhou Yong</A> takes a 
somewhat different approach, writing a class that <A 
href="http://shevaspace.spaces.live.com/Blog/cns!FD9A0F1F8DD06954!466.entry">wraps 
the underlying data with a dependency property as well as converting it</A>. 
(Note that while one of the benefits Zhou Yong shows with his approach is that 
he doesn't need to do the explicit call to Measure and Arrange. However, my 
approach didn't seem to need that either. I think that issue was specific to the 
second of Beatriz's examples.)</P>
<P>The second place I'm using data binding is a little more subtle. I'll show 
you the data source property before I show you the binding. This is another 
property on the <CODE>HarmonicSeries</CODE> class: </P><PRE><SPAN style="COLOR: blue">public</SPAN> Amplitude[] Amplitudes
{
    <SPAN style="COLOR: #0000ff">get</SPAN> { <SPAN style="COLOR: blue">return</SPAN> amplitudeValues; }
}</PRE>
<P>This stores the amplitude for each harmonic. <CODE>Amplitude</CODE> is 
another class in the project, and a desperately simple one: it's just wraps an 
<CODE>INotifyPropertyChanged</CODE> implementation around a double. Initially I 
thought I'd be able to use an <CODE>ObservableCollection</CODE> of doubles, but 
that turns out to be backwards: what I need is a collection of observable 
doubles, which is not the same thing. So, bearing that in mind, now let's look 
at the next two data binding expressions: </P><PRE><SPAN style="COLOR: blue">&lt;</SPAN><SPAN style="COLOR: maroon">ItemsControl</SPAN> <SPAN style="COLOR: red">x:Name</SPAN>="<SPAN style="COLOR: blue">amplitudeSliders</SPAN>" <SPAN style="COLOR: red">Grid.Column</SPAN>="<SPAN style="COLOR: blue">1</SPAN>"
              <SPAN style="COLOR: red">ItemsSource</SPAN>="<SPAN style="COLOR: blue">{Binding Amplitudes}</SPAN>"&gt;
  <SPAN style="COLOR: blue">&lt;</SPAN><SPAN style="COLOR: maroon">ItemsControl.ItemTemplate</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
    <SPAN style="COLOR: blue">&lt;</SPAN><SPAN style="COLOR: maroon">DataTemplate</SPAN><SPAN style="COLOR: blue">&gt;
      &lt;</SPAN><SPAN style="COLOR: maroon">Slider</SPAN> <SPAN style="COLOR: red">Minimum</SPAN>="<SPAN style="COLOR: blue">0</SPAN>" <SPAN style="COLOR: red">Maximum</SPAN>="<SPAN style="COLOR: blue">1</SPAN>" <SPAN style="COLOR: red">Value</SPAN>="<SPAN style="COLOR: blue">{Binding Value}</SPAN>"
              <SPAN style="COLOR: red">SmallChange</SPAN>="<SPAN style="COLOR: blue">0.01</SPAN>" <SPAN style="COLOR: red">LargeChange</SPAN>="<SPAN style="COLOR: blue">0.1</SPAN>" <SPAN style="COLOR: blue">/&gt;
    &lt;/</SPAN><SPAN style="COLOR: maroon">DataTemplate</SPAN><SPAN style="COLOR: blue">&gt;
  &lt;/</SPAN><SPAN style="COLOR: maroon">ItemsControl.ItemTemplate</SPAN><SPAN style="COLOR: blue">&gt;
&lt;/</SPAN><SPAN style="COLOR: maroon">ItemsControl</SPAN><SPAN style="COLOR: blue">&gt;</SPAN> </PRE>
<P>This is the markup for the right hand side of the UI. That's all of it - this 
generates all ten <CODE>Slider</CODE> controls. I'm using the 
<CODE>ItemsControl</CODE> to perform this generation. <CODE>ItemsControl</CODE> 
is the base class of controls like <CODE>ListBox</CODE>, <CODE>ComboBox</CODE>, 
<CODE>TreeView</CODE> etc. It provides the basic item generation and data 
binding support, and the derived list controls then add the standard behaviours 
for these common controls. But you can just use the base class itself. I'm using 
it to bind to the amplitudes, generating an instance of the 
<CODE>DataTemplate</CODE> for each amplitude in the source. </P>
<P>The third place I'm using data binding is the generated slider itself. It's 
straightforward: it just binds to the <CODE>Value</CODE> in the 
<CODE>Amplitude</CODE> class. The one moderately interesting thing about this is 
that each instance of the <CODE>DataTemplate</CODE> will have its 
<CODE>DataContext</CODE> set to the source item for which it's being generated, 
i.e. the relevant <CODE>Amplitude</CODE> object. This is why I'm able to use a 
<CODE>Binding</CODE> expression inside of a the UI that was generated by data 
binding. It's more common to see bindings in data templates used simply to 
display data, or perhaps to hook up a <CODE>TextBox</CODE>. I wanted to show a 
slightly less common example. And I thought this visual illustration of the 
point was more fun than illustrating the same concepts with dry text 
controls.</P>
<P>If you were at TechEd Europe this year, you should already have this demo. 
For everyone else, you can download the source and binary from here: <A 
href="http://www.interact-sw.co.uk/downloads/WaveData.zip">WaveData.zip</A>. 
</P></DIV></DIV>
<DIV class=blogBody>
<HR>
<SPAN class=copyright>Copyright © 2002-2007, <A id=ctl00_homeLink 
href="http://www.interact-sw.co.uk/">Interact Software Ltd.</A> Content by <A 
href="mailto:ian@interact-sw.co.uk">Ian Griffiths</A>. Please direct all Web 
site inquiries to <A 
href="mailto:webmaster@interact-sw.co.uk">webmaster@interact-sw.co.uk</A></SPAN> 
</DIV></BODY></HTML>

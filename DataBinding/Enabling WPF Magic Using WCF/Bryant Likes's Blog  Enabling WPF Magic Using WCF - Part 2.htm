<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0102)http://blogs.sqlxml.org/bryantlikes/archive/2006/09/20/Enabling-WPF-Magic-Using-WCF-_2D00_-Part-2.aspx -->
<HTML lang=en xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Bryant Likes's Blog : Enabling WPF Magic Using WCF - Part 2</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<META content=WCF,WPF name=keywords>
<META 
content="In part 1 we created a very simple application that actually didn't even use WCF. The next step in the process is to migrate our ContactProvider from an in-proc class to be a WCF service. We will then use WCF callbacks to notify the application that the" 
name=description>
<META content="MSHTML 6.00.2900.3199" name=GENERATOR><LINK 
href="http://blogs.sqlxml.org/bryantlikes/pingback.aspx" rel=pingback><LINK 
media=screen 
href="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/style.css" 
type=text/css rel=stylesheet><LINK media=print 
href="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/print.css" 
type=text/css rel=stylesheet><LINK media=screen 
href="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/cactus.css" 
type=text/css rel=stylesheet><LINK media=screen 
href="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/customcss.css" 
type=text/css rel=stylesheet><LINK href="/favicon.ico" type=image/ico 
rel="shortcut icon"><LINK title="Bryant Likes's Blog (RSS 2.0)" 
href="http://feeds.feedburner.com/BryantLikesBlog" type=application/rss+xml 
rel=alternate><LINK 
title="Enabling WPF Magic Using WCF - Part 2 Comment RSS (RSS 2.0)" 
href="http://blogs.sqlxml.org/bryantlikes/commentrss.aspx?PostID=7982" 
type=application/rss+xml rel=alternate>
<SCRIPT 
src="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/global.js" 
type=text/javascript></SCRIPT>

<SCRIPT 
src="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/urchin.js" 
type=text/javascript>
</SCRIPT>

<SCRIPT type=text/javascript>
_uacct = "UA-133109-1";
urchinTracker();
</SCRIPT>
</HEAD>
<BODY>
<FORM id=aspnetForm name=aspnetForm 
onsubmit="javascript:return WebForm_OnSubmit();" 
action=/bryantlikes/archive/2006/09/20/Enabling-WPF-Magic-Using-WCF-_2D00_-Part-2.aspx 
method=post>
<DIV><INPUT id=__EVENTTARGET type=hidden name=__EVENTTARGET> <INPUT 
id=__EVENTARGUMENT type=hidden name=__EVENTARGUMENT> <INPUT id=__VIEWSTATE 
type=hidden 
value=/wEPDwUKLTMyNjg0MDc1MWQYAQUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgIFHmN0bDAwJF8kY3RsMDAkXyR3cyRfJFNlYXJjaEJveAUqY3RsMDAkXyRjdGwwMCRfJGN0bDAyJF8kZm9ybSRfJGNoa1JlbWVtYmVyIYIS4KdU7zrl4bjphRf8RdzvYS0= 
name=__VIEWSTATE> </DIV>
<SCRIPT type=text/javascript>
<!--
var theForm = document.forms['aspnetForm'];
if (!theForm) {
    theForm = document.aspnetForm;
}
function __doPostBack(eventTarget, eventArgument) {
    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {
        theForm.__EVENTTARGET.value = eventTarget;
        theForm.__EVENTARGUMENT.value = eventArgument;
        theForm.submit();
    }
}
// -->
</SCRIPT>

<SCRIPT 
src="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/WebResource.axd" 
type=text/javascript></SCRIPT>

<SCRIPT 
src="D:\LINKS\DM-V-VM\Enabling WPF Magic Using WCF\Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files\WebResource(1).axd" 
type=text/javascript></SCRIPT>

<SCRIPT type=text/javascript>
<!--
function WebForm_OnSubmit() {
if (typeof(ValidatorOnSubmit) == "function" && ValidatorOnSubmit() == false) return false;
return true;
}
// -->
</SCRIPT>

<DIV id=masthead>
<DIV id=userArea>
<DIV id=welcome align=right>Welcome to SqlXml Blogs <A 
id=ctl00___ctl00___duw1_ac1___Login 
href="http://blogs.sqlxml.org/login.aspx?ReturnUrl=%2fbryantlikes%2farchive%2f2006%2f09%2f20%2fEnabling-WPF-Magic-Using-WCF-_2D00_-Part-2.aspx">Sign 
in</A> | <A id=ctl00___ctl00___duw1_ac1___Register 
href="http://blogs.sqlxml.org/user/CreateUser.aspx?ReturnUrl=/bryantlikes/archive/2006/09/20/Enabling-WPF-Magic-Using-WCF-_2D00_-Part-2.aspx">Join</A> 
| <A id=ctl00___ctl00___duw1_Faq1 
href="http://blogs.sqlxml.org/languages/en-US/docs/faq.aspx">Help</A> </DIV>
<DIV id=SearchSideBar>
<DIV id=Search align=right>
<TABLE cellSpacing=0 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD><INPUT class=searchBox id=ctl00___ctl00___ws___SearchBox 
      onkeydown=KeyDownHandlerctl00___ctl00___ws___SearchButton(event); 
      name=ctl00$_$ctl00$_$ws$_$SearchBox> </TD>
    <TD><SPAN class=SearchButtonOuter><A class=SearchButton 
      id=ctl00___ctl00___ws___SearchButton 
      href="javascript:__doPostBack('ctl00$_$ctl00$_$ws$_$SearchButton','')">Search</A></SPAN> 
    </TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<DIV id=title>
<H1><A class=headermaintitle id=ctl00___ctl00___bt___BlogTitle 
href="http://blogs.sqlxml.org/bryantlikes/default.aspx">Bryant Likes's 
Blog</A></H1>
<DIV>It's all about WebData</DIV></DIV></DIV>
<DIV id=nav>
<DIV id=navbar>
<UL>
  <LI><A id=ctl00___ctl00___Homelink1 
  href="http://blogs.sqlxml.org/bryantlikes/default.aspx">Home</A> </LI>
  <LI><A id=ctl00___ctl00___Contactlink1 
  href="http://blogs.sqlxml.org/bryantlikes/contact.aspx">Email</A> </LI>
  <LI><A id=ctl00___ctl00___Aboutlink1 
  href="http://blogs.sqlxml.org/bryantlikes/about.aspx">About</A> </LI>
  <LI><A id=ctl00___ctl00___rss 
  href="http://feeds.feedburner.com/BryantLikesBlog">RSS 2.0</A> </LI>
  <LI><A id=ctl00___ctl00___atom 
  href="http://feeds.feedburner.com/BryantLikesBlog">Atom 1.0</A> 
</LI></UL></DIV></DIV>
<DIV id=content>
<DIV id=leftmenu>
<DIV id=TasksSideBar></DIV>
<DIV id=RecentPostsSideBar>
<H3>Recent Posts</H3>
<UL>
  <LI><A id=ctl00___ctl00___bs___rp___PostList_ctl01_Link 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2007/10/03/installing-subversion-as-a-windows-nt-service.aspx">Installing 
  Subversion as a Windows NT Service</A> 
  <LI><A id=ctl00___ctl00___bs___rp___PostList_ctl02_Link 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2007/08/16/which-transformer-are-you.aspx">Which 
  Transformer Are You?</A> 
  <LI><A id=ctl00___ctl00___bs___rp___PostList_ctl03_Link 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2007/08/16/verizon-rumor-stackup.aspx">Verizon 
  Rumor Stackup</A> 
  <LI><A id=ctl00___ctl00___bs___rp___PostList_ctl04_Link 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2007/07/18/creating-biztalk-application-references-with-nant.aspx">Creating 
  BizTalk Application References with Nant</A> 
  <LI><A id=ctl00___ctl00___bs___rp___PostList_ctl05_Link 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2007/06/05/web-experience-events.aspx">Web 
  Experience Events</A> </LI></UL></DIV>
<DIV id=TagSideBar>
<H3>Tags</H3>
<UL class=SidebarTagCloud>
  <LI class=Tag5><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/.NET/default.aspx" 
  rel=tag>.NET</A> 
  <LI class=Tag2><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/ASP.Net_2F00_Web+Services/default.aspx" 
  rel=tag>ASP.Net/Web Services</A> 
  <LI class=Tag3><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/Avanade/default.aspx" 
  rel=tag>Avanade</A> 
  <LI class=Tag3><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/BizTalk/default.aspx" 
  rel=tag>BizTalk</A> 
  <LI class=Tag4><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/Certifications/default.aspx" 
  rel=tag>Certifications</A> 
  <LI class=Tag2><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/Gadgets/default.aspx" 
  rel=tag>Gadgets</A> 
  <LI class=Tag1><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/General/default.aspx" 
  rel=tag>General</A> 
  <LI class=Tag6><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/Live+Writer/default.aspx" 
  rel=tag>Live Writer</A> 
  <LI class=Tag1><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/Reporting+Services/default.aspx" 
  rel=tag>Reporting Services</A> 
  <LI class=Tag1><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/SharePoint/default.aspx" 
  rel=tag>SharePoint</A> 
  <LI class=Tag5><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/Silverlight/default.aspx" 
  rel=tag>Silverlight</A> 
  <LI class=Tag1><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/Sql+and+Xml/default.aspx" 
  rel=tag>Sql and Xml</A> 
  <LI class=Tag4><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/Test-Driven+Dev/default.aspx" 
  rel=tag>Test-Driven Dev</A> 
  <LI class=Tag6><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/Virtualization/default.aspx" 
  rel=tag>Virtualization</A> 
  <LI class=Tag4><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/Vista/default.aspx" 
  rel=tag>Vista</A> 
  <LI class=Tag5><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/WCF/default.aspx" 
  rel=tag>WCF</A> 
  <LI class=Tag6><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/WF/default.aspx" 
  rel=tag>WF</A> 
  <LI class=Tag6><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/Windows+Mobile/default.aspx" 
  rel=tag>Windows Mobile</A> 
  <LI class=Tag3><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/WPF/default.aspx" 
  rel=tag>WPF</A> 
  <LI class=Tag3><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/tags/WPF_2F00_E/default.aspx" 
  rel=tag>WPF/E</A> </LI></UL></DIV>
<DIV id=WLSearchBoxDiv>
<TABLE style="WIDTH: 200px" cellSpacing=0 cellPadding=0>
  <TBODY>
  <TR id=WLSearchBoxPlaceholder>
    <TD 
    style="BORDER-RIGHT: #4b7b9f 2px; BORDER-TOP: #4b7b9f 2px solid; BORDER-LEFT: #4b7b9f 2px solid; WIDTH: 100%; BORDER-BOTTOM: #4b7b9f 2px solid"><INPUT 
      id=WLSearchBoxInput 
      style="BORDER-RIGHT: transparent 0px; PADDING-RIGHT: 0px; BACKGROUND-POSITION: right 50%; BORDER-TOP: transparent 0px; PADDING-LEFT: 0px; BACKGROUND-IMAGE: url(http://search.msn.com/s/siteowner/searchbox_background.png); PADDING-BOTTOM: 0px; BORDER-LEFT: transparent 0px; WIDTH: 100%; PADDING-TOP: 0px; BORDER-BOTTOM: transparent 0px; BACKGROUND-REPEAT: no-repeat; HEIGHT: 16px" 
      disabled value=Loading...></TD>
    <TD 
    style="BORDER-RIGHT: #4b7b9f 2px solid; BORDER-TOP: #4b7b9f 2px solid; BORDER-LEFT: #4b7b9f 2px solid; BORDER-BOTTOM: #4b7b9f 2px solid"><INPUT 
      id=WLSearchBoxButton 
      style="PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; BORDER-TOP-STYLE: none; PADDING-TOP: 0px; BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: none; BORDER-BOTTOM-STYLE: none" 
      type=image 
      src="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/searchbutton_normal.png" 
      align=absBottom></TD></TR></TBODY></TABLE>
<SCRIPT type=text/javascript charset=utf-8>
	var WLSearchBoxConfiguration=
	{
		"global":{
			"serverDNS":"search.msn.com",
			"market":"en-US"
		},
		"appearance":{
			"autoHideTopControl":false,
			"width":800,
			"height":550,
			"theme":"Blue"
		},
		"scopes":[
			{
				"type":"web",
				"caption":"&#x27;&#x73;&#x20;&#x62;&#x6c;&#x6f;&#x67;",
				"searchParam":"site:blogs.sqlxml.org"
			}
			,
			{
				"type":"web",
				"caption":"&#x57;&#x65;&#x62;",
				"searchParam":""
			}
		]
	}
	</SCRIPT>

<SCRIPT 
src="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/bootstrap.js" 
type=text/javascript charset=utf-8></SCRIPT>
</DIV>
<DIV id=NewsSideBar>
<DIV id=NewsSidebar>
<H3>News</H3>
<UL>
  <LI><A href="http://feeds.feedburner.com/BryantLikesBlog"><IMG 
  style="BORDER-TOP-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px" 
  height=26 alt="" 
  src="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/BryantLikesBlog.gif" 
  width=88></A> <BR><A 
  href="http://signup.alerts.live.com/alerts/login.do?PINID=27401148&amp;returnURL=http://blogs.sqlxml.org/BryantLikes"><IMG 
  alt="Windows Live Alerts" 
  src="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/alert_signup_eng.gif" 
  border=0></A> <BR><A href="http://www.linkedin.com/in/bryantlikes"><IMG 
  height=33 alt="View Bryant Likes's profile on LinkedIn" 
  src="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/btn_viewmy_120x33.gif" 
  width=120 border=0></A> <BR><BR><IMG alt=Me 
  src="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/o_MVPPhotoSml.jpg"> 
  <BR><BR>The posts on this weblog are provided "as is" with no warranties and 
  confer no rights. The opinions expressed herin are the personal opinions of 
  the individual authors and do not represent the views of <A 
  href="http://www.avanade.com/">Avanade</A> in any way. </LI></UL></DIV></DIV>
<DIV id=NavSideBar>
<H3>Navigation</H3>
<DIV id=headertab>
<UL>
  <LI><A id=ctl00___ctl00___bs___nm___Menu_ctl00_MenuItem 
  href="http://blogs.sqlxml.org/default.aspx">Blogs</A> 
  <LI><A id=ctl00___ctl00___bs___nm___Menu_ctl01_MenuItem 
  href="http://blogs.sqlxml.org/photos/default.aspx">Photos</A> 
  <LI><A id=ctl00___ctl00___bs___nm___Menu_ctl02_MenuItem 
  href="http://blogs.sqlxml.org/files/default.aspx">Downloads</A> 
</LI></UL></DIV></DIV>
<DIV id=LinkSideBar></DIV>
<DIV id=ArchiveSideBar>
<H3>Archives</H3>
<UL>
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2007/10.aspx">October 
  2007 (1)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2007/08.aspx">August 
  2007 (2)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2007/07.aspx">July 
  2007 (1)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2007/06.aspx">June 
  2007 (1)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2007/05.aspx">May 
  2007 (4)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2007/04.aspx">April 
  2007 (1)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2007/03.aspx">March 
  2007 (4)</A> 
  <LI><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2007/02.aspx">February 2007 
  (8)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2007/01.aspx">January 
  2007 (8)</A> 
  <LI><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2006/12.aspx">December 2006 
  (9)</A> 
  <LI><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2006/11.aspx">November 2006 
  (7)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2006/10.aspx">October 
  2006 (4)</A> 
  <LI><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2006/09.aspx">September 2006 
  (11)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2006/08.aspx">August 
  2006 (18)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2006/07.aspx">July 
  2006 (5)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2006/06.aspx">June 
  2006 (1)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2006/05.aspx">May 
  2006 (3)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2006/04.aspx">April 
  2006 (7)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2006/03.aspx">March 
  2006 (7)</A> 
  <LI><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2006/02.aspx">February 2006 
  (2)</A> 
  <LI><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2005/12.aspx">December 2005 
  (5)</A> 
  <LI><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2005/11.aspx">November 2005 
  (11)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2005/10.aspx">October 
  2005 (3)</A> 
  <LI><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2005/09.aspx">September 2005 
  (8)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2005/08.aspx">August 
  2005 (7)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2005/07.aspx">July 
  2005 (5)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2005/06.aspx">June 
  2005 (11)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2005/05.aspx">May 
  2005 (9)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2005/04.aspx">April 
  2005 (14)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2005/03.aspx">March 
  2005 (12)</A> 
  <LI><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2005/02.aspx">February 2005 
  (17)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2005/01.aspx">January 
  2005 (10)</A> 
  <LI><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2004/12.aspx">December 2004 
  (9)</A> 
  <LI><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2004/11.aspx">November 2004 
  (4)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2004/10.aspx">October 
  2004 (10)</A> 
  <LI><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2004/09.aspx">September 2004 
  (2)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2004/08.aspx">August 
  2004 (4)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2004/07.aspx">July 
  2004 (15)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2004/06.aspx">June 
  2004 (11)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2004/05.aspx">May 
  2004 (14)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2004/04.aspx">April 
  2004 (12)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2004/03.aspx">March 
  2004 (16)</A> 
  <LI><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2004/02.aspx">February 2004 
  (16)</A> 
  <LI><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2003/11.aspx">November 2003 
  (4)</A> 
  <LI><A href="http://blogs.sqlxml.org/bryantlikes/archive/2003/10.aspx">October 
  2003 (20)</A> 
  <LI><A 
  href="http://blogs.sqlxml.org/bryantlikes/archive/2003/09.aspx">September 2003 
  (5)</A> </LI></UL></DIV></DIV>
<DIV id=main><SPAN id=ctl00___ctl00___Ads1___StandardTop>
<SCRIPT type=text/javascript><!--
google_ad_client = "pub-9526670085455515";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "text_image";
google_ad_channel ="";
google_color_border = "FFFFFF";
google_color_bg = "FFFFFF";
google_color_link = "000066";
google_color_text = "333333";
google_color_url = "0066FF";
//--></SCRIPT>

<SCRIPT 
src="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/show_ads.js" 
type=text/javascript>
</SCRIPT>
</SPAN>
<DIV class=post>
<H5 class="posthead pageTitle">Enabling WPF Magic Using WCF - Part 2 </H5>
<P>In <A 
href="http://blogs.sqlxml.org/bryantlikes/archive/2006/09/20/Enabling-WPF-Magic-Using-WCF-_2D00_-Part-1.aspx">part 
1</A> we created a very simple application that actually didn't even use WCF. 
The next step in the process is to migrate our ContactProvider from an in-proc 
class to be a WCF service. We will then use WCF callbacks to notify the 
application that the contact list has changed. In order to learn WCF and 
specifically how to use call backs I used two resources: this <A 
href="http://msdn.microsoft.com/msdnmag/issues/06/10/WCFEssentials/">MSDN 
Magazine Article</A> and this <A 
href="http://www.oreilly.com/catalog/programwcf/">Rough Cuts Book</A>, both by 
<A href="http://www.oreillynet.com/pub/au/741">Juval Löwy</A>.</P>
<P>The first thing to do is create a new console application and add references 
to System.ServiceModel and System.Runtime.Serialization. Next we will recreate 
both our Contact class and the ContactProvider class and interface. First, here 
is our new Contact class as defined in our ContactService console project:</P>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">namespace</SPAN> ContactService</PRE><PRE style="MARGIN: 0px">{</PRE><PRE style="MARGIN: 0px"> &nbsp;&nbsp; [<SPAN style="COLOR: teal">DataContract</SPAN>(Namespace=<SPAN style="COLOR: maroon">"ContactService"</SPAN>)]</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">class</SPAN> <SPAN style="COLOR: teal">Contact</SPAN></PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<SPAN style="COLOR: teal">DataMember</SPAN>]</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">string</SPAN> FirstName;</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<SPAN style="COLOR: teal">DataMember</SPAN>]</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">string</SPAN> LastName;</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<SPAN style="COLOR: teal">DataMember</SPAN>]</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">string</SPAN> Phone;</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; }</PRE><PRE style="MARGIN: 0px">}</PRE></DIV>
<P>The first thing you will probably notice is the DataContract/DataMember 
attributes. If you don't know what these are then I would suggest reading a WCF 
primer like the book mentioned above. The other thing is that I've changed the 
properties to fields and no longer implement INotifyPropertyChanged. I've 
switched to fields because really this is just a structure from the services 
point of view. The INotifyPropertyChanged will be taken care of later on. Next 
we create our interface as shown below:</P>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">namespace</SPAN> ContactService</PRE><PRE style="MARGIN: 0px">{</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; [<SPAN style="COLOR: teal">ServiceContract</SPAN>]</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">interface</SPAN> <SPAN style="COLOR: teal">IContactProvider</SPAN></PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<SPAN style="COLOR: teal">OperationContract</SPAN>]</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">List</SPAN>&lt;<SPAN style="COLOR: teal">Contact</SPAN>&gt; GetContacts();</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; }</PRE><PRE style="MARGIN: 0px">}</PRE></DIV>
<P>This defines the WCF contract that we will be implementing to provide a list 
of contacts to our application. Next we need to create the ContactProvider 
implementation:</P>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">namespace</SPAN> ContactService</PRE><PRE style="MARGIN: 0px">{</PRE><PRE style="MARGIN: 0px">&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">class</SPAN> <SPAN style="COLOR: teal">ContactProvider</SPAN> : <SPAN style="COLOR: teal">IContactProvider</SPAN></PRE><PRE style="MARGIN: 0px">&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">private</SPAN> <SPAN style="COLOR: blue">static</SPAN> <SPAN style="COLOR: blue">readonly</SPAN> <SPAN style="COLOR: blue">string</SPAN> Filepath = </PRE><PRE style="MARGIN: 0px">        <SPAN style="COLOR: teal">ConfigurationManager</SPAN>.AppSettings[<SPAN style="COLOR: maroon">"contacts"</SPAN>];</PRE><PRE style="MARGIN: 0px">&nbsp;</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> ContactProvider()</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; {}</PRE><PRE style="MARGIN: 0px">&nbsp;</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: teal">List</SPAN>&lt;<SPAN style="COLOR: teal">Contact</SPAN>&gt; GetContacts()</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">using</SPAN> (<SPAN style="COLOR: teal">FileStream</SPAN> fs = <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">FileStream</SPAN>(Filepath, <SPAN style="COLOR: teal">FileMode</SPAN>.Open))</PRE><PRE style="MARGIN: 0px">&nbsp; &nbsp;&nbsp;&nbsp; {</PRE><PRE style="MARGIN: 0px"> &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">DataContractSerializer</SPAN> dcs = </PRE><PRE style="MARGIN: 0px">            <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">DataContractSerializer</SPAN>(<SPAN style="COLOR: blue">typeof</SPAN>(<SPAN style="COLOR: teal">List</SPAN>&lt;<SPAN style="COLOR: teal">Contact</SPAN>&gt;));</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">return</SPAN> (<SPAN style="COLOR: teal">List</SPAN>&lt;<SPAN style="COLOR: teal">Contact</SPAN>&gt;)dcs.ReadObject(fs);</PRE><PRE style="MARGIN: 0px">&nbsp; &nbsp;&nbsp;&nbsp; }</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; }</PRE><PRE style="MARGIN: 0px">&nbsp; }</PRE><PRE style="MARGIN: 0px">}</PRE></DIV>
<P>This class looks very similar to our previous ContactProvider class. However, 
since this is running on the server side we don't allow the client to pass in 
the path to the file, we just use a value from the config file. We are also 
using the DataContractSerializer instead of the XmlSerializer class. This is a 
new serializer that is part of WCF and is more appropriate in this case because 
we are deserializing an object that is a DataContract. However, because we are 
using this class we need to add a default namespace to our XML as shown 
below:</P>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&lt;</SPAN><SPAN style="COLOR: maroon">ArrayOfContact</SPAN><SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">xmlns</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">ContactService</SPAN>"<SPAN style="COLOR: blue">&gt;...&lt;/<SPAN style="COLOR: maroon">ArrayOfContact</SPAN>&gt;</SPAN></PRE></DIV>
<P>Now we are ready to create our host. Our host is very simple since we are 
using a config file to manage all the WCF settings:</P>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">namespace</SPAN> ContactService</PRE><PRE style="MARGIN: 0px">{</PRE><PRE style="MARGIN: 0px">&nbsp; <SPAN style="COLOR: blue">class</SPAN> <SPAN style="COLOR: teal">Program</SPAN></PRE><PRE style="MARGIN: 0px">&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">static</SPAN> <SPAN style="COLOR: blue">void</SPAN> Main(<SPAN style="COLOR: blue">string</SPAN>[] args)</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">ServiceHost</SPAN> host = <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">ServiceHost</SPAN>(<SPAN style="COLOR: blue">typeof</SPAN>(<SPAN style="COLOR: teal">ContactProvider</SPAN>));</PRE><PRE style="MARGIN: 0px">&nbsp;</PRE><PRE style="MARGIN: 0px">&nbsp; &nbsp;&nbsp;&nbsp; host.Open();</PRE><PRE style="MARGIN: 0px">&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">Console</SPAN>.WriteLine(<SPAN style="COLOR: maroon">"Ready to accept connections..."</SPAN>);</PRE><PRE style="MARGIN: 0px">&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">Console</SPAN>.ReadLine();</PRE><PRE style="MARGIN: 0px">&nbsp; &nbsp;&nbsp;&nbsp; host.Close();</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; }</PRE><PRE style="MARGIN: 0px">&nbsp; }</PRE><PRE style="MARGIN: 0px">}</PRE></DIV>
<P>If you run the console application you should get an error since we have not 
configured anything at this point. We will add an App.config file to the project 
and fill it up with all the settings shown below:</P>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&lt;?</SPAN><SPAN style="COLOR: maroon">xml</SPAN><SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">version</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">1.0</SPAN>"<SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">encoding</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">utf-8</SPAN>"<SPAN style="COLOR: blue"> ?&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&lt;</SPAN><SPAN style="COLOR: maroon">configuration</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN style="COLOR: maroon">appSettings</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN style="COLOR: maroon">add</SPAN><SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">key</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">contacts</SPAN>"<SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">value</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">c:\dev\ContactSample\contacts.xml</SPAN>"<SPAN style="COLOR: blue">/&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &lt;/</SPAN><SPAN style="COLOR: maroon">appSettings</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN style="COLOR: maroon">system.serviceModel</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN style="COLOR: maroon">services</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN style="COLOR: maroon">service</SPAN><SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">name</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">ContactService.ContactProvider</SPAN>"<SPAN style="COLOR: blue"> </SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">                     </SPAN><SPAN style="COLOR: red">behaviorConfiguration</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">MEXGET</SPAN>"<SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN style="COLOR: maroon">host</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN style="COLOR: maroon">baseAddresses</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN style="COLOR: maroon">add</SPAN><SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">baseAddress</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">net.tcp://localhost:8001/</SPAN>"<SPAN style="COLOR: blue">/&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/</SPAN><SPAN style="COLOR: maroon">baseAddresses</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/</SPAN><SPAN style="COLOR: maroon">host</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN style="COLOR: maroon">endpoint</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </SPAN><SPAN style="COLOR: red">address</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">contacts</SPAN>"</PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </SPAN><SPAN style="COLOR: red">binding</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">netTcpBinding</SPAN>"</PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </SPAN><SPAN style="COLOR: red">contract</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">ContactService.IContactProvider</SPAN>"<SPAN style="COLOR: blue"> /&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN style="COLOR: maroon">endpoint</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </SPAN><SPAN style="COLOR: red">address</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">MEX</SPAN>"</PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </SPAN><SPAN style="COLOR: red">binding</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">mexTcpBinding</SPAN>"</PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </SPAN><SPAN style="COLOR: red">contract</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">IMetadataExchange</SPAN>"<SPAN style="COLOR: blue"> /&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/</SPAN><SPAN style="COLOR: maroon">service</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/</SPAN><SPAN style="COLOR: maroon">services</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN style="COLOR: maroon">behaviors</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN style="COLOR: maroon">serviceBehaviors</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN style="COLOR: maroon">behavior</SPAN><SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">name</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">MEXGET</SPAN>"<SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;</SPAN><SPAN style="COLOR: maroon">serviceMetadata</SPAN><SPAN style="COLOR: blue"> /&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/</SPAN><SPAN style="COLOR: maroon">behavior</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/</SPAN><SPAN style="COLOR: maroon">serviceBehaviors</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/</SPAN><SPAN style="COLOR: maroon">behaviors</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; &lt;/</SPAN><SPAN style="COLOR: maroon">system.serviceModel</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">&lt;/</SPAN><SPAN style="COLOR: maroon">configuration</SPAN><SPAN style="COLOR: blue">&gt;</SPAN></PRE></DIV>
<P>In this file we have defined our service along with two endpoints and a 
behavior. The behavior enabled the metadata exchange to occur which we will use 
to build our client proxy. There is one endpoint for the metadata exchange 
interface and another for our client to connect to via TCP. At this point we 
should be able to start our console application and it should run. With the 
service running, open a command prompt in the ContactApp folder and run the 
following command (note: you will need to have (1) installed the <A 
href="http://www.microsoft.com/downloads/details.aspx?FamilyId=117ECFD3-98AD-4D67-87D2-E95A8407FA86&amp;displaylang=en">Windows 
SDK for RC1</A>&nbsp;and (2) added the SDK bin folder to your path for this to 
work):</P>
<P>svcutil net.tcp://localhost:8001/MEX /edb /config:app.config /async 
/out:Contact.g.cs</P>
<P>This will generate two files which we will need to add to our WPF project: 
app.config and Contact.g.cs. Note that Contact.g.cs contains the new contact 
definition (I use Contact.<STRONG>g</STRONG>.cs to so that it is clear the file 
is <STRONG>g</STRONG>enerated). If you look at the definition you will notice 
that the generated class implements INotifyPropertyChanged. The file also 
contains the service contract interface and proxy class. Our next step will be 
to plug in these new classes to our application. First remove the Contact.cs, 
IContactProvider.cs, and ContactProvider.cs files from the project. Next open 
the ContactDataModel and add the following constructor:</P>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">class</SPAN> <SPAN style="COLOR: teal">ContactDataModel</SPAN> : <SPAN style="COLOR: teal">ObservableCollection</SPAN>&lt;<SPAN style="COLOR: teal">Contact</SPAN>&gt;</PRE></DIV>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px">{</PRE></DIV>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> ContactDataModel(<SPAN style="COLOR: teal">Contact</SPAN>[] contacts)</PRE></DIV>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; : <SPAN style="COLOR: blue">base</SPAN>(<SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">List</SPAN>&lt;<SPAN style="COLOR: teal">Contact</SPAN>&gt;(contacts))</PRE></DIV>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; { }</PRE><PRE style="MARGIN: 0px">&nbsp;</PRE><PRE style="MARGIN: 0px">    ...</PRE><PRE style="MARGIN: 0px">}</PRE></DIV>
<P>We will need this constructor since our new proxy class doesn't return a 
generic list of contacts but an array of contacts. We could edit the generated 
file to change this and it would work, but I prefer to not edit generated files. 
Next we need to update our ContactViewModel class to use the new proxy class. In 
this case we will also add the IDisposable interface to our class so that we can 
call the Close method on the proxy. Below is the updated code for our class:</P>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">namespace</SPAN> ContactApp</PRE><PRE style="MARGIN: 0px">{</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">class</SPAN> <SPAN style="COLOR: teal">ContactViewModel</SPAN> : <SPAN style="COLOR: teal">IDisposable</SPAN></PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">private</SPAN> <SPAN style="COLOR: teal">ContactProviderClient</SPAN> _proxy;</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">private</SPAN> <SPAN style="COLOR: teal">ContactDataModel</SPAN> _contacts;</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">private</SPAN> <SPAN style="COLOR: teal">Dispatcher</SPAN> _dispatcher;</PRE><PRE style="MARGIN: 0px">&nbsp;</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> ContactViewModel()</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _proxy = <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">ContactProviderClient</SPAN>();</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _dispatcher = <SPAN style="COLOR: teal">Dispatcher</SPAN>.CurrentDispatcher;</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _contacts = <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">ContactDataModel</SPAN>(_proxy.GetContacts());</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</PRE><PRE style="MARGIN: 0px">&nbsp;</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: teal">ContactDataModel</SPAN> Contacts</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">get</SPAN> { <SPAN style="COLOR: blue">return</SPAN> _contacts; }</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</PRE><PRE style="MARGIN: 0px">&nbsp;</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">void</SPAN> Dispose()</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _proxy.Close();</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; }</PRE><PRE style="MARGIN: 0px">}</PRE></DIV>
<P>This is very similar to our previous ContactViewModel, but this time we are 
getting our list of contacts via WCF instead of loading them in-proc. You can 
ignore the Dispatcher for now, but we will be using it shortly. The last change 
we need to make before our application will work is to modify our 
Window1.xaml.cs file as follows:</P>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">public</SPAN> Window1()</PRE><PRE style="MARGIN: 0px">{</PRE><PRE style="MARGIN: 0px"> &nbsp;&nbsp;&nbsp; InitializeComponent();</PRE><PRE style="MARGIN: 0px"> &nbsp;&nbsp;&nbsp; _content.Content = <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">ContactViewModel</SPAN>();</PRE><PRE style="MARGIN: 0px">}</PRE></DIV>
<P>All we did was to remove the ContactProvider object in the constructor since 
the new constructor is empty. At this point you should be able to fire up the 
console app and then once you get the "ready" message on the console you can 
fire up the WPF application. You should get a list of contacts as before, but 
again we've removed the updating feature. So if you edit the contacts.xml file 
the change will not be reflected in the WPF application unless you reload it. 
</P>
<P>The next step will be to build in the notification of a change to the file 
into the service. When this was hosted in-proc we did this using an event. 
However, we are no longer in-proc so we must do things the WCF way which is a 
client callback. I recommend you read the MSDN article referenced above prior to 
continuing since this might not make sense otherwise. </P>
<P>The first step is to create our callback contract interface. It is important 
to note that this contract will be implemented by the client, not the service. 
Since we are reporting a change to the list of changes, our interface will pass 
the updated list to the client. Below is the interface:</P>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">namespace</SPAN> ContactService</PRE><PRE style="MARGIN: 0px">{</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">interface</SPAN> <SPAN style="COLOR: teal">IListChangedCallback</SPAN></PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [<SPAN style="COLOR: teal">OperationContract</SPAN>(IsOneWay = <SPAN style="COLOR: blue">true</SPAN>)]</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">void</SPAN> OnCallback(<SPAN style="COLOR: teal">Contact</SPAN>[] contacts);</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; }</PRE><PRE style="MARGIN: 0px">}</PRE></DIV>
<P>Next we need to reference this contract in our original contract as a 
callback:</P>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px">[<SPAN style="COLOR: teal">ServiceContract</SPAN>(CallbackContract = <SPAN style="COLOR: blue">typeof</SPAN>(<SPAN style="COLOR: teal">IListChangedCallback</SPAN>))]</PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">interface</SPAN> <SPAN style="COLOR: teal">IContactProvider</SPAN></PRE><PRE style="MARGIN: 0px">{...}</PRE></DIV>
<P>Now that we have all the proper contracts defined we can implement them in 
our service. Since we're still using a simple file we can just reuse our code 
from our previous ContactProvider (with a few changes). The first thing we need 
is to define the file system watcher variable and initialize it when we create 
our ContactProvider:</P>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">private</SPAN> <SPAN style="COLOR: teal">FileSystemWatcher</SPAN> _fileWatch;</PRE><PRE style="MARGIN: 0px">&nbsp;</PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">public</SPAN> ContactProvider()</PRE><PRE style="MARGIN: 0px">{</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; _fileWatch = <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">FileSystemWatcher</SPAN>(</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">Path</SPAN>.GetDirectoryName(Filepath),</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">Path</SPAN>.GetFileName(Filepath)</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;  );</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; _fileWatch.Changed += <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">FileSystemEventHandler</SPAN>(OnListChanged);</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; _fileWatch.EnableRaisingEvents = <SPAN style="COLOR: blue">true</SPAN>;</PRE><PRE style="MARGIN: 0px">}</PRE></DIV>
<P>When the file changes our (currently undefined) OnListChanged method will be 
called. The trick is that when this method is called we will need to call back 
to the client. Before we can call back to the client we need some kind of 
reference to the client's callback. In order to do this we need to grab that 
callback from the first call to our service (GetContacts). In order to do this 
we create a list to store the callbacks and we grab them during the first call 
using the OperationContext. I've also refactored the actual call to get the 
contacts out of this method for reasons that will be apparent soon. Below is our 
new GetContacts method and GetContactsFromFile method:</P>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">private</SPAN> <SPAN style="COLOR: blue">static</SPAN> <SPAN style="COLOR: teal">List</SPAN>&lt;<SPAN style="COLOR: teal">IListChangedCallback</SPAN>&gt; _callbacks = </PRE><PRE style="MARGIN: 0px">     <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">List</SPAN>&lt;<SPAN style="COLOR: teal">IListChangedCallback</SPAN>&gt;();</PRE><PRE style="MARGIN: 0px">&nbsp;</PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: teal">List</SPAN>&lt;<SPAN style="COLOR: teal">Contact</SPAN>&gt; GetContacts()</PRE><PRE style="MARGIN: 0px">{</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp; <SPAN style="COLOR: teal">IListChangedCallback</SPAN> callback = </PRE><PRE style="MARGIN: 0px">       <SPAN style="COLOR: teal">OperationContext</SPAN>.Current.GetCallbackChannel&lt;<SPAN style="COLOR: teal">IListChangedCallback</SPAN>&gt;();</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp; <SPAN style="COLOR: blue">if</SPAN> (_callbacks.Contains(callback) == <SPAN style="COLOR: blue">false</SPAN>)</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _callbacks.Add(callback);</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp; }</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp; <SPAN style="COLOR: blue">return</SPAN> GetContactsFromFile();</PRE><PRE style="MARGIN: 0px">}</PRE><PRE style="MARGIN: 0px">&nbsp;</PRE><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">private</SPAN> <SPAN style="COLOR: teal">List</SPAN>&lt;<SPAN style="COLOR: teal">Contact</SPAN>&gt; GetContactsFromFile()</PRE><PRE style="MARGIN: 0px">{</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp; <SPAN style="COLOR: blue">using</SPAN> (<SPAN style="COLOR: teal">FileStream</SPAN> fs = <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">FileStream</SPAN>(Filepath, <SPAN style="COLOR: teal">FileMode</SPAN>.Open))</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">DataContractSerializer</SPAN> dcs = </PRE><PRE style="MARGIN: 0px">          <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">DataContractSerializer</SPAN>(<SPAN style="COLOR: blue">typeof</SPAN>(<SPAN style="COLOR: teal">List</SPAN>&lt;<SPAN style="COLOR: teal">Contact</SPAN>&gt;));</PRE><PRE style="MARGIN: 0px">&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">return</SPAN> (<SPAN style="COLOR: teal">List</SPAN>&lt;<SPAN style="COLOR: teal">Contact</SPAN>&gt;)dcs.ReadObject(fs);</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp; }</PRE><PRE style="MARGIN: 0px">}</PRE></DIV>
<P>Now when the first call to GetContacts comes in we will grab the client's 
callback from the OperationContext which we will make use of when the file 
changed event is fired. Below is our OnListChanged method:</P>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">private</SPAN> <SPAN style="COLOR: blue">void</SPAN> OnListChanged(<SPAN style="COLOR: blue">object</SPAN> sender, <SPAN style="COLOR: teal">FileSystemEventArgs</SPAN> e)</PRE><PRE style="MARGIN: 0px">{</PRE><PRE style="MARGIN: 0px">&nbsp; <SPAN style="COLOR: blue">if</SPAN> (_callbacks.Count &gt; 0)</PRE><PRE style="MARGIN: 0px">&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">List</SPAN>&lt;<SPAN style="COLOR: teal">Contact</SPAN>&gt; contacts = GetContactsFromFile();</PRE><PRE style="MARGIN: 0px">&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">Action</SPAN>&lt;<SPAN style="COLOR: teal">IListChangedCallback</SPAN>&gt; invoke =</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">delegate</SPAN>(<SPAN style="COLOR: teal">IListChangedCallback</SPAN> callback)</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</PRE><PRE style="MARGIN: 0px"> &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; callback.OnCallback(contacts.ToArray());</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; };</PRE><PRE style="MARGIN: 0px">&nbsp; &nbsp;&nbsp;&nbsp; _callbacks.ForEach(invoke);</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;}</PRE><PRE style="MARGIN: 0px">}</PRE></DIV>
<P>Of course, passing this entire list back anytime anything changes might not 
be the smartest move, but for this example it works. A real implementation would 
probably spend some time figuring out what changed and only send back the 
changes. Now that we've implemented everything on the server side the next step 
is to update the client. However, before we can do that we need to regenerate 
our proxy files. Start up the console application and the run the svcutil 
command shown above again. </P>
<P>The updated generated file will contain the new callback interface that we 
defined. The next step is to implement this interface in our ContactViewModel so 
that the service can call back to us. Below is the updated code with changes in 
bold:</P>
<DIV 
style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: courier new"><PRE style="MARGIN: 0px"><SPAN style="COLOR: blue">namespace</SPAN> ContactApp</PRE><PRE style="MARGIN: 0px">{</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">class</SPAN> <SPAN style="COLOR: teal">ContactViewModel</SPAN> : <SPAN style="COLOR: teal">IContactProviderCallback</SPAN>, <SPAN style="COLOR: teal">IDisposable</SPAN></PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">private</SPAN> <SPAN style="COLOR: teal">ContactProviderClient</SPAN> _proxy;</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">private</SPAN> <SPAN style="COLOR: teal">ContactDataModel</SPAN> _contacts;</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">private</SPAN> <SPAN style="COLOR: teal">Dispatcher</SPAN> _dispatcher;</PRE><PRE style="MARGIN: 0px">&nbsp;</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> ContactViewModel()</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _proxy = <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">ContactProviderClient</SPAN>(<STRONG><SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">InstanceContext</SPAN>(<SPAN style="COLOR: blue">this</SPAN>)</STRONG>);</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _dispatcher = <SPAN style="COLOR: teal">Dispatcher</SPAN>.CurrentDispatcher;</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _contacts = <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">ContactDataModel</SPAN>(_proxy.GetContacts());</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</PRE><PRE style="MARGIN: 0px">&nbsp;</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: teal">ContactDataModel</SPAN> Contacts</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">get</SPAN> { <SPAN style="COLOR: blue">return</SPAN> _contacts; }</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</PRE><PRE style="MARGIN: 0px">&nbsp;</PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">void</SPAN> OnCallback(<SPAN style="COLOR: teal">Contact</SPAN>[] contacts)</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _dispatcher.BeginInvoke(<SPAN style="COLOR: teal">DispatcherPriority</SPAN>.ApplicationIdle,</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">ThreadStart</SPAN>(<SPAN style="COLOR: blue">delegate</SPAN></STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _contacts.Clear();</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">foreach</SPAN> (<SPAN style="COLOR: teal">Contact</SPAN> contact <SPAN style="COLOR: blue">in</SPAN> contacts)</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _contacts.Add(contact);</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }));</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: teal">IAsyncResult</SPAN> BeginOnCallback(<SPAN style="COLOR: teal">Contact</SPAN>[] contacts, <SPAN style="COLOR: teal">AsyncCallback</SPAN> callback, <SPAN style="COLOR: blue">object</SPAN> asyncState)</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">throw</SPAN> <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">Exception</SPAN>(<SPAN style="COLOR: maroon">"The method or operation is not implemented."</SPAN>);</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">void</SPAN> EndOnCallback(<SPAN style="COLOR: teal">IAsyncResult</SPAN> result)</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">throw</SPAN> <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: teal">Exception</SPAN>(<SPAN style="COLOR: maroon">"The method or operation is not implemented."</SPAN>);</STRONG></PRE><PRE style="MARGIN: 0px"><STRONG>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</STRONG></PRE><PRE style="MARGIN: 0px">&nbsp;</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">void</SPAN> Dispose()</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _proxy.Close();</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</PRE><PRE style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; }</PRE><PRE style="MARGIN: 0px">}</PRE></DIV>
<P>When the contact list is updated the service will call the OnCallback method 
and pass us the new list of contacts. That is all there is to it. Now you get to 
see the magic. :)</P>
<P>Fire up the console app, wait for the "Ready" message, and then fire up the 
WPF application. Now make a change to the contacts.xml file and save your 
changes. Magic! The changes are reflected almost instantly. </P>
<P>So what's next? While storing contacts in a file might work in some 
situations, you're probably going to use a database in the real world. In part 3 
I will demonstrate how to apply the same magic using SQL Server 2005 and query 
notifications.</P>
<P><STRONG>Technorati Tags:</STRONG> <A 
href="http://technorati.com/tag/WPF">WPF</A> <A 
href="http://technorati.com/tag/WCF">WCF</A></P>
<DIV class=postfoot><SPAN class=em>Posted:</SPAN> Wednesday, September 20, 2006 
6:13 PM by <A id=ctl00___ctl00___ctl02___Entry___AuthorLink 
href="http://blogs.sqlxml.org/user/Profile.aspx?UserID=2104">bryantlikes</A> 
<DIV><SPAN id=ctl00___ctl00___ctl02___Entry___InlineTagEditorPanel>Filed under: 
<A href="http://blogs.sqlxml.org/bryantlikes/archive/tags/WCF/default.aspx" 
rel=tag>WCF</A>, <A 
href="http://blogs.sqlxml.org/bryantlikes/archive/tags/WPF/default.aspx" 
rel=tag>WPF</A></SPAN><INPUT 
id=ctl00___ctl00___ctl02___Entry___InlineTagEditorPanel_State type=hidden 
value=nochange 
name=ctl00$_$ctl00$_$ctl02$_$Entry$_$InlineTagEditorPanel></DIV></DIV></DIV>
<DIV id=comments>
<H2>Comments </H2>
<DIV class=CommentArea>
<H4 class=CommentTitle><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl00_NameLink title=TrackBack 
href="http://blogs.sqlxml.org/utility/Redirect.aspx?U=http%3a%2f%2fblogs.sqlxml.org%2fbryantlikes%2farchive%2f2006%2f09%2f21%2fEnabling-WPF-Magic-Using-WCF-_2D00_-Part-3.aspx" 
rel=nofollow>Bryant Likes's Blog</A> said: <IMG class=CommentArrow 
src="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/spacer.gif" 
align=absBottom> </H4>
<DIV class=CommentText>
<DIV class=CommentText2>
<DIV class=CommentText3>In Part 1 we created a simple WPF application that 
demonstrated WPF's ability to automatically update</DIV></DIV></DIV>
<DIV class=CommentFooter><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl00_PermaLink title=permalink 
href="http://blogs.sqlxml.org/bryantlikes/archive/2006/09/20/Enabling-WPF-Magic-Using-WCF-_2D00_-Part-2.aspx#8049">#</A> 
September 21, 2006 1:45 PM </DIV></DIV>
<DIV class=CommentArea>
<H4 class=CommentTitle><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl01_NameLink title=Rajesh 
href="http://blogs.sqlxml.org/utility/Redirect.aspx?U=http%3a%2f%2fwww.srinsofttech.com" 
rel=nofollow>Rajesh</A> said: <IMG class=CommentArrow 
src="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/spacer.gif" 
align=absBottom> </H4>
<DIV class=CommentText>
<DIV class=CommentText2>
<DIV class=CommentText3>
<P>Hi Bryant</P>
<P>A very interestting artcile.</P>
<P>I am new to WCF/WPF and this article did help me a lot.</P>
<P>I did manage to compile and test the code in the part 1 of the article.</P>
<P>But as part of the part 2, I am not able to get the IContactProviderCallback 
interface.</P>
<P>Is there anything specific that I have to do to get the 
IContactProviderCallback interface.</P>
<P>I am hosting the WCF on IIS and without the call back it is working just 
fine. I actually wanted to test the auto updation of UI on file change, but not 
able to do so as I am not getting the IContactProviderCallback in my proxy.</P>
<P>If you can give me your mail ID I can mail you my source code.</P>
<P>Pls do let me know</P></DIV></DIV></DIV>
<DIV class=CommentFooter><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl01_PermaLink title=permalink 
href="http://blogs.sqlxml.org/bryantlikes/archive/2006/09/20/Enabling-WPF-Magic-Using-WCF-_2D00_-Part-2.aspx#8148">#</A> 
September 23, 2006 6:15 PM </DIV></DIV>
<DIV class=CommentArea>
<H4 class=CommentTitle><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl02_NameLink title=TrackBack 
href="http://blogs.sqlxml.org/utility/Redirect.aspx?U=http%3a%2f%2fblogs.msdn.com%2fkarstenj%2farchive%2f2006%2f10%2f20%2fWPF_5F00_WCF_5F00_Vista_5F00_Gadgets_5F00_2.aspx" 
rel=nofollow>IRhetoric - Karsten Januszewski </A>said: <IMG class=CommentArrow 
src="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/spacer.gif" 
align=absBottom> </H4>
<DIV class=CommentText>
<DIV class=CommentText2>
<DIV class=CommentText3>
<P>Once I got WCF working in a gadget, another scenario came up: wouldn't it be 
nice if the gadget and the</P></DIV></DIV></DIV>
<DIV class=CommentFooter><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl02_PermaLink title=permalink 
href="http://blogs.sqlxml.org/bryantlikes/archive/2006/09/20/Enabling-WPF-Magic-Using-WCF-_2D00_-Part-2.aspx#10070">#</A> 
October 20, 2006 3:34 PM </DIV></DIV>
<DIV class=CommentArea>
<H4 class=CommentTitle><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl03_NameLink 
title="Tariq Sheikh">Tariq Sheikh</A> said: <IMG class=CommentArrow 
src="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/spacer.gif" 
align=absBottom> </H4>
<DIV class=CommentText>
<DIV class=CommentText2>
<DIV class=CommentText3>
<P>Your source is cut due to ur page margin can u fix that</P></DIV></DIV></DIV>
<DIV class=CommentFooter><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl03_PermaLink title=permalink 
href="http://blogs.sqlxml.org/bryantlikes/archive/2006/09/20/Enabling-WPF-Magic-Using-WCF-_2D00_-Part-2.aspx#33623">#</A> 
February 28, 2007 11:51 PM </DIV></DIV>
<DIV class=CommentArea>
<H4 class=CommentTitle><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl04_NameLink 
title=Seeker>Seeker</A> said: <IMG class=CommentArrow 
src="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/spacer.gif" 
align=absBottom> </H4>
<DIV class=CommentText>
<DIV class=CommentText2>
<DIV class=CommentText3>
<P>How to convert a generic List to ObservableCollection?</P></DIV></DIV></DIV>
<DIV class=CommentFooter><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl04_PermaLink title=permalink 
href="http://blogs.sqlxml.org/bryantlikes/archive/2006/09/20/Enabling-WPF-Magic-Using-WCF-_2D00_-Part-2.aspx#70491">#</A> 
May 17, 2007 2:22 PM </DIV></DIV>
<DIV class=CommentArea>
<H4 class=CommentTitle><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl05_NameLink 
title=ChrisF>ChrisF</A> said: <IMG class=CommentArrow 
src="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/spacer.gif" 
align=absBottom> </H4>
<DIV class=CommentText>
<DIV class=CommentText2>
<DIV class=CommentText3>
<P>Where do I have to add the default namespace so that the ContactDataModel.cs 
have access to the Contact class defined in Contact.g.cs?</P>
<P>&lt;ArrayOfContact 
xmlns="ContactService"&gt;...&lt;/ArrayOfContact&gt;</P></DIV></DIV></DIV>
<DIV class=CommentFooter><A 
id=ctl00___ctl00___ctl02___Comments___Comments_ctl05_PermaLink title=permalink 
href="http://blogs.sqlxml.org/bryantlikes/archive/2006/09/20/Enabling-WPF-Magic-Using-WCF-_2D00_-Part-2.aspx#118675">#</A> 
July 13, 2007 7:58 AM </DIV></DIV></DIV>
<FIELDSET id=commentform><LEGEND>Leave a Comment</LEGEND>
<P>
<DIV><LABEL for=ctl00___ctl00___ctl02___form___tbTitle>Title</LABEL> 
<EM>(required)</EM><SPAN 
id=ctl00___ctl00___ctl02___form___Requiredfieldvalidator1 
style="VISIBILITY: hidden; COLOR: red">*</SPAN></DIV>
<DIV><INPUT class=smallbox id=ctl00___ctl00___ctl02___form___tbTitle 
value="re: Enabling WPF Magic Using WCF - Part 2" 
name=ctl00$_$ctl00$_$ctl02$_$form$_$tbTitle></DIV>
<P></P>
<P>
<DIV id=ctl00___ctl00___ctl02___form___NameTitle><LABEL 
for=ctl00___ctl00___ctl02___form___tbName>Name</LABEL> <EM>(required)</EM><SPAN 
id=ctl00___ctl00___ctl02___form___Requiredfieldvalidator2 
style="VISIBILITY: hidden; COLOR: red">*</SPAN></DIV>
<DIV id=ctl00___ctl00___ctl02___form___NameDesc><INPUT class=smallbox 
id=ctl00___ctl00___ctl02___form___tbName 
name=ctl00$_$ctl00$_$ctl02$_$form$_$tbName></DIV>
<P></P>
<P>
<DIV><LABEL for=ctl00___ctl00___ctl02___form___tbUrl>Your URL</LABEL> 
<EM>(optional</EM>)</DIV>
<DIV><INPUT class=smallbox id=ctl00___ctl00___ctl02___form___tbUrl 
name=ctl00$_$ctl00$_$ctl02$_$form$_$tbUrl></DIV>
<P></P>
<P>
<DIV><LABEL for=ctl00___ctl00___ctl02___form___tbComment>Comments</LABEL> 
<EM>(required)</EM><SPAN 
id=ctl00___ctl00___ctl02___form___Requiredfieldvalidator3 
style="VISIBILITY: hidden; COLOR: red">*</SPAN></DIV>
<DIV><TEXTAREA id=ctl00___ctl00___ctl02___form___tbComment name=ctl00$_$ctl00$_$ctl02$_$form$_$tbComment rows=5 cols=25></TEXTAREA></DIV>
<P></P>
<P>
<DIV><INPUT id=ctl00___ctl00___ctl02___form___chkRemember type=checkbox 
name=ctl00$_$ctl00$_$ctl02$_$form$_$chkRemember><LABEL 
for=ctl00___ctl00___ctl02___form___chkRemember>Remember Me?</LABEL></DIV>
<P></P>
<P><INPUT id=ctl00___ctl00___ctl02___form___btnSubmit onclick='javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions("ctl00$_$ctl00$_$ctl02$_$form$_$btnSubmit", "", true, "", "", false, false))' type=submit value=Submit name=ctl00$_$ctl00$_$ctl02$_$form$_$btnSubmit> 
</P></FIELDSET> 
<FIELDSET id=postnotification><LEGEND>Comment Notification</LEGEND>
<P>If you would like to receive an email when updates are made to this post, 
please register <A id=ctl00___ctl00___ctl02___DetailedSubBar___RegisterLink 
href="http://blogs.sqlxml.org/user/CreateUser.aspx?ReturnUrl=/bryantlikes/archive/2006/09/20/Enabling-WPF-Magic-Using-WCF-_2D00_-Part-2.aspx">here</A> 
</P>
<P>Subscribe to this post's comments using <A 
id=ctl00___ctl00___ctl02___DetailedSubBar___CommentRssLink 
href="http://blogs.sqlxml.org/bryantlikes/commentrss.aspx?PostID=7982">RSS</A> 
</P></FIELDSET> </DIV>
<DIV id=footer><A href="http://communityserver.org/r.ashx?1" target=_blank><IMG 
alt="Powered by Community Server (Personal Edition), by Telligent Systems " 
src="Bryant Likes's Blog  Enabling WPF Magic Using WCF - Part 2_files/PoweredByCS_personal.gif" 
border=0></A> </DIV></DIV>
<SCRIPT type=text/javascript>
<!--
var Page_Validators =  new Array(document.getElementById("ctl00___ctl00___ctl02___form___Requiredfieldvalidator1"), document.getElementById("ctl00___ctl00___ctl02___form___Requiredfieldvalidator2"), document.getElementById("ctl00___ctl00___ctl02___form___Requiredfieldvalidator3"));
// -->
</SCRIPT>

<SCRIPT type=text/javascript>
<!--
var ctl00___ctl00___ctl02___form___Requiredfieldvalidator1 = document.all ? document.all["ctl00___ctl00___ctl02___form___Requiredfieldvalidator1"] : document.getElementById("ctl00___ctl00___ctl02___form___Requiredfieldvalidator1");
ctl00___ctl00___ctl02___form___Requiredfieldvalidator1.controltovalidate = "ctl00___ctl00___ctl02___form___tbTitle";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator1.errormessage = "*";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator1.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator1.initialvalue = "";
var ctl00___ctl00___ctl02___form___Requiredfieldvalidator2 = document.all ? document.all["ctl00___ctl00___ctl02___form___Requiredfieldvalidator2"] : document.getElementById("ctl00___ctl00___ctl02___form___Requiredfieldvalidator2");
ctl00___ctl00___ctl02___form___Requiredfieldvalidator2.controltovalidate = "ctl00___ctl00___ctl02___form___tbName";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator2.errormessage = "*";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator2.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator2.initialvalue = "";
var ctl00___ctl00___ctl02___form___Requiredfieldvalidator3 = document.all ? document.all["ctl00___ctl00___ctl02___form___Requiredfieldvalidator3"] : document.getElementById("ctl00___ctl00___ctl02___form___Requiredfieldvalidator3");
ctl00___ctl00___ctl02___form___Requiredfieldvalidator3.controltovalidate = "ctl00___ctl00___ctl02___form___tbComment";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator3.errormessage = "*";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator3.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00___ctl00___ctl02___form___Requiredfieldvalidator3.initialvalue = "";
// -->
</SCRIPT>

<SCRIPT language=javascript type=text/javascript>
<!--
function KeyDownHandlerctl00___ctl00___ws___SearchButton(event)
{
	if (event.keyCode == 13)
	{
		event.returnValue = false;
		event.cancel = true;
     __doPostBack('ctl00$_$ctl00$_$ws$_$SearchButton','')	}
}

//-->
</SCRIPT>
<!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
<rdf:Description
rdf:about="http://blogs.sqlxml.org/bryantlikes/archive/2006/09/20/Enabling-WPF-Magic-Using-WCF-_2D00_-Part-2.aspx"
dc:identifier="http://blogs.sqlxml.org/bryantlikes/archive/2006/09/20/Enabling-WPF-Magic-Using-WCF-_2D00_-Part-2.aspx"
dc:title="Enabling WPF Magic Using WCF - Part 2"
trackback:ping="http://blogs.sqlxml.org/bryantlikes/trackback.aspx?PostID=7982" />
</rdf:RDF>
-->
<SCRIPT type=text/javascript>
<!--
var Page_ValidationActive = false;
if (typeof(ValidatorOnLoad) == "function") {
    ValidatorOnLoad();
}

function ValidatorOnSubmit() {
    if (Page_ValidationActive) {
        return ValidatorCommonOnSubmit();
    }
    else {
        return true;
    }
}
// -->
</SCRIPT>
</FORM></BODY></HTML>

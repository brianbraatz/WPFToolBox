<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional-dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head id="ctl00_ctl00">
 

<meta name="description" content="Technology blog about new Microsoft technologies. E.g. WPF, crossbow, .NET framework 3, Live etc. It includes code sources and samples">
<meta name="keywords" content=".NET Framework, Example, Internals, Microsoft, Programming, Source Code, technology, tutorial, wpf.">
<meta name="GENERATOR" content="CommunityServer 2007 SP2 (Build: 20611.960)">
<link rel="pingback" href="http://blogs.microsoft.co.il/blogs/tamir/pingback.aspx">
<link rel="shortcut icon" type="image/ico" href="http://blogs.microsoft.co.il/favicon.ico">
<link rel="alternate" type="application/rss+xml" title="Just code - Tamir Khason (RSS 2.0)" href="http://feeds.feedburner.com/microsft">
<link rel="alternate" type="application/rss+xml" title="Just code - Tamir Khason - All Comments (RSS 2.0)" href="http://blogs.microsoft.co.il/blogs/tamir/rsscomments.aspx">
<link rel="alternate" type="application/rss+xml" title="Generic Grid with column autodetection - Comments for this post (RSS 2.0)" href="http://blogs.microsoft.co.il/blogs/tamir/rsscomments.aspx?PostID=12022">

	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<link rel="stylesheet" href="Generic-Grid-with-column-autodetection.aspx_files/style.css" type="text/css" media="screen">
	<link rel="stylesheet" href="Generic-Grid-with-column-autodetection.aspx_files/print.htm" type="text/css" media="print">
	<link rel="stylesheet" href="Generic-Grid-with-column-autodetection.aspx_files/light_sidebar_left_wide.css" type="text/css" media="screen">
	<link rel="stylesheet" href="Generic-Grid-with-column-autodetection.aspx_files/DynamicStyle.css" type="text/css" media="screen">
<script src="Generic-Grid-with-column-autodetection.aspx_files/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-486526-1";
urchinTracker();
</script><title>Generic Grid with column autodetection - Just code - Tamir Khason</title></head><body>
    <form name="aspnetForm" method="post" action="/blogs/tamir/archive/2007/04/16/Generic-Grid-with-column-autodetection.aspx" onsubmit="javascript:return WebForm_OnSubmit();" id="aspnetForm">
<div>
<input name="__EVENTTARGET" id="__EVENTTARGET" value="" type="hidden">
<input name="__EVENTARGUMENT" id="__EVENTARGUMENT" value="" type="hidden">
<input name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwULLTIwMjk4NDE1MzdkGAEFHl9fQ29udHJvbHNSZXF1aXJlUG9zdEJhY2tLZXlfXxYBBS5jdGwwMCRNYWluJGN0bDA4JGN0bDAyJGN0bDAyJGN0bDAyJGNoa1JlbWVtYmVyNnOa7G3ox0C7N39AE+DRj1GRFAw=" type="hidden">
</div>

<script type="text/javascript">
<!--
var theForm = document.forms['aspnetForm'];
if (!theForm) {
    theForm = document.aspnetForm;
}
function __doPostBack(eventTarget, eventArgument) {
    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {
        theForm.__EVENTTARGET.value = eventTarget;
        theForm.__EVENTARGUMENT.value = eventArgument;
        theForm.submit();
    }
}
// -->
</script>


<script src="Generic-Grid-with-column-autodetection.aspx_files/WebResource.js" type="text/javascript"></script>


<script src="Generic-Grid-with-column-autodetection.aspx_files/WebResource_002.axd" type="text/javascript"></script>
<script src="Generic-Grid-with-column-autodetection.aspx_files/WebResource_004.axd" type="text/javascript"></script>
<script src="Generic-Grid-with-column-autodetection.aspx_files/WebResource_005.axd" type="text/javascript"></script>
<script src="Generic-Grid-with-column-autodetection.aspx_files/WebResource_003.axd" type="text/javascript"></script>
<script src="Generic-Grid-with-column-autodetection.aspx_files/WebResource.axd" type="text/javascript"></script>
        
<script type="text/javascript">
<!--   
    function ValidateCaptcha(val, args) {
      
        var value = args.Value;
        var nameEQ = "CAPTCHA=";
        var captchaNumbers;        	
        var ca = document.cookie.split(';');
        
        for(var i=0;i < ca.length;i++) {
    	    var c = ca[i];
    	    while (c.charAt(0)==' ') c = c.substring(1,c.length);
    	    if (c.indexOf(nameEQ) == 0) captchaNumbers =  c.substring(nameEQ.length,c.length);
	    }

        args.IsValid = captchaNumbers == value;

    }
-->
</script>

<script src="Generic-Grid-with-column-autodetection.aspx_files/WebResource_002.js" type="text/javascript"></script>
<script type="text/javascript">
<!--
function WebForm_OnSubmit() {
if (typeof(ValidatorOnSubmit) == "function" && ValidatorOnSubmit() == false) return false;
return true;
}
// -->
</script>


    			

    <div id="masthead">
        <div id="welcome" align="right">
            
        <a href="http://blogs.microsoft.co.il/login.aspx?ReturnUrl=%2fblogs%2ftamir%2farchive%2f2007%2f04%2f16%2fGeneric-Grid-with-column-autodetection.aspx">Sign in </a>
         | <a href="http://blogs.microsoft.co.il/user/CreateUser.aspx?ReturnUrl=">Join</a>
        | <a href="http://communityserver.org/r.ashx?K">Help</a>
     


        </div>
    </div>
    <div id="wrapper">
	        <div id="container">
		        <div id="header">
		            <div id="title">	                    
                        <h1 class="headermaintitle"><a href="http://blogs.microsoft.co.il/blogs/tamir/">Just code - Tamir Khason</a></h1>      
                        <p id="tagline">Take care of the sense, and the sounds will take care of themselves.</p>
                    </div>
                    <div id="SubscriptionsSideBar">
                        <div id="subscriptions"> 
                            <ul>
                                <li><a href="http://feeds.feedburner.com/microsft">RSS</a></li>
	                            <li><a href="http://feeds.feedburner.com/microsft">Atom</a></li>
						        <li id="RssComments"><a href="http://blogs.microsoft.co.il/blogs/tamir/rsscomments.aspx">Comments RSS</a></li>
                            </ul>
                        </div>
                    </div>
                    <div id="nav">                    
                        <ul>
                            <li><a href="http://blogs.microsoft.co.il/blogs/tamir/">Home</a></li>
                            <li><a href="http://blogs.microsoft.co.il/blogs/tamir/contact.aspx">Contact</a></li>
                            
                            
                        </ul>
                    </div>
                </div>
                
                    <div id="contentwrapper">
		                <div id="sidebar-a">              
                            <div id="TasksSideBar">                                
                                
                                
                            </div>
                            
                            <div id="SearchSideBar">    
                                <div id="Search">
	                                        <h3>Search</h3>
                                            <ul>
                                                <li>
                                                    <input name="ctl00$SideBar$ctl01$ctl00$SearchBox" id="ctl00_SideBar_ctl01_ctl00_SearchBox" class="searchBox" button="SearchButton" onclick="if(this.defaultValue==this.value) this.value='';" onblur="if(this.value=='') this.value=this.defaultValue;" type="text">
                                                    <a id="ctl00_SideBar_ctl01_ctl00_SearchButton" class="SearchButton" href="javascript:__doPostBack('ctl00$SideBar$ctl01$ctl00$SearchButton','')">Go</a>
                                                </li>
                                            </ul>
                                    </div>
                            </div>  
                                
                                <div id="TagSideBar">
                                        <h3>Tags</h3>
                                    <ul class="SidebarTagCloud">
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Accessibility/default.aspx" rel="tag">Accessibility</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/blogging+general/default.aspx" rel="tag">blogging general</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Blogging+rules/default.aspx" rel="tag">Blogging rules</a></li>
<li class="Tag3"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/blogging+tools/default.aspx" rel="tag">blogging tools</a></li>
<li class="Tag2"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/C_2300_/default.aspx" rel="tag">C#</a></li>
<li class="Tag5"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/demos/default.aspx" rel="tag">demos</a></li>
<li class="Tag2"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/download/default.aspx" rel="tag">download</a></li>
<li class="Tag5"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/events/default.aspx" rel="tag">events</a></li>
<li class="Tag4"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/fun/default.aspx" rel="tag">fun</a></li>
<li class="Tag4"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/help/default.aspx" rel="tag">help</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/jobs/default.aspx" rel="tag">jobs</a></li>
<li class="Tag4"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Mobile/default.aspx" rel="tag">Mobile</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Performance/default.aspx" rel="tag">Performance</a></li>
<li class="Tag1"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/promo/default.aspx" rel="tag">promo</a></li>
<li class="Tag3"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Silverlight/default.aspx" rel="tag">Silverlight</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/SkyDrive/default.aspx" rel="tag">SkyDrive</a></li>
<li class="Tag1"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/soft/default.aspx" rel="tag">soft</a></li>
<li class="Tag1"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/source/default.aspx" rel="tag">source</a></li>
<li class="Tag2"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/thoughts/default.aspx" rel="tag">thoughts</a></li>
<li class="Tag1"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Tips+and+Tricks/default.aspx" rel="tag">Tips and Tricks</a></li>
<li class="Tag2"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/tools/default.aspx" rel="tag">tools</a></li>
<li class="Tag1"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/tutorial/default.aspx" rel="tag">tutorial</a></li>
<li class="Tag2"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Vista/default.aspx" rel="tag">Vista</a></li>
<li class="Tag3"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Vista+Battery+Saver/default.aspx" rel="tag">Vista Battery Saver</a></li>
<li class="Tag3"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Visual+Studio/default.aspx" rel="tag">Visual Studio</a></li>
<li class="Tag5"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/VSTS/default.aspx" rel="tag">VSTS</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/WCF/default.aspx" rel="tag">WCF</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Web/default.aspx" rel="tag">Web</a></li>
<li class="Tag5"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Windows+Gadgets/default.aspx" rel="tag">Windows Gadgets</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Windows+Live/default.aspx" rel="tag">Windows Live</a></li>
<li class="Tag6"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Windows+Live+Writer/default.aspx" rel="tag">Windows Live Writer</a></li>
<li class="Tag1"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/WPF/default.aspx" rel="tag">WPF</a></li>
<li class="Tag5"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/WPF+crossbow/default.aspx" rel="tag">WPF crossbow</a></li>
<li class="Tag5"><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/WPF_2F00_E/default.aspx" rel="tag">WPF/E</a></li>
</ul>
</div>
                              
                                
                                <div id="NewsSidebar">
                                        <h3>News</h3>
                                        <ul>
                                    <a href="http://www.linkedin.com/in/tamirk"><img src="Generic-Grid-with-column-autodetection.aspx_files/btn_profile_bluetxt_80x15.gif" alt="View Tamir Khason's profile on LinkedIn" border="0" height="15" width="80"></a>


                                        </ul>
                                    </div>                
                                                
                                
                                <div id="NavSideBar"><h3>Navigation</h3>
<ul>
<li><a href="http://blogs.microsoft.co.il/">Home</a></li><li><a href="http://blogs.microsoft.co.il/blogs/">Blogs</a></li><li><a href="http://blogs.microsoft.co.il/blogs/MainFeed.aspx">RSS</a></li>
</ul></div>
                                
                                
                                
                                
                                <div id="ArchiveSideBar"><h3>Archives</h3>
<ul>
<li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/10.aspx">October 2007 (15)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/09.aspx">September 2007 (14)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/08.aspx">August 2007 (21)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/07.aspx">July 2007 (32)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/06.aspx">June 2007 (10)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/05.aspx">May 2007 (22)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/04.aspx">April 2007 (21)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/03.aspx">March 2007 (20)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/02.aspx">February 2007 (9)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/01.aspx">January 2007 (10)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2006/12.aspx">December 2006 (11)</a></li><li><a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2006/11.aspx">November 2006 (4)</a></li>
</ul></div> 
                                
                                
                                
	                    
                    </div>
                    <div id="content"><div id="content2">
	                    
    <div class="post">
        <div class="posthead">
            Monday, April 16, 2007 11:42 AM
            <a href="http://blogs.microsoft.co.il/members/tamir.aspx">Tamir Khason</a>
            
            <h2>
                Generic Grid with column autodetection
                <span class="CommonRateControlReadOnly" id="ctl00_Main_ctl04" title="Rated Excellent [5 out of 5]."><img src="Generic-Grid-with-column-autodetection.aspx_files/star-left-on.gif" align="absmiddle" border="0"><img src="Generic-Grid-with-column-autodetection.aspx_files/star-right-on.gif" align="absmiddle" border="0"><img src="Generic-Grid-with-column-autodetection.aspx_files/star-left-on.gif" align="absmiddle" border="0"><img src="Generic-Grid-with-column-autodetection.aspx_files/star-right-on.gif" align="absmiddle" border="0"><img src="Generic-Grid-with-column-autodetection.aspx_files/star-left-on.gif" align="absmiddle" border="0"><img src="Generic-Grid-with-column-autodetection.aspx_files/star-right-on.gif" align="absmiddle" border="0"><img src="Generic-Grid-with-column-autodetection.aspx_files/star-left-on.gif" align="absmiddle" border="0"><img src="Generic-Grid-with-column-autodetection.aspx_files/star-right-on.gif" align="absmiddle" border="0"><img src="Generic-Grid-with-column-autodetection.aspx_files/star-left-on.gif" align="absmiddle" border="0"><img src="Generic-Grid-with-column-autodetection.aspx_files/star-right-on.gif" align="absmiddle" border="0"></span><input value="5" id="ctl00_Main_ctl04_Value" type="hidden">
            </h2>
        </div>        
            <p>There
are a lot of questions such as "how can I generate columns in my grid,
based on my XML data?", how to implement generic sort algorithm?" etc.
In this post I'll try to explain how to use ListView with GridView, how
to sort your data presentation, without sorting data source and lost
binding. How to parse generic Excel or CSV data and put it into
grid.&nbsp;</p>
<p><img style="border: 0px none ;" src="Generic-Grid-with-column-autodetection.aspx_files/image2.png" border="0" height="307" width="514"> </p>
<p>So, first thing, you should do is to create generic ListView with
Grid as view. We'll put it into UserControl in order us to be able to
use it externally. This part is really simple.</p>
<p>&nbsp;</p>
<blockquote>
<div style="background: white none repeat scroll 0%; font-size: 12pt; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; color: black; font-family: consolas;"><pre style="margin: 0px;"><span style="color: blue;">&lt;</span><span style="color: rgb(163, 21, 21);">ListView</span><span style="color: blue;"> </span><span style="color: red;">Name</span><span style="color: blue;">=</span>"<span style="color: blue;">myListView</span>"<span style="color: blue;"> </span><span style="color: blue;">&gt;</span></pre><pre style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &nbsp; &lt;</span><span style="color: rgb(163, 21, 21);">ListView.View</span><span style="color: blue;">&gt;</span></pre><pre style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;</span><span style="color: rgb(163, 21, 21);">GridView</span><span style="color: blue;"> </span><span style="color: red;">x:Name</span><span style="color: blue;">=</span>"<span style="color: blue;">myGridView</span>"<span style="color: blue;">/&gt;</span></pre><pre style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &nbsp; &nbsp; &lt;/</span><span style="color: rgb(163, 21, 21);">ListView.View</span><span style="color: blue;">&gt;</span></pre><pre style="margin: 0px;"><span style="color: blue;">&lt;/</span><span style="color: rgb(163, 21, 21);">ListView</span><span style="color: blue;">&gt;</span></pre></div></blockquote>
<p>Now, we'll create dependency property for our data source. We'll
have to handle the assignment of data source in order to great columns
dynamically within the GridView</p>
<p>&nbsp;</p>
<blockquote>
<div style="background: white none repeat scroll 0%; font-size: 12pt; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; color: black; font-family: consolas;"><pre style="margin: 0px;"><span style="color: blue;">public</span> <span style="color: blue;">static</span> <span style="color: blue;">readonly</span> <span style="color: rgb(43, 145, 175);">DependencyProperty</span> ItemsSourceProperty = <span style="color: rgb(43, 145, 175);">DependencyProperty</span>.Register(<span style="color: rgb(163, 21, 21);">"ItemsSource"</span>, <span style="color: blue;">typeof</span>(<span style="color: rgb(43, 145, 175);">IEnumerable</span>), <span style="color: blue;">typeof</span>(<span style="color: rgb(43, 145, 175);">MyGrid</span>),</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">PropertyMetadata</span>(<span style="color: blue;">null</span>, <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">PropertyChangedCallback</span>(OnItemsSourceChanged)));</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">static</span> <span style="color: blue;">void</span> OnItemsSourceChanged(<span style="color: rgb(43, 145, 175);">DependencyObject</span> d, <span style="color: rgb(43, 145, 175);">DependencyPropertyChangedEventArgs</span> e)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (e.NewValue == <span style="color: blue;">null</span>)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span>;</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(43, 145, 175);">MyGrid</span> grid = d <span style="color: blue;">as</span> <span style="color: rgb(43, 145, 175);">MyGrid</span>;</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; grid.myListView.SetValue(<span style="color: rgb(43, 145, 175);">ItemsControl</span>.ItemsSourceProperty, e.NewValue);</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(43, 145, 175);">ReadOnlyObservableCollection</span>&lt;<span style="color: rgb(43, 145, 175);">XmlNode</span>&gt; col = e.NewValue <span style="color: blue;">as</span> <span style="color: rgb(43, 145, 175);">ReadOnlyObservableCollection</span>&lt;<span style="color: rgb(43, 145, 175);">XmlNode</span>&gt;;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (col != <span style="color: blue;">null</span>)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; grid.myGridView.Columns.Clear();</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (col.Count &gt; 0)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">foreach</span> (<span style="color: rgb(43, 145, 175);">XmlNode</span> node <span style="color: blue;">in</span> col[0].ChildNodes)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; bindGridViewColumn(node, grid.myGridView);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">foreach</span> (<span style="color: rgb(43, 145, 175);">XmlAttribute</span> attr <span style="color: blue;">in</span> col[0].Attributes)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; bindGridViewColumn(attr, grid.myGridView);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">else</span></pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">throw</span> <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">NotSupportedException</span>(<span style="color: rgb(163, 21, 21);">"No description row found in data provided. You should have at least one row to populate control columns"</span>);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">else</span></pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">throw</span> <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">NotImplementedException</span>(<span style="color: rgb(163, 21, 21);">"This patch is working only for XmlSource by now"</span>);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre></div></blockquote>
<p>So, what are we doing here? First of all, if we have null
or&nbsp;unsupported data&nbsp;as datasource we'll do nothing. Then, if
the data is valid, we'll clear all old columns and create new set,
based on data passed. We'll look into all child nodes of DocumentRoot
in order to build markup. The next step is to bind each column data of
our data source to the column and then bind all data to datasource of
the grid. We'll do it either for elements and attributes of our XML.
Here is comes</p>
<p>&nbsp;</p>
<blockquote>
<div style="background: white none repeat scroll 0%; font-size: 12pt; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; color: black; font-family: consolas;"><pre style="margin: 0px;"><span style="color: blue;">static</span> <span style="color: blue;">internal</span> <span style="color: blue;">void</span> bindGridViewColumn(<span style="color: rgb(43, 145, 175);">XmlNode</span> node, <span style="color: rgb(43, 145, 175);">GridView</span> view)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; bindGridViewColumn(node.Name, view);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;"><span style="color: blue;">static</span> <span style="color: blue;">internal</span> <span style="color: blue;">void</span> bindGridViewColumn(<span style="color: rgb(43, 145, 175);">XmlAttribute</span> attr, <span style="color: rgb(43, 145, 175);">GridView</span> view)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; bindGridViewColumn(<span style="color: rgb(163, 21, 21);">"@"</span>+attr.Name, view);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;"><span style="color: blue;">static</span> <span style="color: blue;">void</span> bindGridViewColumn(<span style="color: blue;">string</span> XPath, <span style="color: rgb(43, 145, 175);">GridView</span> view)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(43, 145, 175);">GridViewColumn</span> gvc = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">GridViewColumn</span>();</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; gvc.Header = XPath[0]==<span style="color: rgb(163, 21, 21);">'@'</span>?XPath.Substring(1):XPath;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(43, 145, 175);">Binding</span> b = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">Binding</span>();</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; b.XPath = XPath;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; gvc.DisplayMemberBinding = b;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; view.Columns.Add(gvc);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre></div></blockquote>
<p>Simple setter and getter for DP and we done.</p>
<p>&nbsp;</p>
<blockquote>
<div style="background: white none repeat scroll 0%; font-size: 12pt; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; color: black; font-family: consolas;"><pre style="margin: 0px;"><span style="color: blue;">public</span> <span style="color: rgb(43, 145, 175);">IEnumerable</span> ItemsSource</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">get</span></pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; GetValue(ItemsSourceProperty);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> (<span style="color: rgb(43, 145, 175);">IEnumerable</span>)myGridView.GetValue(<span style="color: rgb(43, 145, 175);">ItemsControl</span>.ItemsSourceProperty);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">set</span></pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; SetValue(ItemsSourceProperty, <span style="color: blue;">value</span>);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; myGridView.SetValue(<span style="color: rgb(43, 145, 175);">ItemsControl</span>.ItemsSourceProperty, <span style="color: blue;">value</span>);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre></div></blockquote>
<p>Now, let's take care on data sorting. We'll handle click on grig
view column header as trigger for sort so,
GridViewColumnHeader.Click="onSort". Now, let's handle it. The code is
rather straight forward, so I'll now going to explain it</p>
<p>&nbsp;</p>
<blockquote>
<div style="background: white none repeat scroll 0%; font-size: 12pt; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; color: black; font-family: consolas;"><pre style="margin: 0px;"><span style="color: rgb(43, 145, 175);">GridViewColumnHeader</span> m_lastHeaderClicked = <span style="color: blue;">null</span>;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(43, 145, 175);">ListSortDirection</span> m_lastDirection = <span style="color: rgb(43, 145, 175);">ListSortDirection</span>.Ascending;</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">void</span> onSort(<span style="color: blue;">object</span> sender, <span style="color: rgb(43, 145, 175);">RoutedEventArgs</span> e)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(43, 145, 175);">GridViewColumnHeader</span> headerClicked = e.OriginalSource <span style="color: blue;">as</span> <span style="color: rgb(43, 145, 175);">GridViewColumnHeader</span>;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(43, 145, 175);">ListSortDirection</span> direction;</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (headerClicked != <span style="color: blue;">null</span>)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (headerClicked.Role != <span style="color: rgb(43, 145, 175);">GridViewColumnHeaderRole</span>.Padding)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (headerClicked != m_lastHeaderClicked)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; direction = <span style="color: rgb(43, 145, 175);">ListSortDirection</span>.Ascending;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">else</span></pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (m_lastDirection == <span style="color: rgb(43, 145, 175);">ListSortDirection</span>.Ascending)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; direction = <span style="color: rgb(43, 145, 175);">ListSortDirection</span>.Descending;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">else</span></pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; direction = <span style="color: rgb(43, 145, 175);">ListSortDirection</span>.Ascending;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">string</span> header = headerClicked.Column.Header <span style="color: blue;">as</span> <span style="color: blue;">string</span>;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Sort(header, direction);</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (direction == <span style="color: rgb(43, 145, 175);">ListSortDirection</span>.Ascending)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; headerClicked.Column.HeaderTemplate =</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; Resources[<span style="color: rgb(163, 21, 21);">"HeaderTemplateArrowUp"</span>] <span style="color: blue;">as</span> <span style="color: rgb(43, 145, 175);">DataTemplate</span>;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">else</span></pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; headerClicked.Column.HeaderTemplate =</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; Resources[<span style="color: rgb(163, 21, 21);">"HeaderTemplateArrowDown"</span>] <span style="color: blue;">as</span> <span style="color: rgb(43, 145, 175);">DataTemplate</span>;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; m_lastHeaderClicked = headerClicked;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; m_lastDirection = direction;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;"><span style="color: blue;">void</span> Sort(<span style="color: blue;">string</span> sortBy, <span style="color: rgb(43, 145, 175);">ListSortDirection</span> direction)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(43, 145, 175);">ICollectionView</span> dataView = <span style="color: rgb(43, 145, 175);">CollectionViewSource</span>.GetDefaultView(myListView.ItemsSource);</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; dataView.SortDescriptions.Clear();</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(43, 145, 175);">SortDescription</span> sd = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">SortDescription</span>(sortBy, direction);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; dataView.SortDescriptions.Add(sd);</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; dataView.Refresh();</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre></div></blockquote>
<p>That's it, we done. The next step is to create control to handle
drag and drop of Excel data and convert it into XML data source for our
smart grid view. We'll inherit from Canvas control and implement
INotifyPropertyChanged in order to notify about changes in datasource
and providing an ability to bind data between controls. So, first of
all, let's create a couple of DPs to provide interface for dropped
object and dropped data.</p>
<p>&nbsp;</p>
<blockquote>
<div style="background: white none repeat scroll 0%; font-size: 12pt; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; color: black; font-family: consolas;"><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;"></span></pre>
<div style="background: white none repeat scroll 0%; font-size: 12pt; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; color: black; font-family: consolas;"><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">class</span> <span style="color: rgb(43, 145, 175);">ExcelDataReader</span>:<span style="color: rgb(43, 145, 175);">Canvas</span>,<span style="color: rgb(43, 145, 175);">INotifyPropertyChanged</span></pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> ExcelDataReader():<span style="color: blue;">base</span>()</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">this</span>.AllowDrop = <span style="color: blue;">true</span>;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </pre><pre style="margin: 0px;"><span style="color: blue;">public</span> <span style="color: blue;">static</span> <span style="color: rgb(43, 145, 175);">DependencyPropertyKey</span> DroppedObjectPropertyKey = </pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(43, 145, 175);">DependencyProperty</span>.RegisterReadOnly(<span style="color: rgb(163, 21, 21);">"DroppedObject"</span>, </pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">typeof</span>(<span style="color: rgb(43, 145, 175);">ReadOnlyObservableCollection</span>&lt;<span style="color: rgb(43, 145, 175);">XmlNode</span>&gt;), </pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">typeof</span>(<span style="color: rgb(43, 145, 175);">ExcelDataReader</span>),</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">PropertyMetadata</span>(<span style="color: blue;">null</span>));</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">static</span> <span style="color: blue;">readonly</span> <span style="color: rgb(43, 145, 175);">DependencyProperty</span> DroppedObjectProperty = DroppedObjectPropertyKey.DependencyProperty;</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: rgb(43, 145, 175);">ReadOnlyObservableCollection</span>&lt;<span style="color: rgb(43, 145, 175);">XmlNode</span>&gt; DroppedObject</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">get</span> { <span style="color: blue;">return</span> (<span style="color: rgb(43, 145, 175);">ReadOnlyObservableCollection</span>&lt;<span style="color: rgb(43, 145, 175);">XmlNode</span>&gt;)GetValue(DroppedObjectProperty); }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </pre><pre style="margin: 0px;"><span style="color: blue;">public</span> <span style="color: blue;">static</span> <span style="color: rgb(43, 145, 175);">DependencyPropertyKey</span> DroppedDocumentPropertyKey =</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: rgb(43, 145, 175);">DependencyProperty</span>.RegisterReadOnly(<span style="color: rgb(163, 21, 21);">"DroppedDocument"</span>,</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">typeof</span>(<span style="color: rgb(43, 145, 175);">XmlDocument</span>),</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">typeof</span>(<span style="color: rgb(43, 145, 175);">ExcelDataReader</span>),</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">PropertyMetadata</span>(<span style="color: blue;">null</span>));</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">static</span> <span style="color: blue;">readonly</span> <span style="color: rgb(43, 145, 175);">DependencyProperty</span> DroppedDocumentProperty = DroppedDocumentPropertyKey.DependencyProperty;</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: rgb(43, 145, 175);">XmlDocument</span> DroppedDocument</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">get</span> { <span style="color: blue;">return</span> (<span style="color: rgb(43, 145, 175);">XmlDocument</span>)GetValue(DroppedDocumentProperty); }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre></div><pre style="margin: 0px;"></pre></div></blockquote>
<p>The next step is to handle preview of drop event. Why preview? In
order to leave future developers to add custom logic to drop event of
this control</p>
<p>&nbsp;</p>
<blockquote>
<div style="background: white none repeat scroll 0%; font-size: 12pt; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; color: black; font-family: consolas;"><pre style="margin: 0px;"><span style="color: blue;">protected</span> <span style="color: blue;">override</span> <span style="color: blue;">void</span> OnPreviewDrop(System.Windows.<span style="color: rgb(43, 145, 175);">DragEventArgs</span> e)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {&nbsp; </pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (e.Data.GetDataPresent(<span style="color: rgb(43, 145, 175);">DataFormats</span>.CommaSeparatedValue))</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(43, 145, 175);">List</span>&lt;<span style="color: blue;">string</span>&gt; strs = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">List</span>&lt;<span style="color: blue;">string</span>&gt;();</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">using</span> (<span style="color: rgb(43, 145, 175);">StreamReader</span> sr = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">StreamReader</span>((<span style="color: rgb(43, 145, 175);">Stream</span>)e.Data.GetData(<span style="color: rgb(43, 145, 175);">DataFormats</span>.CommaSeparatedValue)))</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">while</span> (sr.Peek() &gt; 0)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; strs.Add(sr.ReadLine());</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; SetDroppedObject(strs);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">base</span>.OnDrop(e);</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">else</span></pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; e.Effects = <span style="color: rgb(43, 145, 175);">DragDropEffects</span>.None;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; <span style="color: blue;">base</span>.OnPreviewDrop(e);</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre></div></blockquote>
<p>Now the logic. Once I got something I can handle dropped, I'll
convert it into well known&nbsp;XML representation in order to be able
to provide it as data source for our previous control.</p>
<p>&nbsp;</p>
<blockquote>
<div style="background: white none repeat scroll 0%; font-size: 12pt; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; color: black; font-family: consolas;"><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> <span style="color: blue;">void</span> SetDroppedObject( <span style="color: rgb(43, 145, 175);">List</span>&lt;<span style="color: blue;">string</span>&gt; data)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(43, 145, 175);">ObservableCollection</span>&lt;<span style="color: rgb(43, 145, 175);">XmlNode</span>&gt; nodes = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">ObservableCollection</span>&lt;<span style="color: rgb(43, 145, 175);">XmlNode</span>&gt;();</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(43, 145, 175);">XmlDocument</span> doc = <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">XmlDocument</span>();</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; doc.LoadXml(<span style="color: rgb(163, 21, 21);">"&lt;root&gt;&lt;/root&gt;"</span>);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">bool</span> fData = <span style="color: rgb(43, 145, 175);">MessageBox</span>.Show(<span style="color: rgb(163, 21, 21);">"Treat first row as title?"</span>, <span style="color: rgb(163, 21, 21);">"Data dropped"</span>, <span style="color: rgb(43, 145, 175);">MessageBoxButton</span>.YesNo, <span style="color: rgb(43, 145, 175);">MessageBoxImage</span>.Question) == <span style="color: rgb(43, 145, 175);">MessageBoxResult</span>.Yes;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (fData &amp;&amp; data.Count &lt; 1)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">throw</span> <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">NotSupportedException</span>(<span style="color: rgb(163, 21, 21);">"No description row found in data provided. You should have at least one row to populate control columns"</span>);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">int</span> startRow = fData ? 1 : 0;</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">string</span>[] titles = data[0].Split(<span style="color: rgb(163, 21, 21);">','</span>);</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">for</span> (<span style="color: blue;">int</span> i = startRow; i &lt; data.Count; i++)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(43, 145, 175);">XmlElement</span> elem = doc.CreateElement(<span style="color: rgb(163, 21, 21);">"node"</span>);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">string</span>[] items = data[i].Split(<span style="color: rgb(163, 21, 21);">','</span>);</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">for</span> (<span style="color: blue;">int</span> j = 0; j &lt; items.Length; j++)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">string</span> title = fData ? titles[j].Trim() : <span style="color: rgb(163, 21, 21);">"data"</span> + j.ToString();</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(43, 145, 175);">XmlElement</span> el = doc.CreateElement(title);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: rgb(43, 145, 175);">XmlText</span> txt = doc.CreateTextNode(items[j]);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; el.AppendChild(txt);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; elem.AppendChild(el);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; doc.DocumentElement.AppendChild(elem);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; nodes.Add(elem);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">this</span>.SetValue(DroppedDocumentPropertyKey, doc);</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">this</span>.SetValue(DroppedObjectPropertyKey, <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">ReadOnlyObservableCollection</span>&lt;<span style="color: rgb(43, 145, 175);">XmlNode</span>&gt;(nodes));</pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">if</span> (PropertyChanged != <span style="color: blue;">null</span>)</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; { </pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; PropertyChanged(<span style="color: blue;">this</span>,<span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">PropertyChangedEventArgs</span>(<span style="color: rgb(163, 21, 21);">"DroppedDocument"</span>));</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; PropertyChanged(<span style="color: blue;">this</span>, <span style="color: blue;">new</span> <span style="color: rgb(43, 145, 175);">PropertyChangedEventArgs</span>(<span style="color: rgb(163, 21, 21);">"DroppedObject"</span>));</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre><pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre></div></blockquote>
<p>Implement INotifyPropertyChanged interface, a little logic to
prevent dropping unsupported data and we done. Now, in my application I
can do the following</p>
<p>&nbsp;</p>
<blockquote>
<div style="background: white none repeat scroll 0%; font-size: 12pt; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; color: black; font-family: consolas;"><pre style="margin: 0px;"><span style="color: blue;">&lt;</span><span style="color: rgb(163, 21, 21);">Window.Resources</span><span style="color: blue;">&gt;</span></pre><pre style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &lt;</span><span style="color: rgb(163, 21, 21);">XmlDataProvider</span><span style="color: blue;"> </span><span style="color: red;">x:Key</span><span style="color: blue;">=</span>"<span style="color: blue;">Test</span>"<span style="color: blue;"> </span><span style="color: red;">Source</span><span style="color: blue;">=</span>"<span style="color: blue;">XMLFile1.xml</span>"<span style="color: blue;"> </span><span style="color: red;">XPath</span><span style="color: blue;">=</span>"<span style="color: blue;">/root/node</span>"<span style="color: blue;">/&gt;</span></pre><pre style="margin: 0px;">&nbsp;</pre><pre style="margin: 0px;"><span style="color: blue;">&nbsp;&lt;/</span><span style="color: rgb(163, 21, 21);">Window.Resources</span><span style="color: blue;">&gt;</span></pre><pre style="margin: 0px;"><span style="color: blue;">&nbsp; &lt;</span><span style="color: rgb(163, 21, 21);">StackPanel</span><span style="color: blue;">&gt;</span></pre><pre style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; &lt;</span><span style="color: rgb(163, 21, 21);">local:ExcelDataReader</span><span style="color: blue;"> </span><span style="color: red;">Width</span><span style="color: blue;">=</span>"<span style="color: blue;">100</span>"<span style="color: blue;"> </span><span style="color: red;">Height</span><span style="color: blue;">=</span>"<span style="color: blue;">100</span>"<span style="color: blue;"> </span><span style="color: red;">Background</span><span style="color: blue;">=</span>"<span style="color: blue;">Yellow</span>"<span style="color: blue;"> </span><span style="color: red;">x:Name</span><span style="color: blue;">=</span>"<span style="color: blue;">excelData</span>"<span style="color: blue;">/&gt;</span></pre><pre style="margin: 0px;"><span style="color: blue;">&nbsp; &nbsp; </span><span style="color: blue;">&lt;</span><span style="color: rgb(163, 21, 21);">local:MyGrid</span><span style="color: blue;"> </span><span style="color: red;">x:Name</span><span style="color: blue;">=</span>"<span style="color: blue;">myGrid</span>"<span style="color: blue;">&nbsp; </span><span style="color: red;">Background</span><span style="color: blue;">=</span>"<span style="color: blue;">Blue</span>"<span style="color: blue;"> </span><span style="color: red;">ItemsSource</span><span style="color: blue;">=</span>"<span style="color: blue;">{Binding Source={StaticResource Test}}</span>"<span style="color: blue;">/&gt;</span></pre><pre style="margin: 0px;"><span style="color: blue;">&nbsp; &lt;/</span><span style="color: rgb(163, 21, 21);">StackPanel</span><span style="color: blue;">&gt;</span></pre></div></blockquote>
<p>We done. Open an application, create some table in Excel, select in
and drop into yellow rectangle. The information will be parsed and all
grid columns will be created automatically. Isn't is really cool?</p>
<p><a href="http://blogs.microsoft.co.il/blogs/tamir/attachment/12022.ashx">Source code for this article</a></p>  
                  
            <span id="ctl00_Main_ctl07_ctl01">Filed under: <a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/WPF/default.aspx" rel="tag">WPF</a>, <a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/tutorial/default.aspx" rel="tag">tutorial</a>, <a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/Tips+and+Tricks/default.aspx" rel="tag">Tips and Tricks</a>, <a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/source/default.aspx" rel="tag">source</a>, <a href="http://blogs.microsoft.co.il/blogs/tamir/archive/tags/download/default.aspx" rel="tag">download</a></span><input name="ctl00$Main$ctl07$ctl01" id="ctl00_Main_ctl07_ctl01_State" value="value:Filed%20under%3A%20%3Ca%20href%3D%22%2Fblogs%2Ftamir%2Farchive%2Ftags%2FWPF%2Fdefault.aspx%22%20rel%3D%22tag%22%3EWPF%3C%2Fa%3E%2C%20%3Ca%20href%3D%22%2Fblogs%2Ftamir%2Farchive%2Ftags%2Ftutorial%2Fdefault.aspx%22%20rel%3D%22tag%22%3Etutorial%3C%2Fa%3E%2C%20%3Ca%20href%3D%22%2Fblogs%2Ftamir%2Farchive%2Ftags%2FTips%2Band%2BTricks%2Fdefault.aspx%22%20rel%3D%22tag%22%3ETips%20and%20Tricks%3C%2Fa%3E%2C%20%3Ca%20href%3D%22%2Fblogs%2Ftamir%2Farchive%2Ftags%2Fsource%2Fdefault.aspx%22%20rel%3D%22tag%22%3Esource%3C%2Fa%3E%2C%20%3Ca%20href%3D%22%2Fblogs%2Ftamir%2Farchive%2Ftags%2Fdownload%2Fdefault.aspx%22%20rel%3D%22tag%22%3Edownload%3C%2Fa%3E" type="hidden">
    </div>
        <div class="postfoot">
            <div><span class="em">Attachment:</span> <a href="http://blogs.microsoft.co.il/blogs/tamir/attachment/12022.ashx">DataPresenter_t1.zip</a></div>	
      </div>
    
            
                    <a name="Comments">
                    </a><h3><a name="Comments">Comments</a></h3>
<a name="Comments">                    </a><div id="comments">
<a name="Comments">                
                    </a><p><a name="Comments">No Comments</a></p>
<a name="Comments">                
                        </a></div>
<a name="Comments">                    </a></div>
<a name="Comments">                
            
            
            
            
                    </a><div id="commentform">
<a name="Comments">                    </a><h3><a name="Comments">Leave a Comment</a></h3>
<a name="Comments">	                    </a><dl>
<a name="Comments">                            <dt><label for="ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbTitle">Title</label> <em>(required)</em><span id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02" style="color: Red; visibility: hidden;">*</span></dt>
	                        <dd><input name="ctl00$Main$ctl08$ctl02$ctl02$ctl02$tbTitle" value="re: Generic Grid with column autodetection" id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbTitle" class="smallbox" type="text"></dd>

                            <dt id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_NameTitle"><label for="ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbName">Name</label> <em>(required)</em><span id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10" style="color: Red; visibility: hidden;">*</span></dt>
                            <dd id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_NameDesc"><input name="ctl00$Main$ctl08$ctl02$ctl02$ctl02$tbName" id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbName" class="smallbox" type="text"></dd>

                            <dt><label for="ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbUrl">Your URL</label> <em>(optional</em>)</dt>
                            <dd><input name="ctl00$Main$ctl08$ctl02$ctl02$ctl02$tbUrl" id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbUrl" class="smallbox" type="text"></dd>

                            <dt><label for="ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbComment">Comments</label> <em>(required)</em><span id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07" style="color: Red; visibility: hidden;">*</span></dt>
                            <dd><textarea name="ctl00$Main$ctl08$ctl02$ctl02$ctl02$tbComment" rows="5" cols="25" id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbComment"></textarea></dd>

                            <dt><input id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_chkRemember" name="ctl00$Main$ctl08$ctl02$ctl02$ctl02$chkRemember" type="checkbox"><label for="ctl00_Main_ctl08_ctl02_ctl02_ctl02_chkRemember">Remember Me?</label></dt>
               
                            <dt><div id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_CaptchaPanel" class="Captcha_Div">
	<img src="Generic-Grid-with-column-autodetection.aspx_files/captcha.jpg" style="border-width: 0px;"><br><span>Enter the numbers above: </span><input name="ctl00$Main$ctl08$ctl02$ctl02$ctl02$CaptchaTextBox" size="3" id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_CaptchaTextBox" type="text"><span id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13" style="color: Red; display: none;">*</span>
</div><input name="ctl00$Main$ctl08$ctl02$ctl02$ctl02$btnSubmit" value="Submit" onclick='javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions("ctl00$Main$ctl08$ctl02$ctl02$ctl02$btnSubmit", "", true, "CreateCommentForm", "", false, false))' id="ctl00_Main_ctl08_ctl02_ctl02_ctl02_btnSubmit" type="submit"></dt>
	                    </a></dl>
<a name="Comments">                    </a></div>
<a name="Comments">                    
        
        
                    </a></div></div>
<a name="Comments">                    </a><div id="contentfooter"><a name="Comments">&nbsp;</a></div>
<a name="Comments">		        </a></div>
<a name="Comments">                </a><div id="footer">
<a name="Comments">                    
					    </a><div class="Copyright"><div align="center"><a name="Comments">‎©2006 Microsoft Corporation. All rights reserved.‎  <span></span></a><a href="http://www.microsoft.com/israel/info/cpyright.asp">תנאי שימוש</a> |<span><a href="http://www.microsoft.com/library/toolbar/3.0/trademarks/he-il.mspx">סימנים מסחריים</a> |</span><span><a href="http://www.microsoft.com/info/iw/privacy.mspx">הצהרת פרטיות</a></span></div></div>
					    
					    

                        
					            <a href="http://communityserver.org/r.ashx?j" target="_blank"><img id="ctl00_BodyFooterRegion_ctl02_ctl03_ctl00" src="Generic-Grid-with-column-autodetection.aspx_files/PoweredByCS_commercial.gif" alt="Powered by Community Server (Commercial Edition), by Telligent Systems " style="border-width: 0px;"></a>
    						
    					
					
                </div>
            </div>        
        
    
<script type="text/javascript">
<!--
var Page_Validators =  new Array(document.getElementById("ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02"), document.getElementById("ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10"), document.getElementById("ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07"), document.getElementById("ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13"));
// -->
</script>

<script type="text/javascript">
<!--
var ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02 = document.all ? document.all["ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02"] : document.getElementById("ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02");
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02.controltovalidate = "ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbTitle";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02.errormessage = "*";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02.validationGroup = "CreateCommentForm";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl02.initialvalue = "";
var ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10 = document.all ? document.all["ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10"] : document.getElementById("ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10");
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10.controltovalidate = "ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbName";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10.errormessage = "*";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10.validationGroup = "CreateCommentForm";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl10.initialvalue = "";
var ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07 = document.all ? document.all["ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07"] : document.getElementById("ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07");
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07.controltovalidate = "ctl00_Main_ctl08_ctl02_ctl02_ctl02_tbComment";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07.errormessage = "*";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07.validationGroup = "CreateCommentForm";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl07.initialvalue = "";
var ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13 = document.all ? document.all["ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13"] : document.getElementById("ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13");
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13.controltovalidate = "ctl00_Main_ctl08_ctl02_ctl02_ctl02_CaptchaTextBox";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13.errormessage = "*";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13.display = "Dynamic";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13.validationGroup = "CreateCommentForm";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13.evaluationfunction = "CustomValidatorEvaluateIsValid";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13.clientvalidationfunction = "ValidateCaptcha";
ctl00_Main_ctl08_ctl02_ctl02_ctl02_ctl13.validateemptytext = "true";
// -->
</script>


<!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
<rdf:Description
rdf:about="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/04/16/Generic-Grid-with-column-autodetection.aspx"
dc:identifier="http://blogs.microsoft.co.il/blogs/tamir/archive/2007/04/16/Generic-Grid-with-column-autodetection.aspx"
dc:title="Generic Grid with column autodetection"
trackback:ping="http://blogs.microsoft.co.il/blogs/tamir/trackback.ashx?PostID=12022" />
</rdf:RDF>
-->
<script src="Generic-Grid-with-column-autodetection.aspx_files/microsft.js" type="text/javascript" charset="utf-8"></script><script type="text/javascript" charset="utf-8" src="Generic-Grid-with-column-autodetection.aspx_files/site-tracker.js"></script> <script type="text/javascript">
// <![CDATA[
Telligent_Modal.Configure('/utility/loading.htm',['Modal'],['ModalTitle'],['ModalClose'],['ModalContent'],['ModalFooter'],['ModalResize'],['ModalMask'],100);
// ]]>
</script><script type="text/javascript">
// <![CDATA[
var ctl00_Main_ctl04=new PostRating('ctl00_Main_ctl04','ctl00_Main_ctl04','ctl00_Main_ctl04_Value', 5, '/Themes/default/images/common/', false, 'ratemenu','CommonRateControlActive','CommonRateControlReadOnly',['Terrible','Poor','Fair','Average','Good','Excellent'],true,true);
// ]]>
</script>
<script type="text/javascript">
<!--

WebForm_InitCallback();// -->
</script>
<script type="text/javascript">
            // <![CDATA[
            var ctl00_Main_ctl04_ajax={"SaveRating":function(rating,successFunction,failureFunction){WebForm_DoCallback('ctl00$Main$ctl04',rating,successFunction,rating,failureFunction,false)}};
            // ]]>
            </script><script type="text/javascript">
// <![CDATA[
window.ctl00_Main_ctl07_ctl01 = new Telligent_InlineEditorPanel('ctl00_Main_ctl07_ctl01','ctl00_Main_ctl07_ctl01','ctl00_Main_ctl07_ctl01_State','ctl00_Main_ctl07_ctl00',false,null,null,null);
// ]]>
</script>
<script type="text/javascript">
<!--
var Page_ValidationActive = false;
if (typeof(ValidatorOnLoad) == "function") {
    ValidatorOnLoad();
}

function ValidatorOnSubmit() {
    if (Page_ValidationActive) {
        return ValidatorCommonOnSubmit();
    }
    else {
        return true;
    }
}
// -->
</script>
        </form>
</body></html>
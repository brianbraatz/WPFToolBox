<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    >


  <!--=================================================================
        ToolBar
    ==================================================================-->
  <!-- Common colors for ToolBar controls -->
  <SolidColorBrush x:Key="ToolBarLightFill"
           Color="#D4D5D8"/>
  <SolidColorBrush x:Key="ToolBarMediumFill"
           Color="#B6BDD2"/>
  <SolidColorBrush x:Key="ToolBarDarkFill"
           Color="#8592B5"/>
  <SolidColorBrush x:Key="ToolBarDisabledFill"
           Color="#D4D0C8"/>
  <SolidColorBrush x:Key="ToolBarDisabledBorder"
           Color="#8D8D8D"/>
  <SolidColorBrush x:Key="ToolBarSeparatorFill"
           Color="#A6A6A6"/>
  <SolidColorBrush x:Key="ToolBarButtonHover"
           Color="#B6BDD2"/>
  <SolidColorBrush x:Key="ToolBarButtonHoverBorder"
           Color="#0A246A"/>
  <SolidColorBrush x:Key="ToolBarButtonChecked"
           Color="#D4D5D8"/>
  <SolidColorBrush x:Key="ToolBarButtonPressed"
           Color="#8592B5"/>
  <SolidColorBrush x:Key="ToolBarButtonPressedBorder"
           Color="#0A246A"/>
  <SolidColorBrush x:Key="ToolBarMenuBorder"
           Color="#666666"/>
  <SolidColorBrush x:Key="ToolBarSubMenuBackground"
           Color="#F9F8F7"/>
  <SolidColorBrush x:Key="ToolBarMenuCheckFill"
           Color="#D4D5D8"/>
  <LinearGradientBrush x:Key="ToolBarOpenHeaderBackground"
             StartPoint="0,0"
             EndPoint="0,1">
    <LinearGradientBrush.GradientStops>
      <GradientStop Color="#F9F7F6"
              Offset="0"/>
      <GradientStop Color="#EDEBE8"
              Offset="1"/>
    </LinearGradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ToolBarMenuBackground"
             StartPoint="0,0"
             EndPoint="1,0">
    <LinearGradientBrush.GradientStops>
      <GradientStop Color="#D4D0C8"
              Offset="0"/>
      <GradientStop Color="#F5F5F4"
              Offset="1"/>
    </LinearGradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ToolBarHorizontalBackground"
             StartPoint="0,0"
             EndPoint="0,1">
    <LinearGradientBrush.GradientStops>
      <GradientStop Color="#E2E0DB"
              Offset="0"/>
      <GradientStop Color="#EAE8E4"
              Offset="0.5"/>
      <GradientStop Color="#D5D2CA"
              Offset="0.9"/>
      <GradientStop Color="#DBD8D1"
              Offset="1"/>
    </LinearGradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ToolBarVerticalBackground"
             StartPoint="0,0"
             EndPoint="1,0">
    <LinearGradientBrush.GradientStops>
      <GradientStop Color="#E2E0DB"
              Offset="0"/>
      <GradientStop Color="#EAE8E4"
              Offset="0.5"/>
      <GradientStop Color="#D5D2CA"
              Offset="0.9"/>
      <GradientStop Color="#DBD8D1"
              Offset="1"/>
    </LinearGradientBrush.GradientStops>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="ToolBarGripper"
           Color="#A0A0A0"/>
  <LinearGradientBrush x:Key="ToolBarToggleButtonHorizontalBackground"
             StartPoint="0,0"
             EndPoint="0,1">
    <LinearGradientBrush.GradientStops>
      <GradientStop Color="#E6E6E6"
              Offset="0"/>
      <GradientStop Color="#D2D2D2"
              Offset="0.5"/>
      <GradientStop Color="#808080"
              Offset="1"/>
    </LinearGradientBrush.GradientStops>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ToolBarToggleButtonVerticalBackground"
             StartPoint="0,0"
             EndPoint="1,0">
    <LinearGradientBrush.GradientStops>
      <GradientStop Color="#E6E6E6"
              Offset="0"/>
      <GradientStop Color="#D2D2D2"
              Offset="0.5"/>
      <GradientStop Color="#808080"
              Offset="1"/>
    </LinearGradientBrush.GradientStops>
  </LinearGradientBrush>
  <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}"
       TargetType="{x:Type Separator}">
    <Setter Property="Background"
        Value="{StaticResource ToolBarSeparatorFill}"/>
    <Setter Property="MinWidth"
        Value="1"/>
    <Setter Property="MinHeight"
        Value="1"/>
    <Setter Property="Margin"
        Value="2,2,2,2"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              SnapsToDevicePixels="true"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static ToolBar.ButtonStyleKey}"
       TargetType="{x:Type Button}">
    <Setter Property="Foreground"
        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Padding"
        Value="2"/>
    <Setter Property="BorderThickness"
        Value="1"/>
    <Setter Property="Background"
        Value="Transparent"/>
    <Setter Property="BorderBrush"
        Value="Transparent"/>
    <Setter Property="HorizontalContentAlignment"
        Value="Center"/>
    <Setter Property="VerticalContentAlignment"
        Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Name="Bd"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}"
              SnapsToDevicePixels="true">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver"
                 Value="true">
              <Setter TargetName="Bd"
                  Property="BorderBrush"
                  Value="{StaticResource ToolBarButtonHoverBorder}"/>
              <Setter TargetName="Bd"
                  Property="Background"
                  Value="{StaticResource ToolBarButtonHover}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused"
                 Value="true">
              <Setter TargetName="Bd"
                  Property="BorderBrush"
                  Value="{StaticResource ToolBarButtonHoverBorder}"/>
              <Setter TargetName="Bd"
                  Property="Background"
                  Value="{StaticResource ToolBarButtonHover}"/>
            </Trigger>
            <Trigger Property="IsPressed"
                 Value="true">
              <Setter TargetName="Bd"
                  Property="BorderBrush"
                  Value="{StaticResource ToolBarButtonPressedBorder}"/>
              <Setter TargetName="Bd"
                  Property="Background"
                  Value="{StaticResource ToolBarButtonPressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled"
                 Value="false">
              <Setter Property="Foreground"
                  Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="Width"
                 Value="Auto">
              <Setter Property="MinWidth"
                  Value="20"/>
            </Trigger>
            <Trigger Property="Height"
                 Value="Auto">
              <Setter Property="MinHeight"
                  Value="20"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}"
       TargetType="{x:Type ToggleButton}">
    <Setter Property="Foreground"
        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Padding"
        Value="2"/>
    <Setter Property="BorderThickness"
        Value="1"/>
    <Setter Property="Background"
        Value="Transparent"/>
    <Setter Property="BorderBrush"
        Value="Transparent"/>
    <Setter Property="HorizontalContentAlignment"
        Value="Center"/>
    <Setter Property="VerticalContentAlignment"
        Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Name="ButtonBorder"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}"
              SnapsToDevicePixels="true">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked"
                 Value="true">
              <Setter Property="BorderBrush"
                  Value="{StaticResource ToolBarButtonHoverBorder}"/>
              <Setter Property="Background"
                  Value="{StaticResource ToolBarButtonChecked}"/>
            </Trigger>
            <Trigger Property="IsMouseOver"
                 Value="true">
              <Setter Property="BorderBrush"
                  Value="{StaticResource ToolBarButtonHoverBorder}"/>
              <Setter Property="Background"
                  Value="{StaticResource ToolBarButtonHover}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused"
                 Value="true">
              <Setter Property="BorderBrush"
                  Value="{StaticResource ToolBarButtonHoverBorder}"/>
              <Setter Property="Background"
                  Value="{StaticResource ToolBarButtonHover}"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver"
                       Value="true"/>
                <Condition Property="IsChecked"
                       Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Property="BorderBrush"
                  Value="{StaticResource ToolBarButtonPressedBorder}"/>
              <Setter Property="Background"
                  Value="{StaticResource ToolBarButtonPressed}"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsKeyboardFocused"
                       Value="true"/>
                <Condition Property="IsChecked"
                       Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Property="BorderBrush"
                  Value="{StaticResource ToolBarButtonPressedBorder}"/>
              <Setter Property="Background"
                  Value="{StaticResource ToolBarButtonPressed}"/>
            </MultiTrigger>
            <Trigger Property="IsPressed"
                 Value="true">
              <Setter Property="BorderBrush"
                  Value="{StaticResource ToolBarButtonPressedBorder}"/>
              <Setter Property="Background"
                  Value="{StaticResource ToolBarButtonPressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled"
                 Value="false">
              <Setter Property="Foreground"
                  Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="Width"
                 Value="Auto">
              <Setter Property="MinWidth"
                  Value="20"/>
            </Trigger>
            <Trigger Property="Height"
                 Value="Auto">
              <Setter Property="MinHeight"
                  Value="20"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}"
       BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
       TargetType="{x:Type CheckBox}"/>
  <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}"
       BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
       TargetType="{x:Type RadioButton}"/>
  <Style x:Key="ToolBarComboBoxTransparentButtonStyle"
       TargetType="{x:Type ToggleButton}">
    <Setter Property="MinWidth"
        Value="0"/>
    <Setter Property="MinHeight"
        Value="0"/>
    <Setter Property="Width"
        Value="Auto"/>
    <Setter Property="Background"
        Value="Transparent"/>
    <Setter Property="Focusable"
        Value="false"/>
    <Setter Property="ClickMode"
        Value="Press"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"
                        SharedSizeGroup="ComboBoxButton"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="Chrome"
                Grid.Column="1"
                Width="13"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="true">
              <Path x:Name="ArrowDownPath"
                  Data="M 2.5 7 L 8.5 7 L 5.5 10 Z"
                  Fill="black"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled"
                 Value="false">
              <Setter TargetName="Chrome"
                  Property="BorderBrush"
                  Value="{x:Null}"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver"
                       Value="true"/>
                <Condition Property="IsChecked"
                       Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Chrome"
                  Property="Background"
                  Value="{StaticResource ToolBarButtonHover}"/>
            </MultiTrigger>
            <Trigger Property="IsChecked"
                 Value="true">
              <Setter TargetName="Chrome"
                  Property="BorderBrush"
                  Value="{StaticResource ToolBarButtonPressedBorder}"/>
            </Trigger>
            <Trigger Property="IsPressed"
                 Value="true">
              <Setter TargetName="Chrome"
                  Property="Background"
                  Value="{StaticResource ToolBarButtonPressed}"/>
            </Trigger>
            <Trigger Property="IsEnabled"
                 Value="false">
              <Setter TargetName="ArrowDownPath"
                  Property="Fill"
                  Value="{StaticResource ToolBarDisabledBorder}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}"
       TargetType="{x:Type ComboBox}">
    <Setter Property="FocusVisualStyle"
        Value="{x:Null}"/>
    <Setter Property="Foreground"
        Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
    <Setter Property="Background"
        Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
    <Setter Property="BorderBrush"
        Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
    <Setter Property="BorderThickness"
        Value="1"/>
    <Setter Property="Margin"
        Value="1,0"/>
    <Setter Property="Padding"
        Value="0"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
        Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
        Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll"
        Value="true"/>
    <Setter Property="MinHeight"
        Value="18"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
          <Grid SnapsToDevicePixels="true">
            <Grid Grid.IsSharedSizeScope="true">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"
                          SharedSizeGroup="ComboBoxButton"/>
              </Grid.ColumnDefinitions>
              <Border Name="Background"
                  Background="{TemplateBinding Background}"/>
              <Border Name="SelectedContentBorder"
                  Margin="2,2,1,2">
                <ContentPresenter x:Name="ContentSite"
                          Content="{TemplateBinding SelectionBoxItem}"
                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                          Margin="{TemplateBinding Padding}"
                          VerticalAlignment="Center"/>
              </Border>
              <Border Name="Border"
                  Grid.ColumnSpan="2"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  BorderBrush="{TemplateBinding BorderBrush}"/>
              <ToggleButton BorderBrush="white"
                      BorderThickness="1"
                      x:Name="DropDownButton"
                      Grid.ColumnSpan="2"
                      Style="{StaticResource ToolBarComboBoxTransparentButtonStyle}"
                      IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"/>
              <TextBox Padding="{TemplateBinding Padding}"
                   Margin="1,1,0,1"
                   MinHeight="18"
                   x:Name="PART_EditableTextBox"
                   Style="{StaticResource ComboBoxEditableTextBox}"
                   Visibility="Collapsed"
                   IsReadOnly="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent}}"
                   VerticalAlignment="Center"/>
            </Grid>
            <Popup Name="Popup"
                 AllowsTransparency="true"
                 Placement="Bottom"
                 IsOpen="{Binding Path=IsDropDownOpen,RelativeSource={RelativeSource TemplatedParent}}"
                 Focusable="false"
                 PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
              <Grid Name="DropDown"
                  MinWidth="{Binding ElementName=Border,Path=ActualWidth}"
                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                <Border x:Name="DropDownBorder"
                    Background="{TemplateBinding Background}"
                    BorderThickness="1"
                    BorderBrush="{StaticResource ToolBarMenuBorder}"
                    MinWidth="{TemplateBinding ActualWidth}"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"/>
                <ScrollViewer Margin="1">
                  <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled"
                 Value="false">
              <Setter Property="Foreground"
                  Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
              <Setter TargetName="Background"
                  Property="Background"
                  Value="{StaticResource ToolBarDisabledFill}"/>
              <Setter TargetName="Background"
                  Property="Grid.ColumnSpan"
                  Value="2"/>
              <Setter TargetName="Border"
                  Property="BorderBrush"
                  Value="{StaticResource ToolBarDisabledBorder}"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsKeyboardFocusWithin"
                       Value="true"/>
                <Condition Property="IsDropDownOpen"
                       Value="false"/>
                <Condition Property="IsEditable"
                       Value="false"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="SelectedContentBorder"
                  Property="Background"
                  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </MultiTrigger>
            <Trigger Property="IsEditable"
                 Value="true">
              <!-- For editable ComboBox we want to step directly on TextBox and skip ComboBox itself -->
              <Setter TargetName="DropDownButton"
                  Property="Background"
                  Value="{x:Null}"/>
              <Setter TargetName="ContentSite"
                  Property="Visibility"
                  Value="Collapsed"/>
              <Setter TargetName="PART_EditableTextBox"
                  Property="Visibility"
                  Value="Visible"/>
            </Trigger>
            <Trigger Property="IsMouseOver"
                 Value="true">
              <Setter TargetName="DropDownButton"
                  Property="BorderBrush"
                  Value="{StaticResource ToolBarButtonHoverBorder}"/>
              <Setter TargetName="DropDownButton"
                  Property="Background"
                  Value="{StaticResource ToolBarButtonHover}"/>
              <Setter TargetName="Border"
                  Property="BorderBrush"
                  Value="{StaticResource ToolBarButtonHoverBorder}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin"
                 Value="true">
              <Setter TargetName="DropDownButton"
                  Property="BorderBrush"
                  Value="{StaticResource ToolBarButtonHoverBorder}"/>
              <Setter TargetName="DropDownButton"
                  Property="Background"
                  Value="{StaticResource ToolBarButtonHover}"/>
              <Setter TargetName="Border"
                  Property="BorderBrush"
                  Value="{StaticResource ToolBarButtonHoverBorder}"/>
            </Trigger>
            <Trigger SourceName="Popup"
                 Property="Popup.AllowsTransparency"
                 Value="true">
              <Setter TargetName="DropDown"
                  Property="Margin"
                  Value="0,0,3,3"/>
              <Setter TargetName="DropDown"
                  Property="SnapsToDevicePixels"
                  Value="true"/>
              <Setter TargetName="DropDownBorder"
                  Property="BitmapEffect"
                  Value="{StaticResource PopupDropShadow}"/>
            </Trigger>
            <Trigger Property="HasItems"
                 Value="false">
              <!-- Set minimum height for empty drop down -->
              <Setter TargetName="DropDownBorder"
                  Property="MinHeight"
                  Value="95"/>
            </Trigger>
            <Trigger Property="IsGrouping"
                 Value="true">
              <Setter Property="ScrollViewer.CanContentScroll"
                  Value="false"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsKeyboardFocusWithin"
                       Value="true"/>
                <Condition Property="IsDropDownOpen"
                       Value="false"/>
                <Condition Property="IsEditable"
                       Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Property="Foreground"
                  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
            </MultiTrigger>
            <Trigger Property="IsEditable"
                 Value="true">
              <Setter Property="Padding"
                  Value="2"/>
              <Setter Property="IsTabStop"
                  Value="false"/>
            </Trigger>
            <!-- Width -->
            <Trigger Property="Width"
                 Value="Auto">
              <Setter Property="MinWidth"
                  Value="20"/>
            </Trigger>
            <!-- Height -->
            <Trigger Property="Height"
                 Value="Auto">
              <Setter Property="MinHeight"
                  Value="18"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}"
       TargetType="{x:Type TextBox}">
    <Setter Property="FocusVisualStyle"
        Value="{x:Null}"/>
    <Setter Property="Foreground"
        Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
    <Setter Property="Background"
        Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
    <Setter Property="BorderBrush"
        Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
    <Setter Property="BorderThickness"
        Value="1"/>
    <Setter Property="Margin"
        Value="1,0"/>
    <Setter Property="Padding"
        Value="2"/>
    <Setter Property="MinHeight"
        Value="18"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border Name="Border"
              Background="{TemplateBinding Background}"
              BorderThickness="{TemplateBinding BorderThickness}"
              BorderBrush="{TemplateBinding BorderBrush}"
              SnapsToDevicePixels="true">
            <ScrollViewer x:Name="PART_ContentHost"
                    VerticalAlignment="Center"
                    MinHeight="18"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled"
                 Value="false">
              <Setter Property="Foreground"
                  Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
              <Setter TargetName="Border"
                  Property="Background"
                  Value="{StaticResource ToolBarDisabledFill}"/>
              <Setter TargetName="Border"
                  Property="BorderBrush"
                  Value="{StaticResource ToolBarDisabledBorder}"/>
            </Trigger>
            <Trigger Property="IsMouseOver"
                 Value="true">
              <Setter TargetName="Border"
                  Property="BorderBrush"
                  Value="{StaticResource ToolBarButtonHoverBorder}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin"
                 Value="true">
              <Setter TargetName="Border"
                  Property="BorderBrush"
                  Value="{StaticResource ToolBarButtonHoverBorder}"/>
            </Trigger>
            <!-- Width -->
            <Trigger Property="Width"
                 Value="Auto">
              <Setter Property="MinWidth"
                  Value="20"/>
            </Trigger>
            <!-- Height -->
            <Trigger Property="Height"
                 Value="Auto">
              <Setter Property="MinHeight"
                  Value="18"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static ToolBar.MenuStyleKey}"
       TargetType="{x:Type Menu}">
    <Setter Property="Background"
        Value="{StaticResource ToolBarMenuBackground}"/>
    <Setter Property="FontFamily"
        Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
    <Setter Property="FontSize"
        Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
    <Setter Property="FontStyle"
        Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
    <Setter Property="FontWeight"
        Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
    <Setter Property="Foreground"
        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
    <Setter Property="VerticalContentAlignment"
        Value="Center"/>
    <Setter Property="KeyboardNavigation.TabNavigation"
        Value="Continue"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Menu}">
          <Border Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}">
            <ItemsPresenter/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Resources>
      <!--Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
                <Setter Property="Background" Value="{StaticResource ToolBarSeparatorFill}" />
                <Setter Property="MinHeight" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Separator}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                                <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Border Grid.Column="1" Margin="8,0,0,0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style-->
      <Style x:Key="{x:Type MenuItem}"
           TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment"
            Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment"
            Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background"
            Value="Transparent"/>
        <Setter Property="Foreground"
            Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="BorderThickness"
            Value="1"/>
        <Setter Property="Margin"
            Value="0,1,0,0"/>
        <Setter Property="Padding"
            Value="8,3,8,3"/>
        <Setter Property="DockPanel.Dock"
            Value="Top"/>
        <Setter Property="Template">
          <Setter.Value>
            <!-- SubmenuItem Template -->
            <ControlTemplate TargetType="{x:Type MenuItem}">
              <Grid Background="Transparent">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition MinWidth="24"
                            Width="Auto"
                            SharedSizeGroup="MenuItemIconColumnGroup"/>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"
                            SharedSizeGroup="MenuItemIGTColumnGroup"/>
                  <ColumnDefinition Width="14"/>
                </Grid.ColumnDefinitions>
                <Border Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    Grid.ColumnSpan="4"
                    Margin="1,0"
                    SnapsToDevicePixels="true"/>
                <!-- Glyph -->
                <ContentPresenter x:Name="Icon"
                          Margin="3"
                          VerticalAlignment="Center"
                          ContentSource="Icon"/>
                <Border Name="GlyphPanel"
                    Margin="0,1"
                    Width="20"
                    Height="20"
                    Visibility="Hidden"
                    BorderBrush="{StaticResource ToolBarButtonHoverBorder}"
                    Background="{StaticResource ToolBarMenuCheckFill}"
                    BorderThickness="1">
                  <Path VerticalAlignment="Center"
                      HorizontalAlignment="Center"
                      Fill="{TemplateBinding Foreground}"
                      FlowDirection="LeftToRight"
                      Data="{StaticResource Checkmark}"/>
                </Border>
                <ContentPresenter x:Name="HeaderHost"
                          Grid.Column="1"
                          ContentSource="Header"
                          Margin="{TemplateBinding Padding}"
                          RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText"
                       Grid.Column="2"
                       Text="{TemplateBinding InputGestureText}"
                       Margin="4,3,2,3"
                       HorizontalAlignment="Right"/>
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="Icon"
                     Value="{x:Null}">
                  <Setter TargetName="Icon"
                      Property="Visibility"
                      Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsChecked"
                     Value="true">
                  <Setter TargetName="GlyphPanel"
                      Property="Visibility"
                      Value="Visible"/>
                  <Setter TargetName="Icon"
                      Property="Visibility"
                      Value="Collapsed"/>
                </Trigger>
                <Trigger Property="IsHighlighted"
                     Value="true">
                  <Setter TargetName="Border"
                      Property="BorderBrush"
                      Value="{StaticResource ToolBarButtonHoverBorder}"/>
                  <Setter TargetName="Border"
                      Property="Background"
                      Value="{StaticResource ToolBarLightFill}"/>
                  <Setter TargetName="GlyphPanel"
                      Property="BorderBrush"
                      Value="{StaticResource ToolBarButtonPressedBorder}"/>
                  <Setter TargetName="GlyphPanel"
                      Property="Background"
                      Value="{StaticResource ToolBarDarkFill}"/>
                </Trigger>
                <Trigger Property="IsEnabled"
                     Value="false">
                  <Setter Property="Foreground"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="Role"
               Value="TopLevelHeader">
            <Setter Property="Padding"
                Value="7,1,8,2"/>
            <Setter Property="Grid.IsSharedSizeScope"
                Value="true"/>
            <Setter Property="Template">
              <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                  <Border Name="Border"
                      Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="1"
                      SnapsToDevicePixels="true">
                    <DockPanel x:Name="ContentPanel">
                      <!-- Glyph -->
                      <ContentPresenter x:Name="Icon"
                                Margin="4,0,6,0"
                                VerticalAlignment="Center"
                                ContentSource="Icon"/>
                      <Path x:Name="GlyphPanel"
                          Margin="4,0,6,0"
                          Visibility="Collapsed"
                          VerticalAlignment="Center"
                          Fill="{TemplateBinding Foreground}"
                          FlowDirection="LeftToRight"
                          Data="{StaticResource Checkmark}"/>
                      <!-- Header Content -->
                      <ContentPresenter x:Name="HeaderHost"
                                ContentSource="Header"
                                Margin="{TemplateBinding Padding}"
                                RecognizesAccessKey="True"/>
                      <!-- Submenu Popup -->
                      <Popup x:Name="SubMenuPopup"
                           Placement="Bottom"
                           HorizontalOffset="-1"
                           IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
                           Focusable="false"
                           PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                        <Border Background="{StaticResource ToolBarSubMenuBackground}"
                            BorderBrush="{StaticResource ToolBarMenuBorder}"
                            BorderThickness="1">
                          <Grid>
                            <Grid.ColumnDefinitions>
                              <ColumnDefinition MinWidth="24"
                                        Width="Auto"
                                        SharedSizeGroup="MenuItemIconColumnGroup"/>
                              <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Rectangle Fill="{StaticResource ToolBarVerticalBackground}"/>
                            <ScrollViewer CanContentScroll="true"
                                    Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}"
                                    Grid.ColumnSpan="2">
                              <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle"
                                      Margin="0,0,0,1"/>
                            </ScrollViewer>
                          </Grid>
                        </Border>
                      </Popup>
                    </DockPanel>
                  </Border>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsSuspendingPopupAnimation"
                         Value="true">
                      <Setter TargetName="SubMenuPopup"
                          Property="PopupAnimation"
                          Value="None"/>
                    </Trigger>
                    <Trigger Property="Icon"
                         Value="{x:Null}">
                      <Setter TargetName="Icon"
                          Property="Visibility"
                          Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsChecked"
                         Value="true">
                      <Setter TargetName="GlyphPanel"
                          Property="Visibility"
                          Value="Visible"/>
                      <Setter TargetName="Icon"
                          Property="Visibility"
                          Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsHighlighted"
                         Value="true">
                      <Setter TargetName="Border"
                          Property="BorderBrush"
                          Value="{StaticResource ToolBarButtonHoverBorder}"/>
                      <Setter TargetName="Border"
                          Property="Background"
                          Value="{StaticResource ToolBarButtonHover}"/>
                    </Trigger>
                    <Trigger Property="IsSubmenuOpen"
                         Value="true">
                      <Setter TargetName="Border"
                          Property="BorderBrush"
                          Value="{StaticResource ToolBarMenuBorder}"/>
                      <Setter TargetName="Border"
                          Property="Background"
                          Value="{StaticResource ToolBarOpenHeaderBackground}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled"
                         Value="false">
                      <Setter Property="Foreground"
                          Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Trigger>
          <Trigger Property="Role"
               Value="TopLevelItem">
            <Setter Property="Margin"
                Value="0,1,0,1"/>
            <Setter Property="Padding"
                Value="7,1,8,2"/>
            <Setter Property="Template">
              <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                  <Border Name="Border"
                      Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="1"
                      SnapsToDevicePixels="true">
                    <DockPanel x:Name="ContentPanel">
                      <!-- Glyph -->
                      <ContentPresenter x:Name="Icon"
                                Margin="4,0,6,0"
                                VerticalAlignment="Center"
                                ContentSource="Icon"/>
                      <Path x:Name="GlyphPanel"
                          Margin="4,0,6,0"
                          Visibility="Collapsed"
                          VerticalAlignment="Center"
                          Fill="{TemplateBinding Foreground}"
                          FlowDirection="LeftToRight"
                          Data="{StaticResource Checkmark}"/>
                      <!-- Header Content -->
                      <ContentPresenter x:Name="HeaderHost"
                                ContentSource="Header"
                                Margin="{TemplateBinding Padding}"
                                RecognizesAccessKey="True"/>
                    </DockPanel>
                  </Border>
                  <ControlTemplate.Triggers>
                    <Trigger Property="Icon"
                         Value="{x:Null}">
                      <Setter TargetName="Icon"
                          Property="Visibility"
                          Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsChecked"
                         Value="true">
                      <Setter TargetName="GlyphPanel"
                          Property="Visibility"
                          Value="Visible"/>
                      <Setter TargetName="Icon"
                          Property="Visibility"
                          Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsHighlighted"
                         Value="true">
                      <Setter TargetName="Border"
                          Property="BorderBrush"
                          Value="{StaticResource ToolBarButtonHoverBorder}"/>
                      <Setter TargetName="Border"
                          Property="Background"
                          Value="{StaticResource ToolBarButtonHover}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled"
                         Value="false">
                      <Setter Property="Foreground"
                          Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Trigger>
          <Trigger Property="Role"
               Value="SubmenuHeader">
            <Setter Property="DockPanel.Dock"
                Value="Top"/>
            <Setter Property="Padding"
                Value="8,3,8,3"/>
            <Setter Property="Grid.IsSharedSizeScope"
                Value="true"/>
            <Setter Property="Template">
              <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                  <Grid Background="Transparent">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition MinWidth="24"
                                Width="Auto"
                                SharedSizeGroup="MenuItemIconColumnGroup"/>
                      <ColumnDefinition Width="*"/>
                      <ColumnDefinition Width="Auto"
                                SharedSizeGroup="MenuItemIGTColumnGroup"/>
                      <ColumnDefinition Width="14"/>
                    </Grid.ColumnDefinitions>
                    <Border Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Grid.ColumnSpan="4"
                        Margin="1,0"
                        SnapsToDevicePixels="true"/>
                    <!-- Glyph -->
                    <ContentPresenter x:Name="Icon"
                              Margin="3"
                              VerticalAlignment="Center"
                              ContentSource="Icon"/>
                    <Border Name="GlyphPanel"
                        Margin="0,1"
                        Width="20"
                        Height="20"
                        Visibility="Hidden"
                        BorderBrush="{StaticResource ToolBarButtonHoverBorder}"
                        Background="{StaticResource ToolBarMenuCheckFill}"
                        BorderThickness="1">
                      <Path VerticalAlignment="Center"
                          HorizontalAlignment="Center"
                          Fill="{TemplateBinding Foreground}"
                          FlowDirection="LeftToRight"
                          Data="{StaticResource Checkmark}"/>
                    </Border>
                    <ContentPresenter x:Name="HeaderHost"
                              Grid.Column="1"
                              ContentSource="Header"
                              Margin="{TemplateBinding Padding}"
                              RecognizesAccessKey="True"/>
                    <Path x:Name="ArrowPanel"
                        Grid.Column="3"
                        DockPanel.Dock="Right"
                        VerticalAlignment="Center"
                        Margin="4,0,6,0"
                        Fill="{TemplateBinding Foreground}"
                        Data="{StaticResource RightArrow}"/>
                    <Popup x:Name="SubMenuPopup"
                         Placement="Right"
                         IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
                         Focusable="false"
                         PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                      <Border Background="{StaticResource ToolBarSubMenuBackground}"
                          BorderBrush="{StaticResource ToolBarMenuBorder}"
                          BorderThickness="1">
                        <Grid>
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="24"
                                      Width="Auto"
                                      SharedSizeGroup="MenuItemIconColumnGroup"/>
                            <ColumnDefinition Width="*"/>
                          </Grid.ColumnDefinitions>
                          <Rectangle Fill="{StaticResource ToolBarVerticalBackground}"/>
                          <ScrollViewer CanContentScroll="true"
                                  Style="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}"
                                  Grid.ColumnSpan="2">
                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle"
                                    Margin="0,0,0,1"/>
                          </ScrollViewer>
                        </Grid>
                      </Border>
                    </Popup>
                  </Grid>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsSuspendingPopupAnimation"
                         Value="true">
                      <Setter TargetName="SubMenuPopup"
                          Property="PopupAnimation"
                          Value="None"/>
                    </Trigger>
                    <Trigger Property="Icon"
                         Value="{x:Null}">
                      <Setter TargetName="Icon"
                          Property="Visibility"
                          Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsChecked"
                         Value="true">
                      <Setter TargetName="GlyphPanel"
                          Property="Visibility"
                          Value="Visible"/>
                      <Setter TargetName="Icon"
                          Property="Visibility"
                          Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsHighlighted"
                         Value="true">
                      <Setter TargetName="Border"
                          Property="BorderBrush"
                          Value="{StaticResource ToolBarButtonHoverBorder}"/>
                      <Setter TargetName="Border"
                          Property="Background"
                          Value="{StaticResource ToolBarLightFill}"/>
                      <Setter TargetName="GlyphPanel"
                          Property="BorderBrush"
                          Value="{StaticResource ToolBarButtonPressedBorder}"/>
                      <Setter TargetName="GlyphPanel"
                          Property="Background"
                          Value="{StaticResource ToolBarDarkFill}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled"
                         Value="false">
                      <Setter Property="Foreground"
                          Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Trigger>
        </Style.Triggers>
      </Style>
    </Style.Resources>
  </Style>
  <!-- Thumb used in ToolBar Style -->
  <Style x:Key="ToolBarThumbStyle"
       TargetType="{x:Type Thumb}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Padding="{TemplateBinding Padding}"
              Width="{TemplateBinding Width}"
              Height="{TemplateBinding Height}">
            <Border>
              <Border.Background>
                <DrawingBrush Viewbox="0,0,4,4"
                        Viewport="0,0,4,4"
                        TileMode="Tile"
                        ViewportUnits="Absolute"
                        ViewboxUnits="Absolute">
                  <DrawingBrush.Drawing>
                    <DrawingGroup>
                      <DrawingGroup.Children>
                        <GeometryDrawing Brush="White"
                                 Geometry="M 1 1 L 1 3 L 3 3 L 3 1 z"/>
                        <!-- TODO-<2005/06/08>-<jordanpa>-<33051> Put this back to a DynamicResource once Freezables work with them -->
                        <GeometryDrawing Brush="{StaticResource ToolBarGripper}"
                                 Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z"/>
                      </DrawingGroup.Children>
                    </DrawingGroup>
                  </DrawingBrush.Drawing>
                </DrawingBrush>
              </Border.Background>
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver"
                 Value="true">
              <Setter Property="Cursor"
                  Value="SizeAll"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToolBarHorizontalOverflowButtonStyle"
       TargetType="{x:Type ToggleButton}">
    <Setter Property="Background"
        Value="{StaticResource ToolBarToggleButtonHorizontalBackground}"/>
    <Setter Property="MinHeight"
        Value="0"/>
    <Setter Property="MinWidth"
        Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Name="Bd"
              CornerRadius="0,3,3,0"
              Background="{TemplateBinding Background}">
            <Canvas Width="6"
                Height="7"
                Margin="7,2,2,2"
                HorizontalAlignment="Right"
                VerticalAlignment="Bottom"
                SnapsToDevicePixels="true">
              <Path Stroke="White"
                  Data="M 1 1.5 L 6 1.5"/>
              <Path Stroke="{TemplateBinding Foreground}"
                  Data="M 0 0.5 L 5 0.5"/>
              <Path Fill="White"
                  Data="M 0.5 4 L 6.5 4 L 3.5 7 Z"/>
              <Path Fill="{TemplateBinding Foreground}"
                  Data="M -0.5 3 L 5.5 3 L 2.5 6 Z"/>
            </Canvas>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver"
                 Value="true">
              <Setter TargetName="Bd"
                  Property="Background"
                  Value="{StaticResource ToolBarButtonHover}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused"
                 Value="true">
              <Setter TargetName="Bd"
                  Property="Background"
                  Value="{StaticResource ToolBarButtonHover}"/>
            </Trigger>
            <Trigger Property="IsEnabled"
                 Value="false">
              <Setter Property="Foreground"
                  Value="{StaticResource ToolBarGripper}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ToolBarVerticalOverflowButtonStyle"
       TargetType="{x:Type ToggleButton}">
    <Setter Property="Background"
        Value="{StaticResource ToolBarToggleButtonVerticalBackground}"/>
    <Setter Property="MinHeight"
        Value="0"/>
    <Setter Property="MinWidth"
        Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Name="Bd"
              CornerRadius="0,0,3,3"
              Background="{TemplateBinding Background}">
            <Canvas Width="7"
                Height="6"
                Margin="2,7,2,2"
                HorizontalAlignment="Right"
                VerticalAlignment="Bottom"
                SnapsToDevicePixels="true">
              <Path Stroke="White"
                  Data="M 1.5 1 L 1.5 6"/>
              <Path Stroke="{TemplateBinding Foreground}"
                  Data="M 0.5 0 L 0.5 5"/>
              <Path Fill="White"
                  Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z"/>
              <Path Fill="{TemplateBinding Foreground}"
                  Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z"/>
            </Canvas>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver"
                 Value="true">
              <Setter TargetName="Bd"
                  Property="Background"
                  Value="{StaticResource ToolBarButtonHover}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused"
                 Value="true">
              <Setter TargetName="Bd"
                  Property="Background"
                  Value="{StaticResource ToolBarButtonHover}"/>
            </Trigger>
            <Trigger Property="IsEnabled"
                 Value="false">
              <Setter Property="Foreground"
                  Value="{StaticResource ToolBarGripper}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type ToolBar}"
       TargetType="{x:Type ToolBar}">
    <Setter Property="Background"
        Value="{StaticResource ToolBarHorizontalBackground}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolBar}">
          <Grid Name="Grid"
              Margin="3,1,1,1">
            <Grid HorizontalAlignment="Right"
                x:Name="OverflowGrid">
              <ToggleButton x:Name="OverflowButton"
                      IsEnabled="{TemplateBinding HasOverflowItems}"
                      Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}"
                      IsChecked="{Binding Path=IsOverflowOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                      ClickMode="Press"/>
              <Popup x:Name="OverflowPopup"
                   AllowsTransparency="true"
                   Placement="Bottom"
                   IsOpen="{Binding Path=IsOverflowOpen,RelativeSource={RelativeSource TemplatedParent}}"
                   StaysOpen="false"
                   Focusable="false"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Grid Name="Overflow">
                  <Border Name="OverflowBorder"
                      Background="{StaticResource ToolBarSubMenuBackground}"
                      BorderBrush="{StaticResource ToolBarMenuBorder}"
                      BorderThickness="1"/>
                  <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
                              Margin="3"
                              WrapWidth="200"
                              KeyboardNavigation.TabNavigation="Cycle"
                              KeyboardNavigation.DirectionalNavigation="Cycle"/>
                </Grid>
              </Popup>
            </Grid>
            <Border x:Name="MainPanelBorder"
                Margin="0,0,11,0"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="3,3,3,3"
                Padding="{TemplateBinding Padding}">
              <DockPanel KeyboardNavigation.TabIndex="1"
                     KeyboardNavigation.TabNavigation="Local">
                <Thumb x:Name="ToolBarThumb"
                     Style="{StaticResource ToolBarThumbStyle}"
                     Width="8"
                     Padding="2,4,2,4"/>
                <ContentPresenter x:Name="ToolBarHeader"
                          ContentSource="Header"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center"
                          Margin="0,0,4,0"/>
                <ToolBarPanel x:Name="PART_ToolBarPanel"
                        IsItemsHost="true"/>
              </DockPanel>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsOverflowOpen"
                 Value="true">
              <Setter TargetName="ToolBarThumb"
                  Property="IsEnabled"
                  Value="false"/>
            </Trigger>
            <Trigger Property="Header"
                 Value="{x:Null}">
              <Setter TargetName="ToolBarHeader"
                  Property="Visibility"
                  Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ToolBarTray.IsLocked"
                 Value="true">
              <Setter TargetName="ToolBarThumb"
                  Property="Visibility"
                  Value="Collapsed"/>
            </Trigger>
            <Trigger SourceName="OverflowPopup"
                 Property="Popup.AllowsTransparency"
                 Value="true">
              <Setter TargetName="Overflow"
                  Property="Margin"
                  Value="0,0,3,3"/>
              <Setter TargetName="Overflow"
                  Property="SnapsToDevicePixels"
                  Value="true"/>
              <Setter TargetName="OverflowBorder"
                  Property="BitmapEffect"
                  Value="{StaticResource PopupDropShadow}"/>
            </Trigger>
            <Trigger Property="Orientation"
                 Value="Vertical">
              <Setter TargetName="Grid"
                  Property="Margin"
                  Value="1,3,1,1"/>
              <Setter TargetName="OverflowButton"
                  Property="Style"
                  Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"/>
              <Setter TargetName="ToolBarThumb"
                  Property="Height"
                  Value="8"/>
              <Setter TargetName="ToolBarThumb"
                  Property="Width"
                  Value="Auto"/>
              <Setter TargetName="ToolBarThumb"
                  Property="Padding"
                  Value="4,2,4,2"/>
              <Setter TargetName="ToolBarHeader"
                  Property="Margin"
                  Value="0,0,0,4"/>
              <Setter TargetName="ToolBarThumb"
                  Property="DockPanel.Dock"
                  Value="Top"/>
              <Setter TargetName="ToolBarHeader"
                  Property="DockPanel.Dock"
                  Value="Top"/>
              <Setter TargetName="OverflowGrid"
                  Property="HorizontalAlignment"
                  Value="Stretch"/>
              <Setter TargetName="OverflowGrid"
                  Property="VerticalAlignment"
                  Value="Bottom"/>
              <Setter TargetName="OverflowPopup"
                  Property="Placement"
                  Value="Right"/>
              <Setter TargetName="MainPanelBorder"
                  Property="Margin"
                  Value="0,0,0,11"/>
              <Setter Property="Background"
                  Value="{StaticResource ToolBarVerticalBackground}"/>
            </Trigger>
            <Trigger Property="IsEnabled"
                 Value="false">
              <Setter Property="Foreground"
                  Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

</ResourceDictionary>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0076)http://www.interact-sw.co.uk/iangblog/2007/05/30/wpf-listview-column-margins -->
<HTML xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>IanG on Tap: ListView Column Margin</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<META content="Ian Griffiths' Weblog" name=description><LINK id=ctl00_rssLink 
title=RSS href="../../../../rss2.0" type=application/rss+xml rel=alternate><LINK 
href="IanG on Tap ListView Column Margin_files/blog.css" type=text/css 
rel=stylesheet>
<META content="MSHTML 6.00.2900.3199" name=GENERATOR></HEAD>
<BODY>
<DIV class=blogTitle>
<H1>IanG on Tap</H1>
<P id=ctl00_subtitle><A href="http://www.interact-sw.co.uk/iangblog/">Ian 
Griffiths in Weblog Form</A> (<A 
href="http://www.interact-sw.co.uk/iangblog/rss2.0">RSS 2.0</A>)</P></DIV>
<DIV class=blogRightColumn>
<SCRIPT type=text/javascript><!--
google_ad_client = "pub-5895148714260970";
google_ad_width = 234;
google_ad_height = 60;
google_ad_format = "234x60_as";
google_ad_type = "text_image";
//2007-05-08: IanG Blog
google_ad_channel = "1140968575";
google_color_border = "336699";
google_color_bg = "FFFFFF";
google_color_link = "0000FF";
google_color_text = "000000";
google_color_url = "008000";
//-->
</SCRIPT>

<SCRIPT src="IanG on Tap ListView Column Margin_files/show_ads.js" 
type=text/javascript>
</SCRIPT>

<DIV class=blogNav>
<H3>Blog Navigation</H3>
<TABLE>
  <TBODY>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/10/">October 
      (2007)</A></P></TD>
    <TD>
      <P>(1 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/09/">September 
      (2007)</A></P></TD>
    <TD>
      <P>(3 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/08/">August 
      (2007)</A></P></TD>
    <TD>
      <P>(1 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/07/">July 
      (2007)</A></P></TD>
    <TD>
      <P>(1 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/06/">June 
      (2007)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/05/">May 
      (2007)</A></P></TD>
    <TD>
      <P>(8 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/04/">April 
      (2007)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/03/">March 
      (2007)</A></P></TD>
    <TD>
      <P>(7 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/02/">February 
      (2007)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2007/01/">January 
      (2007)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2006/11/">November 
      (2006)</A></P></TD>
    <TD>
      <P>(1 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2006/10/">October 
      (2006)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2006/09/">September 
      (2006)</A></P></TD>
    <TD>
      <P>(1 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2006/06/">June 
      (2006)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2006/05/">May 
      (2006)</A></P></TD>
    <TD>
      <P>(4 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2006/04/">April 
      (2006)</A></P></TD>
    <TD>
      <P>(1 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2006/03/">March 
      (2006)</A></P></TD>
    <TD>
      <P>(5 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2006/01/">January 
      (2006)</A></P></TD>
    <TD>
      <P>(1 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/12/">December 
      (2005)</A></P></TD>
    <TD>
      <P>(3 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/11/">November 
      (2005)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/10/">October 
      (2005)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/09/">September 
      (2005)</A></P></TD>
    <TD>
      <P>(8 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/08/">August 
      (2005)</A></P></TD>
    <TD>
      <P>(7 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/06/">June 
      (2005)</A></P></TD>
    <TD>
      <P>(3 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/05/">May 
      (2005)</A></P></TD>
    <TD>
      <P>(7 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/04/">April 
      (2005)</A></P></TD>
    <TD>
      <P>(6 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/03/">March 
      (2005)</A></P></TD>
    <TD>
      <P>(1 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/02/">February 
      (2005)</A></P></TD>
    <TD>
      <P>(2 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2005/01/">January 
      (2005)</A></P></TD>
    <TD>
      <P>(5 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/12/">December 
      (2004)</A></P></TD>
    <TD>
      <P>(5 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/11/">November 
      (2004)</A></P></TD>
    <TD>
      <P>(7 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/10/">October 
      (2004)</A></P></TD>
    <TD>
      <P>(3 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/09/">September 
      (2004)</A></P></TD>
    <TD>
      <P>(7 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/08/">August 
      (2004)</A></P></TD>
    <TD>
      <P>(16 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/07/">July 
      (2004)</A></P></TD>
    <TD>
      <P>(10 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/06/">June 
      (2004)</A></P></TD>
    <TD>
      <P>(27 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/05/">May 
      (2004)</A></P></TD>
    <TD>
      <P>(15 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/04/">April 
      (2004)</A></P></TD>
    <TD>
      <P>(15 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/03/">March 
      (2004)</A></P></TD>
    <TD>
      <P>(13 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/02/">February 
      (2004)</A></P></TD>
    <TD>
      <P>(16 items)</P></TD></TR>
  <TR>
    <TD>
      <P><A href="http://www.interact-sw.co.uk/iangblog/2004/01/">January 
      (2004)</A></P></TD>
    <TD>
      <P>(15 items)</P></TD></TR></TBODY></TABLE>
<P id=ctl00_ctl01_pBlogHome><A 
href="http://www.interact-sw.co.uk/iangblog/">Blog Home</A></P>
<P id=ctl00_ctl01_pBlogRss><A 
href="http://www.interact-sw.co.uk/iangblog/rss2.0">RSS 2.0</A></P>
<H3>Writing</H3>
<P><A href="http://www.oreilly.com/catalog/9780596510374/">Programming 
WPF</A></P>
<P><A href="http://www.oreilly.com/catalog/netwinformian/">.NET Windows Forms in 
a Nutshell</A></P>
<P><A href="http://www.oreilly.com/catalog/mastvsnet/">Mastering Visual Studio 
.NET</A></P>
<H3>Other Sites</H3>
<P><A href="http://www.interact-sw.co.uk/">Interact Software</A></P></DIV></DIV>
<DIV class=blogBody>
<HR>

<H2>ListView Column Margin - <SPAN class=blogDate>Wednesday 30 May, 2007, 10:44 
PM </SPAN></H2>
<DIV class=blogitem>
<P>[<B>Updated 31</B><B>st</B><B> May 2007</B>: <A 
href="http://www.pluralsight.com/blogs/dan/">Dan Sullivan</A> emailed me to 
point out a much simpler way to implement my hack.]</P>
<P>In my previous post, I showed <A 
href="http://www.interact-sw.co.uk/iangblog/2007/05/30/fill-wpf-listview-columns">how 
to set the alignment on a ListView column in order to make the column contents 
stretch to fill the available width</A>. I also observed that it’s tricky to get 
rid of the margins to the left and right of the contents of each column. Let’s 
take a look at that.</P>
<P>The problem is that the <CODE>ListView</CODE> adds a fixed, hard-coded margin 
around each column item. It’s added by the <CODE>GridViewRowPresenter</CODE> 
class. You get one <CODE>GridViewRowPresenter</CODE> object for each row in the 
list, and its job is to generate the items for each of the columns in the list. 
Item generation happens in a private method called <CODE>CreateCell</CODE>, and 
if you take a look at this with a tool like <A 
href="http://www.aisto.com/roeder/dotnet/">Reflector</A>, you’ll see that this 
does two slightly irritating things to the elements it generates:</P>
<UL>
  <LI>
  <P></P>Copies the <CODE>VerticalAlignment</CODE> and 
  <CODE>HorizontalAlignment</CODE> properties from the parent 
  <CODE>ListViewItem</CODE>’s 
  <CODE>Vertical</CODE><CODE>Content</CODE><CODE>Alignment</CODE> and 
  <CODE>Horizontal</CODE><CODE>Content</CODE><CODE>Alignment</CODE> 
  <LI>
  <P></P>Sets the <CODE>Margin</CODE> to the value stored in 
  <CODE>_</CODE><CODE>defalutCellMargin</CODE> (yes, that’s really is the 
  spelling they use) </LI></UL>
<P>The first is moderately irritating because it requires us to use the 
technique described in my previous post. (See that post for an explanation of 
why this causes a problem. The executive summary is that this ends up aligning 
column contents to the left, when you really want <CODE>Stretch</CODE> 
alignment.) Fortunately, this first problem is easy to work around, as described 
in the previous post.</P>
<P>The second problem—the hard-coded <CODE>Margin</CODE>—is much more 
irritating. It turns out that there’s simply no way of changing the margin. That 
<CODE>_</CODE><CODE>defalutMargin</CODE> field is initialized during static 
construction to <CODE>new </CODE><CODE>Thickness(</CODE><CODE>6,0,6,0)</CODE> 
and there’s no mechanism for altering it.</P>
<P>I get the impression that the <CODE>ListView</CODE> didn’t get quite the same 
level of review as most of the other controls in WPF. This is compounded by the 
poor spelling of the <CODE>_</CODE><CODE>defalutMargin</CODE> property. Of 
course bad spelling is not a reliable indicator of bad code, particularly if the 
developer’s first language is not English. However, since an awful lot of the 
people on the WPF team do seem to have English as a first language, the fact 
that this mistake wasn’t noticed does make me wonder just how many people 
reviewed this code.</P>
<P>But it’s not really about the spelling. The fundamental issue that 
hard-coding a <CODE>Margin</CODE> into the guts of some helpful function like 
this seems distinctly un-WPF. Visible features like margins and padding are 
almost invariably specified in either a <CODE>Style</CODE> or a 
<CODE>Template</CODE>, so it’s really unusual to see such a visual feature baked 
into the code. Most of the built-in controls allow pretty much everything you 
see about them to be replaced, but you can’t get rid of this column margin in 
the <CODE>ListView</CODE>. Even if you’re prepared to take the drastic step of 
completely re-templating the entire control just to fix this one thing, that 
doesn’t help. The <CODE>GridViewRowPresenter</CODE> provides some critical 
functionality of the grid view of the <CODE>ListView</CODE>. (It’s the thing 
that knows how to generate the items that make up a row in the list.) This means 
that you <I>have</I> to use a <CODE>GridViewRowPresenter</CODE> in a custom 
template for a <CODE>ListViewItem</CODE> if you want to use the grid view, which 
in turn means that you can’t get rid of the fixed margin. (Or at least, not 
without a horrible hack—see below.)</P>
<P>In short, <CODE>GridViewRowPresenter</CODE> inextricably combines core 
functionality of the control with an aspect of the control’s appearance. This is 
disappointing, because the vast majority of WPF controls separate such 
things.</P>
<P>I’m not easily discouraged however, so I invented a horrible workaround.</P>
<H3>Horrible Hack of a Workaround</H3>
<P>The big problem with the fact that <CODE>GridViewRowPresenter</CODE> just 
sets the <CODE>Margin</CODE> property directly instead of using a style is that 
local values for properties have a very high precedence. (Most properties in WPF 
have several potential values. There’s the default value, there might be a value 
provided by a style in the current theme, that style may also have triggers, 
there might be a local application style, the property might be animated, etc. 
<A href="http://msdn2.microsoft.com/en-us/library/ms743230.aspx">WPF defines an 
order of precedence for these possible values</A>. The current value is simply 
the highest priority value available.) So you can’t override these things with a 
style, because a local property values always take precedence over styles.</P>
<P>Perhaps we could provide a higher priority value. But there are only two 
value sources with higher priority than local values: animations, and coerced 
values. We could use coercion by overriding the metadata for <CODE>Margin</CODE> 
on a custom element. Problem is, WPF won’t actually use our custom 
element—<CODE>GridViewRowPresenter</CODE> always creates either a 
<CODE>TextBlock</CODE> or a <CODE>ContentPresenter</CODE>. We could try to 
animate the relevant element, but that seems pretty horrible, and in any case, 
it’s not obvious how you’d target the thing.</P>
<P>Instead, I went with a simpler hack: write a custom element that resets its 
parent’s <CODE>Margin</CODE>. [<B>Update</B>: this solution isn’t actually 
necessary. It has been pointed out to me that a simpler solution exists, 
described in the next section. So please don’t use this...] This is horrible, 
but fairly simple, and it seems to be effective. Here it is:</P><PRE><SPAN style="COLOR: blue">public</SPAN> <SPAN style="COLOR: blue">class</SPAN> <SPAN style="COLOR: dimgray">RemoveParentMargin</SPAN> : <SPAN style="COLOR: dimgray">Decorator</SPAN>
{
    <SPAN style="COLOR: blue">protected</SPAN> <SPAN style="COLOR: blue">override</SPAN> <SPAN style="COLOR: blue">void</SPAN> OnVisualParentChanged(<SPAN style="COLOR: dimgray">DependencyObject</SPAN> oldParent)
    {
        <SPAN style="COLOR: blue">base</SPAN>.OnVisualParentChanged(oldParent);

        <SPAN style="COLOR: dimgray">FrameworkElement</SPAN> cp = <SPAN style="COLOR: dimgray">VisualTreeHelper</SPAN>.GetParent(<SPAN style="COLOR: blue">this</SPAN>)
                                 <SPAN style="COLOR: blue">as</SPAN> <SPAN style="COLOR: dimgray">FrameworkElement</SPAN>;
        <SPAN style="COLOR: blue">if</SPAN> (cp != <SPAN style="COLOR: blue">null</SPAN>)
        {
            cp.Margin = <SPAN style="COLOR: blue">new</SPAN> <SPAN style="COLOR: dimgray">Thickness</SPAN>(0.0);
        }
    }
}
</PRE>
<P>We can now modify the example from my previous entry to use this:</P><PRE><SPAN style="COLOR: blue">&lt;</SPAN><SPAN style="COLOR: brown">Grid</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">  &lt;</SPAN><SPAN style="COLOR: brown">Grid.Resources</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">    &lt;</SPAN><SPAN style="COLOR: brown">x:Array</SPAN><SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">Type</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">{x:Type s:String}</SPAN>"<SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">x:Key</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">items</SPAN>"<SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">      &lt;</SPAN><SPAN style="COLOR: brown">s:String</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>Foo<SPAN style="COLOR: blue">&lt;/</SPAN><SPAN style="COLOR: brown">s:String</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">      &lt;</SPAN><SPAN style="COLOR: brown">s:String</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>Bar<SPAN style="COLOR: blue">&lt;/</SPAN><SPAN style="COLOR: brown">s:String</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">      &lt;</SPAN><SPAN style="COLOR: brown">s:String</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>Spong<SPAN style="COLOR: blue">&lt;/</SPAN><SPAN style="COLOR: brown">s:String</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">    &lt;/</SPAN><SPAN style="COLOR: brown">x:Array</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">  &lt;/</SPAN><SPAN style="COLOR: brown">Grid.Resources</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>

<SPAN style="COLOR: blue">  &lt;</SPAN><SPAN style="COLOR: brown">ListView</SPAN><SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">ItemsSource</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">{StaticResource items}</SPAN>"<SPAN style="COLOR: blue">&gt;</SPAN>

<SPAN style="COLOR: blue">    &lt;</SPAN><SPAN style="COLOR: brown">ListView.ItemContainerStyle</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">      &lt;</SPAN><SPAN style="COLOR: brown">Style</SPAN><SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">TargetType</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">ListViewItem</SPAN>"<SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">        &lt;</SPAN><SPAN style="COLOR: brown">Setter</SPAN><SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">Property</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">HorizontalContentAlignment</SPAN>"
<SPAN style="COLOR: blue">                </SPAN><SPAN style="COLOR: red">Value</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">Stretch</SPAN>"<SPAN style="COLOR: blue"> /&gt;</SPAN>
<SPAN style="COLOR: blue">      &lt;/</SPAN><SPAN style="COLOR: brown">Style</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">    &lt;/</SPAN><SPAN style="COLOR: brown">ListView.ItemContainerStyle</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>

<SPAN style="COLOR: blue">    &lt;</SPAN><SPAN style="COLOR: brown">ListView.View</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">      &lt;</SPAN><SPAN style="COLOR: brown">GridView</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">        &lt;</SPAN><SPAN style="COLOR: brown">GridViewColumn</SPAN><SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">Header</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">Data</SPAN>"<SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">Width</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">80</SPAN>"<SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">          &lt;</SPAN><SPAN style="COLOR: brown">GridViewColumn.CellTemplate</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">            &lt;</SPAN><SPAN style="COLOR: brown">DataTemplate</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">              &lt;</SPAN><SPAN style="COLOR: brown">loc:RemoveParentMargin</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">                &lt;</SPAN><SPAN style="COLOR: brown">TextBox</SPAN><SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">Margin</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">0</SPAN>"<SPAN style="COLOR: blue">  </SPAN><SPAN style="COLOR: red">Text</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">{Binding .}</SPAN>"<SPAN style="COLOR: blue">  /&gt;</SPAN>
<SPAN style="COLOR: blue">              &lt;/</SPAN><SPAN style="COLOR: brown">loc:RemoveParentMargin</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">            &lt;/</SPAN><SPAN style="COLOR: brown">DataTemplate</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">          &lt;/</SPAN><SPAN style="COLOR: brown">GridViewColumn.CellTemplate</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">        &lt;/</SPAN><SPAN style="COLOR: brown">GridViewColumn</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">        &lt;</SPAN><SPAN style="COLOR: brown">GridViewColumn</SPAN><SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">Header</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">Length</SPAN>"
                       <SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">DisplayMemberBinding</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">{Binding Length}</SPAN>"<SPAN style="COLOR: blue"> /&gt;</SPAN>
<SPAN style="COLOR: blue">      &lt;/</SPAN><SPAN style="COLOR: brown">GridView</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">    &lt;/</SPAN><SPAN style="COLOR: brown">ListView.View</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">  &lt;/</SPAN><SPAN style="COLOR: brown">ListView</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>

<SPAN style="COLOR: blue">&lt;/</SPAN><SPAN style="COLOR: brown">Grid</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
</PRE>
<P>(As before, this assumes you’ve mapped the <CODE>s:</CODE> prefix to the 
<CODE>System</CODE> namespace in <CODE>mscorlib</CODE>. It also requires 
<CODE>loc:</CODE> to be mapped to whatever namespace in which you’ve defined 
that <CODE>RemoveParentMargin</CODE> class.)</P>
<P>The first column’s <CODE>TextBox</CODE> is now wrapped with this 
<CODE>RemoveParentMargin</CODE> hack element, which successfully removes the 
unwanted margin. The <CODE>TextBox</CODE> gets to fill the whole width of the 
column.</P>
<P><B>Update</B>: After I posted this, Dan Sullivan pointed out to me that we 
get exactly this effect without needing to go as far as writing a custom 
element. A simpler solution exists.</P>
<H3>A Simpler Horrible Hack</H3>
<P>We don’t need the custom <CODE>RemoveParentMargin</CODE> to get rid of the 
margin in this particular example. We can just give the root element of the 
column template a negative margin:</P><PRE><SPAN style="COLOR: blue">&lt;</SPAN><SPAN style="COLOR: brown">GridViewColumn.CellTemplate</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">  &lt;</SPAN><SPAN style="COLOR: brown">DataTemplate</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">    &lt;</SPAN><SPAN style="COLOR: brown">TextBox</SPAN><SPAN style="COLOR: blue"> </SPAN><SPAN style="COLOR: red">Margin</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">-6,0</SPAN>"<SPAN style="COLOR: blue">  </SPAN><SPAN style="COLOR: red">Text</SPAN><SPAN style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">{Binding .}</SPAN>"<SPAN style="COLOR: blue">  /&gt;</SPAN>
<SPAN style="COLOR: blue">  &lt;/</SPAN><SPAN style="COLOR: brown">DataTemplate</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
<SPAN style="COLOR: blue">&lt;/</SPAN><SPAN style="COLOR: brown">GridViewColumn.CellTemplate</SPAN><SPAN style="COLOR: blue">&gt;</SPAN>
</PRE>
<P>The reason this solution eluded me is that I was thinking that 
<CODE>GridViewRowPresenter</CODE> would clip its children. Not sure why I 
thought that, but there you are...</P>
<H3>Yuck</H3>
<P>I really don’t like either of these workarounds. They feel fragile. The 
first, because it depends on implementation details. Any change to how the 
<CODE>ListView</CODE> works could easily break it—this just assumes that the 
parent of the root of the column template is the one that has the offending 
extra margin. And the second, also assumes that a negative margin will work 
without clipping; it happens to here, but there are situations in which it 
wouldn’t.</P>
<P>I think the proper way for this to be fixed would be for the 
<CODE>GridViewRowPresenter</CODE> to pick up the margin from the containing 
<CODE>ListViewItem</CODE> object’s <CODE>Padding</CODE> property. This would be 
consistent with the fact that the vertical and horizontal alignment for row 
items also come from the <CODE>ListViewItem</CODE>. That <CODE>Padding</CODE> 
property doesn’t seem to be used for anything in the <CODE>ListView</CODE> right 
now, but if it were used for this purpose, it would become possible to adjust 
this with nothing more than a style. That would be much better than writing a 
hacky shim element. But that’s something only Microsoft can fix.</P></DIV></DIV>
<DIV class=blogBody>
<HR>
<SPAN class=copyright>Copyright © 2002-2007, <A id=ctl00_homeLink 
href="http://www.interact-sw.co.uk/">Interact Software Ltd.</A> Content by <A 
href="mailto:ian@interact-sw.co.uk">Ian Griffiths</A>. Please direct all Web 
site inquiries to <A 
href="mailto:webmaster@interact-sw.co.uk">webmaster@interact-sw.co.uk</A></SPAN> 
</DIV></BODY></HTML>

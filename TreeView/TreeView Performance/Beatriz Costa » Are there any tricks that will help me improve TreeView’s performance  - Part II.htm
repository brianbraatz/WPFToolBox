<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>Beatriz Costa » Are there any tricks that will help me improve TreeView’s performance? - Part II</title>



<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="generator" content="WordPress 2.2.2"><!-- leave this for stats --><!-- Editable Meta Tags --> 

<meta name="description" content="">
<meta name="keywords" content="">
<meta name="author" content="Sreejith - GFXedit.com">
<meta name="copyright" content="Your Name">
<meta name="generator" content="WordPress 2.2.2">
<meta name="robots" content="index,follow"><!-- Meta Tags End--><!-- Style Sheet -->



<style type="text/css" media="screen">
@import url( http://www.beacosta.com/blog/wp-content/themes/darkpad-10/style.css );
</style><!-- Style Sheet End --><!-- Includes -->



 <script type="text/javascript" src="Beatriz%20Costa%20%BB%20Are%20there%20any%20tricks%20that%20will%20help%20me%20improve%20TreeView%92s%20performance%20%20-%20Part%20II_files/addEvent.htm"></script>
 <script type="text/javascript" src="Beatriz%20Costa%20%BB%20Are%20there%20any%20tricks%20that%20will%20help%20me%20improve%20TreeView%92s%20performance%20%20-%20Part%20II_files/titles.htm"></script><!-- End Includes --><!-- Feed and Ping URLS-->



<link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://www.beacosta.com/blog/?feed=rss2">
<link rel="alternate" type="text/xml" title="RSS .92" href="http://www.beacosta.com/blog/?feed=rss">
<link rel="alternate" type="application/atom+xml" title="Atom 0.3" href="http://www.beacosta.com/blog/?feed=atom">
<link rel="pingback" href="http://www.beacosta.com/blog/xmlrpc.php"><!--?php wp_get_archives('type=monthly&format=link'); ?-->

	<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.beacosta.com/blog/xmlrpc.php?rsd">
<script language="javascript" type="text/javascript">
<!--
		function collapseThread( theId ) {
			var comment = document.getElementById(theId);
			if(!comment)
			{
				alert("ERROR:\nThe document structure is different\nfrom what Threaded Comments expects.\nYou are missing the element '"+theId+"'");
				return;
			}
			var theBody = findBody(comment);
			if(comment.className.indexOf("collapsed") > -1) {
				comment.className = comment.className.replace(" collapsed", "");;
			} else {
				comment.className += " collapsed";
			}
		}

		function expandThread( theId ) {
			var comment = document.getElementById(theId);
			if(!comment)
			{
				alert("ERROR:\nThe document structure is different\nfrom what Threaded Comments expects.\nYou are missing the element '"+theId+"'");
				return;
			}
			var theBody = findBody(comment);
			if(comment.className.indexOf("collapsed") > -1) {
				comment.className = comment.className.replace(" collapsed", "");;
			} 
		}
		
		function findBody(el)
		{
			var divs = el.getElementsByTagName("div");
			var ret;
			for(var i = 0; i < divs.length; ++i) {
				if(divs.item(i).className.indexOf("body") > -1)
					return divs.item(i);
			}
			return false;
		}
	
		function onAddComment() {
			//checkDocumentIntegrity();
			var el = document.getElementById("commentform");
			// Future release: Check if form is filled correctly and mark the form fields.
			el.submit();
		}
		
		function moveAddCommentBelow(theId, threadId, collapse)
		{
			expandThread( theId );
			var addComment = document.getElementById("addcomment");
			if(!addComment)
			{
			  	alert("ERROR:\nThreaded Comments can't find the 'addcomment' div.\nThis is probably because you have changed\nthe comments.php file.\nMake sure there is a tag around the form\nthat has the id 'addcomment'"); 
				return
			}
			var comment = document.getElementById(theId);
			if(collapse)
			{
				for(var i = 0; i < comment.childNodes.length; ++i) {
					var c = comment.childNodes.item(i);
					if(typeof(c.className) == "string" && c.className.indexOf("collapsed")<0) {
						c.className += " collapsed";
					}
				}
			}
			addComment.parentNode.removeChild(addComment);

			comment.appendChild(addComment);
			if(comment.className.indexOf("alt")>-1) {
				addComment.className = addComment.className.replace(" alt", "");					
			} else {
				addComment.className += " alt";
			}
		        var replyId = document.getElementById("comment_reply_ID");
			if(replyId == null)
			{
				alert("Brians Threaded Comments Error:\nThere is no hidden form field called\n'comment_reply_ID'. This is probably because you\nchanged the comments.php file and forgot\nto include the field. Please take a look\nat the original comments.php and copy the\nform field over.");
			}
			replyId.value = threadId;
			var reRootElement = document.getElementById("reroot");
			if(reRootElement == null)
			{
				alert("Brians Threaded Comments Error:\nThere is no anchor tag called 'reroot' where\nthe comment form starts.\nPlease compare your comments.php to the original\ncomments.php and copy the reroot anchor tag over.");
			}
			reRootElement.style.display = "block";
			var aTags = comment.getElementsByTagName("A");
			var anc = aTags.item(0).id;
			//document.location.href = "#"+anc;
			document.getElementById("comment").focus();
		}

		function checkDocumentIntegrity()
		{
			str = "";
			
			str += checkElement("reroot","div tag");
			str += checkElement("addcomment", "div tag");
			str += checkElement("comment_reply_ID", "hidden form field");
			str += checkElement("content", "div tag");
			str += checkElement("comment", "textfield");
			str += checkElement("addcommentanchor", "anchor tag");
			
			if(str != "")
			{
				str = "Brian's Threaded Comments are missing some of the elements that are required for it to function correctly.\nThis is probably the because you have changed the original comments.php that was included with the plugin.\n\nThese are the errors:\n" + str;
				str += "\nYou should compare your comments.php with the original comments.php and make sure the required elements have not been removed.";

				alert(str);
			}
		}
               
		function checkElement(theId, elDesc)
		{
			var el = document.getElementById(theId);
			if(!el)
			{
				if(elDesc == null)
					elDesc = "element";
				return "- The "+elDesc+" with the ID '" +theId + "' is missing\n"; 
			}
			else 
				return "";
		}
		
		function reRoot()
		{
			var addComment = document.getElementById("addcomment");			
			var reRootElement = document.getElementById("reroot");
			reRootElement.style.display = "none";
			var content = document.getElementById("content");
			addComment.parentNode.removeChild(addComment);
			content.appendChild(addComment);
			addComment.className = addComment.className.replace(" alt", "");
			document.location.href = "#addcommentanchor";
			document.getElementById("comment").focus();				
			document.getElementById("comment_reply_ID").value = "0";
		}			
		
		function changeCommentSize(d)
		{
			var el = document.getElementById("comment");
			var height = parseInt(el.style.height);
			if(!height && el.offsetHeight)
				height = el.offsetHeight;
			height += d;
			if(height < 20) 
				height = 20;
			el.style.height = height+"px";
		}		
-->
</script>
<style type="text/css">
.comment 
{
	position: 				relative;
	margin:					3px;
	margin-top:				6px;
/*	border: 				1px solid #666; */
	padding:				4px 4px 4px 8px;
	background-color:		#fff;
}

.odd
{
	background-color: #f8f8f8;
}

.comment div {
	position: 				relative;
}

.comment .comment img
{
	margin: 				0px;
}

.comment .collapseicon 
{
	width: 					13px;
	height: 				13px;
	overflow:				hidden;
	background-image: 		url(http://www.beacosta.com/blog/wp-content/plugins/briansthreadedcomments.php?image=subthread-open.png);
}

.collapsed .collapseicon 
{
	background-image: 		url(http://www.beacosta.com/blog/wp-content/plugins/briansthreadedcomments.php?image=subthread.png);
}


.comment .reply {
	text-align: 			right;
	font-size: 				80%;
	padding: 				0px 6px 6px 0px;
}

.comment
{
	border: 	1px solid #ddd;
	margin-top: 			10px;
}

input#subscribe
{
	width: auto;
}

.comment .body .content
{
	padding:				0px 3px 0px 3px;
	width: 					100%;	
	overflow: 				auto; 
}

.comment .title abbr
{
	border: none;
}

.collapsed .body, .collapsed .comment
{
	display:				none;
}
/*
#addcomment small, #addcomment div
{
	padding:				3px;
}
*/
#commentform textarea {
	width: 97%;
}
</style><!-- End Feed and Ping URLS--></head><body>
	<div id="container">
		<div id="banner">
			<h1><a accesskey="1" href="http://www.beacosta.com/blog" title="Beatriz Costa">Beatriz Costa</a></h1>
			<h2 title="WPF Data Binding">WPF Data Binding</h2>
		</div>
		
		<div id="center">
			<div class="content">
								<div class="post">
					<div class="date">September 10, 2007</div>
					<h2 id="post-43"><a id="postTitle" href="http://www.beacosta.com/blog/?p=43" rel="bookmark" title="Are there any tricks that will help me improve TreeView’s performance? - Part II">Are there any tricks that will help me improve TreeView’s performance? - Part II</a></h2>
					<p><span id="text">In my <a href="http://www.beacosta.com/Archive/2007_08_01_bcosta_archive.html">previous post</a>,
I discussed some of the performance limitations of TreeView. In
particular, I mentioned the three facts about our current
implementation that may lead to performance issues, depending on your
scenario:</span></p>
<p><span id="text">- UI elements stay in memory even when collapsed.<br>
- There is no UI virtualization.<br>
- There is no data virtualization.</span></p>
<p><span id="text">Today I will talk about a trick that avoids the
first problem and partially fixes the third. In my previous post, I
always kept the data for all levels of the TreeView in memory. In this
project, I only load subkey data items when their parent key node is
expanded, and I discard those data items when their parent node is
collapsed. You can think of the class that manages which portions of
the data source stay in memory as an intermediate custom source, which
sits between your UI and the complete source of your items. In this
case, the complete source for the registry keys consists of the APIs
used to load them into memory, but you can easily imagine how this
could be a SQL database or a webservice. If you’ve read <a href="http://blogs.msdn.com/johngossman/archive/2006/04/13/576163.aspx">John Gossman’s thoughts</a> on the Model-View-ViewModel pattern, you can think of this intermediate class as the “ViewModel” section.</span></p>
<p><span id="text">Let’s start by looking at the custom data source.
Similarly to my previous post, I have a RegistryKeyHolder2 class that
contains a ShortName property and another property that holds the
SubKeys collection of type
ObservableCollection&lt;RegistryKeyHolder2&gt;. I also have a
PopulateSubKeys() method that fills the SubKeys collection with
instances of the children keys, which I showed in my previous post. The
only new method I added to this class is ClearSubKeys(), which I will
use to discard items from memory when I collapse a TreeViewItem:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;public int ClearSubKeys()<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int subKeyCount = CountSubKeys(this);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.subKeys.Clear();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return subKeyCount;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}</span></p>
<p><span id="text">Just like last week’s sample, I have a RegistryData2
class that contains a RootKeys property of type
ObservableCollection&lt;RegistryKeyHolder2&gt;. This will hold the
first level of keys displayed in the TreeView, as well as the whole
hierarchy of keys that is displayed underneath it. However, unlike my
previous post, this class has methods that will populate and clear the
keys of just one level, and not the whole hierarchy. I implemented it
this way because I will populate or clear items only when the
TreeViewItems are expanded and collapsed, and that will only ever
affect one level at a time.</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;public void PopulateSubKeys(RegistryKeyHolder2 keyHolder)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int itemsAddedCount = keyHolder.PopulateSubKeys();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;…<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;public void ClearSubKeys(RegistryKeyHolder2 keyHolder)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int itemsClearedCount = keyHolder.ClearSubKeys();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;…<br>
&nbsp;&nbsp;&nbsp;&nbsp;}</span></p>
<p><span id="text">The next step is to cause these methods to be called
when TreeViewItems are expanded and collapsed. This can be done easily
with the following code and XAML:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;&lt;TreeView<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;…<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TreeViewItem.Collapsed=”ItemCollapsedOrExpanded2″<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TreeViewItem.Expanded=”ItemCollapsedOrExpanded2″&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;…<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/TreeView&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;private void ItemCollapsedOrExpanded2(object sender, RoutedEventArgs e)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TreeViewItem tvi = (TreeViewItem)e.OriginalSource;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RegistryKeyHolder2 keyHolder = (RegistryKeyHolder2)tvi.Header;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RegistryData2 registryData = (RegistryData2)this.grid2.DataContext;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e.RoutedEvent == TreeViewItem.ExpandedEvent)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registryData.PopulateSubKeys(keyHolder);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (e.RoutedEvent == TreeViewItem.CollapsedEvent)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registryData.ClearSubKeys(keyHolder);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.InvokeUpdateVisualCount(this.treeView2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.Handled = true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}</span></p>
<p><span id="text">This is basically all that needs to be done at the
data level. If you use this source with the default style for
TreeViewItem, however, you will see that you will not be provided with
the UI to expand the first level of TreeViewItems. This happens because
the expander arrow (or plus sign, depending on your theme) is only
visible when the HasItems property of TreeViewItem is true. How did I
figure this out? Easy, I used <a href="http://www.microsoft.com/expression/products/overview.aspx?key=blend">Blend</a>
to look at the default template for TreeViewItem. I started by creating
a new project and adding a TreeView to it. Then I went to the “Object”
menu, clicked on “Edit other styles”, “Edit ItemContainerStyle”, “Edit
a Copy”, gave it a name and clicked OK. And that’s it, you can look at
the default style for TreeViewItem in the XAML tab. Here is the part of
the XAML that causes the undesired behavior:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;&lt;ControlTemplate TargetType=”{x:Type TreeViewItem}”&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;…<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ControlTemplate.Triggers&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;…<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Trigger Property=”HasItems” Value=”false”&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Setter
Property=”Visibility” TargetName=”Expander” Value=”Hidden”/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Trigger&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;…<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ControlTemplate.Triggers&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ControlTemplate&gt;</span></p>
<p><span id="text">The solution for this problem is to have the
visibility of the expander of a particular key be controlled by the
count of its subkeys. Since the subkeys are not loaded in memory when
the parent key is created, you can not use the “Count” property of the
“SubKeys” collection to retrieve this information (it is always 0).
Fortunately, the “RegistryKey” class in the CLR contains a
“SubKeyCount” property that we can use for this purpose. Here is the
replacement for the XAML above:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;&lt;ControlTemplate TargetType=”{x:Type TreeViewItem}”&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;…<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ControlTemplate.Triggers&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;…<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DataTrigger
Binding=”{Binding Path=Key.SubKeyCount}” Value=”0″&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Setter
Property=”Visibility” TargetName=”Expander” Value=”Hidden”/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/DataTrigger&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;…<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ControlTemplate.Triggers&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ControlTemplate&gt;</span></p>
<p><span id="text">And finally, here is the XAML I used to declare the TreeView:</span></p>
<p><span id="code">&nbsp;&nbsp;&nbsp;&nbsp;&lt;TreeView ItemsSource=”{Binding Path=RootKeys}”<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;…<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TreeViewItem.Collapsed=”ItemCollapsedOrExpanded2″<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TreeViewItem.Expanded=”ItemCollapsedOrExpanded2″&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TreeView.Resources&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;HierarchicalDataTemplate
DataType=”{x:Type local:RegistryKeyHolder2}” ItemsSource=”{Binding
Path=SubKeys}”&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TextBlock
Text=”{Binding Path=ShortName}” /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/HierarchicalDataTemplate&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;…
Here I added the default styles and templates for TreeView that I
copied from Blend,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modified with the DataTrigger above…<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/TreeView.Resources&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TreeView.ItemContainerStyle&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;StaticResourceExtension ResourceKey=”tvStyle1″ /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/TreeView.ItemContainerStyle&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/TreeView&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
<p><span id="text">At the beginning of this post, I mentioned that the
solution I presented here avoids keeping elements in memory after
they’ve been collapsed and partially fixes data virtualization. Is this
really the case?</span></p>
<p><span id="text"><strong>Visuals no longer stay in memory when collapsed</strong></span></p>
<p><span id="text">The fact that I’m discarding the data items when a
TreeViewItem is collapsed causes the UIElement associated with those
items to also be discarded. You can confirm this by looking at the
visual count that I added to the sample, after expanding and collapsing
the first item:</span></p>
<p><img src="Beatriz%20Costa%20%BB%20Are%20there%20any%20tricks%20that%20will%20help%20me%20improve%20TreeView%92s%20performance%20%20-%20Part%20II_files/40TreeViewPerformance21.png" style="margin: 0px auto 10px; display: block; text-align: center;" border="0"></p>
<p><span id="text">The visual count of the TreeView starts out as 49.
After expanding the first item, the count increases to 169, and after
collapsing it, the count becomes 52. There’s a difference in the number
of visuals before and after for two reasons: </span></p>
<p><span id="text">- The StackPanel that wraps the subkey items stays in memory.<br>
- After the vertical scroll bar becomes interactive and then disabled
again, two visuals are left behind. I tried to minimize the difference
of visuals caused by the scroll bar by making it present (but disabled)
from the beginning.</span></p>
<p><span id="text">I would like you to focus on the big numbers, and
not the details. With this solution, after collapsing a TreeViewItem,
almost all of the visuals created when the TreeViewItem was expanded
are not kept in memory any longer.</span></p>
<p><span id="text"><strong>Some of the data is virtualized</strong></span></p>
<p><span id="text">The initial count of data items for this TreeView
scenario is 2. Once the first item is expanded that number goes up to
15, but when you collapse that item, the number of data items goes back
down to 2.</span></p>
<p><img src="Beatriz%20Costa%20%BB%20Are%20there%20any%20tricks%20that%20will%20help%20me%20improve%20TreeView%92s%20performance%20%20-%20Part%20II_files/40TreeViewPerformance22.png" style="margin: 0px auto 10px; display: block; text-align: center;" border="0"></p>
<p><span id="text">Note that I am by no means claiming to provide a
full solution to data virtualization. My solution only listens to
expand and collapse events. True data virtualization for TreeView would
take into account not only expanding and collapsing, but also scrolling
events. Imagine a scenario where you have many TreeViewItems expanded
so that the total number of items expanded in the TreeView is a
thousand (not all of them visible, of course). In this case, my
solution will keep those thousand items in memory, while a true data
virtualization solution would only keep in memory the few items
displayed on the screen. As the user scrolls the TreeView, data
virtualization would figure out which items should be swapped in and
out of memory.</span></p>
<p><span id="text">However, I believe that the solution here offers the
biggest bang for the buck. It’s extremely simple to implement and it
helps with a very common usage scenario for TreeViews: TreeViews can be
bound to extremely large data sets, but users typically only have a
small subset of that data expanded at a particular time.</span></p>
<p><span id="text"><a href="http://www.beacosta.com/Zips/40TreeViewPerformance2.zip">Here</a> you can find the VS project with this sample code. This works with Orcas Beta2 bits. </span></p>
										<p class="posted">Posted by <a href="http://www.beacosta.com/blog/?author=1" title="Posts by Bea">Bea</a> under <a href="http://www.beacosta.com/blog/?cat=7" title="View all posts in TreeView" rel="category">TreeView</a>, <a href="http://www.beacosta.com/blog/?cat=2" title="View all posts in WPF Data Binding" rel="category">WPF Data Binding</a> |   </p>
				</div>				
				<!-- <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
				xmlns:dc="http://purl.org/dc/elements/1.1/"
				xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
			<rdf:Description rdf:about="http://www.beacosta.com/blog/?p=43"
    dc:identifier="http://www.beacosta.com/blog/?p=43"
    dc:title="Are there any tricks that will help me improve TreeView&#8217;s performance? - Part II"
    trackback:ping="http://www.beacosta.com/blog/wp-trackback.php?p=43" />
</rdf:RDF>	-->
				
<!-- You can start editing here. -->

<p><a href="http://www.beacosta.com/blog/?feed=rss2&amp;p=43"><abbr title="Really Simple Syndication">RSS</abbr> feed</a> 
| <a href="http://www.beacosta.com/blog/wp-trackback.php?p=43">Trackback <acronym title="\&quot;Uniform" resource="" identifier\="">URI</acronym></a>
</p>

<h2 id="comments">2 Comments 
<a href="#postcomment" title="Leave a comment">»</a>
</h2>
<div class="commentlist">
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-320" class="comment">
				<a name="comment-320" id="comment-320"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Are%20there%20any%20tricks%20that%20will%20help%20me%20improve%20TreeView%92s%20performance%20%20-%20Part%20II_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-320")'>
					<cite>Comment by Duncan Millard<a href="#comment-320"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-09-13 08:24:04 						
					</div>					
					<div class="content">
						<p>Hi Beatriz,</p>
<p>My question isn’t directly related to the post but instead is a
problem with data validation that’s been asked on the MSDN forums but
as far as I know not resolved yet.</p>
<p>A good description is at: <a href="http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=2079199&amp;SiteID=1" rel="nofollow">http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=2079199&amp;SiteID=1</a></p>
<p>The simple case is, I want to start with an empty data-entry form.
Some fields are mandatory. If I simply submit my data, the controls
will be considered valid, because there has been no update of the
underlying data source and hence no validation rules fired.</p>
<p>It would be great to have a good solution to this - and preferably
to take this further and be able to do validation on non-bound
controls, rather like in ASP.NET. </p>
<p>I hope this feedback is useful to the WPF team!</p>
<p>thanks,</p>
<p>Duncan Millard<br>
<a href="http://geekswithblogs.net/dmillard" rel="nofollow">http://geekswithblogs.net/dmillard</a></p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-320", 320, true); return false;'>Reply to this comment</a>
											</div>
				</div>
			<div style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;" id="div-comment-368" class="comment odd">
				<a name="comment-368" id="comment-368"></a>
				<div class="title">
					<img class="collapseicon" src="Beatriz%20Costa%20%BB%20Are%20there%20any%20tricks%20that%20will%20help%20me%20improve%20TreeView%92s%20performance%20%20-%20Part%20II_files/briansthreadedcomments.png" onclick='collapseThread("div-comment-368")'>
					<cite>Comment by Bea<a href="#comment-368"></a></cite> 
														
				</div>
				<div class="body">
					<div class="meta">
						2007-09-18 17:22:36 						
					</div>					
					<div class="content">
						<p>Hi Duncan,</p>
<p>I’m not sure that I completely understand your scenario. If you
start with an empty data entry form, submit the data, and your
validation rules fail for null/empty string values, your controls
should now be invalid. Validation should fire every time your data is
submitted to the source. You can find <a href="http://www.beacosta.com/BlogComments/33ValidationSample.zip" rel="nofollow">here</a>
a simple project I put together hoping to repro the behavior you
describe. I would like to understand your expectations better because
we know we have some rough edges in validation, and the more concrete
feedback we get about it, the easier it is for us to fix it. </p>
<p>We already have an internal work item tracking adding support for
validation on non-bound controls. The priority of that work will grealy
depend on how much customers ask for it. I would personally love to see
this feature get implemented!</p>
<p>Thanks,<br>
Bea</p>
					</div>
					<div class="reply">
						 
						<a href="#" onclick='moveAddCommentBelow("div-comment-368", 368, true); return false;'>Reply to this comment</a>
											</div>
				</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
					

			</div>
			<!-- This has to be here because of Internet Explorers plethora of layout bugs -->
			<div style="overflow: hidden; height: 1px;">&nbsp;</div>
</div>
<div id="addcomment" class="comment" style="background: rgb(64, 64, 64) none repeat scroll 0%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial;">
<a id="addcommentanchor" name="addcommentanchor"></a>
<form action="http://www.beacosta.com/blog/wp-comments-post.php" method="post" id="commentform">
<div class="add">
	<div id="reroot" style="display: none;">
		<small><a href="#" onclick="reRoot(); return false;">
			Click here to cancel "reply".
		</a></small>
	</div>
	<small>
		Name (required)	</small>
	<div>
		<input name="author" id="author" class="textarea" value="" size="28" tabindex="1" type="text">
	</div>
	<small>
		E-mail (required - never shown publicly)	</small>
	<div>
		<input name="email" id="email" value="" size="28" tabindex="2" type="text">
	</div>
	<small>
		<acronym title="Uniform Resource Identifier">URI</acronym>	</small>
	<div>
		<input name="url" id="url" value="" size="28" tabindex="3" type="text">	
	<div style="display: block;" id="secureimgdiv">
				<p><label for="securitycode">Anti-spam word: (Required)</label><span style="color: rgb(255, 0, 0);">*</span><br>
				<small>To
prove you're a person (not a spam script), type the security word shown
in the picture. Click on the picture to hear an audio file of the word.</small><br>
				<input name="securitycode" id="securitycode" size="30" tabindex="4" type="text">
				<input name="matchthis" value="1426" type="hidden">
				<a href="http://www.beacosta.com/blog?audioselect=1426" title="Hear an audio file of the anti-spam image"><img src="Beatriz%20Costa%20%BB%20Are%20there%20any%20tricks%20that%20will%20help%20me%20improve%20TreeView%92s%20performance%20%20-%20Part%20II_files/blog.jpg" alt="Click to hear an audio file of the anti-spam word" style="border: 1px solid black; vertical-align: top; height: 50px; width: 160px;"></a></p>
			</div></div>

	<small>
		Your Comment (<a href="#" onclick="changeCommentSize(-80); return false;">smaller size</a> | <a href="#" onclick="changeCommentSize(80); return false;">larger size</a>)
	</small>
	<div style="width: 100%;">
		<textarea name="comment" id="comment" cols="60" rows="14" tabindex="4"></textarea>
	</div>
	<small>
You may use &lt;a href="" title=""&gt; &lt;abbr title=""&gt;
&lt;acronym title=""&gt; &lt;b&gt; &lt;blockquote cite=""&gt;
&lt;code&gt; &lt;em&gt; &lt;i&gt; &lt;strike&gt; &lt;strong&gt; in your
comment. </small>
	<div>
		<input name="comment_post_ID" value="43" type="hidden">
		<input name="redirect_to" value="/blog/?p=43" type="hidden">
		<input onclick="if(typeof(onAddComment) == 'function') { onAddComment(); } else { alert('ERROR:\nIt looks like the website administrator hasn\'t activated the Brians Threaded Comments plugin from the plugin page'); };" name="addcommentbutton" id="addcommentbutton" value="Add comment" tabindex="5" type="button">
	</div>
</div>
<input id="comment_reply_ID" name="comment_reply_ID" value="0" type="hidden"><div style="display: none;" id="jsspamblock_hideable">
	<input name="jsspamblock_hidden" value="51a809c8266e4f0d5351dfb69eb3ff5e" type="hidden">
	<p>For spam filtering purposes, please copy the number <strong>9042</strong> to the field below:</p>
	<input name="jsspamblock_input" id="jsspamblock_input" tabindex="5" value="">
</div>
<script type="text/javascript">
	document.getElementById("jsspamblock_input").value = 9042;
	document.getElementById("jsspamblock_hideable").style.display = "none";
</script>
			
			<script language="JavaScript" type="text/javascript">
			<!--
				var urlinput = document.getElementById("url");
				var submitp = urlinput.parentNode;
				var substitution2 = document.getElementById("secureimgdiv");
				submitp.appendChild(substitution2, urlinput);
			// -->
			</script>
</form>
</div>
						
								
				<p></p><div align="center"></div>						
			</div>
		</div>
		<div id="right">
		<div class="sidebar">  
    <!-- Meta -->
	<h2>Meta:</h2>
 	<ul class="noli">
	<li><a href="http://feeds.feedburner.com/BeatrizCosta" title="Syndicate this site using RSS"><abbr title="Really Simple Syndication">RSS</abbr></a></li>
	<li><a href="http://feeds.feedburner.com/CommentsForBeatrizCosta" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
	</ul>				

  <!-- Search -->
  <h2>Search</h2>
	<br>
	<form id="searchform" method="get" action="">
	<input name="s" id="s" size="15" type="text">
	<input name="submit" value="Search" type="submit">
	</form>

  <!-- Categories -->
  <h2>Categories</h2>
	<ul class="menu">
		<li><a href="http://www.beacosta.com/blog/?cat=3" title="View all posts filed under General">General</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=2" title="View all posts filed under WPF Data Binding">WPF Data Binding</a>
	<ul class="children">
	<li><a href="http://www.beacosta.com/blog/?cat=12" title="View all posts filed under Binding to ADO.NET">Binding to ADO.NET</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=14" title="View all posts filed under ListBox">ListBox</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=9" title="View all posts filed under ListView">ListView</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=10" title="View all posts filed under Master-detail">Master-detail</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=13" title="View all posts filed under Sorting, filtering, grouping">Sorting, filtering, grouping</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=11" title="View all posts filed under Styles and Templates">Styles and Templates</a>
</li>
	<li><a href="http://www.beacosta.com/blog/?cat=7" title="View all posts filed under TreeView">TreeView</a>
</li>
	</ul>
</li>
	</ul>					
	
  <!-- Archives -->
	<h2>Archives</h2>
	<ul>
		<li><a href="http://www.beacosta.com/blog/?m=200709" title="September 2007">September 2007</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200708" title="August 2007">August 2007</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200705" title="May 2007">May 2007</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200704" title="April 2007">April 2007</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200701" title="January 2007">January 2007</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200611" title="November 2006">November 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200610" title="October 2006">October 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200609" title="September 2006">September 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200608" title="August 2006">August 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200607" title="July 2006">July 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200606" title="June 2006">June 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200605" title="May 2006">May 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200604" title="April 2006">April 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200603" title="March 2006">March 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200602" title="February 2006">February 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200601" title="January 2006">January 2006</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200512" title="December 2005">December 2005</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200511" title="November 2005">November 2005</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200510" title="October 2005">October 2005</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200509" title="September 2005">September 2005</a></li>
	<li><a href="http://www.beacosta.com/blog/?m=200508" title="August 2005">August 2005</a></li>
	</ul>

</div>			<div id="footer">
				<div class="copyright">
				<small>
				<span class="copy">Copyright © 2007 				<strong><a title="Beatriz Costa" href="http://www.beacosta.com/blog">Beatriz Costa</a>
				</strong>
				</span>
				<br><br>
				</small>
				</div>
			</div>	
		</div>
	</div>
</body></html>
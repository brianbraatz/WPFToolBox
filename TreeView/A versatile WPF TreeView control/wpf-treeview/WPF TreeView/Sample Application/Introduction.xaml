<UserControl x:Class="Hardcodet.Wpf.Samples.Introduction"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Height="Auto" Width="Auto">
  <TextBlock TextWrapping="Wrap">
            <Run FontWeight="Bold"
                 FontSize="12pt"
                 Text="Introduction:" /> 
            <LineBreak />
            <LineBreak />
            The trees  in this sample are <Italic>CategoryTree</Italic>
            controls. <Italic>CategoryTree</Italic> extends the abstract
            <Italic>TreeViewBase</Italic> class and handles items of
            type <Italic>ShopCategory</Italic>.
            If you look at the code in <Italic>CategoryTree.cs</Italic>,
            you'll see that the "implementation" took just 3 lines of code :)
            <LineBreak />
            The advantage is that this control provides a convenient,
            strongly-typed to the tree's data while still fully supporting
            WPF data binding and styling. The clear distinction between
            logical data (the tree's <Italic>Items</Italic> collection)
            and the visual tree (<Italic>TreeViewItem</Italic> nodes),
            eliminates a few shortcomings of the tree, makes it easier to
            handle and simplifies styling of tree nodes remarkably.
            <LineBreak /><LineBreak />
            <Bold>Data Binding:</Bold><LineBreak />
            The tree to the left is data-bound to the <Italic>Categories</Italic>
            property of a <Italic>ShopModel</Italic> class. A <Italic>ShopModel</Italic>
            class has been defined as a resource in <Italic>MainWindow.xaml</Italic>
            <LineBreak />
            The tree to the right is synchronized to the left-hand tree through
            data binding: Both its <Italic>Items</Italic> and
            <Italic>SelectedItem</Italic> properties point to the grid. As
            the <Italic>SelectedItem</Italic> property was declared as
            TwoWay binding, selecting a node in either tree automatically
            changes the selection in the other one.
            <LineBreak /><LineBreak />
            <Bold>Styling:</Bold><LineBreak />
            The tree nodes of the left-hand tree have been styled by setting
            the control's <Italic>TreeNodeStyle</Italic> dependency property.
            This is a type that targets <Italic>TreeViewItem</Italic>, but
            can also provide a data template for the bound items. See the
            sample style.
            <LineBreak />
            The tree on the left has not been styled explicitely. However,
            there is a <Italic>DataTemplate</Italic> within the tree's
            scope that is automatically picked up. This is the same behaviour
            a standard TreeView control would provide.
            <LineBreak />
            The trees themselves have been styled by setting the
            <Italic>TreeStyle</Italic> property on both controls.
          </TextBlock>
</UserControl>

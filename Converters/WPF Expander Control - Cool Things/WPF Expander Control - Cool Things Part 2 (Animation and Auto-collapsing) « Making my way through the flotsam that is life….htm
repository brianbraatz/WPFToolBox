<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0113)http://ewilkerson.wordpress.com/2007/02/02/wpf-expander-control-cool-things-part-2-animation-and-auto-collapsing/ -->
<HTML lang=en dir=ltr xmlns="http://www.w3.org/1999/xhtml"><HEAD 
profile=http://gmpg.org/xfn/11><TITLE>WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…</TITLE>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<META content="MSHTML 6.00.2900.3199" name=GENERATOR><LINK media=screen 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/style.css" 
type=text/css rel=stylesheet><LINK title="RSS 2.0" 
href="http://ewilkerson.wordpress.com/feed/" type=application/rss+xml 
rel=alternate><LINK href="http://ewilkerson.wordpress.com/xmlrpc.php" 
rel=pingback><LINK title="May 2007" 
href="http://ewilkerson.wordpress.com/2007/05/" rel=archives><LINK 
title="April 2007" href="http://ewilkerson.wordpress.com/2007/04/" 
rel=archives><LINK title="February 2007" 
href="http://ewilkerson.wordpress.com/2007/02/" rel=archives><LINK 
title="January 2007" href="http://ewilkerson.wordpress.com/2007/01/" 
rel=archives><LINK 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/global.css" 
type=text/css rel=stylesheet><LINK title=RSD 
href="http://ewilkerson.wordpress.com/xmlrpc.php?rsd" type=application/rsd+xml 
rel=EditURI>
<SCRIPT type=text/javascript>

function addLoadEvent(func) {
  var oldonload = window.onload;
  if (typeof window.onload != 'function') {
    window.onload = func;
  } else {
    window.onload = function() {
      oldonload();
      func();
    }
  }
}
</SCRIPT>

<SCRIPT 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/urchin.js" 
type=text/javascript></SCRIPT>

<SCRIPT type=text/javascript>
_uacct = "UA-52447-2";

_udn = "wordpress.com";
urchinTracker();
</SCRIPT>
<LINK title="Atom API" href="http://ewilkerson.wordpress.com/wp-app.php" 
type=application/atomserv+xml rel=introspection><LINK 
href="http://ewilkerson.wordpress.com/?openidserver=1" rel=openid.server>
<SCRIPT id=snap_preview_anywhere 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/snap_preview_anywhere.htm" 
defer type=text/javascript></SCRIPT>
</HEAD>
<BODY>
<DIV id=wrapper>
<DIV id=header>
<DIV id=title>
<H1><A href="http://ewilkerson.wordpress.com/">Making my way through the flotsam 
that is life…</A></H1></DIV></DIV>
<DIV id=content>
<DIV class=post id=post-11>
<H2 class=posttitle><A 
title="Permanent link toWPF Expander Control - Cool Things Part 2 (Animation and&nbsp;Auto-collapsing)" 
href="http://ewilkerson.wordpress.com/2007/02/02/wpf-expander-control-cool-things-part-2-animation-and-auto-collapsing/">WPF 
Expander Control - Cool Things Part 2 (Animation 
and&nbsp;Auto-collapsing)</A></H2>
<P class=commentmeta>February 2nd, 2007 at 2:20 pm (<A 
title="View all posts in WPF" href="http://wordpress.com/tag/wpf/" 
rel="category tag">WPF</A>) </P>
<DIV class=snap_preview>
<P><A title="Xaml of the&nbsp;CustomExpander" 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic2.jpg"></A><A 
title="Add event trigger&nbsp;button" 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic3.jpg"></A><A 
title=Animation&nbsp;Timelines 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic5.jpg"></A><A 
title=Initial&nbsp;members 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic6.jpg"></A><A 
title=Initial&nbsp;members 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic6.jpg"></A><A 
title="Initial class&nbsp;members" 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic6.jpg"></A><A 
title=Storyboard&nbsp;members 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic7.jpg"></A><A 
title="Expander width&nbsp;properties" 
href="http://ewilkerson.files.wordpress.com/2007/02/pic8.JPG"></A><A 
title=Public&nbsp;properties 
href="http://ewilkerson.files.wordpress.com/2007/02/pic9.JPG"></A><A 
title=AnimationEnabled&nbsp;property 
href="http://ewilkerson.files.wordpress.com/2007/02/pic10.JPG"></A><A 
title=ExpanderDelegate 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic13b.jpg"></A><A 
title=ExpanderDelegate&nbsp;implementation 
href="http://ewilkerson.files.wordpress.com/2007/02/pic13.JPG"></A><A 
title=Expander&nbsp;Contructor 
href="http://ewilkerson.files.wordpress.com/2007/02/pic11.JPG"></A><A 
title="Expander width&nbsp;properties" 
href="http://ewilkerson.files.wordpress.com/2007/02/pic8.JPG"></A><A 
title=Public&nbsp;properties 
href="http://ewilkerson.files.wordpress.com/2007/02/pic9.JPG"></A><A 
title=AnimationEnabled&nbsp;property 
href="http://ewilkerson.files.wordpress.com/2007/02/pic10.JPG"></A><A 
title=Expander&nbsp;Contructor 
href="http://ewilkerson.files.wordpress.com/2007/02/pic11.JPG"></A><A 
title=ExpanderDelegate&nbsp;implementation 
href="http://ewilkerson.files.wordpress.com/2007/02/pic13.JPG"></A><A 
title=Expander&nbsp;MouseEnter/Leave 
href="http://ewilkerson.files.wordpress.com/2007/02/pic12.JPG"></A><A 
title="Custom Expander in Expression&nbsp;Blend" 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic14.jpg"></A>Hmm…looking 
back at how I did my first “tutorial” on basic animation with the expander 
control, I realize that I did a very poor job of displaying how to animate — as 
well as making a scalable/reusable solution. Well, today, I’m going to fix that. 
Today, we’re going to make a custom expander control the right way. We’re going 
to use Expression Blend when we can, and we’re going to inherit our control from 
the Expander control. Not only that, we’re going to give ourselves the option of 
having animation…or not having animation — and we’re going to give ourselves 
some measure of control over how our animation takes place. So let’s get 
started.</P>
<P><SPAN id=more-11></SPAN></P>
<P>The first thing we need to do, is fire up our copy of Microsoft Expression 
Blend (at the time of this writing…I’m using Beta 2). We want to create a new 
Control Library…so I recommend you select that as your project type, and name it 
something like CustomControls. Ideally, you’ll probably want to reuse your 
custom Expander control, and you’ll probably want to add more controls to this 
library. So once that’s done, open up the XAML view of your first control, and 
you should see something like this:</P>
<P><A title="Xaml view of&nbsp;UserControl1" 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic1.jpg"><IMG 
alt="Xaml view of&nbsp;UserControl1" 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic1.jpg"></A></P>
<P>Now, in a previous tutorial, I made it a point to say that you can inherit 
your custom User Control from ANY control. By default, you inherit from 
UserControl, but in this case we want to inherit from the Expander Control. Why? 
- because we just want to customize the current Expander Control…only adding 
minimal improvements. So what you need to do is replace the&nbsp;UserControl 
markup with Expander. Be sure to remove the Grid Control from the XAML, because 
you’ll want to leave the&nbsp;Content of your control empty.&nbsp;I suggest that 
you also rename your XAML and code-behind files/classes to the name that you 
intend to give the Control. I named my control CustomExpander, and my partial 
class to CustomExpanderControl (remember that your class and control’s names 
have to be different). Another thing that I’m going to make specific to my 
control, is its initial size and ExpandDirection. I want my control to expand to 
the right. So after making the necessary changes, my XAML looks like this:</P>
<P><A title="Xaml of the&nbsp;CustomExpander" 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic2.jpg"><IMG 
alt="Xaml of the&nbsp;CustomExpander" 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic2.jpg"></A></P>
<P>Now that we’ve finished with that, you need to add some static animations and 
triggers to the control. The reason why we want to do this is because it’s 
easier to manipulate something that already exists, rather than instantiating it 
every time we need use it. So, the first thing we need to do is add some 
triggers to our control to handle the Expander.Collapsed and Expander.Expanded 
events. So switch to your Design View, and add some triggers by click on the 
“Add Event Trigger” button.</P>
<P><A title="Add event trigger&nbsp;button" 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic3.jpg"><IMG 
alt="Add event trigger&nbsp;button" 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic3.jpg"></A></P>
<P>After you’ve added triggers for both of these events, let’s go ahead and 
edit&nbsp;our animation timelines. Go ahead and create keyframes for what you 
want your custom Expander Control to expand/collapse to. You need to create a 
keyframe for the beginning of each&nbsp;animation, as well&nbsp;as the 
end.&nbsp;For the sake of this tutorial, these values need to 
be&nbsp;reflections of each other&nbsp;(i.e. if you want to Collapse the 
width&nbsp;from 150 to 25, then you need to also make the control expand from 25 
to 150). This is very important, because the way we’ll handle editing the 
animation properties depends on it. For this tutorial, I’ve decided to expand 
the control from a width of 25 (collapsed) to 150 (expanded), and the opacity to 
go from 25 to 100. I’ve also made my control take 1/2&nbsp;second to animate. It 
doesn’t matter if you use the same values, just as long as they’re 
consistent.</P>
<P><A title=Animation&nbsp;Timelines 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic5.jpg"><IMG 
alt=Animation&nbsp;Timelines 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic5.jpg"></A></P>
<P>So after you’ve edit your control’s properties, added triggers, and create 
some animation timelines — we’ve done the “hard part”, and it’s time to edit the 
code-behind file in order to expose some properties that will make our 
control&nbsp;easier to use and customize. So go ahead and close out of 
Expression Blend (we’re done with it), and open your project in Visual Studio. 
Now, I mentioned auto-collapse as a feature that we’ll want to use in our 
control, as well as the ability to enable/disable animation. So the first thing 
we need to do is add some private member variables to our controls.</P>
<P><A title="Initial class&nbsp;members" 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic6.jpg"><IMG 
alt="Initial class&nbsp;members" 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic6.jpg"></A></P>
<P>The TriggerCollection is for saving our control’s triggers — I’ll explain why 
later. We’re going to use the timer for timing how long before our control 
auto-collapses and the staysOpen member will control whether or not the control 
auto-collapses at all. This should give you an idea of “how” we’re going to do 
what we need to do. But there’s still some more customization&nbsp;features we 
can/will add. First of all we need some way to edit the animation timelines — so 
let’s expose some private properties that will help us do that.</P>
<P><A title=Storyboard&nbsp;members 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic7.jpg"><IMG 
alt=Storyboard&nbsp;members 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic7.jpg"></A></P>
<P>We expose these two properties, because they give us direct access to our two 
different animation storyboards. The properties below control the width of our 
collapsed/expanded animations. &nbsp;They reflect the values that were stored in 
the static keyframes we created earlier. This is&nbsp;the reason why created a 
start frame, and an end frame in our timeline. These are all the private 
properties we need to expose some public properties.</P>
<P><A title="Expander width&nbsp;properties" 
href="http://ewilkerson.files.wordpress.com/2007/02/pic8.JPG"><IMG 
style="WIDTH: 123px; HEIGHT: 80px" height=80 
alt="Expander width&nbsp;properties" 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic8.thumbnail.jpg" 
width=123></A></P>
<P>Now, let’s list our public properties. It should be fairly obvious how these 
properties can/will be used. The Width properties control how big the control 
will be when expanded/collapsed — and the Opacity properties specify the 
control’s opacity during these two states. By editing these programmatically, 
one can control the animation of our control with a relative amount of ease.</P>
<P><A title=Public&nbsp;properties 
href="http://ewilkerson.files.wordpress.com/2007/02/pic9.JPG"><IMG 
alt=Public&nbsp;properties 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic9.thumbnail.jpg"></A></P>
<P><A title=Public&nbsp;properties 
href="http://ewilkerson.files.wordpress.com/2007/02/pic9.JPG"></A></P>
<P>Now it’s time to add the “mack-daddy” of properties…and explain why we have a 
TriggerCollection.</P>
<P><A title=AnimationEnabled&nbsp;property 
href="http://ewilkerson.files.wordpress.com/2007/02/pic10.JPG"><IMG 
alt=AnimationEnabled&nbsp;property 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic10.thumbnail.jpg"></A></P>
<P><A title=AnimationEnabled&nbsp;property 
href="http://ewilkerson.files.wordpress.com/2007/02/pic10.JPG"></A></P>
<P>This property will control whether our control animates or not. The way we 
want to control this is by adding/removing triggers from our control. Rather 
than adding/removing the actual storyboards, or animation timelines — we can 
just remove the events that call them. This makes our job alot easier. So first 
we’ll save our triggers in a TriggerCollection at the time our control is 
instantiated. Then when animation is disabled in the control, we’ll remove all 
the triggers. When animation is re-enabled we just add back the triggers we 
already saved.</P>
<P>Those are all the properties we need to declare, but we still need to enable 
the auto-collapsing function, as well as save the triggers. To enable the 
auto-collapsing function, we want the control to start “timing” on a MouseLeave 
event, and stop/reset on a MouseEnter event. This brings up something very 
important to developers new to .NET Framwork 3.0. Since we’re going to use a 
Timer to kick-off our auto-collapse, the Timer is going to need a way to invoke 
our Collapse event from a different thread. In .NET 2.0, all controls had an 
Invoke method they inherited for these kinds of cross-thread actions. But .NET 
3.0 has taken that out of the control scope. Instead, to access objects in the 
UI thread, you have to used the Dispather object. (Go&nbsp;here for more 
information: <A 
href="http://msdn2.microsoft.com/en-us/library/ms591593.aspx">http://msdn2.microsoft.com/en-us/library/ms591593.aspx</A>)</P>
<P>So let’s go ahead and instantiate the objects that haven’t already been 
instantiated…and go ahead and create&nbsp;our various&nbsp;event handlers. This 
is done in our control’s constructor.</P>
<P><A title=Expander&nbsp;Contructor 
href="http://ewilkerson.files.wordpress.com/2007/02/pic11.JPG"><IMG 
alt=Expander&nbsp;Contructor 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic11.thumbnail.jpg"></A></P>
<P><A title=Expander&nbsp;Contructor 
href="http://ewilkerson.files.wordpress.com/2007/02/pic11.JPG"></A></P>
<P>Now that we’ve done that, the first thing we need to do is create a delegate 
for making this auto-collapse call. So we need to add a delegate type like this 
one to our class:</P>
<P><A title=ExpanderDelegate 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic13b.jpg"><IMG 
alt=ExpanderDelegate 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic13b.jpg"></A></P>
<P>Simple enough? Now, let’s create a function that will set the IsExpanded 
property to false, as well as call this function (using a delegate) from our 
Timer’s Elapsed event handler. Take a special note of the way you use 
the&nbsp;Dispatcher.Invoke method.</P>
<P><A title=ExpanderDelegate&nbsp;implementation 
href="http://ewilkerson.files.wordpress.com/2007/02/pic13.JPG"><IMG 
alt=ExpanderDelegate&nbsp;implementation 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic13.thumbnail.jpg"></A></P>
<P>All that’s left for us to do now, is to simply handle the MouseEnter/Leave 
events. Basically, when the mouse&nbsp;leave the control, if animation is 
enabled, and StaysOpen is false, then we’ll start the Timer. When the mouse 
enters the control, we’ll stop the timer. If the Timer is already stopped, then 
it&nbsp;won’t throw an error, or affect the controls state at all.</P>
<P><A title=Expander&nbsp;MouseEnter/Leave 
href="http://ewilkerson.files.wordpress.com/2007/02/pic12.JPG"><IMG 
alt=Expander&nbsp;MouseEnter/Leave 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic12.thumbnail.jpg"></A></P>
<P>Now we are done. Just compile your project, and start using this cool custom 
Expander. By default, the control will animate with whatever animation 
properties you’ve assigned it. But these properties can all be accessed/changed 
programmatically throught the code-behind find&nbsp;or through XAML. By exposing 
these properties, they can also be edited in Expression Blend, under the 
Miscellaneous tab. Now isn’t that great?</P>
<P><A title="Custom Expander in Expression&nbsp;Blend" 
href="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic14.jpg"><IMG 
alt="Custom Expander in Expression&nbsp;Blend" 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/pic14.jpg"></A><A 
title=ExpanderDelegate&nbsp;implementation 
href="http://ewilkerson.files.wordpress.com/2007/02/pic13.JPG"></A></P></DIV></DIV><!-- You can start editing here. -->
<H3 id=comments>2 Comments</H3>
<OL class=snap_preview id=commentlist>
  <LI id=comment-4>
  <H4 class=commentauthor>needbrew said,</H4>
  <P class=commentmeta>May 8, 2007 at <A title="Permanent link to this comment" 
  href="http://ewilkerson.wordpress.com/2007/02/02/wpf-expander-control-cool-things-part-2-animation-and-auto-collapsing/#comment-4">2:40 
  pm</A> </P>
  <P>Do you have the source code for this? I have tried to follow along and 
  cannot get my control to work in Blend at all. Not sure what I am missing</P>
  <P>Cool tutorial though.</P>
  <LI id=comment-5>
  <H4 class=commentauthor><A href="http://ewilkerson.wordpress.com/" 
  rel="external nofollow">Ernest Wilkerson</A> said,</H4>
  <P class=commentmeta>May 9, 2007 at <A title="Permanent link to this comment" 
  href="http://ewilkerson.wordpress.com/2007/02/02/wpf-expander-control-cool-things-part-2-animation-and-auto-collapsing/#comment-5">3:44 
  pm</A> </P>
  <P>needbrew:</P>
  <P>I don’t believe that I have the original code laying around, but if I get 
  some time today I’ll redo this and post the code somewhere.</P></LI></OL>
<H3 id=postcomment>Post a Comment</H3>
<P>You must be <A 
href="http://ewilkerson.wordpress.com/wp-login.php?redirect_to=http://ewilkerson.wordpress.com/2007/02/02/wpf-expander-control-cool-things-part-2-animation-and-auto-collapsing/">logged 
in</A> to post a comment.</P></DIV>
<DIV id=sidebar>
<UL>
  <LI class=pagenav>
  <H2>Pages</H2>
  <UL>
    <LI class="page_item page-item-2"><A title=About 
    href="http://ewilkerson.wordpress.com/about/">About</A> </LI></UL>
  <LI>
  <H2>Archives</H2>
  <UL>
    <LI><A title="May 2007" href="http://ewilkerson.wordpress.com/2007/05/">May 
    2007</A> 
    <LI><A title="April 2007" 
    href="http://ewilkerson.wordpress.com/2007/04/">April 2007</A> 
    <LI><A title="February 2007" 
    href="http://ewilkerson.wordpress.com/2007/02/">February 2007</A> 
    <LI><A title="January 2007" 
    href="http://ewilkerson.wordpress.com/2007/01/">January 2007</A> </LI></UL>
  <LI>
  <H2>Categories</H2>
  <UL>
    <LI class="cat-item cat-item-342385"><A 
    title="View all posts filed under .Net 3.0" 
    href="http://ewilkerson.wordpress.com/category/net-30/">.Net 3.0</A> 
    <LI class="cat-item cat-item-2426"><A title="View all posts filed under C#" 
    href="http://ewilkerson.wordpress.com/category/c/">C#</A> 
    <LI class="cat-item cat-item-23638"><A 
    title="View all posts filed under Dreamcast" 
    href="http://ewilkerson.wordpress.com/category/dreamcast/">Dreamcast</A> 
    <LI class="cat-item cat-item-1754"><A 
    title="View all posts filed under My Life" 
    href="http://ewilkerson.wordpress.com/category/my-life/">My Life</A> 
    <LI class="cat-item cat-item-196"><A 
    title="View all posts filed under Programming" 
    href="http://ewilkerson.wordpress.com/category/programming/">Programming</A> 

    <UL class=children>
      <LI class="cat-item cat-item-447065"><A 
      title="My dreamcast emulator project…what can I say?" 
      href="http://ewilkerson.wordpress.com/category/programming/naomi/">Naomi</A> 

      <LI class="cat-item cat-item-46652"><A 
      title="View all posts filed under WPF" 
      href="http://ewilkerson.wordpress.com/category/programming/wpf/">WPF</A> 
      </LI></UL>
    <LI class="cat-item cat-item-1"><A 
    title="View all posts filed under Uncategorized" 
    href="http://ewilkerson.wordpress.com/category/uncategorized/">Uncategorized</A> 
    </LI></UL>
  <LI>
  <H2>Search</H2>
  <FORM action=http://ewilkerson.wordpress.com/ method=get>
  <P><INPUT name=s> <INPUT type=submit value=Go> </P></FORM>
  <LI>
  <H2>Meta</H2>
  <UL>
    <LI><A href="http://ewilkerson.wordpress.com/wp-login.php">Login</A> 
    <LI><A title="Syndicate this site using RSS" 
    href="http://ewilkerson.wordpress.com/feed/"><ABBR 
    title="Really Simple Syndication">RSS</ABBR> Feed</A> 
    <LI><A 
    title="Powered by WordPress, state-of-the-art semantic personal publishing platform." 
    href="http://wordpress.com/">WordPress.com</A> </LI></UL></LI></UL></DIV>
<DIV id=footer>
<P><A title="This page validates as XHTML 1.0 Transitional" 
href="http://validator.w3.org/check/referer"><ABBR 
title="eXtensible HyperText Markup Language">XHTML</ABBR></A> · <A 
title="This page validates as CSS" 
href="http://jigsaw.w3.org/css-validator/check/referer"><ABBR 
title="Cascading Style Sheets">CSS</ABBR></A> · Theme: Dusk by <A 
href="http://beccary.com/" rel=designer>Beccary</A>. <A 
href="http://wordpress.com/" rel=generator>Blog at WordPress.com</A>. 
</P></DIV></DIV>
<SCRIPT 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/quant.js" 
type=text/javascript></SCRIPT>

<SCRIPT type=text/javascript>_qmeta="qc:adt=0;bti=Making+my+way+through+the+flotsam+that+is+life...;lan=en;dat=20070202;pti=WPF+Expander+Control+-+Cool+Things+Part+2+%28Animation+and+Auto-collapsing%29;own=ewilkerson";_qacct="p-18-mFEk4J448M";quantserve();</SCRIPT>
<NOSCRIPT>
<P><IMG style="DISPLAY: none" height=1 alt="" 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/p-18-mFEk4J448M.gif" 
width=1></P></NOSCRIPT>
<SCRIPT 
src="WPF Expander Control - Cool Things Part 2 (Animation and Auto-collapsing) « Making my way through the flotsam that is life…_files/w.js" 
type=text/javascript></SCRIPT>

<SCRIPT type=text/javascript>
st_go({blog:'699068',v:'wpcom',post:'11',subd:'ewilkerson'});
ex_go({x_theme:'dusk',x_lang:'en',x_dc:'sat',x_adt:'0',x_public:'1',x_mapped:'0',x_loggedin:'0',x_noads:'seen,notsearch',x_ads:'no',x_plugin:'snap',x_pagetype:'permalink',x_postage:'30to365'});
addLoadEvent(function(){linktracker_init(699068,11);});
</SCRIPT>
</BODY></HTML>

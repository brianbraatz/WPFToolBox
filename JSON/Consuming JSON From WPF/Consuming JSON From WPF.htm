<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head id="ctl00_ctl00_Head1"><title>Consuming JSON From WPF | IRhetoric: Convergence in the Simulacrum!</title>


<link title="Karsten Januszewski" type="application/rss+xml" rel="alternate" href="http://feeds.feedburner.com/irhetoric"><link rel="pingback" href="http://www.rhizohm.net//irhetoric/blog/7/pingback/default.aspx"><link href="Consuming%20JSON%20From%20WPF_files/a.css" type="text/css" rel="stylesheet"><style type="text/css">.delicious-posts ul{list-style-type:none}.delicious-tag,.delicious-extended{font-size:smaller}.delicious-extended{margin:0;padding:0 0 0.25em 0}.module-list-item .delicious-posts ul{margin:0;padding:0}.module-list-item .delicious-posts h2,.module-list-item .delicious-posts li:first-child{margin-top:0}.delicious-posts img{display:inline;border:0}</style></head><body>
	<form name="aspnetForm" method="post" action="default.aspx" id="aspnetForm">
<div>
<input name="__EVENTTARGET" id="__EVENTTARGET" value="" type="hidden">
<input name="__EVENTARGUMENT" id="__EVENTARGUMENT" value="" type="hidden">
<input name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwULLTE5MTUyMzI1MzlkZKIDxJxPdxs2XdyrAPzzqMGLHoFT" type="hidden">
</div>

<script type="text/javascript">
<!--
var theForm = document.forms['aspnetForm'];
if (!theForm) {
    theForm = document.aspnetForm;
}
function __doPostBack(eventTarget, eventArgument) {
    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {
        theForm.__EVENTTARGET.value = eventTarget;
        theForm.__EVENTARGUMENT.value = eventArgument;
        theForm.submit();
    }
}
// -->
</script>


<script src="Consuming%20JSON%20From%20WPF_files/WebResource.js" type="text/javascript"></script>


<script src="Consuming%20JSON%20From%20WPF_files/globals.js" type="text/javascript"></script>
<script src="Consuming%20JSON%20From%20WPF_files/blog.js" type="text/javascript"></script>
<script src="Consuming%20JSON%20From%20WPF_files/ScriptResource_002.js" type="text/javascript"></script>
<script src="Consuming%20JSON%20From%20WPF_files/ScriptResource.js" type="text/javascript"></script>
<script src="Consuming%20JSON%20From%20WPF_files/jsdebug.js" type="text/javascript"></script>
		<script type="text/javascript">
//<![CDATA[
Sys.WebForms.PageRequestManager._initialize('ctl00$ctl00$Scriptmanager1', document.getElementById('aspnetForm'));
Sys.WebForms.PageRequestManager.getInstance()._updateControls([], [], [], 90);
//]]>
</script>

		<div id="container">
			<div id="header">			
				<div id="datw">
				</div>
				<h1 id="title"><a href="http://www.rhizohm.net/"><span>IRhetoric: Convergence in the Simulacrum!</span></a></h1>
				<div id="topNav">
					<div><a href="http://feeds.feedburner.com/irhetoric">Subscribe <img src="Consuming%20JSON%20From%20WPF_files/rss.gif" alt="Subscribe to IRhetoric: Convergence in the Simulacrum!"></a></div><ul><li><a href="http://rhizohm.net/irhetoric">Home</a> | </li><li><a href="http://rhizohm.net/irhetoric/blog/archives/default.aspx">Archives</a> | </li><li><a href="http://rhizohm.net/irhetoric/about/default.aspx">About</a></li></ul>
				</div>
			</div>
			
				<div id="rightBar">
					<div class="contentBox">
<h3>recent posts</h3><div class="content">
<div class="recentPosts">
<ul>
<li><a href="http://rhizohm.net/irhetoric/blog/15/default.aspx" title=".NET Source Released">
.NET Source Released
</a>
</li>
<li><a href="http://rhizohm.net/irhetoric/blog/14/default.aspx" title="Joshua Allen on Marc Andreessen">
Joshua Allen on Marc Andreessen
</a>
</li>
<li><a href="http://rhizohm.net/irhetoric/blog/13/default.aspx" title="Triangulating Moonlight, Yochai Benkler and Web 2.0">
Triangulating Moonlight, Yochai Benkler and Web 2.0
</a>
</li>
<li><a href="http://rhizohm.net/irhetoric/blog/12/default.aspx" title="Why Rhizohm?">
Why Rhizohm?
</a>
</li>
<li><a href="http://rhizohm.net/irhetoric/blog/11/default.aspx" title="No Dev Tools: MSBuild, MSBee, .NET 1.1 and the Command Line">
No Dev Tools: MSBuild, MSBee, .NET 1.1 and the Command Line
</a>
</li>
</ul>
</div>
</div>
</div>

					<div class="contentBox">
					
				    <script type="text/javascript" src="Consuming%20JSON%20From%20WPF_files/irhetoric.js"></script><div class="delicious-posts" id="delicious-posts-irhetoric"><h2 class="delicious-banner sidebar-title"><a href="http://del.icio.us/"><img src="Consuming%20JSON%20From%20WPF_files/delicious.gif" alt="del.icio.us" height="10" width="10"></a> <a href="http://del.icio.us/irhetoric">my del.icio.us</a></h2><ul><li class="delicious-post delicious-odd"><a class="delicious-link" href="http://www.feedthecreature.com/posters.php">FEED THE CREATURE</a> </li><li class="delicious-post delicious-even"><a class="delicious-link" href="http://video.google.com/videoplay?docid=362421849901825950&amp;hl=en">Really Achieving Your Childhood Dreams</a> </li><li class="delicious-post delicious-odd"><a class="delicious-link" href="http://labs.adobe.com/wiki/index.php/Thermo">Thermo - Adobe Labs</a> </li><li class="delicious-post delicious-even"><a class="delicious-link" href="http://lab.mathieu-badimon.com/">http://lab.mathieu-badimon.com/</a> </li><li class="delicious-post delicious-odd"><a class="delicious-link" title="looks good" href="http://blog.wired.com/sterling/2007/08/geerts-new-book.html">Geert's New Book</a> </li></ul></div>
<noscript><a href="http://del.icio.us/irhetoric">my del.icio.us</a></noscript>
				    </div>
				    
					<div class="contentBox">
<h3>tags I use</h3><div class="content">
<div class="tagsIUse">
<div class="popular">
popular this month</div><div class="tags">
<a href="http://rhizohm.net/irhetoric/blog/tags/Web+2.0/default.aspx" title="Web 2.0">
Web 2.0</a> ♦ <a href="http://rhizohm.net/irhetoric/blog/tags/Rhizohm/default.aspx" title="Rhizohm">
Rhizohm</a> ♦ <a href="http://rhizohm.net/irhetoric/blog/tags/Moonlight/default.aspx" title="Moonlight">
Moonlight</a> ♦ <a href="http://rhizohm.net/irhetoric/blog/tags/Silverlight/default.aspx" title="Silverlight">
Silverlight</a> ♦ <a href="http://rhizohm.net/irhetoric/blog/tags/WPF/default.aspx" title="WPF">
WPF</a></div>
</div>
</div>
</div>
		
				    <div class="contentBox"><h3>blog archives</h3></div><div class="content"><div class="archiveYear">2007</div><div id="ctl00_ctl00_SideBarPlaceHolder_pnl2007Container" class="archiveMonths">
	<ul><li><a href="http://rhizohm.net/irhetoric/blog/archives/2007/10/default.aspx" title="October">October</a></li><li><a href="http://rhizohm.net/irhetoric/blog/archives/2007/9/default.aspx" title="September">September</a></li><li><a href="http://rhizohm.net/irhetoric/blog/archives/2007/8/default.aspx" title="August">August</a></li></ul>
</div></div>
				</div>
			
			<div id="content">
				
    <div id="leftWide">
		
<div id="post_7" class="post">
<h1 class="title">
<a href="http://rhizohm.net/irhetoric/blog/7/default.aspx">
<span>Consuming JSON From WPF</span>
</a>
</h1>
<div class="tags">
 - tagged <a href="http://rhizohm.net/irhetoric/blog/tags/WPF/default.aspx" rel="tag">WPF</a></div>
<div class="content">
<p>I want to throw up some prototype code that consumes JSON from WPF. (For more on JSON, see this <a href="http://msdn2.microsoft.com/en-us/library/bb299886.aspx">article</a>.)
I put together that uses the JavaScriptSerializer to deserialize JSON
into CLR objects, which could then be used for databinding.&nbsp; </p> <p>Here's what I did. First, I went and downloaded the <a href="http://asp.net/ajax/Default.aspx">ASP.NET AJAX framework</a>.&nbsp;
Then, I created a new WPF project and added a reference the
System.Web.Extensions dll, which got installed to C:\Program Files
(x86)\Microsoft ASP.NET\ASP.NET 2.0 AJAX Extensions.&nbsp; I then added
the System.Web.Script.Serialization to my using statements.</p> <p>To keep things simple, I wanted to prove I could convert this JSON:</p> <p>{ "FirstName": "Karsten", "IsAlive": "true"}</p> <p>&nbsp;</p> <p>Into this CLR type:</p><pre class="code"><span style="color: rgb(0, 0, 255);">class</span> <span style="color: rgb(43, 145, 175);">Person
</span>{
    <span style="color: rgb(0, 0, 255);">public</span> <span style="color: rgb(0, 0, 255);">string</span> FirstName;
    <span style="color: rgb(0, 0, 255);">public</span> <span style="color: rgb(0, 0, 255);">bool</span> IsAlive;
}
</pre>
<p><a href="http://11011.net/software/vspaste"></a>&nbsp;</p>
<p>Turned out to be pretty simple.&nbsp; Here's the code:</p><pre class="code"><span style="color: rgb(0, 0, 255);">public</span> Window1()
{
    InitializeComponent();
    <span style="color: rgb(43, 145, 175);">JavaScriptSerializer</span> jss = <span style="color: rgb(0, 0, 255);">new</span> <span style="color: rgb(43, 145, 175);">JavaScriptSerializer</span>();
    jss.RegisterConverters(<span style="color: rgb(0, 0, 255);">new</span> <span style="color: rgb(43, 145, 175);">JavaScriptConverter</span>[] { 
    <span style="color: rgb(0, 0, 255);">new</span> <span style="color: rgb(43, 145, 175);">PersonConverter</span>() });
    <span style="color: rgb(0, 0, 255);">string</span> test = <span style="color: rgb(163, 21, 21);">"{\"FirstName\": \"Karsten\", \"IsAlive\": \"true\"}"</span>;
    <span style="color: rgb(43, 145, 175);">Person</span> p = jss.Deserialize&lt;<span style="color: rgb(43, 145, 175);">Person</span>&gt;(test);
    <span style="color: rgb(43, 145, 175);">Person</span> p = jss.d
}</pre><a href="http://11011.net/software/vspaste"></a>
<p>Note how I register this thing called the <span style="color: rgb(43, 145, 175);">PersonConverter </span>after I instantiate the <span style="color: rgb(43, 145, 175);">JavaScriptSerializer</span>&nbsp;.&nbsp; That's where all the work gets done and I'll discuss the <span style="color: rgb(43, 145, 175);">PersonConverter </span>below.&nbsp; The only other interesting thing to note here is that to get the <span style="color: rgb(43, 145, 175);">Person </span>object,&nbsp; I use the <strong>Deserialize&lt;&gt;</strong> method instead of the <strong>DeserializeObject</strong>(). This allows me to actually pass the type I want to have returned rather than attempting to cast the object afterward. </p>
<p>So, here's the code for the <span style="color: rgb(43, 145, 175);">PersonConverter</span>, which overrides the <span style="color: rgb(43, 145, 175);">JavaScriptConverter </span>:</p><pre class="code"><span style="color: rgb(0, 0, 255);">class</span> <span style="color: rgb(43, 145, 175);">PersonConverter</span> : <span style="color: rgb(43, 145, 175);">JavaScriptConverter
</span>{

    <span style="color: rgb(0, 0, 255);">public</span> <span style="color: rgb(0, 0, 255);">override</span> <span style="color: rgb(0, 0, 255);">object</span> Deserialize(<span style="color: rgb(43, 145, 175);">IDictionary</span>&lt;<span style="color: rgb(0, 0, 255);">string</span>, <span style="color: rgb(0, 0, 255);">object</span>&gt; dictionary, <span style="color: rgb(43, 145, 175);">Type</span> type, <span style="color: rgb(43, 145, 175);">JavaScriptSerializer</span> serializer)
    {
        <span style="color: rgb(43, 145, 175);">Person</span> p = <span style="color: rgb(0, 0, 255);">new</span> <span style="color: rgb(43, 145, 175);">Person</span>();
        p.FirstName = serializer.ConvertToType&lt;<span style="color: rgb(0, 0, 255);">string</span>&gt;(dictionary[<span style="color: rgb(163, 21, 21);">"FirstName"</span>]);
        p.IsAlive = serializer.ConvertToType&lt;<span style="color: rgb(0, 0, 255);">bool</span>&gt;(dictionary[<span style="color: rgb(163, 21, 21);">"IsAlive"</span>]);
        <span style="color: rgb(0, 0, 255);">return</span> p;
    }
    <span style="color: rgb(0, 0, 255);">public</span> <span style="color: rgb(0, 0, 255);">override</span> <span style="color: rgb(43, 145, 175);">IDictionary</span>&lt;<span style="color: rgb(0, 0, 255);">string</span>, <span style="color: rgb(0, 0, 255);">object</span>&gt; Serialize(<span style="color: rgb(0, 0, 255);">object</span> obj, <span style="color: rgb(43, 145, 175);">JavaScriptSerializer</span> serializer)
    {
        <span style="color: rgb(0, 0, 255);">throw</span> <span style="color: rgb(0, 0, 255);">new</span> <span style="color: rgb(43, 145, 175);">Exception</span>(<span style="color: rgb(163, 21, 21);">"The method or operation is not implemented."</span>);
    }

    <span style="color: rgb(0, 0, 255);">public</span> <span style="color: rgb(0, 0, 255);">override</span> <span style="color: rgb(43, 145, 175);">IEnumerable</span>&lt;<span style="color: rgb(43, 145, 175);">Type</span>&gt; SupportedTypes
    {
        <span style="color: rgb(0, 0, 255);">get</span> { <span style="color: rgb(0, 0, 255);">return</span> <span style="color: rgb(0, 0, 255);">new</span> <span style="color: rgb(43, 145, 175);">Type</span>[] { <span style="color: rgb(0, 0, 255);">typeof</span>(<span style="color: rgb(43, 145, 175);">Person</span>)}; }
    }
}</pre>
<p>The crux of the code here is in the override of Deserialize.&nbsp; I followed the <a href="http://asp.net/AJAX/Documentation/Live/mref/M_System_Web_Script_Serialization_JavaScriptConverter_Deserialize_4_39b5fe1f.aspx">SDK documentation</a>&nbsp;and
made sure to use the ConvertToType method instead of doing the casting
myself.&nbsp;&nbsp;Basically, I just map each property from the JSON to
the CLR object.&nbsp; One could probably get fancy and use Reflection
to do this dynamically, if you had everything singing.</p>
<p>I think I'll iterate on this a little more in a future post, but the
net is that you can consume JSON into your WPF applications!</p>
<p>&nbsp;</p><pre class="code"></pre><a href="http://11011.net/software/vspaste"></a></div>
<div class="info">
posted on Aug 9th, 2007
 | <a href="http://rhizohm.net/irhetoric/blog/7/default.aspx">Permalink</a>
 | <a href="http://rhizohm.net/irhetoric/blog/7/default.aspx#comments">Comments (1)</a>
</div>
</div>
<div id="comment_area">
<div id="commentListContainer"><div class="comments"><a name="comments"></a><h3>1 Comment <a href="#postcomment" title="Leave a comment">»</a></h3><ol><li id="comment-1"><p>Hello, thanks for sharing.<br>Any chance of converting this into VB?<br>thanks.</p><cite>Comment by Adam - October 08, 2007 @ <a href="http://rhizohm.net/irhetoric/blog/7/default.aspx#comment-1">4:42 AM</a></cite></li></ol></div></div><div id="postcomment"><h2>Leave a comment</h2><div id="commentInfo" class="info"></div><p><input class="input standard" id="txtName" type="text"><label for="txtName"> Name (required)</label></p><p><input class="input standard" id="txtEmail" type="text"><label for="txtEmail"> E-mail (required)</label></p><p><input class="input standard" id="txtUrl" type="text"><label for="txtUrl"> Website</label></p><p><textarea id="txtBody" rows="10" class="input textarea"></textarea></p><p><input id="chkRemember" type="checkbox"><label for="chkRemember"> Remember me</label></p><p><input id="btnAdd" onclick="addComment();" value="Submit Comment" type="button"></p></div></div>

<!--
<rdf:RDF
 xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
 xmlns:dc="http://purl.org/dc/elements/1.1/"
 xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
<rdf:Description
 rdf:about="http://www.rhizohm.net//irhetoric/blog/7/default.aspx"
 dc:identifier="http://www.rhizohm.net//irhetoric/blog/7/default.aspx"
 dc:title="Consuming JSON From WPF"
 trackback:ping="http://www.rhizohm.net//irhetoric/blog/7/trackback/default.aspx" />
</rdf:RDF>
-->
<img src="Consuming%20JSON%20From%20WPF_files/default.gif" border="0">
	</div>

			</div> 
			<div id="footer">
<h3><a href="http://www.rhizohm.net/">IRhetoric: Convergence in the Simulacrum!</a></h3><div class="reduced">Unless otherwise specified, all of this content is made available under the <a href="http://creativecommons.org/licenses/by/2.5/"> Creative Commons License</a></div></div>

		</div>
	

<script type="text/javascript">
<!--
initComments();g_appPath = '/irhetoric';g_themePath = g_appPath + '/App_Themes/a/';ceID = '7';Sys.Application.initialize();
// -->
</script>
</form>
</body></html>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0090)http://blogs.msdn.com/dancre/archive/2006/09/15/dm-v-vm-part-7-encapsulating-commands.aspx -->
<HTML><HEAD><TITLE>Dan Crevier's Blog : DM-V-VM part 7: Encapsulating commands</TITLE>
<META content=DM-V-VM name=keywords>
<META 
content="In part 5 , I talked about commands and how they are used for behavior. Now, I want to talk about a better way to encapsulate them. First, I'll create a CommandModel class that encapsulates the RoutedCommand and the enabled/execute code. This is all pretty" 
name=description>
<META content="MSHTML 6.00.2900.3199" name=GENERATOR><LINK 
href="http://blogs.msdn.com/dancre/pingback.aspx" rel=pingback><LINK media=print 
href="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/print.css" 
type=text/css rel=stylesheet><LINK media=screen 
href="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/Common.css" 
type=text/css rel=stylesheet><LINK media=screen 
href="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/Blog.css" 
type=text/css rel=stylesheet><LINK media=print 
href="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/common_print.css" 
type=text/css rel=stylesheet><LINK media=print 
href="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/blog_print.css" 
type=text/css rel=stylesheet><LINK href="/favicon.ico" type=image/ico 
rel="shortcut icon"><LINK title="Dan Crevier's Blog (RSS 2.0)" 
href="http://blogs.msdn.com/dancre/rss.xml" type=application/rss+xml 
rel=alternate><LINK title="Dan Crevier's Blog (Atom 1.0)" 
href="http://blogs.msdn.com/dancre/atom.xml" type=application/atom+xml 
rel=alternate><LINK 
title="DM-V-VM part 7: Encapsulating commands Comment RSS (RSS 2.0)" 
href="http://blogs.msdn.com/dancre/commentrss.aspx?PostID=756095" 
type=application/rss+xml rel=alternate>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<SCRIPT 
src="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/global.js" 
type=text/javascript></SCRIPT>

<STYLE type=text/css>BODY {
	FONT-SIZE: 84%
}
</STYLE>

<SCRIPT language=JavaScript>var doImage=doImage;var TType=TType;
function mhHover(tbl,idx,cls){var t,d;if(document.getElementById)t=document.getElementById(tbl);else t=document.all(tbl);if(t==null)return;if(t.getElementsByTagName)d=t.getElementsByTagName("TD");else d=t.all.tags("TD");if(d==null)return;if(d.length<=idx)return;d[idx].className=cls;}

</SCRIPT>

<SCRIPT language=javascript 
src="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/minmax.js" 
type=text/javascript></SCRIPT>
</HEAD>
<BODY>
<FORM id=aspnetForm name=aspnetForm 
action=/dancre/archive/2006/09/15/dm-v-vm-part-7-encapsulating-commands.aspx 
method=post>
<DIV><INPUT id=__VIEWSTATE type=hidden 
value=/wEPDwUKLTMyNjg0MDc1MWRk4kqgif0qb+BsXqBU64DM+rPSfXA= name=__VIEWSTATE> 
</DIV>
<SCRIPT language=javascript 
src="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/Telligent_Modal.js" 
type=text/javascript></SCRIPT>

<SCRIPT language=javascript type=text/javascript>
// <![CDATA[
Telligent_Modal.Configure('/utility/loading.htm',['CommonModal'],['CommonModalTitle'],['CommonModalClose'],['CommonModalContent'],['CommonModalFooter'],['CommonModalResize'],['CommonModalMask'],100);
// ]]>
</SCRIPT>

<DIV id=AllContent>
<DIV id=CommonHeader>
<DIV id=msviMasthead>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="100%">
      <TABLE height=22 cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD id=msviRegionIdGraphic bgColor=#ffffff></TD>
          <TD width="100%" bgColor=#3568cc><IMG title="" height=22 alt=* 
            src="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/topGradient.jpg" 
            width=250></TD></TR></TBODY></TABLE></TD>
    <TD id=msviGlobalToolbar noWrap align=left bgColor=#3568cc height=22>
      <TABLE cellSpacing=0 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD class=gt0 onmouseover="mhHover('msviGlobalToolbar', 0, 'gt1')" 
          onmouseout="mhHover('msviGlobalToolbar', 0, 'gt0')" noWrap><A 
            style="FONT-SIZE: 95%" 
            href="http://www.microsoft.com/">Microsoft.com Home</A></TD>
          <TD class=gtsep>|</TD>
          <TD class=gt0 onmouseover="mhHover('msviGlobalToolbar', 2, 'gt1')" 
          onmouseout="mhHover('msviGlobalToolbar', 2, 'gt0')" noWrap><A 
            style="FONT-SIZE: 95%" 
            href="http://www.microsoft.com/library/toolbar/3.0/sitemap/en-us.mspx">Site 
            Map</A></TD></TR></TBODY></TABLE></TD></TR>
  <TR vAlign=top>
    <TD width="100%">
      <TABLE height=42 cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR vAlign=top>
          <TD id=msviBrandBanner bgColor=#ffffff><A 
            href="http://msdn.microsoft.com/"><IMG title="" height=42 alt=MSDN 
            src="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/msdn_masthead_ltr.gif" 
            width=225 border=0></A></TD>
          <TD width="100%" bgColor=#6799ff><IMG title="" height=42 alt=* 
            src="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/topGradient2.jpg" 
            width=250></TD></TR></TBODY></TABLE></TD>
    <TD id=msviGlobalSearch bgColor=#6799ff>
      <DIV id=msviNoSearch></DIV></TD></TR></TBODY></TABLE>
<DIV id=msviLocalToolbar>
<TABLE height=19 cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD id=msviHomePageLink noWrap width=177><A 
      href="http://msdn.microsoft.com/">MSDN Home</A></TD>
    <TD><SPAN class=ltsep>|</SPAN></TD>
    <TD class=lt0 onmouseover="mhHover('msviLocalToolbar', 2, 'lt1')" 
    onmouseout="mhHover('msviLocalToolbar', 2, 'lt0')" noWrap><A 
      href="http://msdn.microsoft.com/developercenters/">Developer 
Centers</A></TD>
    <TD><SPAN class=ltsep>|</SPAN></TD>
    <TD class=lt0 onmouseover="mhHover('msviLocalToolbar', 4, 'lt1')" 
    onmouseout="mhHover('msviLocalToolbar', 4, 'lt0')" noWrap><A 
      href="http://msdn.microsoft.com/flash">MSDN Flash</A></TD>
    <TD><SPAN class=ltsep>|</SPAN></TD>
    <TD class=lt0 onmouseover="mhHover('msviLocalToolbar', 6, 'lt1')" 
    onmouseout="mhHover('msviLocalToolbar', 6, 'lt0')" noWrap><A 
      href="http://msdn.microsoft.com/subscriptions/">Subscribers</A></TD>
    <TD></TD>
    <TD class=lt0 onmouseover="mhHover('msviLocalToolbar', 8, 'lt1')" 
    onmouseout="mhHover('msviLocalToolbar', 8, 'lt0')" noWrap>&nbsp;</TD>
    <TD></TD>
    <TD class=lt0 onmouseover="mhHover('msviLocalToolbar', 10, 'lt1')" 
    onmouseout="mhHover('msviLocalToolbar', 10, 'lt0')" noWrap>&nbsp;</TD>
    <TD></TD>
    <TD class=lt0 onmouseover="mhHover('msviLocalToolbar', 12, 'lt1')" 
    onmouseout="mhHover('msviLocalToolbar', 12, 'lt0')" noWrap>&nbsp;</TD>
    <TD></TD>
    <TD class=lt0 onmouseover="mhHover('msviLocalToolbar', 14, 'lt1')" 
    onmouseout="mhHover('msviLocalToolbar', 14, 'lt0')" noWrap>&nbsp;</TD>
    <TD></TD>
    <TD class=lt0 onmouseover="mhHover('msviLocalToolbar', 16, 'lt1')" 
    onmouseout="mhHover('msviLocalToolbar', 16, 'lt0')" noWrap>&nbsp;</TD>
    <TD width="100%"></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<TABLE dir=ltr cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR vAlign=top>
    <TD id=CommonLeftColumn 
    style="BORDER-RIGHT: #999999 1px solid; OVERFLOW-X: hidden" width=181 
    bgColor=#f1f1f1 height="100%">
      <DIV class=mnpMenuTop id=mnpMenuTop>
      <DIV class=mnpInherit>
      <DIV class=CommonSidebarArea>
      <DIV class=CommonSidebarContent><A 
      href="http://blogs.msdn.com/default.aspx">Blogs Home</A> </DIV></DIV>
      <DIV class=CommonSidebarArea>
      <DIV class=CommonSidebarContent><A 
      id=ctl00___ctl00___ctl00_ctl00_AggWelcome___Login 
      href="http://blogs.msdn.com/login.aspx?ReturnUrl=%2fdancre%2farchive%2f2006%2f09%2f15%2fdm-v-vm-part-7-encapsulating-commands.aspx">Sign 
      in</A> | <A id=ctl00___ctl00___ctl00_ctl00_AggWelcome___Register 
      href="http://blogs.msdn.com/user/CreateUser.aspx?ReturnUrl=/dancre/archive/2006/09/15/dm-v-vm-part-7-encapsulating-commands.aspx">Join</A> 
      </DIV></DIV>
      <DIV class=CommonSidebarArea>
      <DIV class=CommonSidebarContent>
      <UL class=CommonSidebarList>
        <LI><A href="http://blogs.msdn.com/search/">Search</A> 
        <LI><A href="http://blogs.msdn.com/MainFeed.aspx?Type=AllBlogs">RSS</A> 
        <LI><A href="http://blogs.msdn.com/Opml.aspx">OPML</A> 
      </LI></UL></DIV></DIV></DIV></DIV>
      <DIV class=mnpAds 
      style="BACKGROUND: #f1f1f1; PADDING-BOTTOM: 20px; WIDTH: 181px; HEIGHT: 100%"></DIV></TD>
    <TD width="100%">
      <TABLE style="TABLE-LAYOUT: fixed" cellSpacing=0 cellPadding=0 
      width="100%" border=0>
        <TBODY>
        <TR>
          <TD width="100%">
            <DIV class=clsDocBody id=pageContainer>
            <DIV class=CommonContentArea>
            <H2 class=CommonTitle><A class=headermaintitle 
            id=ctl00___ctl00___ctl00_ctl00_bcr_bth___BlogTitle 
            href="http://blogs.msdn.com/dancre/default.aspx">Dan Crevier's 
            Blog</A></H2>
            <DIV class=CommonContent>In search of a better name...</DIV>
            <DIV class=CommonContent>
            <STYLE>.DoNotDisplay {
	DISPLAY: none
}
</STYLE>

            <DIV class=BlogPostArea>
            <H4 class=BlogPostHeader>DM-V-VM part 7: Encapsulating commands 
</H4>
            <DIV class=BlogPostContent>
            <P>In <A 
            href="http://blogs.msdn.com/dancre/archive/2006/08/05/689542.aspx" 
            mce_href="http://blogs.msdn.com/dancre/archive/2006/08/05/689542.aspx">part 
            5</A>, I talked about commands and how they are used for behavior. 
            Now, I want to talk about a better way to encapsulate them. First, 
            I'll create a CommandModel class that encapsulates the RoutedCommand 
            and the enabled/execute code. This is all pretty 
straightforward:</P>
            <DIV 
            style="FONT-SIZE: 11pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: consolas">
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">public</SPAN> <SPAN 
            style="COLOR: blue">abstract</SPAN> <SPAN 
            style="COLOR: blue">class</SPAN> <SPAN 
            style="COLOR: teal">CommandModel</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; {</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">public</SPAN> CommandModel()</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; _routedCommand = <SPAN 
            style="COLOR: blue">new</SPAN> <SPAN 
            style="COLOR: teal">RoutedCommand</SPAN>();</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
            <P style="MARGIN: 0px" mce_keep="true">&nbsp;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: gray">///</SPAN><SPAN style="COLOR: green"> 
            </SPAN><SPAN style="COLOR: gray">&lt;summary&gt;</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: gray">///</SPAN><SPAN style="COLOR: green"> Routed 
            command associated with the model.</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: gray">///</SPAN><SPAN style="COLOR: green"> 
            </SPAN><SPAN style="COLOR: gray">&lt;/summary&gt;</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">public</SPAN> <SPAN 
            style="COLOR: teal">RoutedCommand</SPAN> Command</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">get</SPAN> { <SPAN 
            style="COLOR: blue">return</SPAN> _routedCommand; }</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
            <P style="MARGIN: 0px" mce_keep="true">&nbsp;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: gray">///</SPAN><SPAN style="COLOR: green"> 
            </SPAN><SPAN style="COLOR: gray">&lt;summary&gt;</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: gray">///</SPAN><SPAN style="COLOR: green"> Determines 
            if a command is enabled. Override to provide custom behavior. Do not 
            call the</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: gray">///</SPAN><SPAN style="COLOR: green"> base 
            version when overriding.</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: gray">///</SPAN><SPAN style="COLOR: green"> 
            </SPAN><SPAN style="COLOR: gray">&lt;/summary&gt;</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">public</SPAN> <SPAN 
            style="COLOR: blue">virtual</SPAN> <SPAN 
            style="COLOR: blue">void</SPAN> OnQueryEnabled(<SPAN 
            style="COLOR: blue">object</SPAN> sender, <SPAN 
            style="COLOR: teal">CanExecuteRoutedEventArgs</SPAN> e)</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; e.CanExecute = <SPAN 
            style="COLOR: blue">true</SPAN>;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; e.Handled = <SPAN 
            style="COLOR: blue">true</SPAN>;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
            <P style="MARGIN: 0px" mce_keep="true">&nbsp;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: gray">///</SPAN><SPAN style="COLOR: green"> 
            </SPAN><SPAN style="COLOR: gray">&lt;summary&gt;</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: gray">///</SPAN><SPAN style="COLOR: green"> Function 
            to execute the command.</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: gray">///</SPAN><SPAN style="COLOR: green"> 
            </SPAN><SPAN style="COLOR: gray">&lt;/summary&gt;</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">public</SPAN> <SPAN 
            style="COLOR: blue">abstract</SPAN> <SPAN 
            style="COLOR: blue">void</SPAN> OnExecute(<SPAN 
            style="COLOR: blue">object</SPAN> sender, <SPAN 
            style="COLOR: teal">ExecutedRoutedEventArgs</SPAN> e);</P>
            <P style="MARGIN: 0px" mce_keep="true">&nbsp;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">private</SPAN> <SPAN 
            style="COLOR: teal">RoutedCommand</SPAN> _routedCommand;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; }</P></DIV>
            <P>Subclasses could add more properties to the RoutedCommand if need 
            be. You could also imagine adding more properties to CommandModel 
            for things like an icon to display in the UI. For example, in <A 
            href="http://microsoft.com/max" 
            mce_href="http://microsoft.com/max">Max</A>, our toolbars are 
            ItemsControls bound to a list of CommandModels with a data template 
            for each command model that shows the icon and name of the 
            command.</P>
            <P>Now, we can wrap our simple command from <A 
            href="http://blogs.msdn.com/dancre/archive/2006/08/05/689542.aspx" 
            mce_href="http://blogs.msdn.com/dancre/archive/2006/08/05/689542.aspx">part 
            5</A>&nbsp;into a class:</P>
            <DIV 
            style="FONT-SIZE: 11pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: consolas">
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">class</SPAN> <SPAN 
            style="COLOR: teal">MyCommand</SPAN> : <SPAN 
            style="COLOR: teal">CommandModel</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; {</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">public</SPAN> <SPAN 
            style="COLOR: blue">override</SPAN> <SPAN 
            style="COLOR: blue">void</SPAN> OnQueryEnabled(<SPAN 
            style="COLOR: blue">object</SPAN> sender, <SPAN 
            style="COLOR: teal">CanExecuteRoutedEventArgs</SPAN> e)</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; e.CanExecute = !<SPAN 
            style="COLOR: blue">string</SPAN>.IsNullOrEmpty(e.Parameter <SPAN 
            style="COLOR: blue">as</SPAN> <SPAN 
            style="COLOR: blue">string</SPAN>);</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; e.Handled = <SPAN 
            style="COLOR: blue">true</SPAN>;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
            <P style="MARGIN: 0px" mce_keep="true">&nbsp;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">public</SPAN> <SPAN 
            style="COLOR: blue">override</SPAN> <SPAN 
            style="COLOR: blue">void</SPAN> OnExecute(<SPAN 
            style="COLOR: blue">object</SPAN> sender, <SPAN 
            style="COLOR: teal">ExecutedRoutedEventArgs</SPAN> e)</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">string</SPAN> text = 
            e.Parameter <SPAN style="COLOR: blue">as</SPAN> <SPAN 
            style="COLOR: blue">string</SPAN>;</P>
            <P style="MARGIN: 0px" mce_keep="true">&nbsp;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: green">// Do something with 
            text</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; }</P></DIV>
            <P>We can now remove all of the command related code from the window 
            class. We're still stuck&nbsp;setting up the binding in the UI 
            class.&nbsp;But, we can use the <A 
            href="http://blogs.msdn.com/dancre/archive/2006/03/04/543854.aspx" 
            mce_href="http://blogs.msdn.com/dancre/archive/2006/03/04/543854.aspx">attached 
            property trick</A> to get rid of this, similar to&nbsp;how we did 
            the activation in <A 
            href="http://blogs.msdn.com/dancre/archive/2006/08/25/724938.aspx" 
            mce_href="http://blogs.msdn.com/dancre/archive/2006/08/25/724938.aspx">part 
            6</A>.&nbsp;We'll create a property that you can attach to a UI 
            element like </P>
            <DIV 
            style="FONT-SIZE: 11pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: consolas">
            <P style="MARGIN: 0px"><SPAN 
            style="COLOR: red">local:CreateCommandBinding.Command</SPAN><SPAN 
            style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">{Binding 
            MyCommand}</SPAN>"</P></DIV>
            <P>To create a command binding for a given command model. First we 
            just need the standard attached property definition, set up to call 
            OnCommandInvalidated when the property changes:</P>
            <DIV 
            style="FONT-SIZE: 11pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: consolas">
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">public</SPAN> <SPAN 
            style="COLOR: blue">static</SPAN> <SPAN 
            style="COLOR: blue">class</SPAN> <SPAN 
            style="COLOR: teal">CreateCommandBinding</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; {</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">public</SPAN> <SPAN 
            style="COLOR: blue">static</SPAN> <SPAN 
            style="COLOR: blue">readonly</SPAN> <SPAN 
            style="COLOR: teal">DependencyProperty</SPAN> CommandProperty</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp; = <SPAN 
            style="COLOR: teal">DependencyProperty</SPAN>.RegisterAttached(<SPAN 
            style="COLOR: maroon">"Command"</SPAN>, <SPAN 
            style="COLOR: blue">typeof</SPAN>(<SPAN 
            style="COLOR: teal">CommandModel</SPAN>), <SPAN 
            style="COLOR: blue">typeof</SPAN>(<SPAN 
            style="COLOR: teal">CreateCommandBinding</SPAN>),</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">new</SPAN> <SPAN 
            style="COLOR: teal">PropertyMetadata</SPAN>(<SPAN 
            style="COLOR: blue">new</SPAN> <SPAN 
            style="COLOR: teal">PropertyChangedCallback</SPAN>(OnCommandInvalidated)));</P>
            <P style="MARGIN: 0px" mce_keep="true">&nbsp;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">public</SPAN> <SPAN 
            style="COLOR: blue">static</SPAN> <SPAN 
            style="COLOR: teal">CommandModel</SPAN> GetCommand(<SPAN 
            style="COLOR: teal">DependencyObject</SPAN> sender)</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">return</SPAN> (<SPAN 
            style="COLOR: teal">CommandModel</SPAN>)sender.GetValue(CommandProperty);</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
            <P style="MARGIN: 0px" mce_keep="true">&nbsp;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">public</SPAN> <SPAN 
            style="COLOR: blue">static</SPAN> <SPAN 
            style="COLOR: blue">void</SPAN> SetCommand(<SPAN 
            style="COLOR: teal">DependencyObject</SPAN> sender, <SPAN 
            style="COLOR: teal">CommandModel</SPAN> command)</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; sender.SetValue(CommandProperty, command);</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            }</P></DIV>
            <P>&nbsp;And, OnCommandInvalidated will set up the binding when the 
            command is changed.</P>
            <DIV 
            style="FONT-SIZE: 11pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: consolas">
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">private</SPAN> <SPAN 
            style="COLOR: blue">static</SPAN> <SPAN 
            style="COLOR: blue">void</SPAN> OnCommandInvalidated(<SPAN 
            style="COLOR: teal">DependencyObject</SPAN> dependencyObject, <SPAN 
            style="COLOR: teal">DependencyPropertyChangedEventArgs</SPAN> e)</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: green">// Clear the exisiting 
            bindings on the element we are attached to.</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">UIElement</SPAN> 
            element = (<SPAN 
            style="COLOR: teal">UIElement</SPAN>)dependencyObject;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; element.CommandBindings.Clear();</P>
            <P style="MARGIN: 0px" mce_keep="true">&nbsp;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: green">// If we're given a 
            command model, set up a binding</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: teal">CommandModel</SPAN> 
            commandModel = e.NewValue <SPAN style="COLOR: blue">as</SPAN> <SPAN 
            style="COLOR: teal">CommandModel</SPAN>;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">if</SPAN> (commandModel 
            != <SPAN style="COLOR: blue">null</SPAN>)</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; {</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            element.CommandBindings.Add(<SPAN style="COLOR: blue">new</SPAN> 
            <SPAN 
            style="COLOR: teal">CommandBinding</SPAN>(commandModel.Command, 
            commandModel.OnExecute, commandModel.OnQueryEnabled));</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; }</P>
            <P style="MARGIN: 0px" mce_keep="true">&nbsp;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: green">// Suggest to WPF to 
            refresh commands</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: teal">CommandManager</SPAN>.InvalidateRequerySuggested();</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            }</P></DIV>
            <P>&nbsp;Note: I was a little lazy implementing the clearing code. 
            You can't have multiple bindings on element you put this on. A more 
            general implementation would be to clear the specific binding for 
            e.OldValue.</P>
            <P>&nbsp;Putting it together, the Xaml for the window now looks 
            like:</P>
            <DIV 
            style="FONT-SIZE: 11pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: consolas">
            <P style="MARGIN: 0px"><SPAN style="COLOR: blue">&lt;</SPAN><SPAN 
            style="COLOR: maroon">Window</SPAN><SPAN style="COLOR: blue"> 
            </SPAN><SPAN style="COLOR: red">x:Class</SPAN><SPAN 
            style="COLOR: blue">=</SPAN>"<SPAN 
            style="COLOR: blue">CommandDemo.Window1</SPAN>"</P>
            <P style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; 
            </SPAN><SPAN style="COLOR: red">xmlns</SPAN><SPAN 
            style="COLOR: blue">=</SPAN>"<SPAN 
            style="COLOR: blue">http://schemas.microsoft.com/winfx/2006/xaml/presentation</SPAN>"</P>
            <P style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; 
            </SPAN><SPAN style="COLOR: red">xmlns:x</SPAN><SPAN 
            style="COLOR: blue">=</SPAN>"<SPAN 
            style="COLOR: blue">http://schemas.microsoft.com/winfx/2006/xaml</SPAN>"</P>
            <P style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; 
            </SPAN><SPAN style="COLOR: red">xmlns:local</SPAN><SPAN 
            style="COLOR: blue">=</SPAN>"<SPAN 
            style="COLOR: blue">clr-namespace:CommandDemo</SPAN>"<SPAN 
            style="COLOR: blue"> </SPAN></P>
            <P style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; 
            </SPAN><SPAN style="COLOR: red">Title</SPAN><SPAN 
            style="COLOR: blue">=</SPAN>"<SPAN 
            style="COLOR: blue">CommandDemo</SPAN>"<SPAN style="COLOR: blue"> 
            </SPAN><SPAN style="COLOR: red">Height</SPAN><SPAN 
            style="COLOR: blue">=</SPAN>"<SPAN 
            style="COLOR: blue">300</SPAN>"<SPAN style="COLOR: blue"> 
            </SPAN><SPAN style="COLOR: red">Width</SPAN><SPAN 
            style="COLOR: blue">=</SPAN>"<SPAN 
            style="COLOR: blue">300</SPAN>"</P>
            <P style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; 
            </SPAN><SPAN style="COLOR: red">DataContext</SPAN><SPAN 
            style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">{Binding 
            RelativeSource={RelativeSource Self}}</SPAN>"</P>
            <P style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; 
            &gt;</SPAN></P>
            <P style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; 
            &lt;</SPAN><SPAN style="COLOR: maroon">StackPanel</SPAN><SPAN 
            style="COLOR: blue">&gt;</SPAN></P>
            <P style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; 
            &nbsp; &lt;</SPAN><SPAN style="COLOR: maroon">TextBox</SPAN><SPAN 
            style="COLOR: blue"> </SPAN><SPAN 
            style="COLOR: red">Name</SPAN><SPAN 
            style="COLOR: blue">=</SPAN>"<SPAN 
            style="COLOR: blue">_textBox</SPAN>"<SPAN 
            style="COLOR: blue">/&gt;</SPAN></P>
            <P style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; 
            &nbsp; &lt;</SPAN><SPAN style="COLOR: maroon">Button</SPAN><SPAN 
            style="COLOR: blue"> </SPAN><SPAN 
            style="COLOR: red">Name</SPAN><SPAN 
            style="COLOR: blue">=</SPAN>"<SPAN 
            style="COLOR: blue">_button</SPAN>"</P>
            <P style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; </SPAN><SPAN 
            style="COLOR: red">local:CreateCommandBinding.Command</SPAN><SPAN 
            style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">{Binding 
            MyCommand}</SPAN>"<SPAN style="COLOR: blue"> </SPAN></P>
            <P style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; </SPAN><SPAN 
            style="COLOR: red">Command</SPAN><SPAN 
            style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">{Binding 
            MyCommand.Command}</SPAN>"</P>
            <P style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; </SPAN><SPAN 
            style="COLOR: red">CommandParameter</SPAN><SPAN 
            style="COLOR: blue">=</SPAN>"<SPAN style="COLOR: blue">{Binding 
            Text, ElementName=_textBox}</SPAN>"<SPAN 
            style="COLOR: blue">&gt;</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Do 
            something</P>
            <P style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; 
            &nbsp; &lt;/</SPAN><SPAN style="COLOR: maroon">Button</SPAN><SPAN 
            style="COLOR: blue">&gt;</SPAN></P>
            <P style="MARGIN: 0px"><SPAN style="COLOR: blue">&nbsp;&nbsp;&nbsp; 
            &lt;/</SPAN><SPAN style="COLOR: maroon">StackPanel</SPAN><SPAN 
            style="COLOR: blue">&gt;</SPAN></P>
            <P style="MARGIN: 0px"><SPAN style="COLOR: blue">&lt;/</SPAN><SPAN 
            style="COLOR: maroon">Window</SPAN><SPAN 
            style="COLOR: blue">&gt;</SPAN></P></DIV>
            <P>&nbsp;The only difference is the CreateCommandBinding property. 
            And, the code behind looks like:</P>
            <DIV 
            style="FONT-SIZE: 11pt; BACKGROUND: white; COLOR: black; FONT-FAMILY: consolas">
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">public</SPAN> <SPAN 
            style="COLOR: blue">partial</SPAN> <SPAN 
            style="COLOR: blue">class</SPAN> <SPAN 
            style="COLOR: teal">Window1</SPAN> : <SPAN 
            style="COLOR: teal">Window</SPAN></P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; {</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">public</SPAN> Window1()</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; InitializeComponent();</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
            <P style="MARGIN: 0px" mce_keep="true">&nbsp;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: blue">public</SPAN> <SPAN 
            style="COLOR: teal">CommandModel</SPAN> MyCommand</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
            &nbsp;&nbsp;&nbsp; <SPAN style="COLOR: blue">get</SPAN> { <SPAN 
            style="COLOR: blue">return</SPAN> _myCommand; }</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</P>
            <P style="MARGIN: 0px" mce_keep="true">&nbsp;</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <SPAN 
            style="COLOR: teal">CommandModel</SPAN> _myCommand = <SPAN 
            style="COLOR: blue">new</SPAN> <SPAN 
            style="COLOR: teal">MyCommand</SPAN>();</P>
            <P style="MARGIN: 0px">&nbsp;&nbsp;&nbsp; }</P></DIV>
            <P>&nbsp;So, we've extracted almost all of the behavior out of the 
            Window's code behind. The command code is nicely encapsulated into a 
            class with no coupling to the UI, so it can be easily reused and 
            unit tested.</P>
            <P>The way things are now, the window is setting itself as its 
            DataContext and exposing the behavior of the windows through 
            bindings via that DataContext. As a preview of what's coming next, 
            we'll move that behavior out to a separate class (which I'm calling 
            a ViewModel) and set the DataContext of the window to the view model 
            instead of itself. We'll be left with no code behind (except 
            InitializeComponent) and clean separation between the style and the 
            behavior.</P></DIV>
            <DIV class=BlogPostFooter>Published Friday, September 15, 2006 8:56 
            AM by <A 
            id=ctl00___ctl00___ctl00_ctl00_bcr_ctl00___Entry___AuthorLink 
            href="http://blogs.msdn.com/user/Profile.aspx?UserID=3401">dancre</A> 

            <DIV><SPAN 
            id=ctl00___ctl00___ctl00_ctl00_bcr_ctl00___Entry___InlineTagEditorPanel>Filed 
            under: <A 
            href="http://blogs.msdn.com/dancre/archive/tags/DM-V-VM/default.aspx" 
            rel=tag>DM-V-VM</A></SPAN><INPUT 
            id=ctl00___ctl00___ctl00_ctl00_bcr_ctl00___Entry___InlineTagEditorPanel_State 
            type=hidden value=nochange 
            name=ctl00$_$ctl00$_$ctl00$ctl00$bcr$ctl00$_$Entry$_$InlineTagEditorPanel></DIV></DIV></DIV>
            <DIV id=comments>
            <H3>Comments </H3>
            <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
              <TBODY>
              <TR vAlign=top>
                <TD class="Comment CommentAvatar"><IMG 
                  src="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/anonymous.gif" 
                  border=1>&nbsp; </TD>
                <TD class="Comment  CommentContent" width="100%">
                  <H4 class=CommentTitle><A 
                  id=ctl00___ctl00___ctl00_ctl00_bcr_ctl00___Comments___Comments_ctl01_NameLink 
                  title=TrackBack 
                  href="http://blogs.sqlxml.org/bryantlikes/archive/2006/09/27/WPF-Patterns.aspx" 
                  rel=nofollow>Bryant Likes's Blog</A> said:</H4>
                  <DIV class=CommentText>If you're doing WPF development, you 
                  really need to check out Dan Crevier 's series on 
                  DataModel-View-ViewModel.</DIV>
                  <DIV class=CommentFooter>September 27, 2006 4:31 PM 
              </DIV></TD></TR>
              <TR vAlign=top>
                <TD class="Comment CommentAvatar"><IMG 
                  src="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/anonymous.gif" 
                  border=1>&nbsp; </TD>
                <TD class="Comment  CommentContent" width="100%">
                  <H4 class=CommentTitle><A 
                  id=ctl00___ctl00___ctl00_ctl00_bcr_ctl00___Comments___Comments_ctl02_NameLink 
                  title=TrackBack 
                  href="http://blogs.msdn.com/dancre/archive/2006/10/11/datamodel-view-viewmodel-pattern-series.aspx" 
                  rel=nofollow>Dan Crevier's Blog</A> said:</H4>
                  <DIV class=CommentText>
                  <P>I thought I should add a post with the full list of posts 
                  in the D-V-VM pattern. They are: 
                  DataModel-View-ViewModel</P></DIV>
                  <DIV class=CommentFooter>October 11, 2006 10:00 PM 
</DIV></TD></TR>
              <TR vAlign=top>
                <TD class="Comment CommentAvatar"><IMG 
                  src="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/anonymous.gif" 
                  border=1>&nbsp; </TD>
                <TD class="Comment  CommentContent" width="100%">
                  <H4 class=CommentTitle><A 
                  id=ctl00___ctl00___ctl00_ctl00_bcr_ctl00___Comments___Comments_ctl03_NameLink 
                  title=makutaku>makutaku</A> said:</H4>
                  <DIV class=CommentText>
                  <P>Unfortunately this technique doesn't allow me to set 
                  multiple bindings in XAML because I can't do something such 
                  as:</P>
                  <P>&lt;Grid </P>
                  <P>&nbsp;local:CreateCommandBinding.Command="{Binding 
                  MyCommand1}"</P>
                  <P>&nbsp;local:CreateCommandBinding.Command="{Binding 
                  MyCommand2}"</P>
                  <P>&gt;</P>
                  <P>Any idea how could set multiple bindings for the command 
                  models in XAML?</P></DIV>
                  <DIV class=CommentFooter>October 24, 2006 6:28 PM </DIV></TD></TR>
              <TR vAlign=top>
                <TD class="CommentOwner CommentAvatar"><IMG 
                  src="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/anonymous.gif" 
                  border=1>&nbsp; </TD>
                <TD class="CommentOwner  CommentContent" width="100%">
                  <H4 class=CommentTitle><A 
                  id=ctl00___ctl00___ctl00_ctl00_bcr_ctl00___Comments___Comments_ctl04_NameLink 
                  title=dancre href="http://blogs.msdn.com/dancre">dancre</A> 
                  said:</H4>
                  <DIV class=CommentText>
                  <P>You'll need to modify 
                  CreateCommandBinding.OnCommandInvalidated to not clear the 
                  binding. To really do it right, you'll need to remove the old 
                  command binding when the command changes.</P></DIV>
                  <DIV class=CommentFooter>October 24, 2006 11:07 PM 
</DIV></TD></TR>
              <TR vAlign=top>
                <TD class="Comment CommentAvatar"><IMG 
                  src="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/anonymous.gif" 
                  border=1>&nbsp; </TD>
                <TD class="Comment  CommentContent" width="100%">
                  <H4 class=CommentTitle><A 
                  id=ctl00___ctl00___ctl00_ctl00_bcr_ctl00___Comments___Comments_ctl05_NameLink 
                  title=makutaku>makutaku</A> said:</H4>
                  <DIV class=CommentText>
                  <P>If I remove the old command binding when the command 
                  changes then, using my example above, MyCommand2 binding will 
                  remove MyCommand1 binding. &nbsp;</P>
                  <P>If I want to have multiple simultaneous bindings then I 
                  guess I just have to not clear the binding. I'll try 
                  that.</P></DIV>
                  <DIV class=CommentFooter>October 27, 2006 12:47 PM 
</DIV></TD></TR>
              <TR vAlign=top>
                <TD class="Comment CommentAvatar"><IMG 
                  src="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/anonymous.gif" 
                  border=1>&nbsp; </TD>
                <TD class="Comment  CommentContent" width="100%">
                  <H4 class=CommentTitle><A 
                  id=ctl00___ctl00___ctl00_ctl00_bcr_ctl00___Comments___Comments_ctl06_NameLink 
                  title=makutaku>makutaku</A> said:</H4>
                  <DIV class=CommentText>
                  <P>Unfortunately I can't have two simultaneous bindings using 
                  XAML:</P>
                  <P>&lt;Grid</P>
                  <P>local:CreateCommandBinding.Command="{Binding 
                  MyCommand1}"</P>
                  <P>local:CreateCommandBinding.Command="{Binding 
                  MyCommand2}"</P>
                  <P>&gt;</P>
                  <P>because I got an error saying:</P>
                  <P>Error 54 ''p:CommandBindingCreator.Command' is a duplicate 
                  attribute name. Line 17, position 3.' XML is not valid.</P>
                  <P>The only way I found to do that was to create another 
                  attached property called Commands which takes a collection of 
                  CommandModels.</P></DIV>
                  <DIV class=CommentFooter>October 27, 2006 1:17 PM </DIV></TD></TR>
              <TR vAlign=top>
                <TD class="CommentOwner CommentAvatar"><IMG 
                  src="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/anonymous.gif" 
                  border=1>&nbsp; </TD>
                <TD class="CommentOwner  CommentContent" width="100%">
                  <H4 class=CommentTitle><A 
                  id=ctl00___ctl00___ctl00_ctl00_bcr_ctl00___Comments___Comments_ctl07_NameLink 
                  title=dancre href="http://blogs.msdn.com/dancre">dancre</A> 
                  said:</H4>
                  <DIV class=CommentText>
                  <P>Sorry, I wasn't clear on the clearing. I meant you should 
                  remove e.OldValue from the binding in the property changed 
                  handler.</P>
                  <P>To handle multiple bindings, you could also allow 
                  CreateCommandBinding take a IEnumerable&lt;CommandModel&gt; 
                  and expose a list from the model.</P></DIV>
                  <DIV class=CommentFooter>October 30, 2006 11:02 PM 
              </DIV></TD></TR></TBODY></TABLE></DIV><EM>New Comments to this post 
            are disabled</EM> </DIV></DIV></DIV></TD></TR></TBODY></TABLE></TD>
    <TD id=CommonRightColumn style="FONT-SIZE: 100%">
      <DIV class=CommonSidebar>
      <DIV id=BlogLinksSideBar>
      <DIV class=CommonSidebarArea>
      <H4 class=CommonSidebarHeader>This Blog</H4>
      <DIV class=CommonSidebarContent>
      <UL class=CommonSidebarList>
        <LI><A id=ctl00___ctl00___ctl00_ctl00_rcr_bsb___wl___home 
        href="http://blogs.msdn.com/dancre/default.aspx">Home</A> 
        <LI><A id=ctl00___ctl00___ctl00_ctl00_rcr_bsb___wl___Contactlink1 
        href="http://blogs.msdn.com/dancre/contact.aspx">Email</A> 
        <LI><A id=ctl00___ctl00___ctl00_ctl00_rcr_bsb___wl___LinkListLink1 
        href="http://blogs.msdn.com/dancre/linklist.aspx">Links</A> 
      </LI></UL></DIV></DIV></DIV>
      <DIV id=TasksSideBar></DIV>
      <DIV id=SubscriptionsSideBar>
      <DIV class=CommonSidebarArea>
      <H4 class=CommonSidebarHeader>Syndication</H4>
      <DIV class=CommonSidebarContent>
      <UL class=CommonSidebarList>
        <LI><A id=ctl00___ctl00___ctl00_ctl00_rcr_bsb___bs___rss 
        href="http://blogs.msdn.com/dancre/rss.xml">RSS 2.0</A> 
        <LI><A id=ctl00___ctl00___ctl00_ctl00_rcr_bsb___bs___atom 
        href="http://blogs.msdn.com/dancre/atom.xml">Atom 1.0</A> 
      </LI></UL></DIV></DIV></DIV>
      <DIV id=RecentPostsSideBar>
      <DIV class=CommonSidebarArea>
      <H4 class=CommonSidebarHeader>Recent Posts</H4>
      <DIV class=CommonSidebarContent>
      <UL class=CommonSidebarList>
        <LI><A id=ctl00___ctl00___ctl00_ctl00_rcr_bsb___rp___PostList_ctl00_Link 
        href="http://blogs.msdn.com/dancre/archive/2007/10/11/more-skydrive-goodness.aspx">More 
        SkyDrive goodness</A> 
        <LI><A id=ctl00___ctl00___ctl00_ctl00_rcr_bsb___rp___PostList_ctl01_Link 
        href="http://blogs.msdn.com/dancre/archive/2007/08/22/frustrating-error-using-remote-desktop.aspx">Frustrating 
        error using Remote Desktop</A> 
        <LI><A id=ctl00___ctl00___ctl00_ctl00_rcr_bsb___rp___PostList_ctl02_Link 
        href="http://blogs.msdn.com/dancre/archive/2007/08/21/tafiti.aspx">Tafiti</A> 

        <LI><A id=ctl00___ctl00___ctl00_ctl00_rcr_bsb___rp___PostList_ctl03_Link 
        href="http://blogs.msdn.com/dancre/archive/2007/08/09/windows-live-skydrive-spaces-integration.aspx">Windows 
        Live SkyDrive/Spaces integration</A> 
        <LI><A id=ctl00___ctl00___ctl00_ctl00_rcr_bsb___rp___PostList_ctl04_Link 
        href="http://blogs.msdn.com/dancre/archive/2007/08/09/windows-live-folders-is-now-windows-live-skydrive.aspx">Windows 
        Live Folders is now Windows Live SkyDrive!</A> 
</LI></UL></DIV></DIV></DIV>
      <DIV id=TagSideBar>
      <DIV class=CommonSidebarArea>
      <H4 class=CommonSidebarHeader>Tags</H4>
      <DIV class=CommonSidebarContent>
      <UL class=CommonSidebarTagCloud>
        <LI class=CommonTag3><A 
        href="http://blogs.msdn.com/dancre/archive/tags/ASP.NET/default.aspx" 
        rel=tag>ASP.NET</A> 
        <LI class=CommonTag6><A 
        href="http://blogs.msdn.com/dancre/archive/tags/Debugging/default.aspx" 
        rel=tag>Debugging</A> 
        <LI class=CommonTag1><A 
        href="http://blogs.msdn.com/dancre/archive/tags/DM-V-VM/default.aspx" 
        rel=tag>DM-V-VM</A> 
        <LI class=CommonTag1><A 
        href="http://blogs.msdn.com/dancre/archive/tags/Max/default.aspx" 
        rel=tag>Max</A> 
        <LI class=CommonTag6><A 
        href="http://blogs.msdn.com/dancre/archive/tags/PageModel/default.aspx" 
        rel=tag>PageModel</A> 
        <LI class=CommonTag4><A 
        href="http://blogs.msdn.com/dancre/archive/tags/PanelLayoutAnimator/default.aspx" 
        rel=tag>PanelLayoutAnimator</A> 
        <LI class=CommonTag2><A 
        href="http://blogs.msdn.com/dancre/archive/tags/pdc2005/default.aspx" 
        rel=tag>pdc2005</A> 
        <LI class=CommonTag4><A 
        href="http://blogs.msdn.com/dancre/archive/tags/Tips+_2600_amp_3B00_+Tricks/default.aspx" 
        rel=tag>Tips &amp; Tricks</A> 
        <LI class=CommonTag2><A 
        href="http://blogs.msdn.com/dancre/archive/tags/Utilities/default.aspx" 
        rel=tag>Utilities</A> 
        <LI class=CommonTag3><A 
        href="http://blogs.msdn.com/dancre/archive/tags/VirtualizingTilePanel/default.aspx" 
        rel=tag>VirtualizingTilePanel</A> 
        <LI class=CommonTag6><A 
        href="http://blogs.msdn.com/dancre/archive/tags/Vista/default.aspx" 
        rel=tag>Vista</A> 
        <LI class=CommonTag6><A 
        href="http://blogs.msdn.com/dancre/archive/tags/Web+Perf/default.aspx" 
        rel=tag>Web Perf</A> </LI></UL></DIV></DIV></DIV>
      <DIV id=NewsSideBar>
      <DIV class=CommonSidebarArea>
      <H4 class=CommonSidebarHeader>News</H4>
      <DIV class=CommonSidebarContent>The posts on this weblog are provided "AS 
      IS" with no warranties, and confer no rights. The opinions expressed 
      herein are my own personal opinions and do not represent my employer's 
      view in any way. </DIV></DIV></DIV>
      <DIV id=ArchiveSideBar>
      <DIV class=CommonSidebarArea>
      <H4 class=CommonSidebarHeader>Archives</H4>
      <DIV class=CommonSidebarContent>
      <UL class=CommonSidebarList>
        <LI><A href="http://blogs.msdn.com/dancre/archive/2007/10.aspx">October 
        2007 (1)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2007/08.aspx">August 
        2007 (4)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2007/07.aspx">July 
        2007 (4)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2007/06.aspx">June 
        2007 (1)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2007/03.aspx">March 
        2007 (1)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2007/02.aspx">February 
        2007 (1)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2007/01.aspx">January 
        2007 (1)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2006/12.aspx">December 
        2006 (6)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2006/11.aspx">November 
        2006 (2)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2006/10.aspx">October 
        2006 (3)</A> 
        <LI><A 
        href="http://blogs.msdn.com/dancre/archive/2006/09.aspx">September 2006 
        (8)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2006/08.aspx">August 
        2006 (7)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2006/07.aspx">July 
        2006 (6)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2006/03.aspx">March 
        2006 (6)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2006/02.aspx">February 
        2006 (11)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2006/01.aspx">January 
        2006 (1)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2005/12.aspx">December 
        2005 (2)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2005/11.aspx">November 
        2005 (1)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2005/10.aspx">October 
        2005 (3)</A> 
        <LI><A 
        href="http://blogs.msdn.com/dancre/archive/2005/09.aspx">September 2005 
        (7)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2005/06.aspx">June 
        2005 (6)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2005/05.aspx">May 2005 
        (11)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2005/04.aspx">April 
        2005 (3)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2005/02.aspx">February 
        2005 (3)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2005/01.aspx">January 
        2005 (3)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2004/12.aspx">December 
        2004 (15)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2004/11.aspx">November 
        2004 (4)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2004/10.aspx">October 
        2004 (10)</A> 
        <LI><A 
        href="http://blogs.msdn.com/dancre/archive/2004/09.aspx">September 2004 
        (8)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2004/08.aspx">August 
        2004 (8)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2004/07.aspx">July 
        2004 (5)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2004/06.aspx">June 
        2004 (5)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2004/05.aspx">May 2004 
        (13)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2004/04.aspx">April 
        2004 (15)</A> 
        <LI><A href="http://blogs.msdn.com/dancre/archive/2004/03.aspx">March 
        2004 (18)</A> </LI></UL></DIV></DIV></DIV></DIV></TD></TR></TBODY></TABLE><!--NOINDEX_START-->
<DIV id=CommonFooter><BR style="OVERFLOW: hidden; LINE-HEIGHT: 1px" clear=all>
<TABLE id=msviFooter cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR vAlign=bottom>
    <TD id=msviFooter2>
      <DIV id=msviLocalFooter><NOBR><A 
      href="http://go.microsoft.com/?linkid=317027">Manage Your Profile</A> 
      |</NOBR><WBR><NOBR><A 
      href="http://msdn.microsoft.com/isapi/gomscom.asp?target=/legal/" 
      target=_parent>Legal</A> |</NOBR><WBR><NOBR><A 
      href="http://register.microsoft.com/contactus30/contactus.asp?domain=msdn" 
      target=_parent>Contact Us</A> |</NOBR><WBR><NOBR><A 
      href="http://msdn.microsoft.com/flash/" target=_parent>MSDN Flash 
      Newsletter</A></NOBR></DIV>
      <DIV id=msviGlobalFooter><SPAN>©2005 Microsoft Corporation. All rights 
      reserved.&nbsp;</SPAN><NOBR><A 
      href="http://www.microsoft.com/info/cpyright.mspx">Terms of Use</A> 
      |</NOBR><WBR><NOBR><A 
      href="http://msdn.microsoft.com/library/toolbar/3.0/trademarks/en-us.mspx">Trademarks</A> 
      |</NOBR><WBR><NOBR><A 
      href="http://www.microsoft.com/info/privacy.mspx">Privacy 
      Statement</A></NOBR></DIV></TD>
    <TD width=105 bgColor=#669aff><IMG title="" height=29 alt=Microsoft 
      src="Dan Crevier's Blog  DM-V-VM part 7 Encapsulating commands_files/bottomMSFTLogo.jpg" 
      width=105 border=0></TD></TR></TBODY></TABLE></DIV></DIV><!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
<rdf:Description
rdf:about="http://blogs.msdn.com/dancre/archive/2006/09/15/dm-v-vm-part-7-encapsulating-commands.aspx"
dc:identifier="http://blogs.msdn.com/dancre/archive/2006/09/15/dm-v-vm-part-7-encapsulating-commands.aspx"
dc:title="DM-V-VM part 7: Encapsulating commands"
trackback:ping="http://blogs.msdn.com/dancre/trackback.aspx?PostID=756095" />
</rdf:RDF>
--></FORM></BODY></HTML>
